/*++
  This file contains an 'Intel Peripheral Driver' and is
  licensed for Intel CPUs and chipsets under the terms of your
  license agreement with Intel or your vendor.  This file may
  be modified by the user, subject to additional terms of the
  license agreement
--*/
/*++

  Copyright (c)  2015 - 2020 Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under
  a license and may only be used or copied in accordance with the terms
  of the license.  Except as permitted by such license, no part of this
  software or documentation may be reproduced, stored in a retrieval system,
  or transmitted in any form or by any means without the express written
  consent of Intel Corporation.

  Module Name:

    Mother.asi

  Abstract:

    Motherboard devices / resources.
--*/
#include <..\HarrisonvillePkg\Include\PlatformDefinitions.h> // Denverton AptioV Override - EIP#221424

Device(GPIO)
{
  Name(_HID,"INTC3000")
  Name(_CRS,ResourceTemplate() {
 
  Memory32Fixed(ReadWrite,0xFDC20000,0x1000,COM0)  //GPIOCOM0
  Memory32Fixed(ReadWrite,0xFDC50000,0x1000,COM1)  //GPIOCOM1
  Interrupt (ResourceConsumer, Level, ActiveLow, Shared) {0xE} 
  }) 
      
  Method(_STA,0,NotSerialized)
  { 
    Return (GPST)
  }
}

Device(HPET)	// High Precision Event Timer
{
  Name(_HID,EISAID("PNP0103"))
  Name(_UID, 0)

  Name(CRS0,ResourceTemplate()
  {
    Memory32Fixed(ReadOnly,0xFED00000,0x400,FED0)
  })

  Name(CRS1,ResourceTemplate()
  {
    Memory32Fixed(ReadOnly,0xFED01000,0x400,FED1)
  })

  Name(CRS2,ResourceTemplate()
  {
    Memory32Fixed(ReadOnly,0xFED02000,0x400,FED2)
  })

  Name(CRS3,ResourceTemplate()
  {
    Memory32Fixed(ReadOnly,0xFED03000,0x400,FED3)
  })

  Method(_CRS,0,Serialized)
  {
     Switch(HADR)
     {
       Case(0)
       {
          Return(CRS0)
       }
       Case(1)
       {
          Return(CRS1)
       }
       Case(2)
       {
          Return(CRS2)
       }
       Case(3)
       {
          Return(CRS3)
       }
     }
     Return(CRS0)
  }

  Method(_STA,0)
  {
    // Show this Device only if the OS is WINXP or beyond.

    If(LGreaterEqual(OSYS,2001)) {
      Return(0x000F) // Enabled, do Display.
    }
    Else { // OS = WIN98, WINME, or WIN2000.
      Return(0x000B) // Enabled, don't Display.
    }
    Return(0x0000)			// Return Nothing.
  }
}

Device(IPIC)	// 8259 PIC
{
  Name(_HID,EISAID("PNP0000"))

  Name(_CRS,ResourceTemplate()
  {
    IO(Decode16,0x20,0x20,0x01,0x02)
    IO(Decode16,0x24,0x24,0x01,0x02)
    IO(Decode16,0x28,0x28,0x01,0x02)
    IO(Decode16,0x2C,0x2C,0x01,0x02)
    IO(Decode16,0x30,0x30,0x01,0x02)
    IO(Decode16,0x34,0x34,0x01,0x02)
    IO(Decode16,0x38,0x38,0x01,0x02)
    IO(Decode16,0x3C,0x3C,0x01,0x02)
    IO(Decode16,0xA0,0xA0,0x01,0x02)
    IO(Decode16,0xA4,0xA4,0x01,0x02)
    IO(Decode16,0xA8,0xA8,0x01,0x02)
    IO(Decode16,0xAC,0xAC,0x01,0x02)
    IO(Decode16,0xB0,0xB0,0x01,0x02)
    IO(Decode16,0xB4,0xB4,0x01,0x02)
    IO(Decode16,0xB8,0xB8,0x01,0x02)
    IO(Decode16,0xBC,0xBC,0x01,0x02)
    IO(Decode16,0x4D0,0x4D0,0x01,0x02)
    IRQNoFlags() {2}
  })
}

//
// Motherboard resources
//
Device(MCH)
{
  Name(_HID, EISAID("PNP0C01"))   // Hardware Device ID
  Name(_UID, 10)			        // Unique ID

  Name(MCHR, ResourceTemplate()
  {
    // geoSPI memory range
    //
   // Memory32Fixed(ReadWrite, FixedPcdGet64(PcdGeoSpiChipAddress), FixedPcdGet64(PcdGeoSpiChipSize))
   
      Memory32Fixed(ReadWrite, 0x1F0000, 0x10000)
   
    // PCIEXBAR memory range
    // Denverton Aptiov override start
    // Memory32Fixed(ReadOnly, FixedPcdGet64(PcdPciExpressBaseAddress), PCIEX_LENGTH)
    Memory32Fixed(ReadOnly, 0xE0000000, PCIEX_LENGTH)
    // Denverton Aptiov override end
    // TSEG
    //
    Memory32Fixed(ReadOnly, 0x00000000, 0x00000000, TSEG)

    // TRACE_HUB_USB_DCI
    //
    Memory32Fixed(ReadOnly, 0xFED60000, 0x1000)
  })

  Method (_CRS, 0, Serialized)
  {
    // Fix up 32-bit TSEG
    //
    CreateDWordField(MCHR, ^TSEG._BAS, TSMN)
    Store(TSGB, TSMN)
    CreateDWordField(MCHR, ^TSEG._LEN, TSLN)
    Store(TSSZ, TSLN)
    return(MCHR)
  } // End _CRS
}

Device(LDRC)  // LPC Device Resource Consumption
{
  Name(_HID,EISAID("PNP0C02"))

  Name(_UID, 0x31)

  Name(LPCR,ResourceTemplate()
  {
    IO(Decode16,0x2E,0x2E,0x1,0x02)		// WPCN381U SIO Config Index + Data.
    IO(Decode16,0x4E,0x4E,0x1,0x02)		// LPC Slot Access.
    IO(Decode16,0x61,0x61,0x1,0x1)		// NMI Status.
    IO(Decode16,0x63,0x63,0x1,0x1)		// Processor I/F.
    IO(Decode16,0x65,0x65,0x1,0x1)		// Processor I/F.
    IO(Decode16,0x67,0x67,0x1,0x1)		// Processor I/F.
    IO(Decode16,0x70,0x70,0x1,0x1)		// NMI Enable.
    IO(Decode16,0x80,0x80,0x1,0x1)		// Port 80h.
    IO(Decode16,0x92,0x92,0x1,0x1)		// Processor I/F.
    IO(Decode16,0xB2,0xB2,0x01,0x02)	// Software SMI.
    IO(Decode16,0x680,0x680,0x1,0x20)	// 32 Byte I/O.    
    // IO(Decode16,0x500,0x500,0x1,0xFF)	// GPIO Base.  // Denverton AptioV Override - EIP#397173
    // BIOS ROM shadow memory range
    Memory32Fixed(ReadOnly, 0x000E0000, 0x20000)

    // BIOS flash
    Memory32Fixed(ReadOnly,0xFF800000,0x800000)
  })

  Method (_CRS, 0, Serialized)
  {
    return(LPCR)
  }// End _CRS
}

Device(RTC) // RTC
{
  Name(_HID,EISAID("PNP0B00"))

  Name(_CRS,ResourceTemplate()
  {
    IO(Decode16,0x70,0x70,0x01,0x08)
    IRQNoFlags() {8}
  })
}

Device(TIMR)    // 8254 Timer
{
  Name(_HID,EISAID("PNP0100"))

  Name(_CRS,ResourceTemplate()
  {
    IO(Decode16,0x40,0x40,0x01,0x04)
    IO(Decode16,0x50,0x50,0x10,0x04)
    IRQNoFlags() {0}
  })
}


Device(CPLD)  //CPLD
{
  Name(_HID,EISAID("CPLD000"))

  Method(_STA,0,Serialized)
  {
    Return(0x00)        //G160-004(5)       Return(CPLS)
  }

  Name(_CRS,ResourceTemplate()
  {
    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive) {0x33}
  })
}


// Denverton AptioV override Start - EIP#434299
// To prevent reporting of Legacy UARTs to OS, when HSUART_MODE = PCIE
#if defined(HSUART_MODE) && (HSUART_MODE ==1)

Device(IUR3) // Internal UART 1
{
  Name(_HID, EISAID("PNP0501"))

  Name(_UID,1)

  // Status Method for internal UART 1.

  Method(_STA,0,Serialized)
  {
    Return(HUS1)
  }

  // Current Resource Setting Method for internal UART 1.

   Method(_CRS,0,Serialized)
  {
    // Create the Buffer that stores the Resources to
    // be returned.
    Name(BUF0,ResourceTemplate()
        {
        //COM1
        IO(Decode16,0x03F8,0x03F8,0x01,0x08)      
        Interrupt (ResourceConsumer, Level, ActiveLow, Shared) {16}
        }) 

    Name(BUF1,ResourceTemplate()
        {
        //COM1
        IO(Decode16,0x03F8,0x03F8,0x01,0x08)      
        IRQ(Level,ActiveLow,Shared) {11}
        })      
        
    If(\_OSI("Linux")){
       Return(BUF0)
    }
    Else {
        Return(BUF1)
    }   
  }
}

Device(IUR4) // Internal UART 2
{
  Name(_HID, EISAID("PNP0501"))
  Name(_UID,2)
  // Status Method for internal UART 2.
  Method(_STA,0,Serialized)
  {
    Return(HUS2)
  }
  // Current Resource Setting Method for internal UART 2.
  Method(_CRS,0,Serialized)
  {
    // Create the Buffer that stores the Resources to
    // be returned.
    Name(BUF0,ResourceTemplate()
    {
      //COM2
      IO(Decode16,0x02F8,0x02F8,0x01,0x08)
      Interrupt (ResourceConsumer, Level, ActiveLow, Shared) {17}
    })
  
  Name(BUF1,ResourceTemplate()
    {
      //COM2
      IO(Decode16,0x02F8,0x02F8,0x01,0x08)
      IRQ(Level,ActiveLow,Shared) {10}   // Denverton AptioV Override - EIP#396561
    })
  
    If(\_OSI("Linux")){
       Return(BUF0)
    }
    Else {
        Return(BUF1)
    }   
  }
}

Device(IUR5) // Internal UART 3
{
  Name(_HID, EISAID("PNP0501"))
  Name(_UID,3)
  // Status Method for internal UART 3.
  Method(_STA,0,Serialized)
  {
    Return(HUS3)
  }
  // Current Resource Setting Method for internal UART 3.
  Method(_CRS,0,Serialized)
  {
    // Create the Buffer that stores the Resources to
    // be returned.
    Name(BUF0,ResourceTemplate()
    {
      //COM3
      IO(Decode16,0x03E8,0x03E8,0x01,0x08)
      Interrupt (ResourceConsumer, Level, ActiveLow, Shared) {18}
    })
  
  Name(BUF1,ResourceTemplate()
    {
      //COM3
      IO(Decode16,0x03E8,0x03E8,0x01,0x08)
      IRQ(Level,ActiveLow,Shared) {6}   // Denverton AptioV Override - EIP#396561
    })
  
    If(\_OSI("Linux")){
       Return(BUF0)
    }
    Else {
        Return(BUF1)
    }
  }
}
#endif
// Denverton AptioV override End - EIP#434299
// Removing the ASL device of ME UART. Having this will show yellow bang in windows.
/*
Device(IUR6) // Internal UART 4
{
  Name(_HID, EISAID("PNP0501"))
  Name(_UID,4)
  // Status Method for internal UART 4.
  Method(_STA,0,Serialized)
  {
    Return(HUS4)
  }
  // Current Resource Setting Method for internal UART 4.
  Method(_CRS,0,Serialized)
  {
    // Create the Buffer that stores the Resources to
    // be returned.
    Name(BUF0,ResourceTemplate()
    {
      //COM4
      IO(Decode16,0x02E8,0x02E8,0x01,0x08)
      Interrupt (ResourceConsumer, Level, ActiveLow, Shared) {19}
    })
  
  Name(BUF1,ResourceTemplate()
    {
      //COM4
      IO(Decode16,0x02E8,0x02E8,0x01,0x08)
      IRQ(Level,ActiveHigh,Shared) {7}
    })
    
  If(\_OSI("Linux")){
       Return(BUF0)
    }
    Else {
        Return(BUF1)
    }
  }
}
*/
// Denverton AptioV override End - EIP#288063

// JTAG device 0
//
Device (ASD0)
{
  Name (_HID, EISAID ("ASD0001"))
  Name (_UID, 0)

  Method (_STA, 0, NotSerialized)
  {
    // Only if A21
    //
    If (LEqual (BDID, BIRD_KEY_BOARD_ID))
    {
        Return (0x0F)
    }

    Else
    {
        Return (0x00)
    }
  }
}

// JTAG device 1
//
Device (ASD1)
{
  Name (_HID, EISAID ("ASD0001"))
  Name (_UID, 1)

  Method (_STA, 0, NotSerialized)
  {
    // Only if A21
    //
    If (LEqual (BDID, BIRD_KEY_BOARD_ID))
    {
        Return (0x0F)
    }

    Else
    {
        Return (0x00)
    }
  }
}

// JTAG device 2
//
Device (ASD2)
{
  Name (_HID, EISAID ("ASD0001"))
  Name (_UID, 2)

  Method (_STA, 0, NotSerialized)
  {
    // Only if A21
    //
    If (LEqual (BDID, BIRD_KEY_BOARD_ID))
    {
        Return (0x0F)
    }

    Else
    {
        Return (0x00)
    }
  }
}

// ESPI device
//
Device (ESPI)
{
  Name (_HID, EISAID ("ASD1001"))
  Name (_UID, 0)

  Method (_STA, 0, NotSerialized)
  {
    // Only if A21
    //
    If (LEqual (BDID, BIRD_KEY_BOARD_ID))
    {
        Return (0x0F)
    }

    Else
    {
        Return (0x00)
    }
  }
}

// GPIO device
//
Device (GPDV)
{
  Name (_HID, EISAID ("ASD2001"))
  Name (_UID, 0)

  Method (_STA, 0, NotSerialized)
  {
    // Only if A21
    //
    If (LEqual (BDID, BIRD_KEY_BOARD_ID))
    {
        Return (0x0F)
    }

    Else
    {
        Return (0x00)
    }
  }
}
