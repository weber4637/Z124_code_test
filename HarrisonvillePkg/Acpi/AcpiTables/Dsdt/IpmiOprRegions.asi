/*++

Copyright (c) 1996 - 2012, Intel Corporation.

This source code and any documentation accompanying it ("Material") is furnished
under license and may only be used or copied in accordance with the terms of that
license.  No license, express or implied, by estoppel or otherwise, to any
intellectual property rights is granted to you by disclosure or delivery of these
Materials.  The Materials are subject to change without notice and should not be
construed as a commitment by Intel Corporation to market, license, sell or support
any product or technology.  Unless otherwise provided for in the license under which
this Material is provided, the Material is provided AS IS, with no warranties of
any kind, express or implied, including without limitation the implied warranties
of fitness, merchantability, or non-infringement.  Except as expressly permitted by
the license for the Material, neither Intel Corporation nor its suppliers assumes
any responsibility for any errors or inaccuracies that may appear herein.  Except
as expressly permitted by the license for the Material, no part of the Material
may be reproduced, stored in a retrieval system, transmitted in any form, or
distributed by any means without the express written consent of Intel Corporation.


Module Name:

  IpmiOprRegions.asi

Abstract:

  This ASL file contains data definitions and methods to send commands
  and return data from the BMC

  The "IPMC" device is defined in this file.

--*/

External(IPEN)

Device(IPMC)
{

    // Config DWord, modified during POST
    // Bit definitions are the same as PPMFlags:
    // [00]    = Plug and Play BMC Detection enabled in setup
    // [31:01] = Reserved    = 0
  
    Name(ECFL, 0x80000000)
  
    //
    // output:  0 for report it (LongHorn/Vista/Win2k3+SP1 with setup enable)
    //          1 Don't report it

    Name(OSNV, Ones)  // Global Name, returns current OS version ID

    Method(OSNF, 0) 
    {
        // OS version was already detected
        if(LNotEqual(OSNV, Ones)) 
        {
          Return(OSNV)
        }

        // default - Don't support IPMI OS
        Store(1, OSNV)
 
        // Detect currently running OS
        if(CondRefOf(\_OSI,Local1)) 
        {
          if (\_OSI("Windows 2008"))
          {  
             // Longhorn
             Store( 0, OSNV)
          }
          if (\_OSI("Windows 2007"))
          { 
            // Longhorn
            Store( 0, OSNV)
          }
          if (\_OSI("Windows 2006")) 
          { 
            // LongHorn and Vista
            Store( 0, OSNV)
          }
          // Win2k3+SP1 or winxp
          if (\_OSI("Windows 2001.1 SP1")) 
          {
            if (And(ECFL, 0x01)) 
            {
              // Report IPMI
              Store(0, OSNV) 
            }
          }
        } else {
          Store(1, OSNV)
        }

        Return(OSNV)
    }	// end of OSNF


    // Return the interface specification revision
    Method(_SRV)
    {
        // IPMI Specification Revision v2.0
        Return(0x0200)                  
    }

    Method(_STA, 0) 
    { 
        //
        // Check if IPMI is supported
        //
        If (LEqual(IPEN, 0)) {
          Return(0)
        }

        Store (0, Local0)
        //
        // Windows 2003 or Longhorn
        //
        if(LEqual(OSNF,0)) 
        {
          // Device is present/enabled to decode its resources/UI/functioning
          Store (0xF, Local0)
        }

        Return(Local0)	
        // Bit 0 - Set if the device is present.
        // Bit 1 - Set if the device is enabled and decoding its resources.
        // Bit 2 - Set if the device should be shown in the UI.
        // Bit 3 - Set if the device is functioning properly (cleared if the device failed its diagnostics).
        // Bit 4 - Set if the battery is present.
        // Bit 5 - Reserved (must be cleared).
    }   // end of _STA

    // Return the x86 resources consumed by BMC
    Name(_CRS, ResourceTemplate()
    {
        // SMS Uses 8-bit ports 0xCA8, 0xCAC
        IO(Decode16, 0xCA8, 0xCA8, 0, 1)
        IO(Decode16, 0xCAC, 0xCAC, 0, 1)           
    })

    Name(_HID, "IPI0001")		        // IPMI device
    Name(_IFT, 0x1)                 // KCS system interface type
    Name(_STR, Unicode("IPMI_KCS"))

    Name(_UID, 0)  // First interface.

    // KCS SMM area
    OperationRegion(IPMS, SystemIO, 0xCA0, 0x08)

    // These are the App NetFn commands that ASL will use
    // App Network Function (0x06), 256 possible commands
    OperationRegion(APPN, SystemIO, 0x0600, 0x100)
    Field(APPN, BufferAcc, NoLock, Preserve)
    {
        Offset(0x06),       // Skip to 0x06
        SPWS, 8,            // 0x06 - Set ACPI Power State
        GPWS, 8             // 0x07 - Get ACPI Power State
    }

    // Method to Set ACPI Power State
    Method(SPWM, 2, Serialized)
    {
        // Create the command/response data buffer
        Name(BUFF, Buffer (66) {})

        // Header
        CreateByteField(BUFF, 0, STAT)      // Status (Byte)
        CreateByteField(BUFF, 1, LENG)      // Length (Byte)

        // Payload
        CreateByteField(BUFF, 2, SPST)      // System power status (Byte)
        CreateByteField(BUFF, 3, DPST)      // Device power status (Byte)

        // Set command parameters
        Store(2, LENG)                      // Request message is 2 bytes long
        Store(Arg0, SPST)                   // System power state
        Store(Arg1, DPST)                   // Device power state

        // Write the request (inner Store), read response (outer Store)
        Store(Store(BUFF, SPWS), BUFF)

        // Redefine buffer bytes for response data
        CreateByteField(BUFF, 2, CMPC)          // Completion code (Byte)

        // If completion code and status are both 0
        If( LAnd ( LEqual(STAT, 0), LEqual(CMPC, 0) ) )
        {
            Return(0)
        }

        // Else return the completion code
        Else
        {
            Return(CMPC)        
        }
    }

    // Method to Get ACPI Power State
    Method(GPWM, 0, Serialized)
    {
        // Create the command/response data buffer
        Name(BUFF, Buffer (66) {})

        // Create the buffer to hold return data
        Name(OBUF, Buffer (3) {})

        // Header
        CreateByteField(BUFF, 0, STAT)      // Status (Byte)
        CreateByteField(BUFF, 1, LENG)      // Length (Byte)

        // Set command parameters
        Store(0, LENG)                      // No command parameters

        // Write the request (inner Store), read response (outer Store)
        Store(Store(BUFF, GPWS), BUFF)

        // Define buffer bytes for response data
        CreateByteField(BUFF, 2, CMPC)      // Completion code (Byte)
        CreateByteField(BUFF, 3, SPST)      // System power status (Byte)
        CreateByteField(BUFF, 4, DPST)      // Device power status (Byte)

        // Define output buffer bytes
        CreateByteField(OBUF, 0, COMP)      // Completion code (Byte)
        CreateByteField(OBUF, 1, SYSP)      // System power state (Byte)
        CreateByteField(OBUF, 2, DEVP)      // Device power state (Byte)

        // Copy from command/response buffer to output buffer
        Store(CMPC, COMP)
        Store(SPST, SYSP)
        Store(DEVP, DPST)

        // If status is not 0
        If( LNotEqual(STAT, 0) )
        {
            // Store "Command response could not be provided"
            //  as completion code
            Store(0xCE, COMP)
        }

        // Return output buffer
        Return(OBUF)

    }

} // end of  Device(IPMC)


