//
// This file contains an 'Intel Peripheral Driver' and is      
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may 
// be modified by the user, subject to additional terms of the 
// license agreement                                           
//
/*++

// Copyright (c) 2014-2020, Intel Corporation. All rights reserved.
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.

  Module Name:
  
    GlobalNvs.asi 
  
  Abstract:
  
    Global NVS table
  
--*/

//
// OS TYPE DEFINITION
//
#define WINDOWS_XP          0x01
#define WINDOWS_XP_SP1      0x02
#define WINDOWS_XP_SP2      0x04
#define WINDOWS_2003        0x08
#define WINDOWS_Vista       0x10
#define WINDOWS_WIN7        0x11
#define WINDOWS_WIN8        0x12
#define LINUX               0xF0


    //
    // Global NVS Memory Block
    //
    OperationRegion (MNVS, SystemMemory, 0xFFFF0000, 512)
    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
      OSYS,  32,    // OS type
      HPEA,  32,    // HPET Enabled
      SMIF,   8,    // SMI Function Call (ASL to SMI via SWSMI)
      LCKF,   8,    // Global Lock Function Call (EC Communication)

      ACTT,   8,    // Active Trip Point
      PSVT,   8,    // Passive Trip Point
      TC1V,   8,    // Passive Trip Point TC1 Value
      TC2V,   8,    // Passive Trip Point TC2 Value
      TSPV,   8,    // Passive Trip Point TSP Value
      CRTT,   8,    // Critical Trip Point
      DTSE,   8,    // Digital Thermal Sensor Enable
      DTS1,   8,    // Digital Thermal Sensor 1 Reading
      DTS2,   8,    // Digital Thermal Sensor 2 Reading
      DTSF,   8,    // DTS SMI Function Call

      PPMF,   32,   // PPM Flags
      APIC,   8,    // APIC Enabled by SBIOS (APIC Enabled = 1)
      MPEN,   8,    // MP Capable/SBIOS Enabled (MP Enabled != 0)

      ACST,   8,
      BTST,   8,
      PWST,   8,

      TPMP,   8,    // TPM Present
      TPME,   8,    // TPM Enabled
      RSVD,   8,    // Reserved

      MMOB,  32,    // Low MMIO Base
      MMOL,  32,    // Low MMIO Limit
      MMHB,  64,    // High MMIO Base
      MMHL,  64,    // High MMIO Limit
      TSGB,  32,    // Tseg base
      TSSZ,  32,    // Tseg size
      CSEN,   8,    // C State Enable
      C6NS,   8,    // C6 No Shrink
      C6FS,   8,    // C6 Full Shrink
      IPEN,   8,    // IPMI enable
      MMB0,  32,    // eMMC BAR0
      MML0,  32,    // eMMC BAR0 Length
      MMB1,  32,    // eMMC BAR1
      MML1,  32,    // eMMC BAR1 Length
      NCPU,   8,    // NCPU
      LGCY,   8,    // Legacy/Legacy VGA /UEFI
      U30C,   8,    // USB 3.0 Port 0 Connectivity flag
      U30T,   8,    // USB 3.0 Port 0 Connector type
      U30V,   8,    // USB 3.0 Port visivility
      U30G,   8,    // USB 3.0 Port group
      U31C,   8,    // USB 3.0 Port 1 Connectivity flag
      U31T,   8,    // USB 3.0 Port 1 Connector type
      U31V,   8,    // USB 3.0 Port visivility
      U31G,   8,    // USB 3.0 Port group
      U32C,   8,    // USB 3.0 Port 2 Connectivity flag
      U32T,   8,    // USB 3.0 Port 2 Connector type
      U32V,   8,    // USB 3.0 Port visivility
      U32G,   8,    // USB 3.0 Port group
      U33C,   8,    // USB 3.0 Port 3 Connectivity flag
      U33T,   8,    // USB 3.0 Port 3 Connector type
      U33V,   8,    // USB 3.0 Port visivility
      U33G,   8,    // USB 3.0 Port group
      U20C,   8,    // USB 2.0 Port 0 Connectivity flag
      U20T,   8,    // USB 2.0 Port 0 Connector type
      U20V,   8,    // USB 2.0 Port visivility
      U20G,   8,    // USB 2.0 Port group
      U21C,   8,    // USB 2.0 Port 1 Connectivity flag
      U21T,   8,    // USB 2.0 Port 1 Connector type
      U21V,   8,    // USB 2.0 Port visivility
      U21G,   8,    // USB 2.0 Port group
      U22C,   8,    // USB 2.0 Port 2 Connectivity flag
      U22T,   8,    // USB 2.0 Port 2 Connector type
      U22V,   8,    // USB 2.0 Port visivility
      U22G,   8,    // USB 2.0 Port group
      U23C,   8,    // USB 2.0 Port 3 Connectivity flag
      U23T,   8,    // USB 2.0 Port 3 Connector type
      U23V,   8,    // USB 2.0 Port visivility
      U23G,   8,    // USB 2.0 Port group
      HADR,   8,    // HPET Base address
      GPST,   8,    // GPIO Status Enable
      HUS1,   32,   // HSUart status 1
      HUS2,   32,   // HSUart status 2
      HUS3,   32,   // HSUart status 3
      HUS4,   32,   // HSUart status 4
      CPLS,   32,   // CPLD status
      BDID,   32,   // Board ID
    }

#include "PchNvs.asl"

    //
    //  Processor Objects
    //
    Scope(\_PR)
    {
          Processor (CPU0, 0x01, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                Return (0x0F)
              }
          }

          Processor (CPU1, 0x02, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x01))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU2, 0x03, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x02))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU3, 0x04, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x03))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU4, 0x05, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x04))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU5, 0x06, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x05))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU6, 0x07, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x06))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU7, 0x08, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x07))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU8, 0x09, 0x1810, 0x06) {
             Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x08))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPU9, 0x0A, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x09))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPUA, 0x0B, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x0A))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPUB, 0x0C, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x0B))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPUC, 0x0D, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x0C))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPUD, 0x0E, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x0D))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPUE, 0x0F, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x0E))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }

          Processor (CPUF, 0x10, 0x1810, 0x06) {
              Method (_STA, 0)
              {
                if (LGreater (NCPU, 0x0F))
                {
                  Return (0x0F)
                }
                Return (0x0)
              }
          }
    }