//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// *++
//
// Copyright (c) 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//

//-----------------------------------------------------------------------------
//          UART FORM
//-----------------------------------------------------------------------------

  form formid = VFR_FORMID_UART,

    title     = STRING_TOKEN(STR_UART_CONFIGURATION);
// Denverton Aptiov override start
// DBG2 ACPI table is installed by "Debug Port Tables" module       
/*
      //Setup Option for choosing serial Kernel Debug port
      oneof varid = PCH_SETUP.HsUartMdpt,
          prompt   = STRING_TOKEN(STR_EFI_HSUART_DEBUG_MODE),
          help     = STRING_TOKEN(STR_EFI_HSUART_DEBUG_MODE_HELP),
          option text = STRING_TOKEN(STR_ENABLED),   value = 1, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags =  RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.HsUartMdpt == 0;
          //Setup Option for choosing serial Kernel Debug port
          oneof varid = PCH_SETUP.HsUartKDPort,
              prompt   = STRING_TOKEN(STR_EFI_HSUART_KD_PORT),
              help     = STRING_TOKEN(STR_EFI_HSUART_KD_PORT_HELP),
              option text = STRING_TOKEN(STR_EFI_HSUART_0),   value = 0, flags =  RESET_REQUIRED;
              option text = STRING_TOKEN(STR_EFI_HSUART_1), value = 1, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
              option text = STRING_TOKEN(STR_EFI_HSUART_2),   value = 2, flags =  RESET_REQUIRED;
          endoneof;
      endif;
*/      
// Denverton Aptiov override End

      subtitle text =  STRING_TOKEN(STR_EFI_HSUART_0);
//G160-001(18)      oneof varid = PCH_SETUP.HsUartMode[0],
//G160-001(18)          prompt   = STRING_TOKEN(STR_EFI_HSUART_MODE),
//G160-001(18)          help     = STRING_TOKEN(STR_EFI_HSUART_MODE_HELP),
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_PCIE),   value = 0, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_LEGACY), value = 1, flags =  RESET_REQUIRED;
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_HIDE),   value = 2, flags =  RESET_REQUIRED;
//G160-001(18)      endoneof;
//G160-001(18) - start
      oneof varid = PCH_SETUP.HsUartMode[0],
          prompt   = STRING_TOKEN(STR_EFI_HSUART_MODE),
          help     = STRING_TOKEN(STR_EFI_HSUART_MODE_HELP),
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_PCIE),   value = 0, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_LEGACY), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_HIDE),   value = 2, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
//G160-001(18) - end
      suppressif NOT ideqval PCH_SETUP.HsUartMode[0] == 1;
        oneof varid = PCH_SETUP.HsUartCOM[0],
            prompt   = STRING_TOKEN(STR_EFI_HSUART_COM_VALUE),
            help     = STRING_TOKEN(STR_EFI_HSUART_COM_VALUE_HELP),
            option text = STRING_TOKEN(STR_EFI_COM1), value = 0x3f8, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM2), value = 0x2f8, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM3), value = 0x3e8, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM4), value = 0x2e8, flags =  RESET_REQUIRED;
        endoneof;
      endif;


      subtitle text =  STRING_TOKEN(STR_EFI_HSUART_1);
//G160-001(18)      oneof varid = PCH_SETUP.HsUartMode[1],
//G160-001(18)          prompt   = STRING_TOKEN(STR_EFI_HSUART_MODE),
//G160-001(18)          help     = STRING_TOKEN(STR_EFI_HSUART_MODE_HELP),
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_PCIE),   value = 0, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_LEGACY), value = 1, flags =  RESET_REQUIRED;
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_HIDE),   value = 2, flags =  RESET_REQUIRED;
//G160-001(18)      endoneof;
//G160-001(18) - start
      oneof varid = PCH_SETUP.HsUartMode[1],
          prompt   = STRING_TOKEN(STR_EFI_HSUART_MODE),
          help     = STRING_TOKEN(STR_EFI_HSUART_MODE_HELP),
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_PCIE),   value = 0, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_LEGACY), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_HIDE),   value = 2, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
//G160-001(18) - end
      suppressif NOT ideqval PCH_SETUP.HsUartMode[1] == 1;
        oneof varid = PCH_SETUP.HsUartCOM[1],
            prompt   = STRING_TOKEN(STR_EFI_HSUART_COM_VALUE),
            help     = STRING_TOKEN(STR_EFI_HSUART_COM_VALUE_HELP),
            option text = STRING_TOKEN(STR_EFI_COM1), value = 0x3f8, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM2), value = 0x2f8, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM3), value = 0x3e8, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM4), value = 0x2e8, flags =  RESET_REQUIRED;
        endoneof;
      endif;



      subtitle text =  STRING_TOKEN(STR_EFI_HSUART_2);
//G160-001(18)      oneof varid = PCH_SETUP.HsUartMode[2],
//G160-001(18)          prompt   = STRING_TOKEN(STR_EFI_HSUART_MODE),
//G160-001(18)          help     = STRING_TOKEN(STR_EFI_HSUART_MODE_HELP),
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_PCIE),   value = 0, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_LEGACY), value = 1, flags =  RESET_REQUIRED;
//G160-001(18)          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_HIDE),   value = 2, flags =  RESET_REQUIRED;
//G160-001(18)      endoneof;
//G160-001(18) - start
      oneof varid = PCH_SETUP.HsUartMode[2],
          prompt   = STRING_TOKEN(STR_EFI_HSUART_MODE),
          help     = STRING_TOKEN(STR_EFI_HSUART_MODE_HELP),
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_PCIE),   value = 0, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_LEGACY), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_HSUART_MODE_HIDE),   value = 2, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
//G160-001(18) - end
      suppressif NOT ideqval PCH_SETUP.HsUartMode[2] == 1;
        oneof varid = PCH_SETUP.HsUartCOM[2],
            prompt   = STRING_TOKEN(STR_EFI_HSUART_COM_VALUE),
            help     = STRING_TOKEN(STR_EFI_HSUART_COM_VALUE_HELP),
            option text = STRING_TOKEN(STR_EFI_COM1), value = 0x3f8, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM2), value = 0x2f8, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM3), value = 0x3e8, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
            option text = STRING_TOKEN(STR_EFI_COM4), value = 0x2e8, flags =  RESET_REQUIRED;
        endoneof;
      endif;
      

  endform; //VFR_FORMID_UART
