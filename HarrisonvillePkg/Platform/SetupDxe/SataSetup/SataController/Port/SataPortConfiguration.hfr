//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// *++
//
// Copyright (c) 1999 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//

form formid = SATA_PORT_FORM_ID_VARIABLE(CONTROLLER_INDEX, PORT_INDEX),

    title = STRING_TOKEN(SATA_PORT_TITLE_VARIABLE(PORT_INDEX));

// Denverton AptioV Override Start - EIP#291342
#if PORT_INDEX == 0
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT0_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT0_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT0_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT0_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT0_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT0_SIZE);
#endif
#endif     

#if PORT_INDEX == 1
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT1_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT1_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT1_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT1_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT1_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT1_SIZE);
#endif
#endif      

#if PORT_INDEX == 2
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT2_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT2_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT2_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT2_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT2_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT2_SIZE);
#endif
#endif  

#if PORT_INDEX == 3
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT3_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT3_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT3_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT3_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT3_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT3_SIZE);
#endif
#endif  

#if PORT_INDEX == 4
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT4_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT4_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT4_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT4_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT4_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT4_SIZE);
#endif
#endif  

#if PORT_INDEX == 5
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT5_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT5_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT5_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT5_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT5_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT5_SIZE);
#endif
#endif  

#if PORT_INDEX == 6
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT6_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT6_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT6_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT6_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT6_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT6_SIZE);
#endif
#endif  

#if PORT_INDEX == 7
#if CONTROLLER_INDEX == 0
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA0_PORT7_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA0_PORT7_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA0_PORT7_SIZE);

#else
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA1_PORT7_STRING);
    
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_INFO),
        text   = STRING_TOKEN(STR_SATA1_PORT7_NAME);
        
    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SATA_DEVICE_SIZE),
        text   = STRING_TOKEN(STR_SATA1_PORT7_SIZE);
#endif
#endif  
// Denverton AptioV Override End - EIP#291342

    oneof varid = PCH_SETUP.SataPort[ARRAY_PORT_INDEX],
        prompt   = STRING_TOKEN(STR_SATA_PORT_EN),
        help     = STRING_TOKEN(STR_SATA_PORT_EN_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT|RESET_REQUIRED|MANUFACTURING;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    endoneof;

#if 0  //DNV TODO: Configuration needed for this setup option is not available yet. Need to wait for sata SIR recepi
    oneof varid = PCH_SETUP.SataType[ARRAY_PORT_INDEX],
        prompt   = STRING_TOKEN(STR_SATA_DEVICE_TYPE),
        help     = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HELP),
        option text = STRING_TOKEN(STR_SATA_DEVICE_TYPE_HD), value = 0, flags = DEFAULT|RESET_REQUIRED|MANUFACTURING;
        option text = STRING_TOKEN(STR_SATA_DEVICE_TYPE_SSD), value = 1, flags = RESET_REQUIRED;
    endoneof;
#endif

//G160-002(16)  suppressif ideqval PCH_SETUP.SataLpm[CONTROLLER_INDEX] == 0x1;
//G160-002(16)      oneof varid = PCH_SETUP.SataHotPlug[ARRAY_PORT_INDEX],
//G160-002(16)          prompt   = STRING_TOKEN(STR_SATA_CONTROLLER_HOTPLUG_PROMPT),
//G160-002(16)          help     = STRING_TOKEN(STR_SATA_CONTROLLER_HOTPLUG_PROMPT),
//G160-002(16)          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT|RESET_REQUIRED|MANUFACTURING;
//G160-002(16)          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
//G160-002(16)      endoneof;
//G160-002(16)  endif;        

//G160-002(16) - start
suppressif HIDE_UNUSED_ITEMS;               //G160-004(4)
suppressif ideqval PCH_SETUP.SataLpm[CONTROLLER_INDEX] == 0x1;
    oneof varid = PCH_SETUP.SataHotPlug[ARRAY_PORT_INDEX],
        prompt   = STRING_TOKEN(STR_SATA_CONTROLLER_HOTPLUG_PROMPT),
        help     = STRING_TOKEN(STR_SATA_CONTROLLER_HOTPLUG_PROMPT),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
    endoneof;
endif;
//G160-002(16) - end
    
    oneof varid = PCH_SETUP.SataSpinUp[ARRAY_PORT_INDEX],
        prompt   = STRING_TOKEN(STR_SATA_CONTROLLER_SPINUP_PROMPT),
        help     = STRING_TOKEN(STR_SATA_CONTROLLER_SPINUP_PROMPT),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT|RESET_REQUIRED|MANUFACTURING;
    endoneof;

    oneof varid = PCH_SETUP.SataTopology[ARRAY_PORT_INDEX],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY0),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
    endoneof;
    endif;                                      //G160-004(4)
    
endform;

#undef PORT_INDEX  
#undef ARRAY_PORT_INDEX
