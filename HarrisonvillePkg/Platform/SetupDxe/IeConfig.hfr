//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// /*++
// Copyright (c) 2015 Intel Corporation. All rights reserved.
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
// --*/

#ifdef IE_SUPPORT


#include "Configuration.h"
#include "SetupMisc.h"

//**********************************************************************
//                ADVANCED - IE Configuration Form
//**********************************************************************

//
// IE Configuration Form
//
form formid = VFR_FORMID_IE,
  title   = STRING_TOKEN(STR_SERVER_IE_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_SERVER_IE_SUBTITLE);

  suppressif TRUE;
    checkbox varid  = SYSTEM_CONFIGURATION.IeDisabledInSoftStraps,
      prompt   = STRING_TOKEN(STR_EMPTY_STRING),
      help     = STRING_TOKEN(STR_EMPTY_STRING),
      // Flags behavior for checkbox is overloaded so that it equals
      // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
      flags        = CHECKBOX_DEFAULT | CHECKBOX_DEFAULT_MFG | RESET_REQUIRED,
      key          = 0,
    endcheckbox;
    checkbox varid  = SYSTEM_CONFIGURATION.DfxIe,
      prompt   = STRING_TOKEN(STR_EMPTY_STRING),
      help     = STRING_TOKEN(STR_EMPTY_STRING),
      // Flags behavior for checkbox is overloaded so that it equals
      // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;
  endif; // suppressif TRUE

  suppressif NOT ideqval SYSTEM_CONFIGURATION.IeDisabledInSoftStraps == 0;
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_IE_IENOTSUPPORTED_PROMPT);
  endif; // suppressif IeDisabledInSoftStraps == 0

  suppressif ideqval SYSTEM_CONFIGURATION.IeDisabledInSoftStraps == 0;

    //
    // Display the IE Firmware Status registers available in HECI-1/2 config space
    //
    text
      help  = STRING_TOKEN(STR_IE_FWSTS1_HELP),
      text  = STRING_TOKEN(STR_IE_FWSTS1_PROMPT),
      text  = STRING_TOKEN(STR_IE_FWSTS1_VALUE),
      flags = 0,
      key   = 0;

    text
      help  = STRING_TOKEN(STR_IE_FWSTS2_HELP),
      text  = STRING_TOKEN(STR_IE_FWSTS2_PROMPT),
      text  = STRING_TOKEN(STR_IE_FWSTS2_VALUE),
      flags = 0,
      key   = 0;

    suppressif ideqval SYSTEM_CONFIGURATION.DfxIe == 0;
      subtitle text = STRING_TOKEN(STR_NULL_STRING);
      subtitle text = STRING_TOKEN(STR_NULL_STRING);
      subtitle text = STRING_TOKEN(STR_IE_DFX_IE_FW_PROMPT);
    endif; // suppressif DfxIe == 0

    grayoutif ideqval SYSTEM_CONFIGURATION.DfxIe == 1;
      oneof varid   = SYSTEM_CONFIGURATION.IeHeci1Enabled,
        prompt      = STRING_TOKEN(STR_IE_HECI1ENABLE_PROMPT),
        help        = STRING_TOKEN(STR_IE_HECI1ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
      endoneof;

      oneof varid   = SYSTEM_CONFIGURATION.IeHeci2Enabled,
        prompt      = STRING_TOKEN(STR_IE_HECI2ENABLE_PROMPT),
        help        = STRING_TOKEN(STR_IE_HECI2ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
      endoneof;

      oneof varid   = SYSTEM_CONFIGURATION.IeHeci3Enabled,
        prompt      = STRING_TOKEN(STR_IE_HECI3ENABLE_PROMPT),
        help        = STRING_TOKEN(STR_IE_HECI3ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
      endoneof;

      oneof varid   = SYSTEM_CONFIGURATION.IeIderEnabled,
        prompt      = STRING_TOKEN(STR_IE_IDERENABLE_PROMPT),
        help        = STRING_TOKEN(STR_IE_IDERENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
      endoneof;

      oneof varid   = SYSTEM_CONFIGURATION.IeKtEnabled,
        prompt      = STRING_TOKEN(STR_IE_KTENABLE_PROMPT),
        help        = STRING_TOKEN(STR_IE_KTENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
      endoneof;
    endif; // grayoutif SYSTEM_CONFIGURATION.DfxIe == 1;

    numeric varid = SYSTEM_CONFIGURATION.SubsystemId,
      prompt      = STRING_TOKEN(STR_IE_SUBSYSTEMID_PROMPT),
      help        = STRING_TOKEN(STR_IE_SUBSYSTEMID_HELP),
      flags       = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
      minimum     = 0,
      maximum     = 0xFFFF,
      step        = 1,
      default     = 0x8086,
    endnumeric;
  endif; // suppressif IeDisabledInSoftStraps == 0

endform;

#endif //IE_SUPPORT
