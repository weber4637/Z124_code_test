//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// /*++
// Copyright (c) 2011-2021 Intel Corporation. All rights reserved.
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
// --*/

#if defined(ME_SUPPORT_FLAG) && ME_SUPPORT_FLAG
#include "Configuration.h"
#include "SetupMisc.h"

#define ME_CONFIG_DATA_FILE
#include "Library/MeTypeDefs.h"
#include "MeSetup.h"
#if defined(AMT_SUPPORT) && AMT_SUPPORT
#include "AmtSetup.h"
#include "MeState.h"
#if defined(ICC_SUPPORT) && ICC_SUPPORT
#include "IccSetup.h"
#endif // ICC_SUPPORT
#endif // AMT_SUPPORT

#ifndef INVENTORY
#define INVENTORY(Name,Value) \
    text \
      help  = STRING_TOKEN(STR_EMPTY_STRING), \
      text  = Name, \
      text  = Value, \
      flags = 0, \
      key   = 0;
#endif // INVENTORY

//**********************************************************************
//                ADVANCED - ME Configuration Form
//**********************************************************************

//
// ME Configuration Form
//
form formid = VFR_FORMID_ME,
  title   = STRING_TOKEN(STR_SERVER_ME_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_SERVER_ME_SUBTITLE);
  //
  // Display the ME Firmware Version available in MKHI interface
  //
  text
    help  = STRING_TOKEN(STR_ME_FWVER_OPERATIONAL_HELP),
    text  = STRING_TOKEN(STR_ME_FWVER_OPERATIONAL_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWVER_OPERATIONAL_VALUE),
    flags = 0,
    key   = 0;

  suppressif NOT ideqval SYSTEM_CONFIGURATION.MeFirmwareMode == 0xFF;
    INVENTORY(STRING_TOKEN(STR_ME_FW_TYPE_PROMPT),STRING_TOKEN(STR_ME_FW_TYPE_SPS))
    INVENTORY(STRING_TOKEN(STR_ME_FW_TYPE_PROMPT),STRING_TOKEN(STR_ME_FW_TYPE_AMT))
    INVENTORY(STRING_TOKEN(STR_ME_FW_TYPE_PROMPT),STRING_TOKEN(STR_ME_FW_TYPE_UNKNOWN))
  endif;

  text
    help   = STRING_TOKEN(STR_ME_FW_TYPE_HELP),
    text   = STRING_TOKEN(STR_ME_FW_TYPE_PROMPT),
    text   = STRING_TOKEN(STR_ME_FW_TYPE_VALUE),
    flags  = 0,
    key    = 0;

  suppressif TRUE;
    // Set MeType default value
    numeric varid   = SYSTEM_CONFIGURATION.MeType,
      prompt  = STRING_TOKEN(STR_AMT_PROMPT),
      help    = STRING_TOKEN(STR_NULL_STRING),
      flags   = DISPLAY_UINT_HEX | RESET_REQUIRED,
      minimum = 0,
      maximum = 0xFF,
      step    = 0,
      default = 1,
    endnumeric;
  endif; // suppressif TRUE

#if defined(AMT_SUPPORT) && AMT_SUPPORT
  suppressif NOT ideqval SYSTEM_CONFIGURATION.MeType == METYPE_AMT;

    suppressif NOT ideqval SYSTEM_CONFIGURATION.MeFirmwareMode == 0xFF;
      INVENTORY(STRING_TOKEN(STR_ME_FW_INFO_PROMPT),STRING_TOKEN(STR_ME_NORMAL_MODE))
      INVENTORY(STRING_TOKEN(STR_ME_FW_INFO_PROMPT),STRING_TOKEN(STR_ME_ALT_DISABLED))
      INVENTORY(STRING_TOKEN(STR_ME_FW_INFO_PROMPT),STRING_TOKEN(STR_ME_TEMP_DISABLED))
      INVENTORY(STRING_TOKEN(STR_ME_FW_INFO_PROMPT),STRING_TOKEN(STR_ME_SECOVER))
      INVENTORY(STRING_TOKEN(STR_ME_FW_INFO_PROMPT),STRING_TOKEN(STR_ME_FAILED))
    endif;

    text
      help   = STRING_TOKEN(STR_ME_FW_INFO_HELP),
      text   = STRING_TOKEN(STR_ME_FW_INFO_PROMPT),
      text   = STRING_TOKEN(STR_ME_FW_INFO_VALUE),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_ME_FW_SKU_HELP),
      text   = STRING_TOKEN(STR_ME_FW_SKU_PROMPT),
      text   = STRING_TOKEN(STR_ME_FW_SKU_VALUE),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_ME_FILE_SYSTEM_CORRUPTION_HELP),
      text   = STRING_TOKEN(STR_ME_FILE_SYSTEM_CORRUPTION_PROMPT),
      text   = STRING_TOKEN(STR_ME_FILE_SYSTEM_CORRUPTION_VALUE),
      flags  = 0,
      key    = 0;
  endif; // Suppress if MeType != AMT
#endif // AMT_SUPPORT
  text
    help  = STRING_TOKEN(STR_ME_FWVER_BACKUP_HELP),
    text  = STRING_TOKEN(STR_ME_FWVER_BACKUP_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWVER_BACKUP_VALUE),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(STR_ME_FWVER_RECOVERY_HELP),
    text  = STRING_TOKEN(STR_ME_FWVER_RECOVERY_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWVER_RECOVERY_VALUE),
    flags = 0,
    key   = 0;

#if defined(SPS_SUPPORT) && SPS_SUPPORT
  text
    help  = STRING_TOKEN(STR_ME_FWSKU_HELP),
    text  = STRING_TOKEN(STR_ME_FWSKU_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWSKU_VALUE),
    flags = 0,
    key   = 0;
#endif // SPS_SUPPORT
  //
  // Display the ME Firmware Status registers available in HECI-1/2 config space
  //
  text
    help  = STRING_TOKEN(STR_ME_FWSTS1_HELP),
    text  = STRING_TOKEN(STR_ME_FWSTS1_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWSTS1_VALUE),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(STR_ME_FWSTS2_HELP),
    text  = STRING_TOKEN(STR_ME_FWSTS2_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWSTS2_VALUE),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(STR_ME_FWCURSTE_HELP),
    text  = STRING_TOKEN(STR_ME_FWCURSTE_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWCURSTE_VALUE),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(STR_ME_FWERRCODE_HELP),
    text  = STRING_TOKEN(STR_ME_FWERRCODE_PROMPT),
    text  = STRING_TOKEN(STR_ME_FWERRCODE_VALUE),
    flags = 0,
    key   = 0;

#if defined(SPS_SUPPORT) && SPS_SUPPORT
  
  numeric varid = SYSTEM_CONFIGURATION.SpsAltitude,
    prompt      = STRING_TOKEN(STR_SPSALTITUDE_PROMPT),
    help        = STRING_TOKEN(STR_SPSALTITUDE_HELP),
    flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
    minimum     = 0,
    maximum     = 0xFFFFFFFF,
    step        = 0,          // Stepping of 0 equates to a manual entering
    default     = 0x80000000,
  endnumeric;

  numeric varid   = SYSTEM_CONFIGURATION.SpsMctpBusOwner,
    prompt  = STRING_TOKEN(STR_MCTP_BUS_OWNER_PROMPT),
    help    = STRING_TOKEN(STR_MCTP_BUS_OWNER_HELP),
    flags   = DISPLAY_UINT_HEX | RESET_REQUIRED,
    minimum = 0,
    maximum = 0xFFFF,
    step    = 0,
    default = 0,
  endnumeric;
  
  oneof varid   = SYSTEM_CONFIGURATION.SpsMeShutdown,
    prompt      = STRING_TOKEN(STR_ME_SHUTDOWN_PROMPT),
    help        = STRING_TOKEN(STR_ME_SHUTDOWN_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
  endoneof;

  // SPS ICC Clock SSC setting configuration
  suppressif ideqval SYSTEM_CONFIGURATION.SpsIccClkSscSettingSupported == 0;
    oneof varid   = SYSTEM_CONFIGURATION.SpsIccClkSscSetting,
      prompt      = STRING_TOKEN(STR_SPS_SCC_PROMPT),
      help        = STRING_TOKEN(STR_SPS_SCC_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = SETUP_SSC_DISABLED, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = SETUP_SSC_ENABLED, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTO),     value = SETUP_SSC_AUTO, flags = 0 | DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif; // Suppress if SpsIccClkSscSettingSupported == 0

#endif

#if defined(AMT_SUPPORT) && AMT_SUPPORT
  suppressif NOT ideqval SYSTEM_CONFIGURATION.MeType == METYPE_AMT;
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    oneof varid = SYSTEM_CONFIGURATION.Amt,
      prompt   = STRING_TOKEN(STR_AMT_PROMPT),
      help     = STRING_TOKEN(STR_AMT_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    goto VFR_FORMID_AMT,
      prompt  = STRING_TOKEN(STR_AMT_FORM),
      help    = STRING_TOKEN(STR_AMT_FORM_HELP);
  endif; // Suppress if MeType != AMT
#endif // AMT_SUPPORT
endform;

#if defined(AMT_SUPPORT) && AMT_SUPPORT
  suppressif NOT ideqval SYSTEM_CONFIGURATION.MeType == METYPE_AMT;
    //
    // AMT information
    //
    form formid = VFR_FORMID_AMT,
    title       = STRING_TOKEN(STR_AMT_FORM);

    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_FW_UPGRADE_SUBTITLE);

    grayoutif ideqval SYSTEM_CONFIGURATION.Amt == 0;
      oneof varid      = SYSTEM_CONFIGURATION.MeFwDowngrade,
        prompt         = STRING_TOKEN(STR_AMT_ME_FW_DOWNGRADE_PROMPT),
        help           = STRING_TOKEN(STR_AMT_ME_FW_DOWNGRADE_HELP),
        option text    = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text    = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
      endoneof;
      suppressif
      NOT ideqval SYSTEM_CONFIGURATION.MeImageType <= ME_IMAGE_CONSUMER_SKU_FW;
        oneof varid      = SYSTEM_CONFIGURATION.LocalFwUpdEnabled,
          questionid     = AMT_LOCAL_FW_UPDATE_QUESTION_ID,
          prompt         = STRING_TOKEN(STR_AMT_LOCAL_FW_UPDATE_PROMPT),
          help           = STRING_TOKEN(STR_AMT_LOCAL_FW_UPDATE_HELP),
          option text    = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | INTERACTIVE;
          option text    = STRING_TOKEN(STR_ENABLED), value = 1, flags = INTERACTIVE;
        endoneof;
      endif;

      subtitle text = STRING_TOKEN(STR_NULL_STRING);
      subtitle text = STRING_TOKEN(STR_AMT_SUBTITLE);

      suppressif
      ideqval SYSTEM_CONFIGURATION.MeImageType <= ME_IMAGE_CONSUMER_SKU_FW
      OR ideqval SYSTEM_CONFIGURATION.MeStateControl == 0
      OR NOT ideqval SYSTEM_CONFIGURATION.MeFirmwareMode == ME_MODE_NORMAL;
        oneof varid      = SYSTEM_CONFIGURATION.MngState,
          questionid     = AMT_KEY_AMT1_QUESTION_ID,
          prompt         = STRING_TOKEN(STR_MNG_STATE_PROMPT),
          help           = STRING_TOKEN(STR_MNG_STATE_HELP),
          option text    = STRING_TOKEN(STR_DISABLED), value = 0, flags = INTERACTIVE | RESET_REQUIRED;
          option text    = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | INTERACTIVE | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif
      ideqval SYSTEM_CONFIGURATION.MeStateControl == 0 OR
      NOT ideqval SYSTEM_CONFIGURATION.MeFirmwareMode == ME_MODE_NORMAL;
        oneof varid = SYSTEM_CONFIGURATION.IfrUpdateEnabled,
          prompt = STRING_TOKEN(STR_AMT_IFR_UPDATE_PROMPT),
          help   = STRING_TOKEN(STR_AMT_IFR_UPDATE_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid      = SYSTEM_CONFIGURATION.MdesCapability,
        prompt = STRING_TOKEN(STR_MDES_PROMPT),
        help   = STRING_TOKEN(STR_MDES_HELP),
        option text    = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text    = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid      = SYSTEM_CONFIGURATION.SvtForPchCap,
        prompt = STRING_TOKEN(STR_SVT_FOR_PCH_PROMPT),
        help   = STRING_TOKEN(STR_SVT_FOR_PCH_HELP),
        option text    = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text    = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      checkbox varid  = SYSTEM_CONFIGURATION.AmtbxHotKeyPressed,
        prompt   = STRING_TOKEN(STR_AMTBX_HOTKEY_PRESSED_PROMPT),
        help     = STRING_TOKEN(STR_AMTBX_HOTKEY_PRESSED_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = SYSTEM_CONFIGURATION.HideUnConfigureMeConfirm,
        prompt   = STRING_TOKEN(STR_AMT_HIDE_CONFIRMATION_UNCONFIGURE_ME_PROMPT),
        help     = STRING_TOKEN(STR_AMT_HIDE_CONFIRMATION_UNCONFIGURE_ME_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = SYSTEM_CONFIGURATION.UnConfigureMe,
        prompt   = STRING_TOKEN(STR_AMT_UNCONFIGURE_ME_PROMPT),
        help     = STRING_TOKEN(STR_AMT_UNCONFIGURE_ME_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      oneof varid = SYSTEM_CONFIGURATION.USBProvision,
        prompt   = STRING_TOKEN(STR_AMT_USB_CONFIGURE_PROMPT),
        help     = STRING_TOKEN(STR_AMT_USB_CONFIGURE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.FWProgress,
        prompt   = STRING_TOKEN(STR_AMT_PET_PROGRESS_PROMPT),
        help     = STRING_TOKEN(STR_AMT_PET_PROGRESS_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      checkbox varid  = SYSTEM_CONFIGURATION.AmtCiraRequest,
        prompt   = STRING_TOKEN(STR_AMT_CIRA_REQUEST_PROMPT),
        help     = STRING_TOKEN(STR_AMT_CIRA_REQUEST_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      grayoutif ideqval SYSTEM_CONFIGURATION.AmtCiraRequest == 0 OR ideqval SYSTEM_CONFIGURATION.Amt == 0;
        numeric varid   = SYSTEM_CONFIGURATION.AmtCiraTimeout,
          prompt  = STRING_TOKEN (STR_AMT_CIRA_TIMEOUT_PROMPT),
          help    = STRING_TOKEN (STR_AMT_CIRA_TIMEOUT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1 ,       // Stepping of 0 equates to a manual entering
                              // of a value, otherwise it will auto-increment
                              // with a left/right arrow
          default = 0,
        endnumeric;
      endif;

      oneof varid = SYSTEM_CONFIGURATION.Asf,
        prompt   = STRING_TOKEN(STR_ASF_PROMPT),
        help     = STRING_TOKEN(STR_ASF_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SYSTEM_CONFIGURATION.Asf == 0;
        oneof varid = SYSTEM_CONFIGURATION.WatchDog,
          prompt   = STRING_TOKEN(STR_WATCHDOG_PROMPT),
          help     = STRING_TOKEN(STR_WATCHDOG_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval SYSTEM_CONFIGURATION.Asf == 0 OR ideqval SYSTEM_CONFIGURATION.WatchDog == 0;
        numeric varid   = SYSTEM_CONFIGURATION.WatchDogTimerOs,
           prompt  = STRING_TOKEN (STR_WATCHDOG_TIMER_OS_PROMPT),
           help    = STRING_TOKEN (STR_WATCHDOG_TIMER_OS_HELP),
           minimum = 0,
           maximum = 65535,
           step    = 1 , // Stepping of 0 equates to a manual entering
                         // of a value, otherwise it will auto-increment
                         // with a left/right arrow
           default = 0,
        endnumeric;

        numeric varid   = SYSTEM_CONFIGURATION.WatchDogTimerBios,
           prompt  = STRING_TOKEN (STR_WATCHDOG_TIMER_BIOS_PROMPT),
           help    = STRING_TOKEN (STR_WATCHDOG_TIMER_BIOS_HELP),
           minimum = 0,
           maximum = 65535,
           step    = 1 , // Stepping of 0 equates to a manual entering
                         // of a value, otherwise it will auto-increment
                         // with a left/right arrow
           default = 0,
        endnumeric;

        suppressif NOT ideqval SYSTEM_CONFIGURATION.EwsAvailable == 1;
          oneof varid   = SYSTEM_CONFIGURATION.EwsEnabled,
            prompt      = STRING_TOKEN (STR_ME_EWS_STATE_PROMPT),
            help        = STRING_TOKEN (STR_ME_EWS_STATE_PROMPT_HELP),
            option text = STRING_TOKEN (STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (STR_ENABLED), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif;

      subtitle text = STRING_TOKEN(STR_NULL_STRING);
      checkbox varid  = SYSTEM_CONFIGURATION.MebxDebugMsg,
        prompt   = STRING_TOKEN(STR_AMT_MEBX_DEBUG_MSG_PROMPT),
        help     = STRING_TOKEN(STR_AMT_MEBX_DEBUG_MSG_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = SYSTEM_CONFIGURATION.AmtbxSelectionScreen,
        prompt   = STRING_TOKEN(STR_AMTBX_SELECTION_SCREEN_PROMPT),
        help     = STRING_TOKEN(STR_AMTBX_SELECTION_SCREEN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      goto VFR_FORMID_MEBX,
        prompt  = STRING_TOKEN(STR_MEBX_FORM),
        help    = STRING_TOKEN(STR_MEBX_FORM_HELP);

    endif; // grayoutif ideqval SYSTEM_CONFIGURATION.Amt == 0;
  endform;

  form formid = VFR_FORMID_MEBX,
    title     = STRING_TOKEN(STR_MEBX_FORM);

    oneof varid = SYSTEM_CONFIGURATION.MebxNonUiTextMode,
      prompt   = STRING_TOKEN(STR_MEBX_NONUI_MODE_PROMPT),
      help     = STRING_TOKEN(STR_MEBX_NONUI_MODE_HELP),
      option text = STRING_TOKEN(STR_MEBX_MODE_AUTO), value = 0, flags = DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_MEBX_TEXT_80_25), value = 1, flags = 0;
      option text = STRING_TOKEN(STR_MEBX_TEXT_100_31), value = 2, flags = 0;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.MebxUiTextMode,
      prompt   = STRING_TOKEN(STR_MEBX_UI_MODE_PROMPT),
      help     = STRING_TOKEN(STR_MEBX_UI_MODE_HELP),
      option text = STRING_TOKEN(STR_MEBX_MODE_AUTO), value = 0, flags = DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_MEBX_TEXT_80_25), value = 1, flags = 0;
      option text = STRING_TOKEN(STR_MEBX_TEXT_100_31), value = 2, flags = 0;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.MebxGraphicsMode,
      prompt   = STRING_TOKEN(STR_MEBX_GRAPHICS_MODE_PROMPT),
      help     = STRING_TOKEN(STR_MEBX_GRAPHICS_MODE_HELP),
      option text = STRING_TOKEN(STR_MEBX_MODE_AUTO), value = 0, flags = DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_MEBX_GRAPHICS_640_480), value = 1, flags = 0;
      option text = STRING_TOKEN(STR_MEBX_GRAPHICS_800_600), value = 2, flags = 0;
      option text = STRING_TOKEN(STR_MEBX_GRAPHICS_1024_768), value = 3, flags = 0;
    endoneof;
  endform;
endif; // Suppress if MeType != AMT
#endif // AMT_SUPPORT

form formid = VFR_FORMID_FWDEBUG,
  title     = STRING_TOKEN(STR_FWDEBUG_FORM_TITLE);

  goto VFR_FORMID_SIEN,
    prompt = STRING_TOKEN(STR_SIEN_FORM),
    help   = STRING_TOKEN(STR_SIEN_FORM_HELP);

#if defined(SPS_SUPPORT) && SPS_SUPPORT
  suppressif NOT ideqval SYSTEM_CONFIGURATION.MeType == METYPE_SPS;
    grayoutif ideqval SYSTEM_CONFIGURATION.NmEnabled == 0;
      goto VFR_FORMID_NM,
        prompt = STRING_TOKEN(STR_NM_FORM),
        help   = STRING_TOKEN(STR_NM_FORM_HELP);
    endif; // grayoutif if NmEnabled == 0
   endif; // Suppress if MeType != SPS
#endif // SPS_SUPPORT


endform;

form formid = VFR_FORMID_SIEN,
  title     = STRING_TOKEN(STR_SIEN_FORM_TITLE);

  numeric varid = SYSTEM_CONFIGURATION.MeTimeout,
    prompt      = STRING_TOKEN(STR_ME_TIMEOUT_PROMPT),
    help        = STRING_TOKEN(STR_ME_TIMEOUT_HELP),
    flags       = 0 | RESET_REQUIRED,
    minimum     = 0,
    maximum     = 12,
    step        = 1,
    default     = 2,
  endnumeric;

  oneof varid   = SYSTEM_CONFIGURATION.HsioEnableMessaging,
    prompt   = STRING_TOKEN(STR_ME_HSIO_ENABLE_PROMPT),
    help     = STRING_TOKEN(STR_ME_HSIO_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0 | DEFAULT | MANUFACTURING;
  endoneof;
  
#if ME_TESTMENU_FLAG
  oneof varid   = SYSTEM_CONFIGURATION.FiaMuxMessageEnabled,
    prompt      = STRING_TOKEN(STR_ME_FIA_MUX_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_ME_FIA_MUX_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
#endif // ME_TESTMENU_FLAG

  checkbox varid = SYSTEM_CONFIGURATION.MeDidEnabled,
    prompt       = STRING_TOKEN(STR_ME_DID_ENABLE_PROMPT),
    help         = STRING_TOKEN(STR_ME_DID_ENABLE_HELP),
    // Flags behavior for checkbox is overloaded so that it equals
    // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
    flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,
    key          = 0,
  endcheckbox;

  grayoutif ideqval SYSTEM_CONFIGURATION.MeDidEnabled == 0;
    checkbox varid = SYSTEM_CONFIGURATION.MeDidTimeout,
      prompt       = STRING_TOKEN(STR_ME_DID_TIMEOUT_PROMPT),
      help         = STRING_TOKEN(STR_ME_DID_TIMEOUT_HELP),
      // Flags behavior for checkbox is overloaded so that it equals
      // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
      flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    oneof varid   = SYSTEM_CONFIGURATION.MeDidInitStat,
      prompt      = STRING_TOKEN(STR_ME_DID_INIT_STAT_PROMPT),
      help        = STRING_TOKEN(STR_ME_DID_INIT_STAT_HELP),
      option text = STRING_TOKEN(STR_ME_DID_INIT_STAT_AUTO), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ME_DID_INIT_STAT_0), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ME_DID_INIT_STAT_1), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ME_DID_INIT_STAT_2), value = 3, flags = RESET_REQUIRED;
    endoneof;
  endif;
// Denverton AptioV override Start - EIP#331778  
#if ME_UPDATE_DFU_METHOD == 0 
  oneof varid   = SYSTEM_CONFIGURATION.MeHmrfpoLockEnabled,
    prompt      = STRING_TOKEN(STR_ME_HMRFPOLOCK_PROMPT),
    help        = STRING_TOKEN(STR_ME_HMRFPOLOCK_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0 | DEFAULT;
  endoneof;

  grayoutif ideqval SYSTEM_CONFIGURATION.MeHmrfpoLockEnabled == 0;
    oneof varid   = SYSTEM_CONFIGURATION.MeHmrfpoEnableEnabled,
      prompt      = STRING_TOKEN(STR_ME_HMRFPOENABLE_PROMPT),
      help        = STRING_TOKEN(STR_ME_HMRFPOENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
    endoneof;
  endif;
#endif;  // ME_UPDATE_DFU_METHOD
// Denverton AptioV override End - EIP#331778  

  oneof varid   = SYSTEM_CONFIGURATION.MeEndOfPostEnabled,
    prompt      = STRING_TOKEN(STR_ME_ENDOFPOST_PROMPT),
    help        = STRING_TOKEN(STR_ME_ENDOFPOST_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0 | DEFAULT;
  endoneof;

#if defined(AMT_SUPPORT) && AMT_SUPPORT
  suppressif NOT ideqval SYSTEM_CONFIGURATION.MeType == METYPE_AMT;
  grayoutif
    ideqval SYSTEM_CONFIGURATION.RemoteSessionActive == 0x01
//    OR ideqval SYSTEM_CONFIGURATION.AfterEoP == 0x1
    ;
      oneof varid      = SYSTEM_CONFIGURATION.MeStateControl,
        prompt         = STRING_TOKEN(STR_ME_STATE_CONTROL_PROMPT),
        help           = STRING_TOKEN(STR_ME_STATE_CONTROL_HELP),
        option text    = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text    = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif; // grayoutif RemoteSessionActive
  endif; // Suppress if MeType != AMT
#endif // AMT_SUPPORT

#ifdef PCH_SPT
  oneof varid   = SYSTEM_CONFIGURATION.MeGrPromotionEnabled,
    prompt      = STRING_TOKEN(STR_ME_GRPROMOTION_PROMPT),
    help        = STRING_TOKEN(STR_ME_GRPROMOTION_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | DEFAULT;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0;
  endoneof;
#endif //PCH_SPT

  oneof varid   = SYSTEM_CONFIGURATION.MeGrLockEnabled,
    prompt      = STRING_TOKEN(STR_ME_GRLOCK_PROMPT),
    help        = STRING_TOKEN(STR_ME_GRLOCK_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0 | DEFAULT;
  endoneof;

  oneof varid   = SYSTEM_CONFIGURATION.MeHeci1Enabled,
    prompt      = STRING_TOKEN(STR_ME_HECI1ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_ME_HECI1ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = SETUP_HECI_DEVICE_DISABLED, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = SETUP_HECI_DEVICE_ENABLED, flags = 0;
    option text = STRING_TOKEN(STR_AUTO),     value = SETUP_HECI_DEVICE_AUTO, flags = 0 | DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SYSTEM_CONFIGURATION.MeHeci2Enabled,
    prompt      = STRING_TOKEN(STR_ME_HECI2ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_ME_HECI2ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = SETUP_HECI_DEVICE_DISABLED, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = SETUP_HECI_DEVICE_ENABLED, flags = 0;
    option text = STRING_TOKEN(STR_AUTO),     value = SETUP_HECI_DEVICE_AUTO, flags = 0 | DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SYSTEM_CONFIGURATION.MeHeci3Enabled,
    prompt      = STRING_TOKEN(STR_ME_HECI3ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_ME_HECI3ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = SETUP_HECI_DEVICE_DISABLED, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = SETUP_HECI_DEVICE_ENABLED, flags = 0;
    option text = STRING_TOKEN(STR_AUTO),     value = SETUP_HECI_DEVICE_AUTO, flags = 0 | DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SYSTEM_CONFIGURATION.MeIderEnabled,
    prompt      = STRING_TOKEN(STR_ME_IDERENABLE_PROMPT),
    help        = STRING_TOKEN(STR_ME_IDERENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = SETUP_HECI_DEVICE_DISABLED, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = SETUP_HECI_DEVICE_ENABLED, flags = 0;
    option text = STRING_TOKEN(STR_AUTO),     value = SETUP_HECI_DEVICE_AUTO, flags = 0 | DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SYSTEM_CONFIGURATION.MeKtEnabled,
    prompt      = STRING_TOKEN(STR_ME_KTENABLE_PROMPT),
    help        = STRING_TOKEN(STR_ME_KTENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = SETUP_HECI_DEVICE_DISABLED, flags = 0;
    option text = STRING_TOKEN(STR_ENABLED),  value = SETUP_HECI_DEVICE_ENABLED, flags = 0;
    option text = STRING_TOKEN(STR_AUTO),     value = SETUP_HECI_DEVICE_AUTO, flags = 0 | DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

#if SPS_SUPPORT
  //
  // The MeHeciXDisableBeMe options enable sending HECI message to ME to
  // request ME to disable or hide some of HECI interfaces on host PCI.
  //
  suppressif NOT ideqval SYSTEM_CONFIGURATION.MeType == METYPE_SPS;
    grayoutif ideqval SYSTEM_CONFIGURATION.MeHmrfpoLockEnabled == 0;

      grayoutif ideqval SYSTEM_CONFIGURATION.MeHeci1Enabled == 0;
        oneof varid   = SYSTEM_CONFIGURATION.MeHeci1HideInMe,
          prompt      = STRING_TOKEN(STR_ME_HECI1HIDEINME_PROMPT),
          help        = STRING_TOKEN(STR_ME_HECI1HIDEINME_HELP),
          option text = STRING_TOKEN(STR_OFF),     value = SETUP_HECI_IN_ME_OFF, flags = 0 | RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_HIDE),    value = SETUP_HECI_IN_ME_HIDE, flags = 0;
          option text = STRING_TOKEN(STR_DISABLE), value = SETUP_HECI_IN_ME_DISABLE, flags = 0;
        endoneof;
      endif; // grayoutif

      grayoutif ideqval SYSTEM_CONFIGURATION.MeHeci2Enabled == 0;
        oneof varid   = SYSTEM_CONFIGURATION.MeHeci2HideInMe,
          prompt      = STRING_TOKEN(STR_ME_HECI2HIDEINME_PROMPT),
          help        = STRING_TOKEN(STR_ME_HECI2HIDEINME_HELP),
          option text = STRING_TOKEN(STR_OFF),     value = SETUP_HECI_IN_ME_OFF, flags = 0 | RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_HIDE),    value = SETUP_HECI_IN_ME_HIDE, flags = 0;
          option text = STRING_TOKEN(STR_DISABLE), value = SETUP_HECI_IN_ME_DISABLE, flags = 0;
        endoneof;
      endif; // grayoutif

      grayoutif ideqval SYSTEM_CONFIGURATION.MeHeci3Enabled == 0;
        oneof varid   = SYSTEM_CONFIGURATION.MeHeci3HideInMe,
          prompt      = STRING_TOKEN(STR_ME_HECI3HIDEINME_PROMPT),
          help        = STRING_TOKEN(STR_ME_HECI3HIDEINME_HELP),
          option text = STRING_TOKEN(STR_OFF),     value = SETUP_HECI_IN_ME_OFF, flags = 0 | RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_HIDE),    value = SETUP_HECI_IN_ME_HIDE, flags = 0;
          option text = STRING_TOKEN(STR_DISABLE), value = SETUP_HECI_IN_ME_DISABLE, flags = 0;
        endoneof;
      endif; // grayoutif

    endif; // grayoutif !MeHmrfpoLockEnabled
  endif; // suppressif MeType != SPS
#endif // SPS_SUPPORT


#if TESTMENU_FLAG || ME_TESTMENU_FLAG
  oneof varid   = SYSTEM_CONFIGURATION.CoreBiosDoneEnabled,
    prompt      = STRING_TOKEN(STR_ME_CORE_BIOS_DONE_PROMPT),
    help        = STRING_TOKEN(STR_ME_CORE_BIOS_DONE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
#endif // TESTMENU_FLAG || ME_TESTMENU_FLAG

endform;

form formid = VFR_FORMID_NM,
  title     = STRING_TOKEN(STR_NM_FORM_TITLE);

  checkbox varid   = SYSTEM_CONFIGURATION.NmPwrOptBootOverride,
    prompt      = STRING_TOKEN(STR_NM_BOOT_MODE_OVERRIDE_PROMPT),
    help        = STRING_TOKEN(STR_NM_BOOT_MODE_OVERRIDE_HELP),
    flags       = 0 | RESET_REQUIRED,
    key         = 0,
  endcheckbox;

  grayoutif ideqval SYSTEM_CONFIGURATION.NmPwrOptBootOverride == 0;
    oneof varid   = SYSTEM_CONFIGURATION.NmPwrOptBoot,
      prompt      = STRING_TOKEN(STR_NM_BOOT_MODE_PROMPT),
      help        = STRING_TOKEN(STR_NM_BOOT_MODE_HELP),
      option text = STRING_TOKEN(STR_PERF_OPTIMIZED),  value = 0, flags = RESET_REQUIRED | DEFAULT;
      option text = STRING_TOKEN(STR_POWER_OPTIMIZED), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

  checkbox varid   = SYSTEM_CONFIGURATION.NmCores2DisableOverride,
    prompt      = STRING_TOKEN(STR_NM_CORES_DISABLE_OVERRIDE_PROMPT),
    help        = STRING_TOKEN(STR_NM_CORES_DISABLE_OVERRIDE_HELP),
    flags       = 0 | RESET_REQUIRED,
    key         = 0,
  endcheckbox;

  grayoutif ideqval SYSTEM_CONFIGURATION.NmCores2DisableOverride == 0;
    numeric varid   = SYSTEM_CONFIGURATION.NmCores2Disable,
      prompt  = STRING_TOKEN(STR_NM_CORES_DISABLE_PROMPT),
      help    = STRING_TOKEN(STR_NM_CORES_DISABLE_HELP),
      flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
      minimum = 0,
      maximum = 0x7F,
      step    = 1,
      default = 0,
    endnumeric;
  endif;

  checkbox varid   = SYSTEM_CONFIGURATION.NmPowerMsmtOverride,
    prompt      = STRING_TOKEN(STR_NM_POWERMSMT_OVERRIDE_PROMPT),
    help        = STRING_TOKEN(STR_NM_POWERMSMT_OVERRIDE_HELP),
    flags       = 0 | RESET_REQUIRED,
    key         = 0,
  endcheckbox;

  grayoutif ideqval SYSTEM_CONFIGURATION.NmPowerMsmtOverride == 0;
    oneof varid   = SYSTEM_CONFIGURATION.NmPowerMsmtSupport,
      prompt      = STRING_TOKEN(STR_NM_POWERMSMT_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_NM_POWERMSMT_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = 0 | RESET_REQUIRED | DEFAULT;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = 0 | RESET_REQUIRED;
    endoneof;
  endif;

  checkbox varid   = SYSTEM_CONFIGURATION.NmHwChangeOverride,
    prompt      = STRING_TOKEN(STR_NM_HWCHANGE_OVERRIDE_PROMPT),
    help        = STRING_TOKEN(STR_NM_HWCHANGE_OVERRIDE_HELP),
    flags       = 0 | RESET_REQUIRED,
    key         = 0,
  endcheckbox;

  grayoutif ideqval SYSTEM_CONFIGURATION.NmHwChangeOverride == 0;
    oneof varid   = SYSTEM_CONFIGURATION.NmHwChangeStatus,
      prompt      = STRING_TOKEN(STR_NM_HWCHANGE_STATUS_PROMPT),
      help        = STRING_TOKEN(STR_NM_HWCHANGE_STATUS_HELP),
      option text = STRING_TOKEN(STR_NO),  value = 0, flags = 0 | RESET_REQUIRED | DEFAULT;
      option text = STRING_TOKEN(STR_YES), value = 1, flags = 0 | RESET_REQUIRED;
    endoneof;
  endif;

endform;

#endif // ME_SUPPORT_FLAG
