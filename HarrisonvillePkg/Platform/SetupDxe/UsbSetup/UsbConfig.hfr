//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// *++
//
// Copyright (c) 1999 - 2015 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//

#define USB_TITLE_VARIABLE(x) USB_TITLE_VARIABLE_H(x)
#define USB_TITLE_VARIABLE_H(v)   STR_USB##v##_TITLE

#define USBSS_FORM_ID_VARIABLE(x) USBSS_FORM_ID_VARIABLE_H(x)
#define USBSS_FORM_ID_VARIABLE_H(v)   VFR_USBSS##v##_CONFIGURATION_FORM_ID

#define USBHS_FORM_ID_VARIABLE(x) USBHS_FORM_ID_VARIABLE_H(x)
#define USBHS_FORM_ID_VARIABLE_H(v)   VFR_USBHS##v##_CONFIGURATION_FORM_ID

#define USBSS_PORT_FORM_ID_VARIABLE(c,p) USBSS_PORT_FORM_ID_VARIABLE_H(c,p)
#define USBSS_PORT_FORM_ID_VARIABLE_H(c,p)   VFR_USBSS##c##_PORT##p##_CONFIGURATION_FORM_ID

#define USBHS_PORT_FORM_ID_VARIABLE(c,p) USBHS_PORT_FORM_ID_VARIABLE_H(c,p)
#define USBHS_PORT_FORM_ID_VARIABLE_H(c,p)   VFR_USBHS##c##_PORT##p##_CONFIGURATION_FORM_ID

#define USB_PORT_TITLE_VARIABLE(x) USB_PORT_TITLE_VARIABLE_H(x)
#define USB_PORT_TITLE_VARIABLE_H(v)   STR_USB_PORT##v##_TITLE


//-----------------------------------------------------------------------------
//          USB FORM
//-----------------------------------------------------------------------------
form formid = VFR_USB_CONFIGURATION_FORM_ID,
    title     = STRING_TOKEN(STR_USB_OPTIONS_FORM_TITLE);

    goto VFR_USBSS0_CONFIGURATION_FORM_ID,
          prompt  = STRING_TOKEN(STR_USBSS_OPTIONS_FORM_TITLE),
          help    = STRING_TOKEN(STR_USBSS_OPTIONS_FORM_HELP);

    goto VFR_USBHS0_CONFIGURATION_FORM_ID,
          prompt  = STRING_TOKEN(STR_USBHS_OPTIONS_FORM_TITLE),
          help    = STRING_TOKEN(STR_USBHS_OPTIONS_FORM_HELP);

    suppressif HIDE_UNUSED_ITEMS;                 //G160-002(16)
    oneof varid   = PCH_SETUP.UsbPrecondition,
      prompt      = STRING_TOKEN(STR_USB_PRECONDITION_SUPPORT),
      help        = STRING_TOKEN(STR_USB_PRECONDITION_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid     = PCH_SETUP.IIL1e,
        prompt      = STRING_TOKEN(STR_XHCI_INACTIVITY_L1E_PROMPT),
        help        = STRING_TOKEN(STR_XHCI_INACTIVITY_L1E_HELP),
        option text = STRING_TOKEN(STR_DISABLED),    value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_32_BB_CCLK),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_64_BB_CCLK),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_128_BB_CCLK), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_256_BB_CCLK), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_512_BB_CCLK), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_1024_BB_CCLK), value = 6, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_131072_BB_CCLK), value = 7, flags = RESET_REQUIRED;
     endoneof;

    oneof varid     = PCH_SETUP.XhciL1e,
        prompt      = STRING_TOKEN(STR_XHC_L1E_PROMPT),
        help        = STRING_TOKEN(STR_XHC_L1E_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.DisableComplianceMode,
      prompt      = STRING_TOKEN(STR_PCH_XHCI_COMPLIANCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_XHCI_COMPLIANCE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
    endif;                                              //G160-002(16)
endform;


#define CONTROLLER_INDEX 0 //USB SS Controller
  #include "UsbSetup\UsbSsController\UsbSsController.hfr"

    #define PORT_INDEX 0
      #include "UsbSetup\UsbSsController\Port\UsbSsPortConfiguration.hfr"

    #define PORT_INDEX 1
      #include "UsbSetup\UsbSsController\Port\UsbSsPortConfiguration.hfr"

    #define PORT_INDEX 2
      #include "UsbSetup\UsbSsController\Port\UsbSsPortConfiguration.hfr"

    #define PORT_INDEX 3
      #include "UsbSetup\UsbSsController\Port\UsbSsPortConfiguration.hfr"
#undef CONTROLLER_INDEX

#define CONTROLLER_INDEX 0 //USB SS Controller
  #include "UsbSetup\UsbHsController\UsbHsController.hfr"

    #define PORT_INDEX 0
      #include "UsbSetup\UsbHsController\Port\UsbHsPortConfiguration.hfr"

    #define PORT_INDEX 1
      #include "UsbSetup\UsbHsController\Port\UsbHsPortConfiguration.hfr"

    #define PORT_INDEX 2
      #include "UsbSetup\UsbHsController\Port\UsbHsPortConfiguration.hfr"

    #define PORT_INDEX 3
      #include "UsbSetup\UsbHsController\Port\UsbHsPortConfiguration.hfr"

#undef CONTROLLER_INDEX
