/** @file
  File name:    BUNIT_MSG_MAP_0.h
  Input File:   DNV_MRC.xlsx

  THIS FILE IS AUTO-GENERATED BY THE MSP TOOL. DO NOT CHANGE THIS CODE.

  If edits are needed in this file, they must be done via the MSP tool.

  If there is additional project-specific data required by the MSP, it
  can be placed in BUNIT_MSG_MAP_0.h, which is used for non-tool-generated
  data

  Includes register defines specific to a project.

  Copyright (c) 2005-2018 Intel Corporation. All rights reserved
  This software and associated documentation (if any) is furnished
  under a license and may only be used or copied in accordance
  with the terms of the license. Except as permitted by such
  license, no part of this software or documentation may be
  reproduced, stored in a retrieval system, or transmitted in any
  form or by any means without the express written consent of
  Intel Corporation.
**/
#ifndef _BUNIT_MSG_MAP_0_H_
#define _BUNIT_MSG_MAP_0_H_

#include "DataTypes.h"

#if USE_64_BIT_VARIABLES
#define UINTX UINT64
#else
#define UINTX UINT32
#endif

#define B_CR_MOT_HH_TIMER_SHADOW_BUNIT_MSG_MAP_0_REG       0x00004B00
#ifndef ASM_INC
typedef union {
  struct {
    //
    // N/A
    // 
    // Bits[45:0], RW/V, default = 0x0
    //
    UINTX mot_hh_timer_shadow : 46;
    //
    // Reserved
    // 
    // Bits[57:46], RO, default = 0x0
    //
    UINTX reserved_0 : 12;
    //
    // Specifies the MaxAllowedDelay value in the HH TSW SyncStartCMD message
    // 
    // Bits[61:58], RW, default = 0x0
    //
    UINTX tsw_maxalloweddelay : 4;
    //
    // [list]
    //               [*]0: Upon de-assertion of PSMI_Wipe signal, B-Unit will copy the
    // 46-bit HH Timer to the shadow register. This mode is used during PSMI trace Collect
    // mode on silicon.  
    //               [*]1: Upon de-assertion of PSMI_Wipe signal, B-Unit will copy the
    // shadow register value to the 46-bit Hammock Harbor Timer. This mode is used during
    // PSMI trace Replay mode on emulation. 
    //               [/list]
    // 
    // Bits[62:62], RW, default = 0x0
    //
    UINTX copy_direction : 1;
    //
    // When set, indicates that PSMI mode is enabled.
    // 
    // Bits[63:63], RW, default = 0x0
    //
    UINTX psmi_mode : 1;
  } Bits;
  UINTX Data;
} B_CR_MOT_HH_TIMER_SHADOW_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_PGCB_PWRGATE_PCE_BUNIT_MSG_MAP_0_REG          0x00004B10
#ifndef ASM_INC
typedef union {
  struct {
    //
    // N/A
    // 
    // Bits[0:0], RW, default = 0x1
    //
    UINTX pmcre : 1;
    //
    // Reserved
    // 
    // Bits[2:1], RO, default = 0x0
    //
    UINTX reserved_0 : 2;
    //
    // N/A
    // 
    // Bits[3:3], RW, default = 0x1
    //
    UINTX se : 1;
    //
    // Reserved
    // 
    // Bits[4:4], RO, default = 0x0
    //
    UINTX reserved_1 : 1;
    //
    // N/A
    // 
    // Bits[5:5], RW, default = 0x0
    //
    UINTX hae : 1;
    //
    // Reserved
    // 
    // Bits[31:6], RO, default = 0x0
    //
    UINTX reserved_2 : 26;
  } Bits;
  UINTX Data;
} B_CR_PGCB_PWRGATE_PCE_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_PGCB_PG_IDLE_TIMER_BUNIT_MSG_MAP_0_REG        0x00004B14
#ifndef ASM_INC
typedef union {
  struct {
    //
    // This is the minimum time from when all internal Idle conditions have been observed
    // to when PGCB starts the power gating sequence. The actual time is 2^value PGCB
    // clock cycles. 
    // 
    // Bits[3:0], RW, default = 0x2
    //
    UINTX cfg_pwrgate_holdoff : 4;
    //
    // Reserved
    // 
    // Bits[31:4], RO, default = 0x0
    //
    UINTX reserved_0 : 28;
  } Bits;
  UINTX Data;
} B_CR_PGCB_PG_IDLE_TIMER_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_PGCB_CLKGATE_DIS_BUNIT_MSG_MAP_0_REG          0x00004B18
#ifndef ASM_INC
typedef union {
  struct {
    //
    // 1 bit per domain. 
    //               [list]
    //               [*]Bit 0: sideband clk 
    //               [*]Bit 1: sa2xclk 
    //               [*]Bit 2: sa1xclk 
    //               [/list]
    //               Set to disable clock gating. Clear to enable clock gating.
    // 
    // Bits[2:0], RW, default = 0x0
    //
    UINTX cfg_clkgate_disabled : 3;
    //
    // Reserved
    // 
    // Bits[15:3], RO, default = 0x0
    //
    UINTX reserved_0 : 13;
    //
    // 1 bit per domain: 
    //               [list]
    //               [*]bit 16 = sideband clk 
    //               [*]bit 17 = sa2xclk 
    //               [*]bit 18 = sa1xclk 
    //               [/list]
    //               Set to disable trunk clock gating. Clear to enable trunk clock gating.
    // 
    // Bits[18:16], RW, default = 0x0
    //
    UINTX cfg_clkreq_ctl_disabled : 3;
    //
    // Reserved
    // 
    // Bits[23:19], RO, default = 0x0
    //
    UINTX reserved_1 : 5;
    //
    // Controls whether the PGCB's own clock can be gated. Set to disable PGCB clock
    // gating. Clear to enable PGCB clock gating. 
    // 
    // Bits[24:24], RW, default = 0x0
    //
    UINTX cfg_pgcb_clkgate_disabled : 1;
    //
    // Reserved
    // 
    // Bits[31:25], RO, default = 0x0
    //
    UINTX reserved_2 : 7;
  } Bits;
  UINTX Data;
} B_CR_PGCB_CLKGATE_DIS_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_PGCB_CG_IDLE_TIMER_BUNIT_MSG_MAP_0_REG        0x00004B1C
#ifndef ASM_INC
typedef union {
  struct {
    //
    // This is the minimum time from sideband clock request deassertion to when the clock
    // can be gated. The actual time is 2^value PGCB clock cycles. The PGCB clock frequency
    // is the same as the sa1xclk clock frequency. 
    // 
    // Bits[3:0], RW, default = 0x4
    //
    UINTX sbclk_cfg_clkgate_holdoff : 4;
    //
    // This is the minimum time from sa2xclk clock request deassertion to when the clock
    // can be gated. The actual time is 2^value PGCB clock cycles. The PGCB clock frequency
    // is the same as the sa1xclk clock frequency. 
    // 
    // Bits[7:4], RW, default = 0x4
    //
    UINTX sa2xclk_cfg_clkgate_holdoff : 4;
    //
    // This is the minimum time from sa1x clock request deassertion to when the clock
    // can be gated. The actual time is 2^value PGCB clock cycles. The PGCB clock frequency
    // is the same as the sa1x clock frequency. 
    // 
    // Bits[11:8], RW, default = 0x4
    //
    UINTX sa1xclk_cfg_clkgate_holdoff : 4;
    //
    // Reserved
    // 
    // Bits[31:12], RO, default = 0x0
    //
    UINTX reserved_0 : 20;
  } Bits;
  UINTX Data;
} B_CR_PGCB_CG_IDLE_TIMER_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_MCI_CTL_BUNIT_MSG_MAP_0_REG                   0x00004B20
#ifndef ASM_INC
typedef union {
  struct {
    //
    // N/A
    // 
    // Bits[0:0], RW, default = 0x0
    //
    UINTX uns_idi_op : 1;
    //
    // NonIDI access to MMIO.
    // 
    // Bits[1:1], RW, default = 0x0
    //
    UINTX pii_2_mmio : 1;
    //
    // MMIO Access for HIT Modified Snoop Response.
    // 
    // Bits[2:2], RW, default = 0x0
    //
    UINTX mmio_hitm : 1;
    //
    // N/A
    // 
    // Bits[3:3], RW, default = 0x0
    //
    UINTX mmio_wbmtoie : 1;
    //
    // N/A
    // 
    // Bits[4:4], RW, default = 0x0
    //
    UINTX mmio_clflush : 1;
    //
    // N/A
    // 
    // Bits[5:5], RW, default = 0x0
    //
    UINTX ia_hit_gsm : 1;
    //
    // FIXME: Meant for private, Intel only use. 
    // 	      Added IntelRsvd = true. Does that fix it?
    // 
    // Bits[6:6], RW, default = 0x0
    //
    UINTX reserved : 1;
    //
    // Userver only feature.
    // 
    // Bits[7:7], RW, default = 0x0
    //
    UINTX bram_wr_par : 1;
    //
    // Userver only feature.
    // 
    // Bits[8:8], RW, default = 0x0
    //
    UINTX bram_rd_par : 1;
    //
    // CRC error on DRAM read data
    // 
    // Bits[9:9], RW, default = 0x0
    //
    UINTX mc_rd_data_unc : 1;
    //
    // Reserved
    // 
    // Bits[63:10], RO, default = 0x0
    //
    UINTX reserved_0 : 54;
  } Bits;
  UINTX Data;
} B_CR_MCI_CTL_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_MCI_STATUS_BUNIT_MSG_MAP_0_REG                0x00004B28
#ifndef ASM_INC
typedef union {
  struct {
    //
    // MCA Error Code.  0x0005 - Parity Error.  0x009X - Memory read error (where X is
    // channel ID), 0x408 - All other errors 
    // 
    // Bits[15:0], RW/V, default = 0x0
    //
    UINTX mca_err_code : 16;
    //
    // Model Specific Error Code. 0x0000 - Unsupported IDI opcode, 0x0001 - NonIDI access
    // to MMIO, 0x0002 - MMIO Access HITM, 0x0003 - WBMTo* access to MMIO, 0x0004 - ClFlush
    // to MMIO, 0x0005 - IA hit to graphics stolen memory, 0x0006 - XUCode Software initiated
    // error, 0x0007 - BRAM write parity error, 0x0008 - BRAM read parity error, 0x0009
    // - DRAM uncorrectable ecrc error, 0x000A - DRAM correctable ecrc error 
    // 
    // Bits[31:16], RW/V, default = 0x0
    //
    UINTX model_specific_err_code : 16;
    //
    // Agent ID of request that had an ECC or BRAM error.
    // 
    // Bits[36:32], RW/V, default = 0x0
    //
    UINTX agent_id : 5;
    //
    // Parity Error on BRAM.
    // 
    // Bits[37:37], RW/V, default = 0x0
    //
    UINTX bram_err : 1;
    //
    // The number of corrected errors that have been received from the Dunit.
    // 
    // Bits[51:38], RW/V, default = 0x0
    //
    UINTX corrected_err_count : 14;
    //
    // Sets if the corrected error count is saturated to 3FFh and another corrected error
    // occurs. 
    // 
    // Bits[52:52], RW/V, default = 0x0
    //
    UINTX corrected_err_count_overflow : 1;
    //
    // Reserved. These bits correspond to S AR and Corrected Error Status indicator.
    //  They are all readonly and always return 0s 
    // 
    // Bits[56:53], RO, default = 0x0
    //
    UINTX reserved_0 : 4;
    //
    // PCC: When set, indicates the state of the processor might have been corrupted.
    // When clear, indicates the error did not affect the processor state. In BXT this
    // field is set whenever an error is logged. For Denverton, UC and PCC are not set
    // for correctable errors from the Dunit but uncorrectable errors will set both UC
    // and PCC. 
    // 
    // Bits[57:57], RW/V, default = 0x0
    //
    UINTX processor_context_corrupted : 1;
    //
    // ADDRV: When set, indicates that the value stored in the MCI_ADDR register is valid.
    // 
    // Bits[58:58], RW/V, default = 0x0
    //
    UINTX mci_status_addrv : 1;
    //
    // This field will be 0, except for XuCode written errors, which set this field to
    // 1. 
    // 
    // Bits[59:59], RW/V, default = 0x0
    //
    UINTX mci_status_miscv : 1;
    //
    // Error reporting has been enabled by the MCI_CTL register.
    // 
    // Bits[60:60], RW/V, default = 0x0
    //
    UINTX err_enabled : 1;
    //
    // UC: Indicates that an uncorrected error was received by the B-Unit. The source
    // of the uncorrected error can be any of those as indicated in the MCI_CTL register.
    // For BXT, when an error is logged, both UC and PCC are set to 1. In DNV, correctable
    // errors do not set UC and PCC. 
    // 
    // Bits[61:61], RW/V, default = 0x0
    //
    UINTX uncorrected_err : 1;
    //
    // Indicates a second error was received while the MCI Status Valid bit was set.
    // The B-Unit supports the Machine Check Overwrite rules for a Machine Check Overflow.
    // For the purpose of B-Unit error reporting, corrected errors or SERRORs sent from
    // the Dunit will be overwritten by any new errors received. The first uncorrected
    // error received will not be overwritten by any new errors received. 
    // 
    // Bits[62:62], RW/V, default = 0x0
    //
    UINTX err_overflow : 1;
    //
    // VAL: When set, indicates the information in the rest of this register is valid.
    // Software is responsible for clearing the VAL flag. 
    // 
    // Bits[63:63], RW/V, default = 0x0
    //
    UINTX mci_status_valid : 1;
  } Bits;
  UINTX Data;
} B_CR_MCI_STATUS_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_MCI_ADDR_BUNIT_MSG_MAP_0_REG                  0x00004B30
#ifndef ASM_INC
typedef union {
  struct {
    //
    // When ADDRV is set in the MCI_STATUS register, the memory or system address is
    // stored in this register. 
    // 
    // Bits[39:0], RW/V, default = 0x0
    //
    UINTX mca_address : 40;
    //
    // Reserved
    // 
    // Bits[63:40], RO, default = 0x0
    //
    UINTX reserved_0 : 24;
  } Bits;
  UINTX Data;
} B_CR_MCI_ADDR_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_MCI_MISC_BUNIT_MSG_MAP_0_REG                  0x00004B38
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Miscellaneous information. See register description.
    // 
    // Bits[63:0], RW/V, default = 0x0
    //
    UINTX misc : 64;
  } Bits;
  UINTX Data;
} B_CR_MCI_MISC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_MCI_CTL2_BUNIT_MSG_MAP_0_REG                  0x00004B40
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Specifies the value to use for the corrected error threshold.
    // 
    // Bits[14:0], RW, default = 0x0
    //
    UINTX corrected_error_count_threshold : 15;
    //
    // Reserved
    // 
    // Bits[29:15], RO, default = 0x0
    //
    UINTX reserved_0 : 15;
    //
    // This bit is set by software to enable the generation of corrected error interrupts.
    // 
    // Bits[30:30], RW, default = 0x0
    //
    UINTX corrected_error_interrupt_enable : 1;
    //
    // Reserved
    // 
    // Bits[63:31], RO, default = 0x0
    //
    UINTX reserved_1 : 33;
  } Bits;
  UINTX Data;
} B_CR_MCI_CTL2_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BIOSWR_CP_BUNIT_MSG_MAP_0_REG                 0x00004B50
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed write access to the BIOSWR_RAC,
    // BIOSWR_WAC, and BIOSWR_CP registers, based on the value from each agent's 6bit
    // SAI field. 
    // 
    // Bits[63:0], RW, default = 0xC0061010202
    //
    UINTX mem_range_ctrl_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_BIOSWR_CP_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BIOSWR_RAC_BUNIT_MSG_MAP_0_REG                0x00004B58
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed read access, based on each
    // agent's 6bit encoded SAI value. 
    // 
    // Bits[63:0], RW, default = 0x80000C0063010217
    //
    UINTX mem_range_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_BIOSWR_RAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BIOSWR_WAC_BUNIT_MSG_MAP_0_REG                0x00004B60
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed write access, based on each
    // agent's 6bit encoded SAI value. 
    // 
    // Bits[63:0], RW, default = 0xC00610C0212
    //
    UINTX mem_range_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_BIOSWR_WAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BSMRCP_BUNIT_MSG_MAP_0_REG                    0x00004B68
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed access to the BSMRRAC, BSMRWAC
    // and BSMRCP registers, based on the value from each agent's 6bit SAI field. 
    // 
    // Bits[63:0], RW, default = 0xC0061010202
    //
    UINTX smm_ctrl_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_BSMRCP_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BSMRRAC_BUNIT_MSG_MAP_0_REG                   0x00004B70
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[0:0], RW, default = 0x1
    //
    UINTX smm_sai_pol_0 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[1:1], RW, default = 0x1
    //
    UINTX smm_sai_pol_1 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[2:2], RW, default = 0x1
    //
    UINTX smm_sai_pol_2 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[3:3], RW, default = 0x0
    //
    UINTX smm_sai_pol_3 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[4:4], RW, default = 0x1
    //
    UINTX smm_sai_pol_4 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[5:5], RW, default = 0x0
    //
    UINTX smm_sai_pol_5 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[6:6], RO, default = 0x0
    //
    UINTX smm_sai_pol_6 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[7:7], RO, default = 0x0
    //
    UINTX smm_sai_pol_7 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[8:8], RW, default = 0x0
    //
    UINTX smm_sai_pol_8 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[9:9], RO, default = 0x0
    //
    UINTX smm_sai_pol_9 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[10:10], RO, default = 0x0
    //
    UINTX smm_sai_pol_10 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[11:11], RO, default = 0x0
    //
    UINTX smm_sai_pol_11 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[12:12], RW, default = 0x0
    //
    UINTX smm_sai_pol_12 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[13:13], RW, default = 0x0
    //
    UINTX smm_sai_pol_13 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[14:14], RO, default = 0x0
    //
    UINTX smm_sai_pol_14 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[15:15], RO, default = 0x0
    //
    UINTX smm_sai_pol_15 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[16:16], RW, default = 0x1
    //
    UINTX smm_sai_pol_16 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[17:17], RW, default = 0x0
    //
    UINTX smm_sai_pol_17 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[18:18], RO, default = 0x0
    //
    UINTX smm_sai_pol_18 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[19:19], RO, default = 0x0
    //
    UINTX smm_sai_pol_19 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[20:20], RO, default = 0x0
    //
    UINTX smm_sai_pol_20 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[21:21], RW, default = 0x0
    //
    UINTX smm_sai_pol_21 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[22:22], RO, default = 0x0
    //
    UINTX smm_sai_pol_22 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[23:23], RO, default = 0x0
    //
    UINTX smm_sai_pol_23 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[24:24], RW, default = 0x0
    //
    UINTX smm_sai_pol_24 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[25:25], RW, default = 0x0
    //
    UINTX smm_sai_pol_25 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[26:26], RW, default = 0x0
    //
    UINTX smm_sai_pol_26 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[27:27], RW, default = 0x0
    //
    UINTX smm_sai_pol_27 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[28:28], RW, default = 0x0
    //
    UINTX smm_sai_pol_28 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[29:29], RW, default = 0x1
    //
    UINTX smm_sai_pol_29 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[30:30], RW, default = 0x1
    //
    UINTX smm_sai_pol_30 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[31:31], RO, default = 0x0
    //
    UINTX smm_sai_pol_31 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[32:32], RW, default = 0x0
    //
    UINTX smm_sai_pol_32 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[33:33], RW, default = 0x0
    //
    UINTX smm_sai_pol_33 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[34:34], RW, default = 0x0
    //
    UINTX smm_sai_pol_34 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[35:35], RO, default = 0x0
    //
    UINTX smm_sai_pol_35 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[36:36], RW, default = 0x0
    //
    UINTX smm_sai_pol_36 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[37:37], RO, default = 0x0
    //
    UINTX smm_sai_pol_37 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[38:38], RW, default = 0x0
    //
    UINTX smm_sai_pol_38 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[39:39], RO, default = 0x0
    //
    UINTX smm_sai_pol_39 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[40:40], RW, default = 0x0
    //
    UINTX smm_sai_pol_40 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[41:41], RW, default = 0x0
    //
    UINTX smm_sai_pol_41 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[42:42], RW, default = 0x0
    //
    UINTX smm_sai_pol_42 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[43:43], RW, default = 0x0
    //
    UINTX smm_sai_pol_43 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[44:44], RW, default = 0x0
    //
    UINTX smm_sai_pol_44 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[45:45], RO, default = 0x0
    //
    UINTX smm_sai_pol_45 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[46:46], RO, default = 0x0
    //
    UINTX smm_sai_pol_46 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[47:47], RO, default = 0x0
    //
    UINTX smm_sai_pol_47 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[48:48], RW, default = 0x0
    //
    UINTX smm_sai_pol_48 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[49:49], RW, default = 0x0
    //
    UINTX smm_sai_pol_49 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[50:50], RW, default = 0x0
    //
    UINTX smm_sai_pol_50 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[51:51], RO, default = 0x0
    //
    UINTX smm_sai_pol_51 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[52:52], RO, default = 0x0
    //
    UINTX smm_sai_pol_52 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[53:53], RO, default = 0x0
    //
    UINTX smm_sai_pol_53 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[54:54], RW, default = 0x0
    //
    UINTX smm_sai_pol_54 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[55:55], RW, default = 0x0
    //
    UINTX smm_sai_pol_55 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[56:56], RW, default = 0x0
    //
    UINTX smm_sai_pol_56 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[57:57], RO, default = 0x0
    //
    UINTX smm_sai_pol_57 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[58:58], RO, default = 0x0
    //
    UINTX smm_sai_pol_58 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[59:59], RO, default = 0x0
    //
    UINTX smm_sai_pol_59 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[60:60], RO, default = 0x0
    //
    UINTX smm_sai_pol_60 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[61:61], RO, default = 0x0
    //
    UINTX smm_sai_pol_61 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[62:62], RO, default = 0x0
    //
    UINTX smm_sai_pol_62 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[63:63], RW, default = 0x0
    //
    UINTX smm_sai_pol_63 : 1;
  } Bits;
  UINTX Data;
} B_CR_BSMRRAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BSMRWAC_BUNIT_MSG_MAP_0_REG                   0x00004B78
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[0:0], RW, default = 0x1
    //
    UINTX smm_sai_pol_0 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[1:1], RW, default = 0x1
    //
    UINTX smm_sai_pol_1 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[2:2], RW, default = 0x1
    //
    UINTX smm_sai_pol_2 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[3:3], RW, default = 0x0
    //
    UINTX smm_sai_pol_3 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[4:4], RW, default = 0x1
    //
    UINTX smm_sai_pol_4 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[5:5], RW, default = 0x0
    //
    UINTX smm_sai_pol_5 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[6:6], RO, default = 0x0
    //
    UINTX smm_sai_pol_6 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[7:7], RO, default = 0x0
    //
    UINTX smm_sai_pol_7 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[8:8], RW, default = 0x0
    //
    UINTX smm_sai_pol_8 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[9:9], RO, default = 0x0
    //
    UINTX smm_sai_pol_9 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[10:10], RO, default = 0x0
    //
    UINTX smm_sai_pol_10 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[11:11], RO, default = 0x0
    //
    UINTX smm_sai_pol_11 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[12:12], RW, default = 0x0
    //
    UINTX smm_sai_pol_12 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[13:13], RW, default = 0x0
    //
    UINTX smm_sai_pol_13 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[14:14], RO, default = 0x0
    //
    UINTX smm_sai_pol_14 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[15:15], RO, default = 0x0
    //
    UINTX smm_sai_pol_15 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[16:16], RW, default = 0x1
    //
    UINTX smm_sai_pol_16 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[17:17], RW, default = 0x0
    //
    UINTX smm_sai_pol_17 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[18:18], RO, default = 0x0
    //
    UINTX smm_sai_pol_18 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[19:19], RO, default = 0x0
    //
    UINTX smm_sai_pol_19 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[20:20], RO, default = 0x0
    //
    UINTX smm_sai_pol_20 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[21:21], RW, default = 0x0
    //
    UINTX smm_sai_pol_21 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[22:22], RO, default = 0x0
    //
    UINTX smm_sai_pol_22 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[23:23], RO, default = 0x0
    //
    UINTX smm_sai_pol_23 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[24:24], RW, default = 0x0
    //
    UINTX smm_sai_pol_24 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[25:25], RW, default = 0x0
    //
    UINTX smm_sai_pol_25 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[26:26], RW, default = 0x0
    //
    UINTX smm_sai_pol_26 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[27:27], RW, default = 0x0
    //
    UINTX smm_sai_pol_27 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[28:28], RW, default = 0x0
    //
    UINTX smm_sai_pol_28 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[29:29], RW, default = 0x1
    //
    UINTX smm_sai_pol_29 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[30:30], RW, default = 0x1
    //
    UINTX smm_sai_pol_30 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[31:31], RO, default = 0x0
    //
    UINTX smm_sai_pol_31 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[32:32], RW, default = 0x0
    //
    UINTX smm_sai_pol_32 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[33:33], RW, default = 0x0
    //
    UINTX smm_sai_pol_33 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[34:34], RW, default = 0x0
    //
    UINTX smm_sai_pol_34 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[35:35], RO, default = 0x0
    //
    UINTX smm_sai_pol_35 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[36:36], RW, default = 0x0
    //
    UINTX smm_sai_pol_36 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[37:37], RO, default = 0x0
    //
    UINTX smm_sai_pol_37 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[38:38], RW, default = 0x0
    //
    UINTX smm_sai_pol_38 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[39:39], RO, default = 0x0
    //
    UINTX smm_sai_pol_39 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[40:40], RW, default = 0x0
    //
    UINTX smm_sai_pol_40 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[41:41], RW, default = 0x0
    //
    UINTX smm_sai_pol_41 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[42:42], RW, default = 0x0
    //
    UINTX smm_sai_pol_42 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[43:43], RW, default = 0x0
    //
    UINTX smm_sai_pol_43 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[44:44], RW, default = 0x0
    //
    UINTX smm_sai_pol_44 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[45:45], RO, default = 0x0
    //
    UINTX smm_sai_pol_45 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[46:46], RO, default = 0x0
    //
    UINTX smm_sai_pol_46 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[47:47], RO, default = 0x0
    //
    UINTX smm_sai_pol_47 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[48:48], RW, default = 0x0
    //
    UINTX smm_sai_pol_48 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[49:49], RW, default = 0x0
    //
    UINTX smm_sai_pol_49 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[50:50], RW, default = 0x0
    //
    UINTX smm_sai_pol_50 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[51:51], RO, default = 0x0
    //
    UINTX smm_sai_pol_51 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[52:52], RO, default = 0x0
    //
    UINTX smm_sai_pol_52 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[53:53], RO, default = 0x0
    //
    UINTX smm_sai_pol_53 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[54:54], RW, default = 0x0
    //
    UINTX smm_sai_pol_54 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[55:55], RW, default = 0x0
    //
    UINTX smm_sai_pol_55 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[56:56], RW, default = 0x0
    //
    UINTX smm_sai_pol_56 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[57:57], RO, default = 0x0
    //
    UINTX smm_sai_pol_57 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[58:58], RO, default = 0x0
    //
    UINTX smm_sai_pol_58 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[59:59], RO, default = 0x0
    //
    UINTX smm_sai_pol_59 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[60:60], RO, default = 0x0
    //
    UINTX smm_sai_pol_60 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[61:61], RO, default = 0x0
    //
    UINTX smm_sai_pol_61 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[62:62], RO, default = 0x0
    //
    UINTX smm_sai_pol_62 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the B-Unit
    // SMM Range from TSEGMB to BGSM1, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[63:63], RW, default = 0x0
    //
    UINTX smm_sai_pol_63 : 1;
  } Bits;
  UINTX Data;
} B_CR_BSMRWAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BDEFVTDPMR_CP_BUNIT_MSG_MAP_0_REG             0x00004B80
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed access to the BDEFVTDPMR_RAC,
    // BDEFVTDPMR_WAC and BDEFVTDPMR_CP, registers based on the value from each agent's
    // 6bit SAI field. 
    // 
    // Bits[63:0], RW, default = 0xC0061010202
    //
    UINTX defvtdpmr_ctrl_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_BDEFVTDPMR_CP_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BDEFVTDPMR_RAC_BUNIT_MSG_MAP_0_REG            0x00004B88
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[0:0], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_0 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[1:1], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_1 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[2:2], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_2 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[3:3], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_3 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[4:4], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_4 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[5:5], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_5 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[6:6], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_6 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[7:7], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_7 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[8:8], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_8 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[9:9], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_9 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[10:10], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_10 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[11:11], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_11 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[12:12], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_12 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[13:13], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_13 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[14:14], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_14 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[15:15], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_15 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[16:16], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_16 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[17:17], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_17 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[18:18], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_18 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[19:19], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_19 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[20:20], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_20 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[21:21], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_21 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[22:22], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_22 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[23:23], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_23 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[24:24], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_24 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[25:25], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_25 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[26:26], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_26 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[27:27], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_27 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[28:28], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_28 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[29:29], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_29 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[30:30], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_30 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[31:31], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_31 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[32:32], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_32 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[33:33], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_33 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[34:34], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_34 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[35:35], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_35 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[36:36], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_36 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[37:37], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_37 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[38:38], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_38 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[39:39], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_39 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[40:40], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_40 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[41:41], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_41 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[42:42], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_42 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[43:43], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_43 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[44:44], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_44 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[45:45], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_45 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[46:46], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_46 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[47:47], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_47 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[48:48], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_48 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[49:49], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_49 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[50:50], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_50 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[51:51], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_51 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[52:52], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_52 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[53:53], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_53 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[54:54], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_54 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[55:55], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_55 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[56:56], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_56 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[57:57], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_57 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[58:58], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_58 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[59:59], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_59 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[60:60], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_60 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[61:61], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_61 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[62:62], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_62 : 1;
    //
    // Bit vector used to determine which agents are allowed read access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[63:63], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_63 : 1;
  } Bits;
  UINTX Data;
} B_CR_BDEFVTDPMR_RAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_BDEFVTDPMR_WAC_BUNIT_MSG_MAP_0_REG            0x00004B90
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[0:0], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_0 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[1:1], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_1 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[2:2], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_2 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[3:3], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_3 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[4:4], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_4 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[5:5], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_5 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[6:6], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_6 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[7:7], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_7 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[8:8], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_8 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[9:9], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_9 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[10:10], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_10 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[11:11], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_11 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[12:12], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_12 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[13:13], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_13 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[14:14], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_14 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[15:15], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_15 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[16:16], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_16 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[17:17], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_17 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[18:18], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_18 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[19:19], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_19 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[20:20], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_20 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[21:21], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_21 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[22:22], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_22 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[23:23], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_23 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[24:24], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_24 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[25:25], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_25 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[26:26], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_26 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[27:27], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_27 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[28:28], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_28 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[29:29], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_29 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[30:30], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_30 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[31:31], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_31 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[32:32], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_32 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[33:33], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_33 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[34:34], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_34 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[35:35], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_35 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[36:36], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_36 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[37:37], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_37 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[38:38], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_38 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[39:39], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_39 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[40:40], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_40 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[41:41], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_41 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[42:42], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_42 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[43:43], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_43 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[44:44], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_44 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[45:45], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_45 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[46:46], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_46 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[47:47], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_47 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[48:48], RW, default = 0x1
    //
    UINTX defvtdpmr_sai_pol_48 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[49:49], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_49 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[50:50], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_50 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[51:51], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_51 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[52:52], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_52 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[53:53], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_53 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[54:54], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_54 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[55:55], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_55 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[56:56], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_56 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[57:57], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_57 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[58:58], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_58 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[59:59], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_59 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[60:60], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_60 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[61:61], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_61 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[62:62], RO, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_62 : 1;
    //
    // Bit vector used to determine which agents are allowed write access to the Default
    // VTd PMR Low and High memory ranges, based on each agent's 6bit encoded SAI value.
    // 
    // Bits[63:63], RW, default = 0x0
    //
    UINTX defvtdpmr_sai_pol_63 : 1;
  } Bits;
  UINTX Data;
} B_CR_BDEFVTDPMR_WAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_IA_GT_UNTRUSTED_CP_BUNIT_MSG_MAP_0_REG        0x00004B98
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed write access to the IA_GT_UNTRUSTED_RAC
    // IA_GT_UNTRUSTED_WAC and IA_GT_UNTRUSTED_CP registers based on the value from each
    // agent's 6bit SAI field. 
    // 
    // Bits[63:0], RW, default = 0xC0061010202
    //
    UINTX mem_range_ctrl_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_IA_GT_UNTRUSTED_CP_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_IA_GT_UNTRUSTED_RAC_BUNIT_MSG_MAP_0_REG       0x00004BA0
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed read access based on each
    // agent's 6bit encoded SAI value. 
    // 
    // Bits[63:0], RW, default = 0x80011C0063010317
    //
    UINTX mem_range_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_IA_GT_UNTRUSTED_RAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC

#define B_CR_IA_GT_UNTRUSTED_WAC_BUNIT_MSG_MAP_0_REG       0x00004BA8
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed write access based on each
    // agent's 6bit encoded SAI value. 
    // 
    // Bits[63:0], RW, default = 0x11C0061000317
    //
    UINTX mem_range_pol : 64;
  } Bits;
  UINTX Data;
} B_CR_IA_GT_UNTRUSTED_WAC_BUNIT_MSG_MAP_0_STRUCT;
#endif // ASM_INC


#endif // _BUNIT_MSG_MAP_0_H_
