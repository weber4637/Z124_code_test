/** @file
  File name:    SUNIT.h
  Input File:   DNV_MRC.xlsx

  THIS FILE IS AUTO-GENERATED BY THE MSP TOOL. DO NOT CHANGE THIS CODE.

  If edits are needed in this file, they must be done via the MSP tool.

  If there is additional project-specific data required by the MSP, it
  can be placed in SUNIT.h, which is used for non-tool-generated
  data

  Includes register defines specific to a project.

  Copyright (c) 2005-2018 Intel Corporation. All rights reserved
  This software and associated documentation (if any) is furnished
  under a license and may only be used or copied in accordance
  with the terms of the license. Except as permitted by such
  license, no part of this software or documentation may be
  reproduced, stored in a retrieval system, or transmitted in any
  form or by any means without the express written consent of
  Intel Corporation.
**/
#ifndef _SUNIT_H_
#define _SUNIT_H_

#include "DataTypes.h"

#if USE_64_BIT_VARIABLES
#define UINTX UINT64
#else
#define UINTX UINT32
#endif

#define IDI_AGENT_0_C2U_ARB_CTL_SUNIT_REG                  0x00005000
#ifndef ASM_INC
typedef union {
  struct {
    //
    // C2U Request arbiter weight
    // 
    // Bits[2:0], RW, default = 0x0
    //
    UINTX c2u_req_weight : 3;
    //
    // C2U Data arbiter weight
    // 
    // Bits[5:3], RW, default = 0x0
    //
    UINTX c2u_data_weight : 3;
    //
    // Reserved
    // 
    // Bits[31:6], RO, default = 0x0
    //
    UINTX reserved_0 : 26;
  } Bits;
  UINTX Data;
} IDI_AGENT_0_C2U_ARB_CTL_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_AGENT_1_C2U_ARB_CTL_SUNIT_REG                  0x00005004
#ifndef ASM_INC
typedef union {
  struct {
    //
    // C2U Request arbiter weight
    // 
    // Bits[2:0], RW, default = 0x0
    //
    UINTX c2u_req_weight : 3;
    //
    // C2U Data arbiter weight
    // 
    // Bits[5:3], RW, default = 0x0
    //
    UINTX c2u_data_weight : 3;
    //
    // Reserved
    // 
    // Bits[31:6], RO, default = 0x0
    //
    UINTX reserved_0 : 26;
  } Bits;
  UINTX Data;
} IDI_AGENT_1_C2U_ARB_CTL_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_BYPASS_CTL_SUNIT_REG                           0x00005008
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Enable C2U Request arbiter bypass
    // 
    // Bits[0:0], RW, default = 0x0
    //
    UINTX c2u_req_arb_bypass : 1;
    //
    // Enable C2U Request staging flop bypass
    // 
    // Bits[1:1], RW, default = 0x0
    //
    UINTX c2u_req_staging_bypass : 1;
    //
    // Enable U2C Data arbiter bypass
    // 
    // Bits[2:2], RW, default = 0x0
    //
    UINTX u2c_data_arb_bypass : 1;
    //
    // Enable U2C Data staging flop bypass
    // 
    // Bits[3:3], RW, default = 0x0
    //
    UINTX u2c_data_staging_bypass : 1;
    //
    // Reserved
    // 
    // Bits[31:4], RO, default = 0x0
    //
    UINTX reserved_0 : 28;
  } Bits;
  UINTX Data;
} IDI_BYPASS_CTL_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_AGENT_0_CREDIT_CTL_SUNIT_REG                   0x00005010
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Number of C2U Request credits that the SUnit initializes the specified IDI agent
    // id to after an IDI start request. Setting this CR to a value greater than the
    // implementation supports is illegal. 
    // 
    // Bits[5:0], RW, default = 0x2
    //
    UINTX c2u_req_credit_init : 6;
    //
    // Number of C2U Data credits that the SUnit initializes the specified core IDI agent
    // id to after an IDI start request. Setting this CR to a value greater than the
    // implementation supports is illegal. 
    // 
    // Bits[11:6], RW, default = 0x2
    //
    UINTX c2u_data_credit_init : 6;
    //
    // Reserved
    // 
    // Bits[31:12], RO, default = 0x0
    //
    UINTX reserved_0 : 20;
  } Bits;
  UINTX Data;
} IDI_AGENT_0_CREDIT_CTL_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_AGENT_1_CREDIT_CTL_SUNIT_REG                   0x00005014
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Number of C2U Request credits that the SUnit initializes the specified IDI agent
    // id to after an IDI start request. Setting this CR to a value greater than the
    // implementation supports is illegal. 
    // 
    // Bits[5:0], RW, default = 0x2
    //
    UINTX c2u_req_credit_init : 6;
    //
    // Number of C2U Data credits that the SUnit initializes the specified core IDI agent
    // id to after an IDI start request. Setting this CR to a value greater than the
    // implementation supports is illegal. 
    // 
    // Bits[11:6], RW, default = 0x2
    //
    UINTX c2u_data_credit_init : 6;
    //
    // Reserved
    // 
    // Bits[31:12], RO, default = 0x0
    //
    UINTX reserved_0 : 20;
  } Bits;
  UINTX Data;
} IDI_AGENT_1_CREDIT_CTL_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_FABRIC_CREDIT_CTL_SUNIT_REG                    0x00005018
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Number of U2C Request credits that the SUnit initializes the uncore to for the
    // specified IDI agent id after an IDI start request. Setting this CR to a value
    // greater than the implementation supports is illegal. 
    // 
    // Bits[5:0], RW, default = 0x6
    //
    UINTX u2c_req_credit_init : 6;
    //
    // Number of U2C Data credits that the SUnit initializes the uncore to for the specified
    // IDI agent id after an IDI start request. Setting this CR to a value greater than
    // the implementation supports is illegal. 
    // 
    // Bits[11:6], RW, default = 0x6
    //
    UINTX u2c_data_credit_init : 6;
    //
    // Number of U2C Response credits that the SUnit initializes the uncore to for the
    // specified IDI agent id after an IDI start request. Setting this CR to a value
    // greater than the implementation supports is illegal. 
    // 
    // Bits[17:12], RW, default = 0xC
    //
    UINTX u2c_rsp_credit_init : 6;
    //
    // Reserved
    // 
    // Bits[31:18], RO, default = 0x0
    //
    UINTX reserved_0 : 14;
  } Bits;
  UINTX Data;
} IDI_FABRIC_CREDIT_CTL_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_AGENT_0_EVENTS_SUNIT_REG                       0x00005020
#ifndef ASM_INC
typedef union {
  struct {
    //
    // IOSFSB GSA_STARTIDI_REQ message has been received. All SUnit IDI shared credit
    // counters will deassert reset. 
    // 
    // Bits[0:0], WO, default = 0x0
    //
    UINTX gsa_startidi_req : 1;
    //
    // IOSFSB GSA_STARTIDI_REQ_ACK message has been sent to GSA. 
    // 
    // Bits[1:1], RO/V, default = 0x0
    //
    UINTX gsa_startidi_req_ack : 1;
    //
    // IOSFSB GSA_IDI_ACTIVE_REQ message has been received. IDI FSM will transition into
    // IDI ACTIVE. 
    // 
    // Bits[2:2], WO, default = 0x0
    //
    UINTX gsa_idi_active_req : 1;
    //
    // IOSFSB GSA_IDI_ACTIVE_ACK message has been sent to GSA.
    // 
    // Bits[3:3], RO/V, default = 0x0
    //
    UINTX gsa_idi_active_ack : 1;
    //
    // IOSFSB GSA_STOP_IDI_REQ message has been received. All IDI credit counters will
    // be reset. 
    // 
    // Bits[4:4], WO, default = 0x0
    //
    UINTX gsa_stopidi_req : 1;
    //
    // IOSFSB GSA_STOPIDI_ACK message has been sent to GSA.
    // 
    // Bits[5:5], RO/V, default = 0x0
    //
    UINTX gsa_stopidi_ack : 1;
    //
    // Reserved
    // 
    // Bits[31:6], RO, default = 0x0
    //
    UINTX reserved_0 : 26;
  } Bits;
  UINTX Data;
} IDI_AGENT_0_EVENTS_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_AGENT_1_EVENTS_SUNIT_REG                       0x00005024
#ifndef ASM_INC
typedef union {
  struct {
    //
    // IOSFSB GSA_STARTIDI_REQ message has been received. All SUnit IDI shared credit
    // counters will deassert reset. 
    // 
    // Bits[0:0], WO, default = 0x0
    //
    UINTX gsa_startidi_req : 1;
    //
    // IOSFSB GSA_STARTIDI_REQ_ACK message has been sent to GSA. 
    // 
    // Bits[1:1], RO/V, default = 0x0
    //
    UINTX gsa_startidi_req_ack : 1;
    //
    // IOSFSB GSA_IDI_ACTIVE_REQ message has been received. IDI FSM will transition into
    // IDI ACTIVE. 
    // 
    // Bits[2:2], WO, default = 0x0
    //
    UINTX gsa_idi_active_req : 1;
    //
    // IOSFSB GSA_IDI_ACTIVE_ACK message has been sent to GSA.
    // 
    // Bits[3:3], RO/V, default = 0x0
    //
    UINTX gsa_idi_active_ack : 1;
    //
    // IOSFSB GSA_STOP_IDI_REQ message has been received. All IDI credit counters will
    // be reset. 
    // 
    // Bits[4:4], WO, default = 0x0
    //
    UINTX gsa_stopidi_req : 1;
    //
    // IOSFSB GSA_STOPIDI_ACK message has been sent to GSA.
    // 
    // Bits[5:5], RO/V, default = 0x0
    //
    UINTX gsa_stopidi_ack : 1;
    //
    // Reserved
    // 
    // Bits[31:6], RO, default = 0x0
    //
    UINTX reserved_0 : 26;
  } Bits;
  UINTX Data;
} IDI_AGENT_1_EVENTS_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_AGENT_0_STAT_SUNIT_REG                         0x00005030
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Sunit IDI startup/shutdown state. 00  IDI_SHUTDOWN 01  IDI_CREDIT_WAIT 10  IDI_CREDIT_INIT
    // 11  IDI_ACTIVE 
    // 
    // Bits[1:0], RO, default = 0x0
    //
    UINTX idi_fsm_state : 2;
    //
    // Module specific IDI credit counter reset is deasserted. Credit initialization
    // between GLM and SUnit is complete. Only valid when IDI_FSM_STATE is equal to IDI_INIT
    // or IDI_ACTIVE. 
    // 
    // Bits[4:2], RO, default = 0x0
    //
    UINTX core_credit_xfer_done : 3;
    //
    // Reserved
    // 
    // Bits[31:5], RO, default = 0x0
    //
    UINTX reserved_0 : 27;
  } Bits;
  UINTX Data;
} IDI_AGENT_0_STAT_SUNIT_STRUCT;
#endif // ASM_INC

#define IDI_AGENT_1_STAT_SUNIT_REG                         0x00005034
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Sunit IDI startup/shutdown state. 00  IDI_SHUTDOWN 01  IDI_CREDIT_WAIT 10  IDI_CREDIT_INIT
    // 11  IDI_ACTIVE 
    // 
    // Bits[1:0], RO, default = 0x0
    //
    UINTX idi_fsm_state : 2;
    //
    // Module specific IDI credit counter reset is deasserted. Credit initialization
    // between GLM and SUnit is complete. Only valid when IDI_FSM_STATE is equal to IDI_INIT
    // or IDI_ACTIVE. 
    // 
    // Bits[4:2], RO, default = 0x0
    //
    UINTX core_credit_xfer_done : 3;
    //
    // Reserved
    // 
    // Bits[31:5], RO, default = 0x0
    //
    UINTX reserved_0 : 27;
  } Bits;
  UINTX Data;
} IDI_AGENT_1_STAT_SUNIT_STRUCT;
#endif // ASM_INC

#define CTRL_SUNIT_REG                                     0x00005038
#ifndef ASM_INC
typedef union {
  struct {
    //
    // TBD BypassClkGateEnable: Enable clock gating for when core freq  SUnit freq
    // 
    // Bits[0:0], RW, default = 0x0
    //
    UINTX bypassclk_gate_en : 1;
    //
    // TBD MasterClkGateEnable: Master enable signal for Sunit clock gating.
    // 
    // Bits[1:1], RW, default = 0x0
    //
    UINTX clk_gate_en : 1;
    //
    // BEClkGateEnable: Enables clock gating for the byte enable storage  when the MasterClkGateEnable
    // bit is set. Should be set in normal operation. 
    // 
    // Bits[31:2], RW, default = 0x0
    //
    UINTX reserved_0 : 30;
  } Bits;
  UINTX Data;
} CTRL_SUNIT_STRUCT;
#endif // ASM_INC

#define SECURITY_STAT0_SUNIT_REG                           0x00005040
#ifndef ASM_INC
typedef union {
  struct {
    //
    // First SAI violation detected
    // 
    // Bits[0:0], RW/V, default = 0x0
    //
    UINTX vio_more_than_0 : 1;
    //
    // More than one SAI violation detected
    // 
    // Bits[1:1], RW/V, default = 0x0
    //
    UINTX vio_more_than_1 : 1;
    //
    // Missing bits not found in register description spreadsheet.
    // Bits[7:2], Unknown, default = Unknown
    //
    UINTX missing_from_register_description : 6;
    //
    // SAI bits that triggered the violation
    // 
    // Bits[15:8], RW/V, default = 0x0
    //
    UINTX vio_sai : 8;
    //
    // placeholder for future: Toggles sending of SAI violation messages on sideband
    // 
    // Bits[16:16], RO, default = 0x0
    //
    UINTX sai_vio_msg_enable : 1;
    //
    // Missing bits not found in register description spreadsheet.
    // Bits[31:17], Unknown, default = Unknown
    //
    UINTX missing_from_register_description_1 : 15;
  } Bits;
  UINTX Data;
} SECURITY_STAT0_SUNIT_STRUCT;
#endif // ASM_INC

#define SECURITY_STAT1_SUNIT_REG                           0x00005044
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Opcode that triggered the violation
    // 
    // Bits[7:0], RW/V, default = 0x0
    //
    UINTX vio_opc : 8;
    //
    // Port that sent the violation
    // 
    // Bits[15:8], RW/V, default = 0x0
    //
    UINTX vio_src_port : 8;
    //
    // Address that triggered the violation
    // 
    // Bits[31:16], RW/V, default = 0x0
    //
    UINTX vio_addr : 16;
  } Bits;
  UINTX Data;
} SECURITY_STAT1_SUNIT_STRUCT;
#endif // ASM_INC

#define CREG_CP_SUNIT_REG                                  0x00005050
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed access to the Sunit SREG
    // based on the value from the agents 6 bit SAI field. This register is selfreferential
    // the access policy provided applies to access to the control register itself. 
    // 
    // Bits[63:0], RW, default = 0x10000000000202
    //
    UINTX creg_cp : 64;
  } Bits;
  UINTX Data;
} CREG_CP_SUNIT_STRUCT;
#endif // ASM_INC

#define CREG_RAC_SUNIT_REG                                 0x00005058
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed Rd access to the Sunit CREG
    // based on the value from the agents 6 bit SAI field. 
    // 
    // Bits[63:0], RW, default = 0x10000000000202
    //
    UINTX creg_rac : 64;
  } Bits;
  UINTX Data;
} CREG_RAC_SUNIT_STRUCT;
#endif // ASM_INC

#define CREG_WAC_SUNIT_REG                                 0x00005060
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Bit vector used to determine which agents are allowed Wr access to the Sunit CREG
    // based on the value from the agents 6 bit SAI field. 
    // 
    // Bits[63:0], RW, default = 0x10000000000202
    //
    UINTX s_u_creg_wac : 64;
  } Bits;
  UINTX Data;
} CREG_WAC_SUNIT_STRUCT;
#endif // ASM_INC


#endif // _SUNIT_H_
