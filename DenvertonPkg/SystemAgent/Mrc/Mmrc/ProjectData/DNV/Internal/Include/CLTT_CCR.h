/** @file
  File name:    CLTT_CCR.h
  Input File:   DNV_MRC.xlsx

  THIS FILE IS AUTO-GENERATED BY THE MSP TOOL. DO NOT CHANGE THIS CODE.

  If edits are needed in this file, they must be done via the MSP tool.

  If there is additional project-specific data required by the MSP, it
  can be placed in CLTT_CCR.h, which is used for non-tool-generated
  data

  Includes register defines specific to a project.

  Copyright (c) 2005-2018 Intel Corporation. All rights reserved
  This software and associated documentation (if any) is furnished
  under a license and may only be used or copied in accordance
  with the terms of the license. Except as permitted by such
  license, no part of this software or documentation may be
  reproduced, stored in a retrieval system, or transmitted in any
  form or by any means without the express written consent of
  Intel Corporation.
**/
#ifndef _CLTT_CCR_H_
#define _CLTT_CCR_H_

#include "DataTypes.h"

#if USE_64_BIT_VARIABLES
#define UINTX UINT64
#else
#define UINTX UINT32
#endif

#define CLTT_STS_CLTT_CCR_REG                              0x00000000
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Indicates that HW is busy completing an SMBusCmd
    // 
    // Bits[0:0], RO/V, default = 0x0
    //
    UINTX busy : 1;
    //
    // Indicates that HW has completed the SMBusCmd
    // 
    // Bits[1:1], RO/V, default = 0x0
    //
    UINTX done : 1;
    //
    // N/A
    // 
    // Bits[31:2], RO, default = 0x0
    //
    UINTX rsvd : 30;
  } Bits;
  UINTX Data;
} CLTT_STS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C0D0CFGSTS_CLTT_CCR_REG                            0x00000010
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x0
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C0D0CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C0D1CFGSTS_CLTT_CCR_REG                            0x00000014
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x1
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C0D1CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C0D2CFGSTS_CLTT_CCR_REG                            0x00000018
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x0
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C0D2CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C0D3CFGSTS_CLTT_CCR_REG                            0x0000001C
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x0
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C0D3CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C1D0CFGSTS_CLTT_CCR_REG                            0x00000020
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x2
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C1D0CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C1D1CFGSTS_CLTT_CCR_REG                            0x00000024
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x3
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C1D1CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C1D2CFGSTS_CLTT_CCR_REG                            0x00000028
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x0
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C1D2CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C1D3CFGSTS_CLTT_CCR_REG                            0x0000002C
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Data retrieved from SMBus
    // 
    // Bits[15:0], RO/V, default = 0x0
    //
    UINTX read_data : 16;
    //
    // N/A
    // 
    // Bits[23:16], RO, default = 0x0
    //
    UINTX rsvd : 8;
    //
    // SMBus Slave ID
    // 
    // Bits[30:24], RW, default = 0x0
    //
    UINTX slave_id : 7;
    //
    // Channel DIMM is Populated
    // 
    // Bits[31:31], RW, default = 0x0
    //
    UINTX valid : 1;
  } Bits;
  UINTX Data;
} C1D3CFGSTS_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C0TEMPSTS0_CLTT_CCR_REG                            0x00000030
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Read_Temp_Data0: Data retrieved from DIMM0.
    // 
    // Bits[15:0], RW/V/L, default = 0x0
    //
    UINTX read_temp_data0 : 16;
    //
    // Read_Temp_Data1: Data retrieved from DIMM1.
    // 
    // Bits[31:16], RW/V/L, default = 0x0
    //
    UINTX read_temp_data1 : 16;
  } Bits;
  UINTX Data;
} C0TEMPSTS0_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C0TEMPSTS1_CLTT_CCR_REG                            0x00000034
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Read_Temp_Data2: Data retrieved from DIMM2.
    // 
    // Bits[15:0], RW/V/L, default = 0x0
    //
    UINTX read_temp_data2 : 16;
    //
    // Read_Temp_Data3: Data retrieved from DIMM3.
    // 
    // Bits[31:16], RW/V/L, default = 0x0
    //
    UINTX read_temp_data3 : 16;
  } Bits;
  UINTX Data;
} C0TEMPSTS1_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C1TEMPSTS0_CLTT_CCR_REG                            0x00000038
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Read_Temp_Data0: Data retrieved from DIMM0.
    // 
    // Bits[15:0], RW/V/L, default = 0x0
    //
    UINTX read_temp_data0 : 16;
    //
    // Read_Temp_Data1: Data retrieved from DIMM1.
    // 
    // Bits[31:16], RW/V/L, default = 0x0
    //
    UINTX read_temp_data1 : 16;
  } Bits;
  UINTX Data;
} C1TEMPSTS0_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define C1TEMPSTS1_CLTT_CCR_REG                            0x0000003C
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Read_Temp_Data2: Data retrieved from DIMM2.
    // 
    // Bits[15:0], RW/V/L, default = 0x0
    //
    UINTX read_temp_data2 : 16;
    //
    // Read_Temp_Data3: Data retrieved from DIMM3.
    // 
    // Bits[31:16], RW/V/L, default = 0x0
    //
    UINTX read_temp_data3 : 16;
  } Bits;
  UINTX Data;
} C1TEMPSTS1_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define HCFG_CLTT_CCR_REG                                  0x00000040
#ifndef ASM_INC
typedef union {
  struct {
    //
    // When set, the SMB Host Controller interface is enabled to execute commands. The
    // HST_INT_EN bit needs to be enabled in order for the SMB Host Controller to interrupt
    // or SMI#. Additionally, the SMB Host Controller will not respond to any new requests
    // until all interrupt requests have been cleared. 
    // 
    // Bits[0:0], RW/V, default = 0x0
    //
    UINTX hst_en : 1;
    //
    // When this bit is set, any source of an SMB interrupt will instead be routed to
    // generate an SMI#. Refer to Section 6.7 (Interrupts/SMI#) for details. 
    // 
    // Bits[1:1], RW, default = 0x0
    //
    UINTX smb_smi_en : 1;
    //
    // When this bit is 1, the SMB Controller is enabled to communicate with I2C devices.
    // This will change the formatting of some commands. When this bit is 0, behavior
    // is for SMBus. 
    // 
    // Bits[2:2], RW, default = 0x0
    //
    UINTX i2c_en : 1;
    //
    // Soft SMBUS Reset: When this bit is 1, the SMbus state machine and logic in PCH
    // is reset. The HW will reset this bit to 0 when reset operation is completed. 
    // 
    // Bits[3:3], RW/V, default = 0x0
    //
    UINTX ssreset : 1;
    //
    // N/A
    // 
    // Bits[4:4], RW/O, default = 0x0
    //
    UINTX spd_write_disable : 1;
    //
    // N/A
    // 
    // Bits[7:5], RO, default = 0x0
    //
    UINTX rsvd : 3;
  } Bits;
  UINTX Data;
} HCFG_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define CSMBM_CLTT_CCR_REG                                 0x00000044
#ifndef ASM_INC
typedef union {
  struct {
    //
    // This is the bit enables CLTT HW Agent mode for the Punit/Pcode use.
    // 
    // Bits[0:0], RW, default = 0x1
    //
    UINTX cltt_hw_mode : 1;
    //
    // This bit when set to 1 allows C0TEMPSTS and C1TEMPSTS register to be written by
    // an external agent. 
    // 
    // Bits[1:1], RW, default = 0x0
    //
    UINTX temp_status_we : 1;
    //
    // N/A
    // 
    // Bits[31:2], RO, default = 0x0
    //
    UINTX rsvd : 30;
  } Bits;
  UINTX Data;
} CSMBM_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define GPC0_LO_CLTT_CCR_REG                               0x00000070
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x200202
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} GPC0_LO_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define GPC0_HI_CLTT_CCR_REG                               0x00000074
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x600
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} GPC0_HI_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define WAC0_LO_CLTT_CCR_REG                               0x00000078
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x200202
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} WAC0_LO_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define WAC0_HI_CLTT_CCR_REG                               0x0000007C
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x600
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} WAC0_HI_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define RAC0_LO_CLTT_CCR_REG                               0x00000080
#ifndef ASM_INC
typedef union {
  struct {
    //
    // All Agents can read registers.
    // 
    // Bits[31:0], RW, default = 0xFFFFFFFF
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} RAC0_LO_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define RAC0_HI_CLTT_CCR_REG                               0x00000084
#ifndef ASM_INC
typedef union {
  struct {
    //
    // All Agents can read registers.
    // 
    // Bits[31:0], RW, default = 0xFFFFFFFF
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} RAC0_HI_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define GPC1_LO_CLTT_CCR_REG                               0x00000088
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x200202
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} GPC1_LO_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define GPC1_HI_CLTT_CCR_REG                               0x0000008C
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x600
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} GPC1_HI_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define WAC1_LO_CLTT_CCR_REG                               0x00000090
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x200202
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} WAC1_LO_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define WAC1_HI_CLTT_CCR_REG                               0x00000094
#ifndef ASM_INC
typedef union {
  struct {
    //
    // Only SOC Trusted Agents - uCode, Punit, PMC, DFx-red
    // 
    // Bits[31:0], RW, default = 0x600
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} WAC1_HI_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define RAC1_LO_CLTT_CCR_REG                               0x00000098
#ifndef ASM_INC
typedef union {
  struct {
    //
    // All Agents can read registers.
    // 
    // Bits[31:0], RW, default = 0xFFFFFFFF
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} RAC1_LO_CLTT_CCR_STRUCT;
#endif // ASM_INC

#define RAC1_HI_CLTT_CCR_REG                               0x0000009C
#ifndef ASM_INC
typedef union {
  struct {
    //
    // All Agents can read registers.
    // 
    // Bits[31:0], RW, default = 0xFFFFFFFF
    //
    UINTX trusted_idx : 32;
  } Bits;
  UINTX Data;
} RAC1_HI_CLTT_CCR_STRUCT;
#endif // ASM_INC


#endif // _CLTT_CCR_H_
