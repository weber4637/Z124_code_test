
























































































DefinitionBlock("SpsNm.aml", "SSDT", 2, "INTEL", "SpsNm   ", 2)
{
  External(\HWEN, FieldUnitObj)       
  External(\PETE, IntObj)
  External(\PSLM, PkgObj)
  External(\TSLM, PkgObj)

  External(\_SB.PRAD, DeviceObj)

  External(\_PR.CPU0, DeviceObj)
  External(\_PR.CPU1, DeviceObj)
  External(\_PR.CPU2, DeviceObj)
  External(\_PR.CPU3, DeviceObj)
  External(\_PR.CPU4, DeviceObj)
  External(\_PR.CPU5, DeviceObj)
  External(\_PR.CPU6, DeviceObj)
  External(\_PR.CPU7, DeviceObj)
  External(\_PR.CPU8, DeviceObj)
  External(\_PR.CPU9, DeviceObj)
  External(\_PR.CPUA, DeviceObj)
  External(\_PR.CPUB, DeviceObj)
  External(\_PR.CPUC, DeviceObj)
  External(\_PR.CPUD, DeviceObj)
  External(\_PR.CPUE, DeviceObj)
  External(\_PR.CPUF, DeviceObj)


  External(\_SB.PCI0, DeviceObj)
  External(\_SB.PCI0.HECI, DeviceObj)
  External(\_SB.PCI0.HEC2, DeviceObj)

  Scope(\)
  {

    Name(PURA, 0)
    Name(PURB, 0)
    Name(PURE, 0)

    Name(THNU, 0x800)
  }

  Scope(\_SB.PCI0.HECI)
  {
    
    
    
    
    OperationRegion(MFS1, PCI_Config, 0x40, 4)
    Field(MFS1, DWordAcc, NoLock, Preserve)
    {
      MEFS, 32
    }
    
    
    
    Method(_STA, 0)
    {
       
      
      If (LEqual(MEFS, 0xFFFFFFFF)) 
      {
        Return(0x00)
      }
      Return(0x0F)
    }
  }

  Scope(\_SB.PCI0.HEC2)
  {
    
    
    
    
    
    
    
    
    Method(_STA, 0)
    {
      Name(H2ST, 0x04)
       
      
      Return(H2ST)
    }

    
    
    
    
    
    
    
    OperationRegion(H2CS, SystemMemory, 0x8000000080000000, 0x10)
    Field(H2CS, DWordAcc, NoLock, Preserve)
    {
      CBWW,32, 
      
      HIE, 1,
      HIS, 1,
      HIG, 1,
      HRD, 1,
      HRS, 1,
         , 3,
      HRP, 8, 
      HWP, 8, 
      HBD, 8, 
      CBRW,32, 
      
      MIE, 1,
      MIS, 1,
      MIG, 1,
      MRD, 1,
      MRS, 1,
         , 3,
      MRP, 8, 
      MWP, 8, 
      MBD, 8  
    }

    
    
    
    Method(_INI, 0, Serialized)
    {
      
      HWAK()
    }

    
    
    
    Method(HWAK, 0, Serialized)
    {
      
      If (And(_STA, 0x08)) 
      {
        Store(1, HRD) 
        Store(1, HIE) 
        Store(1, HIG) 
      }
    }

    
    
    
    Method(HPTS, 0, Serialized)
    {
      
      If (And(_STA, 0x08)) 
      {
        Store(0, HIE) 
        Store(0, HRD) 
        Store(1, HIG) 
      }
    }

    
    
    
    
    
    Method(SEND, 1, Serialized)
    {
      
      
      If (LAnd(HRD, MRD))  
      {
        Store(0x80040011, CBWW)
        Store(Arg0, CBWW)
        Store(1, HIG)
        Store(1, HIE)
      }
    }

    
    
    
    Method(RSET, 0, Serialized)
    {
      
      Store(1, HIS)
      Store(1, HRS)
      Store(1, HIG)
      Store(1, HIE)
    }

    
    
    
    Method(H2RD, 0, Serialized)
    {
      If (LNot(And(_STA, 0x08))) 
      {
        Return(0xFF)
      }
      If (MRS) 
      {
        
        RSET()
      }
      Else
      {
        If (MRD) 
        {
          If (LNot(HRD)) 
          {
            
            Store(0, HRS)
            Store(1, HRD)
            Store(1, HIG)                    
          }
          If (LNotEqual(MWP, MRP))           
          {
            Store(CBRW, Local0)              
            Store(CBRW, Local1)              
            
            
            
            Store(1, HIG)                    

            And(Local0, 0x01FF0000, Local6)  
            And(Local1, 0x000000FF, Local7)  

            If (LEqual(Local7, 0x00))        
            {
              If (LEqual(Local6, 0x00040000)) 
              {
                
                
                
                
                
                And(Local1, 0x00FF0000, Local2)
                Or(Local2,  ShiftLeft(And(Local1, 0x00FF0000), 8), Local2)
                Or(Local2, ShiftRight(And(Local1, 0x00FF0000), 8), Local2)
                Or(Local2, ShiftRight(And(Local1, 0x00FF0000),16), Local2)
                Store(Local2, Local3)
                And(Local1, 0xFF000000, Local4)
                Or(Local4, ShiftRight(And(Local1, 0xFF000000), 8), Local4)
                Or(Local4, ShiftRight(And(Local1, 0xFF000000),16), Local4)
                Or(Local4, ShiftRight(And(Local1, 0xFF000000),24), Local4)
                Store(Local4, Local5)
              }
              ElseIf (LEqual(Local6, 0x00140000)) 
              {
                
                Store(CBRW, Local2)
                Store(CBRW, Local3)
                Store(CBRW, Local4)
                Store(CBRW, Local5)
              }
              Else
              {
                
                RSET()
                Return (0xFF)
              }
              If (\HWEN)
              {
                
                
                
                
                SEND(Or(Local1, 1)) 
              }
              Else
              {
                If (And(\PETE, 0x80))
                {
                  
                  
                  
                  
                  And(           Local2    , 0xFF, Index(\PSLM, 0))
                  And(ShiftRight(Local2, 8), 0xFF, Index(\PSLM, 1))
                  And(ShiftRight(Local2,16), 0xFF, Index(\PSLM, 2))
                  And(ShiftRight(Local2,24), 0xFF, Index(\PSLM, 3))
                  And(           Local3    , 0xFF, Index(\PSLM, 4))
                  And(ShiftRight(Local3, 8), 0xFF, Index(\PSLM, 5))
                  And(ShiftRight(Local3,16), 0xFF, Index(\PSLM, 6))
                  And(ShiftRight(Local3,24), 0xFF, Index(\PSLM, 7))
                  
                  
                  
                  Notify(\_PR.CPU0, 0x80) Notify(\_PR.CPU1, 0x80) Notify(\_PR.CPU2, 0x80) Notify(\_PR.CPU3, 0x80) Notify(\_PR.CPU4, 0x80) Notify(\_PR.CPU5, 0x80) Notify(\_PR.CPU6, 0x80) Notify(\_PR.CPU7, 0x80) Notify(\_PR.CPU8, 0x80) Notify(\_PR.CPU9, 0x80) Notify(\_PR.CPUA, 0x80) Notify(\_PR.CPUB, 0x80) Notify(\_PR.CPUC, 0x80) Notify(\_PR.CPUD, 0x80) Notify(\_PR.CPUE, 0x80) Notify(\_PR.CPUF, 0x80)
                  
                  
                  
                  
                  
                  
                  
                }
                If (And(\PETE, 0x40))
                {
                  
                  
                  
                  
                  And(           Local4    , 0xFF, Index(\TSLM, 0))
                  And(ShiftRight(Local4, 8), 0xFF, Index(\TSLM, 1))
                  And(ShiftRight(Local4,16), 0xFF, Index(\TSLM, 2))
                  And(ShiftRight(Local4,24), 0xFF, Index(\TSLM, 3))
                  And(           Local5    , 0xFF, Index(\TSLM, 4))
                  And(ShiftRight(Local5, 8), 0xFF, Index(\TSLM, 5))
                  And(ShiftRight(Local5,16), 0xFF, Index(\TSLM, 6))
                  And(ShiftRight(Local5,24), 0xFF, Index(\TSLM, 7))
                  
                  
                  
                  Notify(\_PR.CPU0, 0x82) Notify(\_PR.CPU1, 0x82) Notify(\_PR.CPU2, 0x82) Notify(\_PR.CPU3, 0x82) Notify(\_PR.CPU4, 0x82) Notify(\_PR.CPU5, 0x82) Notify(\_PR.CPU6, 0x82) Notify(\_PR.CPU7, 0x82) Notify(\_PR.CPU8, 0x82) Notify(\_PR.CPU9, 0x82) Notify(\_PR.CPUA, 0x82) Notify(\_PR.CPUB, 0x82) Notify(\_PR.CPUC, 0x82) Notify(\_PR.CPUD, 0x82) Notify(\_PR.CPUE, 0x82) Notify(\_PR.CPUF, 0x82)
                  
                  
                  
                  
                  
                  
                  
                }
                
                
                
                SEND(Or(Local1, \PETE))
              } 
            } 

            ElseIf (LAnd(LEqual(Local7, 0x03), LEqual(Local6, 0x00040000)))
            {
              
              If (\PURE)
              {
                Store(Local1, \PURA)
                Notify(\_SB.PRAD, 0x80)
              }
              else
              {
                SEND(Local1)
              }
            }


            ElseIf (LAnd(LEqual(Local7, 0x04), LEqual(Local6, 0x00040000)))
            {
              
              Store(Multiply(And(ShiftRight(Local1, 0x10), 0xFFFF), 1000), PWR)
              SEND(Or(Local1, 0x80))
            }
            ElseIf (LAnd(LEqual(Local7, 0x05), LEqual(Local6, 0x00040000)))
            {
              
              Store(Multiply(And(ShiftRight(Local1, 0x10), 0xFFFF), 1000), PMAI)
              SEND(Or(Local1, 0x80))
              Notify(\_SB.PMT1, 0x84)
            }
            ElseIf (LAnd(LEqual(Local7, 0x06), LEqual(Local6, 0x00040000)))
            {
              
              Store(Multiply(And(ShiftRight(Local1, 0x10), 0xFFFF), 1000), HWL)
              SEND(Or(Local1, 0x80))
              Notify(\_SB.PMT1, 0x82)
            }
            ElseIf (LAnd(LEqual(Local7, 0x0C), LEqual(Local6, 0x00040000)))
            {
              
              
              
              
              SEND(Or(ShiftLeft(PMAV, 0x10), And(Or(Local1, 0x80), 0xFFFF)))
              If (LEqual(1, PMAV)) 
              {
                
                If (LEqual(And(ShiftRight(Local1, 0x10), 0xFF), 1))
                {
                  \_SB.PCI0.HEC2.SSFW(0, 0x08, 0, 0)
                }
                Store(Divide(HWL, 1000), Local2)
                \_SB.PCI0.HEC2.SSFW(0, 0x07, Local2, 0) 
                Store(Divide(PMAI, 1000), Local2)
                \_SB.PCI0.HEC2.SSFW(0, 0x0A, Local2, 0) 
                Store(Divide(PTPU, 1000), Local2)
                Store(Divide(PTPL, 1000), Local3)
                \_SB.PCI0.HEC2.SSFW(1, 0x0B, Local2, Local3) 
              }
            }
            
            ElseIf (LAnd(Or(LEqual(Local7, 0x88),
                             LEqual(Local7, 0x0D)), LEqual(Local6, 0x00200000)))
            {
              
              Store(And(ShiftRight(Local1, 0x18), 0xFF), Index(PMCP, 0)) 
              Store(And(ShiftRight(Local1, 0x88), 0x01), Index(PMCP, 2)) 
              If (LEqual(And(ShiftRight(Local1, 0x10), 0x01), 0x01))    
              {
                Store(0xFFFFFFFF, Index(PMCP, 8))
              }
              Else
              {
                Store(0x00000000, Index(PMCP, 8))
              }
              Store(CBRW, Index(PMCP, 3))
              Store(CBRW, Index(PMCP, 4))
              Store(CBRW, Index(PMCP, 5))
              Store(CBRW, Index(PMCP, 6))
              Store(CBRW, Index(PMCP, 7))
              Store(CBRW, Index(PMCP, 9))
              Store(CBRW, Index(PMCP, 10))
              If (LEqual(Local7, 0x0D))
              {
                SEND(And(Or(Local1, 0x80), 0xFFFF))
              }
              Else
              {
                Store(1, HIG)
              }
              Store(1, PMAV)
              Notify(\_SB.PMT1, 0x80)
            }
            ElseIf (LAnd(LEqual(Local7, 0x09), LEqual(Local6, 0x00040000)))
            {
              
              SEND(Or(Local1, 0x80))
              Notify(\_SB.PMT1, 0x81)
            }
            ElseIf (LAnd(LEqual(Local7, 0x87), LEqual(Local6, 0x00040000)))
            {
              
              Store(And(ShiftRight(Local1, 0x08), 0xFF), HLST)
            }
            ElseIf (LAnd(LEqual(Local7, 0x8A), LEqual(Local6, 0x00040000)))
            {
              
              Store(And(ShiftRight(Local1, 0x08), 0xFF), AIST)
            }
            ElseIf (LAnd(LEqual(Local7, 0x8B), LEqual(Local6, 0x00040000)))
            {
              
              Store(And(ShiftRight(Local1, 0x08), 0xFF), TPST)
            }

            Else
            {
              
              RSET()
              Return (0xFF)
            }
            Return(Local7) 
          } 
        } 
      } 
      Return(0xFF) 
    } 

    
    
    
    Method(HSCI, 0, Serialized)
    {
      
      If (HIS) 
      {
        Store(1, HIS)    
        Store(8, Local0) 
        While (LNotEqual(H2RD(), 0xFF))
        {
          Decrement(Local0)
          If (LNot(Local0))
          {
            
            
            
            
            RSET()
            Break
          }
        }
      } 
      
      
      
      
      
      
      Store(300, Local0) 
      While (LAnd(LNot(HIE), Local0))
      {
        Decrement(Local0)
        Sleep(10)
        Store(1, HIE)
      }
    } 
    

    
    
    
    
    
    
    
    
    
    
    Method(SSFW, 4, Serialized)
    {
      If (LAnd(HRD, MRD))  
      {
        Store(HIE, Local1) 
        Store(0, HIE)      
        If (LEqual(Arg0, 0))
        {
          Store(0x80040011, CBWW)
          Store(Or(ShiftLeft(Arg2, 0x10), And(Arg1, 0x00FF)), CBWW)
        }
        ElseIf (LEqual(Arg0, 1))
        {
          Store(0x80080011, CBWW)
          Store(And (Arg1, 0xFF), CBWW)
          Store(Or(ShiftLeft(Arg3, 0x10), And(Arg2, 0xFFFF)), CBWW)
        }
        Store(1, HIG)
        Store(0, Local0)  
        While (LNotEqual(Local0, 10))
        {
          If (LEqual(1, HIS))
          {
            Store(1, HIS) 
            If (LEqual(H2RD(), Or(Arg1, 0x80)))
            {
              Break
            }
          }
          Add(Local0, 1, Local0)
          Sleep(100)
        }
        Store(Local1, HIE)  
      }
    }

  } 


  Scope (\_SB)
  {
    Name(PWR, 0xFFFFFFFF)  
    Name(PMAI, 0xFFFFFFFF) 
    Name(HWL, 0xFFFFFFFF)  
    Name(PTPU, 0)          
    Name(PTPL, 0)          
    Name(PMAV, 0)          
    Name(HLST, 0)          
    Name(AIST, 0)          
    Name(TPST, 0)          

    
    Name(PMCP, Package()
    {
      0x00000000, 
      0x00000000, 
      0x00000000, 
      0x00000000, 
      0xFFFFFFFF, 
      0x00000000, 
      0x00000000, 
      0xFFFFFFFF, 
      0x00000000, 
      0x00000000, 
      0x00000000, 
      "Intel(R) Node Manager",
      "",         
      "Meter measures total domain" 
    })

    Device(PMT1) 
    {
      Name(_HID, "ACPI000D")
      Name(_UID,  0x00)      

      
      
      
      
      Method(_STA, 0, NotSerialized)
      {
        Return(Or(\_SB.PCI0.HEC2._STA, 0x04))
      }

      
      
      
      Method(_PMC, 0, NotSerialized)
      {
        If (LEqual(PMAV, 0))
        {
          \_SB.PCI0.HEC2.SSFW(0, 0x08, 0, 0)
        }
        Return(PMCP)
      }

      
      
      
      Method(_PMD, 0, NotSerialized)
      {
        Return(Package(){\_SB})
      }

      
      
      
      Method(_PMM, 0, NotSerialized)
      {
        Return(PWR)
      }

      
      
      
      Method(_PAI, 1, NotSerialized)
      {
        Store(Divide(Arg0, 1000), Local0)
        Store(0x00000002, AIST)
        \_SB.PCI0.HEC2.SSFW(0, 0x0A, Local0, 0)
        If (LEqual(And (AIST, 0xFF), 0x00))
        {
          Store(Arg0, PMAI)
          Notify(\_SB.PMT1, 0x84)
        }
        Return(AIST)
      }

      
      
      
      Method(_GAI, 0, NotSerialized)
      {
        Return(PMAI)
      }

      
      
      
      Method(_PTP, 2, NotSerialized)
      {
        Store(Divide(Arg0, 1000), Local0)
        
        
        
        Store(Add(Arg1, 500), Local1)
        Store(Divide(Arg1, 1000), Local1)
        Store(0x00000002, TPST)
        \_SB.PCI0.HEC2.SSFW(1, 0x0B, Local0, Local1)
        If (LEqual(And(TPST, 0xFF), 0))
        {
          Store(Arg0, PTPU)
          Store(Arg1, PTPL)
        }
        Return (TPST)
      }

      
      
      
      Method(_GHL, 0, NotSerialized)
      {
        Return(HWL)
      }

      
      
      
      Method(_SHL, 1, NotSerialized)
      {
        Store(Divide(Arg0, 1000), Local0)
        Store(0x00000002, HLST)
        \_SB.PCI0.HEC2.SSFW (0, 0x07, Local0, 0)
        If (LEqual(And(HLST, 0xFF), 0x00))
        {
          Store(Arg0, HWL)
          Notify(\_SB.PMT1, 0x83)
        }
        Return (HLST)
      }
    } 
  } 



  Scope(\_SB)
  {
    
    
    
    Device(PRAD)
    {
      Name(_HID, "ACPI000C")

      Method(_STA, 0, NotSerialized)
      {
        Return(0x0F)
      }

      
      
      
      
      Method(_PUR, 0, Serialized)
      {
        Store("PRAD: Entering _PUR", Debug)
        Name(IDL, Package() {1, 0})
        And(Or(\PURA, 0x80), 0xFFFF, \PURB)
        And(ShiftRight(\PURA, 16), 0xffff, Index(IDL, 1))
        Return(IDL)
      }

      
      
      
      Method(_OST, 3, Serialized)
      {
        Store("PRAD: Entering _OST", Debug)
        
        
        
        
        
        If (LEqual(And(\PURB, 0xff), 0x83))
        {
          Subtract(\THNU, ToInteger(Arg2), Local0)
          Or(\PURB, ShiftLeft(Local0, 16), \PURB)
          \_SB.PCI0.HEC2.SEND(\PURB) 
        }
      } 
    } 
  } 


  Scope(\_GPE)
  {
    Method(_L6C, 0x0, Serialized)
    {
      \_SB.PCI0.HEC2.HSCI()
    }
  }
}
