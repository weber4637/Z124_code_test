





































DefinitionBlock (
	"DSDT.aml",	
	"DSDT",	
	
	
	0x02,	
	"ALASKA",	
	"A M I ",	
	0x01072009	
	)
{	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Name(ENTK, 0x87)	
	Name(EXTK, 0xaa)	
	Name(IO1B, 0xa00)	
	Name(IO1L, 0x10)	
	Name(IO2B, 0xa10)	
	Name(IO2L, 0x10)	
	Name(IO3B, 0xa20)	
	Name(IO3L, 0x10)	
	Name(SP1O, 0x4e)	
	Name(KBFG, 0x0)	
	Name(MSFG, 0x0)	
	Name(IOES, 0x0)	
	Name(LAPB, 0xfee00000)	
	Name(CPVD, 0x0)	
	Name(SMBS, 0xefa0)	
	Name(SMBL, 0x20)	
	Name(PMBS, 0x1800)	
	Name(PMLN, 0x80)	
	Name(SMIP, 0xb2)	
	Name(GPLN, 0x40)	
	Name(APCB, 0xfec00000)	
	Name(APCL, 0x1000)	
	Name(RCRB, 0xfed1c000)	
	Name(RCRL, 0x4000)	
	Name(PM30, 0x1830)	
	Name(AERC, 0x0)	
	Name(ASSB, 0x0)	
	Name(AOTB, 0x0)	
	Name(AAXB, 0x0)	
	Name(PEHP, 0x1)	
	Name(SHPC, 0x0)	
	Name(PEPM, 0x1)	
	Name(PEER, 0x1)	
	Name(PECS, 0x1)	
	Name(ITKE, 0x0)	
	Name(MBEC, 0xffff)	
	Name(PEBS, 0xe0000000)	
	Name(PELN, 0x10000000)	
	Name(CSMI, 0x61)	
	Name(SMIA, 0xb2)	
	Name(SMIB, 0xb3)	
	Name(OFST, 0x35)	
	Name(TRST, 0x2)	
	Name(TCMF, 0x0)	
	Name(TMF1, 0x0)	
	Name(TMF2, 0x0)	
	Name(TMF3, 0x0)	
	Name(TTPF, 0x1)	
	Name(DTPT, 0x0)	
	Name(TTDP, 0x0)	
	Name(TPMB, 0xffffffff)	
	Name(TPMC, 0xffffffff)	
	Name(TPMM, 0xfed40000)	
	Name(FTPM, 0xffffffff)	
	Name(PPIM, 0xffff0000)	
	Name(PPIL, 0xf0)	
	Name(AMDT, 0x0)	
	Name(TPMF, 0x0)	
	Name(PPIV, 0x0)	
	Name(LAPL, 0x100000)	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	





	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(PICM, 0)	
	
	
		Method(_PIC, 1) { 
	
			if(Arg0) {
				Store(0xAA, DBG8)	
			} else {
				Store(0xAC, DBG8)	 
			}

			Store(Arg0, PICM) 
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(OSVR, Ones)					
		Method(OSFL, 0){
			if(LNotEqual(OSVR, Ones)) {Return(OSVR)}	
			if(LEqual(PICM,0)) {Store(0xAC, DBG8)}		
			Store(3, OSVR)					
	
			if(CondRefOf(\_OSI,Local0))
			{
				
				If(\_OSI("Windows 2001")){Store(4, OSVR)}
				If(\_OSI("Windows 2001.1")){Store(5, OSVR)}		
				If(\_OSI("FreeBSD")){Store(6, OSVR)}
				If(\_OSI("HP-UX")){Store(7, OSVR)}
				If(\_OSI("OpenVMS")){Store(8, OSVR)}
	            If(\_OSI("Windows 2001 SP1")){Store(9,OSVR)}
	            If(\_OSI("Windows 2001 SP2")){Store(10,OSVR)}
	            If(\_OSI("Windows 2001 SP3")){Store(11,OSVR)}
	            If(\_OSI("Windows 2006")){Store(12,OSVR)}
	            If(\_OSI("Windows 2006 SP1")){Store(13,OSVR)}
	            If(\_OSI("Windows 2009")){Store(14,OSVR)}
	            If(\_OSI("Windows 2012")){Store(15,OSVR)}
	            If(\_OSI("Windows 2013")){Store(16,OSVR)}
			} else {
				If(MCTH(\_OS,"Microsoft Windows NT")){Store(0, OSVR)}
				If(MCTH(\_OS,"Microsoft Windows")){Store(1, OSVR)}
				If(MCTH(\_OS,"Microsoft WindowsME: Millennium Edition")){Store(2, OSVR)}
				If(MCTH(\_OS,"Linux")){Store(3, OSVR)}	
				If(MCTH(\_OS,"FreeBSD")){Store(6, OSVR)}
				If(MCTH(\_OS,"HP-UX")){Store(7, OSVR)}
				If(MCTH(\_OS,"OpenVMS")){Store(8, OSVR)}
			}
			Return(OSVR)
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Method(MCTH, 2) {
	
			If(LLess(Sizeof(Arg0), Sizeof(Arg1)))
			{
				Return(Zero)
			}
	
			Add(Sizeof(Arg0), 1, Local0)
	
			Name(BUF0, Buffer(Local0) {})
			Name(BUF1, Buffer(Local0) {})
			Store(Arg0, BUF0)
			Store(Arg1, BUF1)
			While(Local0)
			{
				Decrement(Local0)
				If(LNotEqual(Derefof(Index(BUF0, Local0)), Derefof(Index(BUF1, Local0))))
				{ Return(Zero) }
			}
			Return(One)		
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(PRWP, Package(){Zero, Zero})		
		Method(GPRW, 2)
		{
			Store(Arg0, Index(PRWP, 0))		
	
	                Store(ShiftLeft(SS1,1),Local0)      	
	                Or(Local0,ShiftLeft(SS2,2),Local0)      
	                Or(Local0,ShiftLeft(SS3,3),Local0)      
	                Or(Local0,ShiftLeft(SS4,4),Local0)      
	
								
			If(And(ShiftLeft(1, Arg1), Local0)){	
				Store(Arg1, Index(PRWP, 1))	
			} Else {  				
				ShiftRight(Local0, 1, Local0)	
				If(LOr(LEqual(OSFL, 1), LEqual(OSFL, 2))) { 	
					FindSetLeftBit(Local0, Index(PRWP,1))	
				} Else { 					
					FindSetRightBit(Local0, Index(PRWP,1))	
				}
			}
		Return(PRWP)
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(WAKP, Package(){Zero, Zero})
	
	
	    Method(UPWP,1){
	            if(DeRefOf(Index(WAKP,0)))      
	            {
	                Store(0, Index(WAKP,1))     
	            } else {                
	                Store(Arg0, Index(WAKP,1))  
	            }
	    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		OperationRegion (DEB0, SystemIO, 0x80, 1)
		Field (DEB0, ByteAcc,NoLock,Preserve)
		{ DBG8,8,}
	
		OperationRegion (DEB1, SystemIO, 0x90, 2)
		Field (DEB1, WordAcc,NoLock,Preserve)
		{ DBG9,16,}
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Name(SS1,1)		
	Name(SS2,0)
	Name(SS3,1)
	Name(SS4,1)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Name(IOST,0xFFFF)		
							
	
	Name(TOPM,0xFFFFF)   	
	
	
	Name(ROMS,0xffe00000)	
	
	
	Name(VGAF, 0x1)         
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	



















	
	
	
	
	
	
	
	
	
	
	
	
	
	
	    
	    
	    
	    OperationRegion (MNVS, SystemMemory, 0xFFFF0000, 512)
	    Field (MNVS, ByteAcc, NoLock, Preserve)
	    {
	      OSYS,  32,    
	      HPEA,  32,    
	      SMIF,   8,    
	      LCKF,   8,    
	
	      ACTT,   8,    
	      PSVT,   8,    
	      TC1V,   8,    
	      TC2V,   8,    
	      TSPV,   8,    
	      CRTT,   8,    
	      DTSE,   8,    
	      DTS1,   8,    
	      DTS2,   8,    
	      DTSF,   8,    
	
	      PPMF,   32,   
	      APIC,   8,    
	      MPEN,   8,    
	
	      ACST,   8,
	      BTST,   8,
	      PWST,   8,
	
	      TPMP,   8,    
	      TPME,   8,    
	      RSVD,   8,    
	
	      MMOB,  32,    
	      MMOL,  32,    
	      MMHB,  64,    
	      MMHL,  64,    
	      TSGB,  32,    
	      TSSZ,  32,    
	      CSEN,   8,    
	      C6NS,   8,    
	      C6FS,   8,    
	      IPEN,   8,    
	      MMB0,  32,    
	      MML0,  32,    
	      MMB1,  32,    
	      MML1,  32,    
	      NCPU,   8,    
	      LGCY,   8,    
	      U30C,   8,    
	      U30T,   8,    
	      U30V,   8,    
	      U30G,   8,    
	      U31C,   8,    
	      U31T,   8,    
	      U31V,   8,    
	      U31G,   8,    
	      U32C,   8,    
	      U32T,   8,    
	      U32V,   8,    
	      U32G,   8,    
	      U33C,   8,    
	      U33T,   8,    
	      U33V,   8,    
	      U33G,   8,    
	      U20C,   8,    
	      U20T,   8,    
	      U20V,   8,    
	      U20G,   8,    
	      U21C,   8,    
	      U21T,   8,    
	      U21V,   8,    
	      U21G,   8,    
	      U22C,   8,    
	      U22T,   8,    
	      U22V,   8,    
	      U22G,   8,    
	      U23C,   8,    
	      U23T,   8,    
	      U23V,   8,    
	      U23G,   8,    
	      HADR,   8,    
	      GPST,   8,    
	      HUS1,   32,   
	      HUS2,   32,   
	      HUS3,   32,   
	      HUS4,   32,   
	      CPLS,   32,   
	      BDID,   32,   
	    }
	
	
	


















	
	  
	  
	  
	  
	  Name (PNVB, 0xFFFF0000)  
	  Name (PNVL, 0xAA55)      
	
	  OperationRegion(PNVA,SystemMemory,PNVB,PNVL)
	  Field(PNVA,AnyAcc,Lock,Preserve)
	  {
	  Offset(0),      RCRV, 32, 
	  Offset(4),      PCHS, 16, 
	  Offset(6),      PCHG, 16, 
	  Offset(8),      RPA1, 32, 
	  Offset(12),     RPA2, 32, 
	  Offset(16),     RPA3, 32, 
	  Offset(20),     RPA4, 32, 
	  Offset(24),     RPA5, 32, 
	  Offset(28),     RPA6, 32, 
	  Offset(32),     RPA7, 32, 
	  Offset(36),     RPA8, 32, 
	  Offset(40),     RPA9, 32, 
	  Offset(44),     RPAA, 32, 
	  Offset(48),     RPAB, 32, 
	  Offset(52),     RPAC, 32, 
	  Offset(56),     RPAD, 32, 
	  Offset(60),     RPAE, 32, 
	  Offset(64),     RPAF, 32, 
	  Offset(68),     RPAG, 32, 
	  Offset(72),     RPAH, 32, 
	  Offset(76),     RPAI, 32, 
	  Offset(80),     RPAJ, 32, 
	  Offset(84),     RPAK, 32, 
	  Offset(88),     NHLA, 32, 
	  Offset(92),     NHLL, 32, 
	  Offset(96),     ADFM, 32, 
	  Offset(100),    SBRG, 32, 
	  Offset(104),    GPEM, 32, 
	  Offset(108),    PML1, 16, 
	  Offset(110),    PML2, 16, 
	  Offset(112),    PML3, 16, 
	  Offset(114),    PML4, 16, 
	  Offset(116),    PML5, 16, 
	  Offset(118),    PML6, 16, 
	  Offset(120),    PML7, 16, 
	  Offset(122),    PML8, 16, 
	  Offset(124),    PML9, 16, 
	  Offset(126),    PMLA, 16, 
	  Offset(128),    PMLB, 16, 
	  Offset(130),    PMLC, 16, 
	  Offset(132),    PMLD, 16, 
	  Offset(134),    PMLE, 16, 
	  Offset(136),    PMLF, 16, 
	  Offset(138),    PMLG, 16, 
	  Offset(140),    PMLH, 16, 
	  Offset(142),    PMLI, 16, 
	  Offset(144),    PMLJ, 16, 
	  Offset(146),    PMLK, 16, 
	  Offset(148),    PNL1, 16, 
	  Offset(150),    PNL2, 16, 
	  Offset(152),    PNL3, 16, 
	  Offset(154),    PNL4, 16, 
	  Offset(156),    PNL5, 16, 
	  Offset(158),    PNL6, 16, 
	  Offset(160),    PNL7, 16, 
	  Offset(162),    PNL8, 16, 
	  Offset(164),    PNL9, 16, 
	  Offset(166),    PNLA, 16, 
	  Offset(168),    PNLB, 16, 
	  Offset(170),    PNLC, 16, 
	  Offset(172),    PNLD, 16, 
	  Offset(174),    PNLE, 16, 
	  Offset(176),    PNLF, 16, 
	  Offset(178),    PNLG, 16, 
	  Offset(180),    PNLH, 16, 
	  Offset(182),    PNLI, 16, 
	  Offset(184),    PNLJ, 16, 
	  Offset(186),    PNLK, 16, 
	  Offset(188),    U0C0, 32, 
	  Offset(192),    U1C0, 32, 
	  Offset(196),    ADPM, 32, 
	  Offset(200),    XHPC, 8,  
	  Offset(201),    XRPC, 8,  
	  Offset(202),    XSPC, 8,  
	  Offset(203),    XSPA, 8,  
	  Offset(204),    HPTB, 32, 
	  Offset(208),    HPTE, 8,  
	  
	  Offset(209),    SMD0, 8,  
	  Offset(210),    SMD1, 8,  
	  Offset(211),    SMD2, 8,  
	  Offset(212),    SMD3, 8,  
	  Offset(213),    SMD4, 8,  
	  Offset(214),    SMD5, 8,  
	  Offset(215),    SMD6, 8,  
	  Offset(216),    SMD7, 8,  
	  Offset(217),    SMD8, 8,  
	  Offset(218),    SMD9, 8,  
	  Offset(219),    SMDA, 8,  
	  Offset(220),    SIR0, 8,  
	  Offset(221),    SIR1, 8,  
	  Offset(222),    SIR2, 8,  
	  Offset(223),    SIR3, 8,  
	  Offset(224),    SIR4, 8,  
	  Offset(225),    SIR5, 8,  
	  Offset(226),    SIR6, 8,  
	  Offset(227),    SIR7, 8,  
	  Offset(228),    SIR8, 8,  
	  Offset(229),    SIR9, 8,  
	  Offset(230),    SIRA, 8,  
	  Offset(231),    SB00, 32, 
	  Offset(235),    SB01, 32, 
	  Offset(239),    SB02, 32, 
	  Offset(243),    SB03, 32, 
	  Offset(247),    SB04, 32, 
	  Offset(251),    SB05, 32, 
	  Offset(255),    SB06, 32, 
	  Offset(259),    SB07, 32, 
	  Offset(263),    SB08, 32, 
	  Offset(267),    SB09, 32, 
	  Offset(271),    SB0A, 32, 
	  Offset(275),    SB10, 32, 
	  Offset(279),    SB11, 32, 
	  Offset(283),    SB12, 32, 
	  Offset(287),    SB13, 32, 
	  Offset(291),    SB14, 32, 
	  Offset(295),    SB15, 32, 
	  Offset(299),    SB16, 32, 
	  Offset(303),    SB17, 32, 
	  Offset(307),    SB18, 32, 
	  Offset(311),    SB19, 32, 
	  Offset(315),    SB1A, 32, 
	  
	  Offset(319),    GPEN, 8,  
	  Offset(320),    SGIR, 8,  
	  Offset(321),    NIT1, 8,  
	  Offset(322),    NIT2, 8,  
	  Offset(323),    NIT3, 8,  
	  Offset(324),    NPM1, 8,  
	  Offset(325),    NPM2, 8,  
	  Offset(326),    NPM3, 8,  
	  Offset(327),    NPC1, 8,  
	  Offset(328),    NPC2, 8,  
	  Offset(329),    NPC3, 8,  
	  Offset(330),    NL11, 16, 
	  Offset(332),    NL12, 16, 
	  Offset(334),    NL13, 16, 
	  Offset(336),    ND21, 8,  
	  Offset(337),    ND22, 8,  
	  Offset(338),    ND23, 8,  
	  Offset(339),    ND11, 32, 
	  Offset(343),    ND12, 32, 
	  Offset(347),    ND13, 32, 
	  Offset(351),    NLR1, 16, 
	  Offset(353),    NLR2, 16, 
	  Offset(355),    NLR3, 16, 
	  Offset(357),    NLD1, 32, 
	  Offset(361),    NLD2, 32, 
	  Offset(365),    NLD3, 32, 
	  Offset(369),    NEA1, 16, 
	  Offset(371),    NEA2, 16, 
	  Offset(373),    NEA3, 16, 
	  Offset(375),    NEB1, 16, 
	  Offset(377),    NEB2, 16, 
	  Offset(379),    NEB3, 16, 
	  Offset(381),    NEC1, 16, 
	  Offset(383),    NEC2, 16, 
	  Offset(385),    NEC3, 16, 
	  Offset(387),    NRA1, 16, 
	  Offset(389),    NRA2, 16, 
	  Offset(391),    NRA3, 16, 
	  Offset(393),    NMB1, 32, 
	  Offset(397),    NMB2, 32, 
	  Offset(401),    NMB3, 32, 
	  Offset(405),    NMV1, 32, 
	  Offset(409),    NMV2, 32, 
	  Offset(413),    NMV3, 32, 
	  Offset(417),    NPB1, 32, 
	  Offset(421),    NPB2, 32, 
	  Offset(425),    NPB3, 32, 
	  Offset(429),    NPV1, 32, 
	  Offset(433),    NPV2, 32, 
	  Offset(437),    NPV3, 32, 
	  Offset(441),    SDME, 8,  
	  Offset(442),    SDIR, 8,  
	  Offset(443),    SDB0, 32, 
	  Offset(447),    SDB1, 32, 
	  Offset(451),        , 8,  
	  Offset(452),    SXRB, 32, 
	  Offset(456),    SXRS, 32, 
	  Offset(460),    CIOE, 8,  
	  Offset(461),    CIOI, 8,  
	  Offset(462),    TAEN, 8,  
	  Offset(463),    TIRQ, 8,  
	  Offset(464),    XWMB, 64, 
	       
	  }

	
	    
	    
	    
	    Scope(\_PR)
	    {
	          Processor (CPU0, 0x01, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                Return (0x0F)
	              }
	          }
	
	          Processor (CPU1, 0x02, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x01))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU2, 0x03, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x02))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU3, 0x04, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x03))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU4, 0x05, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x04))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU5, 0x06, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x05))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU6, 0x07, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x06))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU7, 0x08, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x07))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU8, 0x09, 0x1810, 0x06) {
	             Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x08))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPU9, 0x0A, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x09))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPUA, 0x0B, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x0A))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPUB, 0x0C, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x0B))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPUC, 0x0D, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x0C))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPUD, 0x0E, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x0D))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPUE, 0x0F, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x0E))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	
	          Processor (CPUF, 0x10, 0x1810, 0x06) {
	              Method (_STA, 0)
	              {
	                if (LGreater (NCPU, 0x0F))
	                {
	                  Return (0x0F)
	                }
	                Return (0x0)
	              }
	          }
	    }



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB) {
	
	
	
	
	
	
	
	
	
		Name(RSKA, ResourceTemplate(){	
			IRQ(Level, ActiveLow, Shared, LLKA) {6,10,11,12,14,15}
		})
		Alias(RSKA,RSKB)	
		Alias(RSKA,RSKC)	
		Alias(RSKA,RSKD)	
		Alias(RSKA,RSKE)	
		Alias(RSKA,RSKF)	
		Alias(RSKA,RSKG)	
		Alias(RSKA,RSKH)	
	
		Name(PD00, Package(){
	
	
			Package(){0x0009FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x000AFFFF, 1, \_SB.PCI0.SBRG.LNKB, 0 },
	
			Package(){0x000BFFFF, 2, \_SB.PCI0.SBRG.LNKC, 0 },
	
			Package(){0x000CFFFF, 3, \_SB.PCI0.SBRG.LNKD, 0 },
	
			Package(){0x000EFFFF, 0, \_SB.PCI0.SBRG.LNKE, 0 },
	
			Package(){0x000FFFFF, 1, \_SB.PCI0.SBRG.LNKF, 0 },
	
			Package(){0x0010FFFF, 2, \_SB.PCI0.SBRG.LNKG, 0 },
	
			Package(){0x0011FFFF, 3, \_SB.PCI0.SBRG.LNKH, 0 },
	
			Package(){0x0012FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x0013FFFF, 0, \_SB.PCI0.SBRG.LNKE, 0 },
	
			Package(){0x0014FFFF, 0, \_SB.PCI0.SBRG.LNKF, 0 },
	
			Package(){0x0015FFFF, 0, \_SB.PCI0.SBRG.LNKD, 0 },
	
			Package(){0x001AFFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x001AFFFF, 1, \_SB.PCI0.SBRG.LNKB, 0 },
	
			Package(){0x001AFFFF, 2, \_SB.PCI0.SBRG.LNKC, 0 },
	
			Package(){0x001BFFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x001BFFFF, 1, \_SB.PCI0.SBRG.LNKB, 0 },
	
			Package(){0x001BFFFF, 2, \_SB.PCI0.SBRG.LNKC, 0 },
	
			Package(){0x001BFFFF, 3, \_SB.PCI0.SBRG.LNKD, 0 },
	
			Package(){0x0004FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x0005FFFF, 0, \_SB.PCI0.SBRG.LNKH, 0 },
	
			Package(){0x0006FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x0016FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x0017FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x0018FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x0018FFFF, 1, \_SB.PCI0.SBRG.LNKB, 0 },
	
			Package(){0x0018FFFF, 2, \_SB.PCI0.SBRG.LNKC, 0 },
	
			Package(){0x0018FFFF, 3, \_SB.PCI0.SBRG.LNKD, 0 },
	
			Package(){0x001CFFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
	
	
			Package(){0x001FFFFF, 0, \_SB.PCI0.SBRG.LNKH, 0 },
	
	
		})
		Name(AR00, Package(){
	
	
			Package(){0x0009FFFF, 0, 0, 16 },
	
			Package(){0x000AFFFF, 1, 0, 17 },
	
			Package(){0x000BFFFF, 2, 0, 18 },
	
			Package(){0x000CFFFF, 3, 0, 19 },
	
			Package(){0x000EFFFF, 0, 0, 20 },
	
			Package(){0x000FFFFF, 1, 0, 21 },
	
			Package(){0x0010FFFF, 2, 0, 22 },
	
			Package(){0x0011FFFF, 3, 0, 23 },
	
			Package(){0x0012FFFF, 0, 0, 16 },
	
			Package(){0x0013FFFF, 0, 0, 20 },
	
			Package(){0x0014FFFF, 0, 0, 21 },
	
			Package(){0x0015FFFF, 0, 0, 19 },
	
			Package(){0x001AFFFF, 0, 0, 16 },
	
			Package(){0x001AFFFF, 1, 0, 17 },
	
			Package(){0x001AFFFF, 2, 0, 18 },
	
			Package(){0x001BFFFF, 0, 0, 16 },
	
			Package(){0x001BFFFF, 1, 0, 17 },
	
			Package(){0x001BFFFF, 2, 0, 18 },
	
			Package(){0x001BFFFF, 3, 0, 19 },
	
			Package(){0x0004FFFF, 0, 0, 16 },
	
			Package(){0x0005FFFF, 0, 0, 23 },
	
			Package(){0x0006FFFF, 0, 0, 16 },
	
			Package(){0x0016FFFF, 0, 0, 16 },
	
			Package(){0x0017FFFF, 0, 0, 16 },
	
			Package(){0x0018FFFF, 0, 0, 16 },
	
			Package(){0x0018FFFF, 1, 0, 17 },
	
			Package(){0x0018FFFF, 2, 0, 18 },
	
			Package(){0x0018FFFF, 3, 0, 19 },
	
			Package(){0x001CFFFF, 0, 0, 16 },
	
	
	
			Package(){0x001FFFFF, 0, 0, 23 },
	
	
		})
		Name(PG03, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKB, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKC, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKD, 0 },
		})
		Name(AG03, Package(){
	
			Package(){0x0000FFFF, 0, 0, 16 },
			Package(){0x0000FFFF, 1, 0, 17 },
			Package(){0x0000FFFF, 2, 0, 18 },
			Package(){0x0000FFFF, 3, 0, 19 },
		})
		Name(PG04, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKB, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKC, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKD, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKA, 0 },
		})
		Name(AG04, Package(){
	
			Package(){0x0000FFFF, 0, 0, 17 },
			Package(){0x0000FFFF, 1, 0, 18 },
			Package(){0x0000FFFF, 2, 0, 19 },
			Package(){0x0000FFFF, 3, 0, 16 },
		})
		Name(PG06, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKC, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKD, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKA, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKB, 0 },
		})
		Name(AG06, Package(){
	
			Package(){0x0000FFFF, 0, 0, 18 },
			Package(){0x0000FFFF, 1, 0, 19 },
			Package(){0x0000FFFF, 2, 0, 16 },
			Package(){0x0000FFFF, 3, 0, 17 },
		})
		Name(PG08, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKD, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKA, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKB, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKC, 0 },
		})
		Name(AG08, Package(){
	
			Package(){0x0000FFFF, 0, 0, 19 },
			Package(){0x0000FFFF, 1, 0, 16 },
			Package(){0x0000FFFF, 2, 0, 17 },
			Package(){0x0000FFFF, 3, 0, 18 },
		})
		Name(PG0A, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKE, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKF, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKG, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKH, 0 },
		})
		Name(AG0A, Package(){
	
			Package(){0x0000FFFF, 0, 0, 20 },
			Package(){0x0000FFFF, 1, 0, 21 },
			Package(){0x0000FFFF, 2, 0, 22 },
			Package(){0x0000FFFF, 3, 0, 23 },
		})
		Name(PG0C, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKF, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKG, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKH, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKE, 0 },
		})
		Name(AG0C, Package(){
	
			Package(){0x0000FFFF, 0, 0, 21 },
			Package(){0x0000FFFF, 1, 0, 22 },
			Package(){0x0000FFFF, 2, 0, 23 },
			Package(){0x0000FFFF, 3, 0, 20 },
		})
		Name(PG0E, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKG, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKH, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKE, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKF, 0 },
		})
		Name(AG0E, Package(){
	
			Package(){0x0000FFFF, 0, 0, 22 },
			Package(){0x0000FFFF, 1, 0, 23 },
			Package(){0x0000FFFF, 2, 0, 20 },
			Package(){0x0000FFFF, 3, 0, 21 },
		})
		Name(PG10, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKH, 0 },
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKE, 0 },
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKF, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKG, 0 },
		})
		Name(AG10, Package(){
	
			Package(){0x0000FFFF, 0, 0, 23 },
			Package(){0x0000FFFF, 1, 0, 20 },
			Package(){0x0000FFFF, 2, 0, 21 },
			Package(){0x0000FFFF, 3, 0, 22 },
		})
		Name(PG1F, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
		})
		Name(AG1F, Package(){
	
			Package(){0x0000FFFF, 0, 0, 16 },
		})
		Name(PG21, Package(){
	
			Package(){0x0000FFFF, 0, \_SB.PCI0.SBRG.LNKA, 0 },
	
			Package(){0x0000FFFF, 1, \_SB.PCI0.SBRG.LNKB, 0 },
	
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKD, 0 },
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKA, 0 },
		})
		Name(AG21, Package(){
	
			Package(){0x0000FFFF, 0, 0, 16 },
	
			Package(){0x0000FFFF, 1, 0, 17 },
	
			Package(){0x0000FFFF, 2, 0, 19 },
			Package(){0x0000FFFF, 3, 0, 16 },
		})
		Name(PG22, Package(){
	
			Package(){0x0000FFFF, 2, \_SB.PCI0.SBRG.LNKC, 0 },
	
			Package(){0x0000FFFF, 3, \_SB.PCI0.SBRG.LNKD, 0 },
		})
		Name(AG22, Package(){
	
			Package(){0x0000FFFF, 2, 0, 18 },
	
			Package(){0x0000FFFF, 3, 0, 19 },
		})
	
	
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB) {
	
	
	
	
		Device(PCI0) {	
			Name(_HID, EISAID("PNP0A08"))	
			Name(_CID, EISAID("PNP0A03"))	
			Name(_ADR, 0x00000000)
			Method(^BN00, 0){ return(0x0000) }	
			Method(_BBN, 0){ return(BN00()) }	
			Name(_UID, 0x0000)	
				Method(_PRT,0) {
					If(PICM) { Return(AR00) }
					Return (PD00) 
				} 
	
	
	
	
	
			






			



















			
			            Name(EP_B, 0) 
			            Name(MH_B, 0) 
			            Name(PC_B, 0) 
			            Name(PC_L, 0) 
			            Name(DM_B, 0) 
			
			            Method (_INI)
			            {
			                Store(0x01, OSYS)      
			                If (CondRefOf (_OSI, local0))
			                {
			                    
			                    
			                    
			                    If (\_OSI("Windows 2001"))
			                    {
			                        Store (0x01, OSYS)
			                    }
			                    If (\_OSI("Windows 2001 SP1"))
			                    {
			                        Store (0x02, OSYS)
			                    }
			                    If (\_OSI("Windows 2001 SP2"))
			                    {
			                        Store (0x04, OSYS)
			                    }
			                    If (\_OSI("Windows 2001.1"))
			                    {
			                        Store (0x08, OSYS)
			                    }
			                    If (\_OSI("Windows 2006"))
			                    {
			                        Store (0x10, OSYS)
			                    }
			                    If (\_OSI("Windows 2009"))
			                    {
			                        Store (0x11, OSYS)
			                    }
			                    If (\_OSI("Windows 2012"))
			                    {
			                        Store (0x12, OSYS)
			                    }
			                } 
			            } 
			            
			            
			            
			            
			            
			
									
			            
			            
			            Method(GPCB,0,Serialized)
			            {
			            
			            
			            
			               Return (0xE0000000)
			            
			            }

			



















			
			
			
			
			
			
			OperationRegion(PXCS,PCI_Config,0x40,0xC0) 
			  Field(PXCS,AnyAcc, NoLock, Preserve)
			    {      
			        Offset(0x10), 
			        L0SE,   1,    
			        ,   7,
			        Offset(0x12), 
			        ,   13,
			        LASX,   1,    
			        Offset(0x1A), 
			        ABPX,   1,    
			        ,   2,
			        PDCX,   1,    
			        ,   2,
			        PDSX,   1,    
			        ,   1,
			        Offset(0x20), 
			        ,   16,
			        PSPX,   1,    
			        Offset(0x98), 
			        ,   30,
			        HPEX,   1,    
			        PMEX, 1,       
			        Offset(0x9C), 
			        ,   30,
			        HPSX,   1,    
			        PMSX,   1     
			  }
			
			   Name(SUPP,0)  
			   Name(CTRL,0)  
			
			
			Method(_OSC,4)
			{ 
			  If(LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766")))
			  {
			    
			    CreateDWordField(Arg3,0,CDW1)
			    CreateDWordField(Arg3,4,CDW2)
			    CreateDWordField(Arg3,8,CDW3)
			    
			    
			    Store(CDW2,SUPP)
			    Store(CDW3,CTRL)
			    
			    
			    
			    
			    
			    
			    
			    
			    If(LNotEqual(And(SUPP, 0x16), 0x16))
			    {
			      And(CTRL,0x1E,CTRL) 
			    }
			    
			    
			    
			    
			    If(LEqual(AERC, Zero))
			    {
			      And(CTRL,0x15,CTRL)
			    }
			    Else
			    {
			      And(CTRL,0x1D,CTRL)
			    }
			    
			    
			    If(Not(And(CDW1,1))) 
			    { 
			      
			      If(And(CTRL,0x01)) 
			      {
			        Store(0,HPEX) 
			        Store(1,HPSX) 
			      }
			      
			      If(And(CTRL,0x04)) 
			      {
			        Store(0,PMEX) 
			        Store(1,PMSX) 
			      }
			    }
				
			    If(LNotEqual(Arg1,One))
			    { 
			      Or(CDW1,0x08,CDW1)
			    }
			    If(LNotEqual(CDW3,CTRL))
			    { 
			      Or(CDW1,0x10,CDW1)
			    } 
			    Store(CTRL,CDW3)
			    Return(Arg3)
			  }Else
			  {
			    Or(CDW1,4,CDW1) 
			    Return(Arg3)
			  }
			} 
			






			



















			
			Name(PBRS, ResourceTemplate() {
			   WORDBusNumber(            
			      ResourceProducer,      
			      MinFixed,              
			      MaxFixed,              
			      PosDecode,             
			      0x0000,                
			      0x0000,                
			      0x00ff,                
			      0x0000,                
			      0x0100                 
			   )   
			   
			   WORDIO(                   
			      ResourceProducer,      
			      MinFixed,              
			      MaxFixed,              
			      PosDecode,             
			      EntireRange,
			      0x0000,                
			      0x0000,                
			      0x0cf7,                
			      0x0000,                
			      0x0cf8                 
			   )
			   
			   IO(                       
			      Decode16, 
			      0x0cf8, 
			      0xcf8, 
			      1,
			      8
			   )
			   
			   WORDIO(                   
			      ResourceProducer,      
			      MinFixed,              
			      MaxFixed,              
			      PosDecode,             
			      EntireRange,
			      0x0000,                
			      0x0d00,                
			      0xffff,                
			      0x0000,                
			      0xf300                 
			   )
			   
			   DWORDMEMORY(              
			      ResourceProducer,      
			      PosDecode,
			      MinFixed,              
			      MaxFixed,              
			      Cacheable,
			      ReadWrite,
			      0x00000000,            
			      0x00000000,            
			      0x00000000,            
			      0x00000000,            
			      0x00000000,            
			      ,
			      ,
			      LVGA  
			   )
			    
			   DWORDMEMORY(              
			      ResourceProducer,       
			      PosDecode,
			      MinFixed,               
			      MaxFixed,               
			      Cacheable,
			      ReadWrite,
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      ,
			      ,
			      OPMR 
			    )
			      
			   DWORDMemory(              
			      ResourceProducer,      
			      PosDecode,             
			      MinFixed,              
			      MaxFixed,              
			      NonCacheable,
			      ReadWrite,
			      0x00000000,            
			      0xA0000000,            
			 
			      0xDFFFFFFF,            
			      0x00000000,            
			      0x40000000,            
			      ,                      
			      ,                      
			      MEM1                   
			   )
			   
			   QWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x00000000,             
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000,             
			      0x00000000000,          
			      ,
			      ,
			      MEM2                    
			   )
			
			
			
			
			
			   DWORDMemory(              
			      ResourceProducer,      
			      PosDecode,             
			      MinFixed,              
			      MaxFixed,              
			      NonCacheable,
			      ReadWrite,
			      0x00000000,            
			      0xFE010000,            
			      0xFE010FFF,            
			      0x00000000,            
			      0x00001000,            
			      ,                      
			      ,                      
			      SPIB           	     
			   )
			
			   
			    DWORDMemory(              
			      ResourceProducer,      
			      PosDecode,             
			      MinFixed,              
			      MaxFixed,              
			      NonCacheable,
			      ReadWrite,
			      0x00000000,            
			      0xFA000000,            
			 
			      0xFA0FFFFF,            
			      0x00000000,            
			      0x00100000,            
			      ,                      
			      ,                      
			      NPK1           
			   )
			   
			   DWORDMemory(              
			      ResourceProducer,      
			      PosDecode,             
			      MinFixed,              
			      MaxFixed,              
			      NonCacheable,
			      ReadWrite,
			      0x00000000,            
			      0xFB000000,            
			 
			      0xFB7FFFFF,            
			      0x00000000,            
			      0x00800000,            
			      ,                      
			      ,                      
			      NPK2                  
			   )
			   
			    DWORDMemory(              
			      ResourceProducer,      
			      PosDecode,             
			      MinFixed,              
			      MaxFixed,              
			      NonCacheable,
			      ReadWrite,
			      0x00000000,            
			      0xFA100000,            
			 
			      0xFA1007FF,            
			      0x00000000,            
			      0x00000800,            
			      ,                      
			      ,                      
			      NPK3                   
			   )
			
			
			})          
			
			
			Method(_CRS, 0x0, Serialized)
			{
			  If(And(LGCY,0x01)) 
			  {
			    
			    CreateDWordField(PBRS, ^OPMR._MIN, OPMN)
			    Store(0x000c0000, OPMN)
			    CreateDWordField(PBRS, ^OPMR._MAX, OPMX)
			    Store(0x000dffff, OPMX)
			    CreateDWordField(PBRS, ^OPMR._LEN, OPLN)
			    Store(0x20000, OPLN)
			  }
			
			  If(And(LGCY,0x80)) 
			  {
			    
			    CreateDWordField(PBRS, ^LVGA._MIN, LVMN)
			    Store(0x000a0000, LVMN)
			    CreateDWordField(PBRS, ^LVGA._MAX, LVMX)
			    Store(0x000bffff, LVMX)
			    CreateDWordField(PBRS, ^LVGA._LEN, LVLN)
			    Store(0x20000, LVLN)
			  }
			 
			  
			  CreateDWordField(PBRS, ^MEM1._MIN, PMMN)
			  Store(MMOB, PMMN)
			  CreateDWordField(PBRS, ^MEM1._MAX, PMMX)
			  Store(MMOL, PMMX)
			  CreateDWordField(PBRS, ^MEM1._LEN, PMLN)
			  Add(Subtract(PMMX,PMMN),1,PMLN)
			 
			  
			  If(LGreater(OSYS, 0x08)) {
			  	If(LNot(LEqual(MMHB,Zero)))
			  	{
			    	CreateQWordField(PBRS, ^MEM2._MIN, P2MN)
			    	Store(MMHB, P2MN)
			    	CreateQWordField(PBRS, ^MEM2._MAX, P2MX)
			    	Store(MMHL, P2MX)
			    	CreateQWordField(PBRS, ^MEM2._LEN, P2LN)
			    	Add(Subtract(P2MX,P2MN),1,P2LN)
			    }
			  }
			
			  Return(PBRS)
			}
			

			






			



















			
			
			
			
			
			Device(APIC)
			{
			    Name(_HID,EISAID("PNP0003"))        
			
			    Name(_CRS, ResourceTemplate()
			        {
			            
			            
			            Memory32Fixed(ReadOnly, 0xFEC00000, 0x1000) 
			            
			        }
			    )
			}
			


	
	
	
	
			Device(SBRG) { 
				Name(_ADR, 0x001F0000)
	
	
	
	
				






				


















				
				
				
				
				
				OperationRegion(ILBR, SystemMemory, 0xfdd03100, 0x10) 
				Field(ILBR, ByteAcc, NoLock, Preserve)
				{
				    PIRA, 8,
				    PIRB, 8,
				    PIRC, 8,
				    PIRD, 8,
				    PIRE, 8,
				    PIRF, 8,
				    PIRG, 8,
				    PIRH, 8
				}
				
				Device(LNKA)            
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 1)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRA, 0x80)) 
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRA, 0x80, PIRA)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				        
				                                
				        CreateWordField (BUF0, 0x01, IRQW)  
				                                
				        If (And(PIRA, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				            Store(One,Local0)
				        }
				                                                        
				        ShiftLeft(Local0,And(PIRA,0x0F),IRQW)       
				        Return(BUF0)                                
				    }                                                  
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)  
				
				        FindSetRightBit(IRQW,Local0)          
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else 
				        {
				            Or(Local0, 0x80,Local0)
				        }
				        store(Local0, PIRA)
				    }                                                  
				}    
				
				Device(LNKB)            
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 2)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRB, 0x80)) 
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRB, 0x80,PIRB)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				                                                
				        CreateWordField (BUF0, 0x01, IRQW)  
				                                                
				        If (And(PIRB, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				                Store(One,Local0)
				        }
				                                                            
				        ShiftLeft(Local0,And(PIRB,0x0F),IRQW)  
				        Return(BUF0)                                    
				    }                                                      
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)      
				
				        FindSetRightBit(IRQW,Local0)              
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else 
				        {
				            Or(Local0, 0x80,Local0)
				        }
				        Store(Local0, PIRB)
				    }                                                      
				}    
				
				Device(LNKC)                                            
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 3)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRC, 0x80)) 
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRC, 0x80,PIRC)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				                                                        
				        CreateWordField (BUF0, 0x01, IRQW)  
				                                                
				        If (And(PIRC, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				            Store(One,Local0)
				        }                                      
				        ShiftLeft(Local0,And(PIRC,0x0F),IRQW)  
				        Return(BUF0)                                
				    }                                                  
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)  
				
				        FindSetRightBit(IRQW,Local0)          
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else {
				            Or(Local0, 0x80,Local0)
				        }
				        Store(Local0, PIRC)
				    }                                                  
				}    
				
				Device(LNKD)                                        
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 4)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRD, 0x80))
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRD, 0x80,PIRD)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				        
				        CreateWordField (BUF0, 0x01, IRQW)  
				        
				        If (And(PIRD, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				            Store(One,Local0)
				        }  
				        ShiftLeft(Local0,And(PIRD,0x0F),IRQW)  
				        Return(BUF0)        
				    }                  
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)  
				
				        FindSetRightBit(IRQW,Local0)
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else 
				        {
				            Or(Local0, 0x80,Local0)
				        }
				        Store(Local0, PIRD)
				    }                  
				}    
				
				Device(LNKE)            
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 5)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRE, 0x80)) 
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRE, 0x80, PIRE)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				        
				                                
				        CreateWordField (BUF0, 0x01, IRQW)  
				                                
				        If (And(PIRE, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				            Store(One,Local0)
				        }
				                                                        
				        ShiftLeft(Local0,And(PIRE,0x0F),IRQW)       
				        Return(BUF0)                                
				    }                                                  
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)  
				
				        FindSetRightBit(IRQW,Local0)          
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else 
				        {
				            Or(Local0, 0x80,Local0)
				        }
				        store(Local0, PIRE)
				    }                                                  
				}    
				
				Device(LNKF)            
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 6)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRF, 0x80)) 
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRB, 0x80,PIRF)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				                                                
				        CreateWordField (BUF0, 0x01, IRQW)  
				                                                
				        If (And(PIRF, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				                Store(One,Local0)
				        }
				                                                            
				        ShiftLeft(Local0,And(PIRF,0x0F),IRQW)  
				        Return(BUF0)                                    
				    }                                                      
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)      
				
				        FindSetRightBit(IRQW,Local0)              
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else 
				        {
				            Or(Local0, 0x80,Local0)
				        }
				        Store(Local0, PIRF)
				    }                                                      
				}    
				
				Device(LNKG)                                            
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 7)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRG, 0x80)) 
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRG, 0x80,PIRG)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				                                                        
				        CreateWordField (BUF0, 0x01, IRQW)  
				                                                
				        If (And(PIRG, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				            Store(One,Local0)
				        }                                      
				        ShiftLeft(Local0,And(PIRG,0x0F),IRQW)  
				        Return(BUF0)                                
				    }                                                  
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)  
				
				        FindSetRightBit(IRQW,Local0)          
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else {
				            Or(Local0, 0x80,Local0)
				        }
				        Store(Local0, PIRG)
				    }                                                  
				}    
				
				Device(LNKH)                                        
				{
				    Name(_HID,EISAID("PNP0C0F"))
				
				    Name(_UID, 8)
				
				    Method(_STA,0,NotSerialized)         
				    {
				        If(And(PIRH, 0x80))
				        {
				          Return(0x9)
				        }
				        Else 
				        {
				          Return(0xB)
				        }    
				    }
				
				    Method(_DIS,0,NotSerialized)
				    {
				        Or(PIRH, 0x80,PIRH)
				    }
				
				    Method(_CRS,0,Serialized)
				    {
				        Name(BUF0,
				            ResourceTemplate()
				            {IRQ(Level,ActiveLow,Shared){0}})
				        
				        CreateWordField (BUF0, 0x01, IRQW)  
				        
				        If (And(PIRH, 0x80))
				        {
				            Store(Zero, Local0)
				        }
				        Else
				        {
				            Store(One,Local0)
				        }  
				        ShiftLeft(Local0,And(PIRH,0x0F),IRQW)  
				        Return(BUF0)        
				    }                  
				
				    Name(_PRS,
				        ResourceTemplate() 
				        {IRQ(Level,ActiveLow,Shared){6,7,10,11,12,14,15}})
				
				    Method(_SRS,1,NotSerialized)
				    {
				        CreateWordField (ARG0, 0x01, IRQW)  
				
				        FindSetRightBit(IRQW,Local0)
				        If (LNotEqual(IRQW,Zero)) 
				        {
				            And(Local0, 0x7F,Local0)
				            Decrement(Local0)
				        }
				        Else 
				        {
				            Or(Local0, 0x80,Local0)
				        }
				        Store(Local0, PIRH)
				    }                  
				}    
				

				






				



















				
				Device(GPIO)
				{
				  Name(_HID,"INTC3000")
				  Name(_CRS,ResourceTemplate() {
				 
				  Memory32Fixed(ReadWrite,0xFDC20000,0x1000,COM0)  
				  Memory32Fixed(ReadWrite,0xFDC50000,0x1000,COM1)  
				  Interrupt (ResourceConsumer, Level, ActiveLow, Shared) {0xE} 
				  }) 
				      
				  Method(_STA,0,NotSerialized)
				  { 
				    Return (GPST)
				  }
				}
				
				Device(HPET)	
				{
				  Name(_HID,EISAID("PNP0103"))
				  Name(_UID, 0)
				
				  Name(CRS0,ResourceTemplate()
				  {
				    Memory32Fixed(ReadOnly,0xFED00000,0x400,FED0)
				  })
				
				  Name(CRS1,ResourceTemplate()
				  {
				    Memory32Fixed(ReadOnly,0xFED01000,0x400,FED1)
				  })
				
				  Name(CRS2,ResourceTemplate()
				  {
				    Memory32Fixed(ReadOnly,0xFED02000,0x400,FED2)
				  })
				
				  Name(CRS3,ResourceTemplate()
				  {
				    Memory32Fixed(ReadOnly,0xFED03000,0x400,FED3)
				  })
				
				  Method(_CRS,0,Serialized)
				  {
				     Switch(HADR)
				     {
				       Case(0)
				       {
				          Return(CRS0)
				       }
				       Case(1)
				       {
				          Return(CRS1)
				       }
				       Case(2)
				       {
				          Return(CRS2)
				       }
				       Case(3)
				       {
				          Return(CRS3)
				       }
				     }
				     Return(CRS0)
				  }
				
				  Method(_STA,0)
				  {
				    
				
				    If(LGreaterEqual(OSYS,2001)) {
				      Return(0x000F) 
				    }
				    Else { 
				      Return(0x000B) 
				    }
				    Return(0x0000)			
				  }
				}
				
				Device(IPIC)	
				{
				  Name(_HID,EISAID("PNP0000"))
				
				  Name(_CRS,ResourceTemplate()
				  {
				    IO(Decode16,0x20,0x20,0x01,0x02)
				    IO(Decode16,0x24,0x24,0x01,0x02)
				    IO(Decode16,0x28,0x28,0x01,0x02)
				    IO(Decode16,0x2C,0x2C,0x01,0x02)
				    IO(Decode16,0x30,0x30,0x01,0x02)
				    IO(Decode16,0x34,0x34,0x01,0x02)
				    IO(Decode16,0x38,0x38,0x01,0x02)
				    IO(Decode16,0x3C,0x3C,0x01,0x02)
				    IO(Decode16,0xA0,0xA0,0x01,0x02)
				    IO(Decode16,0xA4,0xA4,0x01,0x02)
				    IO(Decode16,0xA8,0xA8,0x01,0x02)
				    IO(Decode16,0xAC,0xAC,0x01,0x02)
				    IO(Decode16,0xB0,0xB0,0x01,0x02)
				    IO(Decode16,0xB4,0xB4,0x01,0x02)
				    IO(Decode16,0xB8,0xB8,0x01,0x02)
				    IO(Decode16,0xBC,0xBC,0x01,0x02)
				    IO(Decode16,0x4D0,0x4D0,0x01,0x02)
				    IRQNoFlags() {2}
				  })
				}
				
				
				
				
				Device(MCH)
				{
				  Name(_HID, EISAID("PNP0C01"))   
				  Name(_UID, 10)			        
				
				  Name(MCHR, ResourceTemplate()
				  {
				    
				    
				   
				   
				      Memory32Fixed(ReadWrite, 0x1F0000, 0x10000)
				   
				    
				    
				    
				    Memory32Fixed(ReadOnly, 0xE0000000, 0x10000000)
				    
				    
				    
				    Memory32Fixed(ReadOnly, 0x00000000, 0x00000000, TSEG)
				
				    
				    
				    Memory32Fixed(ReadOnly, 0xFED60000, 0x1000)
				  })
				
				  Method (_CRS, 0, Serialized)
				  {
				    
				    
				    CreateDWordField(MCHR, ^TSEG._BAS, TSMN)
				    Store(TSGB, TSMN)
				    CreateDWordField(MCHR, ^TSEG._LEN, TSLN)
				    Store(TSSZ, TSLN)
				    return(MCHR)
				  } 
				}
				
				Device(LDRC)  
				{
				  Name(_HID,EISAID("PNP0C02"))
				
				  Name(_UID, 0x31)
				
				  Name(LPCR,ResourceTemplate()
				  {
				    IO(Decode16,0x2E,0x2E,0x1,0x02)		
				    IO(Decode16,0x4E,0x4E,0x1,0x02)		
				    IO(Decode16,0x61,0x61,0x1,0x1)		
				    IO(Decode16,0x63,0x63,0x1,0x1)		
				    IO(Decode16,0x65,0x65,0x1,0x1)		
				    IO(Decode16,0x67,0x67,0x1,0x1)		
				    IO(Decode16,0x70,0x70,0x1,0x1)		
				    IO(Decode16,0x80,0x80,0x1,0x1)		
				    IO(Decode16,0x92,0x92,0x1,0x1)		
				    IO(Decode16,0xB2,0xB2,0x01,0x02)	
				    IO(Decode16,0x680,0x680,0x1,0x20)	
				    
				    
				    Memory32Fixed(ReadOnly, 0x000E0000, 0x20000)
				
				    
				    Memory32Fixed(ReadOnly,0xFF800000,0x800000)
				  })
				
				  Method (_CRS, 0, Serialized)
				  {
				    return(LPCR)
				  }
				}
				
				Device(RTC) 
				{
				  Name(_HID,EISAID("PNP0B00"))
				
				  Name(_CRS,ResourceTemplate()
				  {
				    IO(Decode16,0x70,0x70,0x01,0x08)
				    IRQNoFlags() {8}
				  })
				}
				
				Device(TIMR)    
				{
				  Name(_HID,EISAID("PNP0100"))
				
				  Name(_CRS,ResourceTemplate()
				  {
				    IO(Decode16,0x40,0x40,0x01,0x04)
				    IO(Decode16,0x50,0x50,0x10,0x04)
				    IRQNoFlags() {0}
				  })
				}
				
				
				Device(CPLD)  
				{
				  Name(_HID,EISAID("CPLD000"))
				
				  Method(_STA,0,Serialized)
				  {
				    Return(0x00)        
				  }
				
				  Name(_CRS,ResourceTemplate()
				  {
				    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive) {0x33}
				  })
				}
				
				
				
				
				





















































































































				
				
				





































				
				
				
				
				Device (ASD0)
				{
				  Name (_HID, EISAID ("ASD0001"))
				  Name (_UID, 0)
				
				  Method (_STA, 0, NotSerialized)
				  {
				    
				    
				    If (LEqual (BDID, 0x21))
				    {
				        Return (0x0F)
				    }
				
				    Else
				    {
				        Return (0x00)
				    }
				  }
				}
				
				
				
				Device (ASD1)
				{
				  Name (_HID, EISAID ("ASD0001"))
				  Name (_UID, 1)
				
				  Method (_STA, 0, NotSerialized)
				  {
				    
				    
				    If (LEqual (BDID, 0x21))
				    {
				        Return (0x0F)
				    }
				
				    Else
				    {
				        Return (0x00)
				    }
				  }
				}
				
				
				
				Device (ASD2)
				{
				  Name (_HID, EISAID ("ASD0001"))
				  Name (_UID, 2)
				
				  Method (_STA, 0, NotSerialized)
				  {
				    
				    
				    If (LEqual (BDID, 0x21))
				    {
				        Return (0x0F)
				    }
				
				    Else
				    {
				        Return (0x00)
				    }
				  }
				}
				
				
				
				Device (ESPI)
				{
				  Name (_HID, EISAID ("ASD1001"))
				  Name (_UID, 0)
				
				  Method (_STA, 0, NotSerialized)
				  {
				    
				    
				    If (LEqual (BDID, 0x21))
				    {
				        Return (0x0F)
				    }
				
				    Else
				    {
				        Return (0x00)
				    }
				  }
				}
				
				
				
				Device (GPDV)
				{
				  Name (_HID, EISAID ("ASD2001"))
				  Name (_UID, 0)
				
				  Method (_STA, 0, NotSerialized)
				  {
				    
				    
				    If (LEqual (BDID, 0x21))
				    {
				        Return (0x0F)
				    }
				
				    Else
				    {
				        Return (0x00)
				    }
				  }
				}

				
































				
				External(IPEN)
				
				Device(IPMC)
				{
				
				    
				    
				    
				    
				  
				    Name(ECFL, 0x80000000)
				  
				    
				    
				    
				
				    Name(OSNV, Ones)  
				
				    Method(OSNF, 0) 
				    {
				        
				        if(LNotEqual(OSNV, Ones)) 
				        {
				          Return(OSNV)
				        }
				
				        
				        Store(1, OSNV)
				 
				        
				        if(CondRefOf(\_OSI,Local1)) 
				        {
				          if (\_OSI("Windows 2008"))
				          {  
				             
				             Store( 0, OSNV)
				          }
				          if (\_OSI("Windows 2007"))
				          { 
				            
				            Store( 0, OSNV)
				          }
				          if (\_OSI("Windows 2006")) 
				          { 
				            
				            Store( 0, OSNV)
				          }
				          
				          if (\_OSI("Windows 2001.1 SP1")) 
				          {
				            if (And(ECFL, 0x01)) 
				            {
				              
				              Store(0, OSNV) 
				            }
				          }
				        } else {
				          Store(1, OSNV)
				        }
				
				        Return(OSNV)
				    }	
				
				
				    
				    Method(_SRV)
				    {
				        
				        Return(0x0200)                  
				    }
				
				    Method(_STA, 0) 
				    { 
				        
				        
				        
				        If (LEqual(IPEN, 0)) {
				          Return(0)
				        }
				
				        Store (0, Local0)
				        
				        
				        
				        if(LEqual(OSNF,0)) 
				        {
				          
				          Store (0xF, Local0)
				        }
				
				        Return(Local0)	
				        
				        
				        
				        
				        
				        
				    }   
				
				    
				    Name(_CRS, ResourceTemplate()
				    {
				        
				        IO(Decode16, 0xCA8, 0xCA8, 0, 1)
				        IO(Decode16, 0xCAC, 0xCAC, 0, 1)           
				    })
				
				    Name(_HID, "IPI0001")		        
				    Name(_IFT, 0x1)                 
				    Name(_STR, Unicode("IPMI_KCS"))
				
				    Name(_UID, 0)  
				
				    
				    OperationRegion(IPMS, SystemIO, 0xCA0, 0x08)
				
				    
				    
				    OperationRegion(APPN, SystemIO, 0x0600, 0x100)
				    Field(APPN, BufferAcc, NoLock, Preserve)
				    {
				        Offset(0x06),       
				        SPWS, 8,            
				        GPWS, 8             
				    }
				
				    
				    Method(SPWM, 2, Serialized)
				    {
				        
				        Name(BUFF, Buffer (66) {})
				
				        
				        CreateByteField(BUFF, 0, STAT)      
				        CreateByteField(BUFF, 1, LENG)      
				
				        
				        CreateByteField(BUFF, 2, SPST)      
				        CreateByteField(BUFF, 3, DPST)      
				
				        
				        Store(2, LENG)                      
				        Store(Arg0, SPST)                   
				        Store(Arg1, DPST)                   
				
				        
				        Store(Store(BUFF, SPWS), BUFF)
				
				        
				        CreateByteField(BUFF, 2, CMPC)          
				
				        
				        If( LAnd ( LEqual(STAT, 0), LEqual(CMPC, 0) ) )
				        {
				            Return(0)
				        }
				
				        
				        Else
				        {
				            Return(CMPC)        
				        }
				    }
				
				    
				    Method(GPWM, 0, Serialized)
				    {
				        
				        Name(BUFF, Buffer (66) {})
				
				        
				        Name(OBUF, Buffer (3) {})
				
				        
				        CreateByteField(BUFF, 0, STAT)      
				        CreateByteField(BUFF, 1, LENG)      
				
				        
				        Store(0, LENG)                      
				
				        
				        Store(Store(BUFF, GPWS), BUFF)
				
				        
				        CreateByteField(BUFF, 2, CMPC)      
				        CreateByteField(BUFF, 3, SPST)      
				        CreateByteField(BUFF, 4, DPST)      
				
				        
				        CreateByteField(OBUF, 0, COMP)      
				        CreateByteField(OBUF, 1, SYSP)      
				        CreateByteField(OBUF, 2, DEVP)      
				
				        
				        Store(CMPC, COMP)
				        Store(SPST, SYSP)
				        Store(DEVP, DPST)
				
				        
				        If( LNotEqual(STAT, 0) )
				        {
				            
				            
				            Store(0xCE, COMP)
				        }
				
				        
				        Return(OBUF)
				
				    }
				
				} 
				
				

				






				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
					OperationRegion(SMCF,	
						SystemIO,	
						0x2E,		
						2)		
								
					Field(SMCF, ByteAcc, NoLock,Preserve){
						INXF, 8,	
						DATF, 8 	
					}
				
				
				
				
					IndexField(INXF, DATF, ByteAcc, NoLock, Preserve){
						
						
						Offset(7),
						LDNF, 8,  
				
						Offset(0x20),
						DIDF, 8, 
				
						
						
						
						Offset(0x30),
						ACTF, 8, 
				
						Offset(0x60),
						AHFF, 8, 
						ALFF, 8, 
				
						Offset(0x70),
						INTF, 8, 
				
						Offset(0x71),
						INSF, 8, 
				
						Offset(0x74),
						DMCF, 8, 
					}			
				
				
				
				
				
				
				
					Method(ENFF, 1){
						Store(0xa5, INXF)
				        Store(0xa5, INXF)
						Store(Arg0, LDNF)	
					}
				
				
				
				
				
					Method(EXFF, 0){
						Store(0xaa, INXF)
					}
				
				
				






				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				Method(NOSL) {
				
				    
				    
				    
				    If (IPEN) {
				        Return(0x00)
				    }
				    Else {
				        Return(0x01)
				    }     
				}
				
				
				Device(CUR1) {  
				
				    
				    NAME(_HID, EISAID("PNP0501"))  
					Name(_UID, 3)			
				
				    
				    
				    
				    Method(_STA,0,NotSerialized) { 
				
				        
				        
				        
				        
				        If (NOSL()){
				           Return (0x00)
				        }
				
				        
				        ENFF(0x02)
				
				        
				        
				        
				        
				        
				        If (ACTF) {
				            
				            EXFF()
				
				            
				            
				            
				            
				            Return(0x0F)
				        } 
				        
				        
				        
				        
				        
				        Else {
				            
				            
				            
				            
				            
				            If (LOr(AHFF,ALFF)) {
				                
				                EXFF()
				
				                
				                
				                
				                
				                
				                
				                Return(0x0D)
				            }
				
				            Else {
				                
				                EXFF()
				
				                
				                Return(0x00)
				            }
				        }
				    } 
				
				
				    
				    
				    
				    Method(_DIS,0,NotSerialized) { 
				        
				        ENFF(0x02)
				        
				        
				        Store(0x00,ACTF)
				
				        
				        EXFF()
				    }
				
				    
				    
				    
				    Method(_CRS,0,Serialized) { 
				        Name(BUF0,ResourceTemplate()
				            {
				            IO(Decode16,0x3F8,0x3F8,0x08,0x08)
				            IRQNoFlags(){4}
				            })
				        
				        
				        
				        
				        
				        CreateByteField (BUF0, 0x02, IOLO) 
				        CreateByteField (BUF0, 0x03, IOHI) 
				        CreateByteField (BUF0, 0x04, IORL) 
				        CreateByteField (BUF0, 0x05, IORH) 
				        CreateWordField (BUF0, 0x09, IRQL) 
				        
				        
				        ENFF(0x02)
				
				        
				        
				        
				        
				        
				        
				        Store(ALFF, IOLO)    
				        Store(ALFF, IORL)    
				
				        
				        Store(AHFF, IOHI)   
				        Store(AHFF, IORH)   
				
				        
				        
				        
				        
				        Store(0x01,Local0)
				        ShiftLeft(Local0,INTF,IRQL)
				
				        
				        EXFF()
				        Return(BUF0) 
				    
				    } 
				
				    
				    
				    
				    Method(_PRS, 0, Serialized)          
				    {
				       Name(BUF0,ResourceTemplate()
				       {
				         
				         StartDependentFn(0,2)
				         {
				          IO(Decode16,0x3E8,0x3E8,0x01,0x08) 
				          IRQNoFlags(){5}
				         }
				         EndDependentFn()
				       })
				
				      Return(BUF0)      
				    }                 
				
				        
				
				    
				    
				    
				    Method(_SRS,1,NotSerialized) {    
				        
				        
				        
				        
				        
				        
				        CreateByteField (Arg0, 0x02, IOLO) 
				        CreateByteField (Arg0, 0x03, IOHI) 
				        
				        CreateWordField (Arg0, 0x09, IRQL) 
				
				
				        
				        ENFF(0x02)
				
				        
				        Store(IOLO, ALFF)
				        Store(IOHI, AHFF)
				
				        FindSetRightBit(IRQL,INTF)
				        If (LNotEqual(IRQL,Zero)) {Decrement(INTF)}
				        
				        
				        Store(0x01,ACTF)
				
				        
				        EXFF()
				
				    } 
				
				
				
				









				
				
				} 
				
				
				

				
				
				

	
	
	
	
				Device(SIO1) {
					Name(_HID, EISAID("PNP0C02"))	
					Name(_UID,0x0)	
				
	
	
	
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Name(CRS, ResourceTemplate(){
					        IO(Decode16, 0, 0, 0, 0, IOI)   
					        IO(Decode16, 0, 0, 0, 0, IO1)   
					        IO(Decode16, 0, 0, 0, 0, IO2)   
					        IO(Decode16, 0, 0, 0, 0, IO3)   
					    }) 
					
					    Method (_CRS, 0){
					        
					        
					        
					        If(LAnd(LLess(SP1O, 0x3F0), LGreater(SP1O, 0x0F0))){
					            CreateWordField(CRS, ^IOI._MIN, GPI0)
					            CreateWordField(CRS, ^IOI._MAX, GPI1)
					            CreateByteField(CRS, ^IOI._LEN, GPIL)
					            Store(SP1O, GPI0)    
					            Store(SP1O, GPI1)
					            Store(0x02, GPIL)    
					        }
					
					        
					        If(IO1B){
					            CreateWordField(CRS, ^IO1._MIN, GP10)
					            CreateWordField(CRS, ^IO1._MAX, GP11)
					            CreateByteField(CRS, ^IO1._LEN, GPL1)
					            Store(IO1B, GP10)    
					            Store(IO1B, GP11)
					            Store(IO1L, GPL1)    
					        }
					
					        
					        If(IO2B){
					            CreateWordField(CRS, ^IO2._MIN, GP20)
					            CreateWordField(CRS, ^IO2._MAX, GP21)
					            CreateByteField(CRS, ^IO2._LEN, GPL2)
					            Store(IO2B, GP20)    
					            Store(IO2B, GP21)
					            Store(IO2L, GPL2)    
					        }
					        
					        
					        If(IO3B){
					            CreateWordField(CRS, ^IO3._MIN, GP30)
					            CreateWordField(CRS, ^IO3._MAX, GP31)
					            CreateByteField(CRS, ^IO3._LEN, GPL3)
					            Store(IO3B, GP30)    
					            Store(IO3B, GP31)
					            Store(IO3L, GPL3)    
					        }
					        Return(CRS)
					    }    
					
					    
					    
					    
					    
					    
					    
					    
					    Name (DCAT, Package(0x15){
					    
					    
					    
					        0x02,    
					        0x03,    
					        0x01,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0x05,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0x05,    
					        0xFF,    
					
					        0x06,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					    })
					
					    
					    
					    
					    Mutex(MUT0, 0)    
					
					    
					    
					    
					    
					    Method(ENFG, 1) {
					        Acquire(MUT0, 0xFFF)
					        
					        Store(ENTK, INDX)
					        Store(ENTK, INDX)
					        Store(Arg0, LDN)    
					    }
					
					    
					    
					    
					    Method(EXFG, 0) {
					        
					        Store(EXTK, INDX)
					        Release(MUT0)
					    }
					
					    
					    
					    
					    
					    Method(LPTM, 1){
					        ENFG(CGLD(Arg0))        
					        
					        And(OPT0, 0x02, Local0) 
					        EXFG()                  
					        Return(Local0)
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    
					    
					    
					    OperationRegion(IOID,   
					        SystemIO,           
					        SP1O,               
					        2)                  
					                            
					    Field(IOID, ByteAcc, NoLock,Preserve){
					        INDX, 8,            
					        DATA, 8             
					    }
					
					    
					    
					    
					    IndexField(INDX, DATA, ByteAcc, NoLock, Preserve){
					        Offset(0x07),
					        LDN, 8,         
					
					        Offset(0x21),
					        SCF1, 8,        
					        Offset(0x22),
					        SCF2, 8,        
					        Offset(0x23),
					        SCF3, 8,        
					        Offset(0x24),
					        SCF4, 8,        
					        Offset(0x25),
					        SCF5, 8,        
					        Offset(0x26),
					        SCF6, 8,        
					        Offset(0x29),
					        CKCF, 8,        
					        Offset(0x30),
					        ACTR, 8,        
					        Offset(0x60),
					        IOAH, 8,        
					        IOAL, 8,        
					        IOH2, 8,        
					        IOL2, 8,        
					        Offset(0x70),
					        INTR, 4,        
					        INTT, 4,        
					        Offset(0x74),
					        DMCH, 8,        
					        Offset(0xE0),
					        RGE0, 8,        
					        RGE1, 8,        
					        RGE2, 8,        
					        RGE3, 8,        
					        RGE4, 8,        
					        RGE5, 8,        
					        RGE6, 8,        
					        RGE7, 8,        
					        RGE8, 8,        
					        RGE9, 8,        
					        Offset(0xF0),
					        OPT0, 8,        
					        OPT1, 8,        
					        OPT2, 8,        
					        OPT3, 8,        
					        OPT4, 8,        
					        OPT5, 8,        
					        OPT6, 8,        
					        OPT7, 8,        
					        OPT8, 8,        
					        OPT9, 8,        
					        OPTA, 8,        
					        OPTB, 8,        
					        OPTC, 8,        
					    }        
					
					
					
					
					
					
					
					
					
					    Method(CGLD, 1) {
					        Return(DeRefOf(Index(DCAT, Arg0)))    
					    }
					
					
					
					
					
					
					
					
					
					
					
					    Method(DSTA, 1) {
					
					        
					        
					        
					        
					        ENFG(CGLD(Arg0))        
					        Store(ACTR, Local0)     
					        Or(ShiftLeft(IOAH, 8),IOAL,Local1) 
					        EXFG()                            
					
					        
					        If(LEqual(Local0, 0xFF)) {Return(0x0)}    
					
					        
					        
					        And(Local0, 1, Local0)  
					
					        
					        If(LLess(Arg0,0x10)) {Or(IOST, ShiftLeft(Local0, Arg0), IOST)}
					
					        
					        
					        If(Local0){ 
					            Return(0x0F)            
					        }    
					        Else{
					            If(LLess(Arg0,0x10)){
					                
					                If(And(ShiftLeft(1, Arg0), IOST)){ Return(0x0D)}  
					                
					                
					                Else{ Return(0x00)}  
					            }
					            Else{
					                If(Local1) { Return(0x0D)}  
					                Return(0x00) 
					            }
					        }
					    } 
					
					
					
					
					
					
					
					
					
					
					
					    Method(DCNT, 2) {
					
					        ENFG(CGLD(Arg0))    
					
					        
					        
					        
					        If(LAnd(LLess(DMCH,4), LNotEqual(And(DMCH, 3, Local1),0))){
					            rDMA(Arg0, Arg1, Increment(Local1))
					        }
					
					        Store(Arg1, ACTR)           
					        ShiftLeft(IOAH, 8, local1)  
					        Or(IOAL, Local1, Local1)
					
					        
					        
					        
					        
					        
					        RRIO(Arg0, Arg1, Local1, 0x08)
					
					        EXFG()              
					    } 
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					Name(CRS1, ResourceTemplate(){
					    IO(Decode16, 0, 0, 1, 0, IO01)
					    IRQNoFlags(IRQ1) {}
					    DMA(Compatibility, NotBusMaster, Transfer8, DMA1) {}
					})
					CreateWordField(CRS1, IRQ1._INT, IRQM)    
					CreateByteField(CRS1, DMA1._DMA, DMAM)    
					CreateWordField(CRS1, IO01._MIN, IO11)    
					CreateWordField(CRS1, IO01._MAX, IO12)    
					CreateByteField(CRS1, IO01._LEN, LEN1)    
					
					
					Name(CRS2, ResourceTemplate(){
					    IO(Decode16, 0, 0, 1, 0, IO02)
					    IO(Decode16, 0, 0, 1, 0, IO03)
					    IRQNoFlags(IRQ2) {}
					        DMA(Compatibility, NotBusMaster, Transfer8, DMA2) {}
					})
					CreateWordField(CRS2, IRQ2._INT, IRQE)    
					CreateByteField(CRS2, DMA2._DMA, DMAE)    
					CreateWordField(CRS2, IO02._MIN, IO21)    
					CreateWordField(CRS2, IO02._MAX, IO22)    
					CreateByteField(CRS2, IO02._LEN, LEN2)    
					CreateWordField(CRS2, IO03._MIN, IO31)    
					CreateWordField(CRS2, IO03._MAX, IO32)    
					CreateByteField(CRS2, IO03._LEN, LEN3)    
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DCRS, 2) {
					        ENFG(CGLD(Arg0))            
					
					        
					        ShiftLeft(IOAH, 8, IO11)    
					        Or(IOAL, IO11, IO11)        
					        Store(IO11, IO12)           
					
					        
					        
					        
					        
					        
					        
					        Store(0x08, LEN1)
					
					        
					        If(INTR){
					            ShiftLeft(1, INTR, IRQM)
					        } 
					        Else{
					            Store(0, IRQM)          
					        }
					
					        
					        
					        
					        
					        If(LOr(LGreater(DMCH,3), LEqual(Arg1, 0))){
					            Store(0, DMAM)          
					        } 
					        Else{
					            And(DMCH, 3, Local1)
					            ShiftLeft(1, Local1, DMAM)
					        }
					        EXFG()                      
					        Return(CRS1)                
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DCR2, 2) {
					        ENFG(CGLD(Arg0))            
					
					        
					        ShiftLeft(IOAH, 8, IO21)    
					        Or(IOAL, IO21, IO21)        
					        Store(IO21, IO22)           
					        Store(0x08, LEN2)
					
					        
					        ShiftLeft(IOH2, 8, IO31)    
					        Or(IOL2, IO31, IO31)        
					        Store(IO31, IO32)           
					        Store(0x08, LEN3)
					
					        
					        If(INTR){
					            ShiftLeft(1, INTR, IRQE)
					        } 
					        Else{
					            Store(0, IRQE)          
					        }
					
					        
					        
					        
					        
					        If(LOr(LGreater(DMCH,3), LEqual(Arg1, 0))){
					            Store(0, DMAE)          
					        } Else {
					            And(DMCH, 3, Local1)
					            ShiftLeft(1, Local1, DMAE)
					        }
					
					        EXFG()                      
					        Return(CRS2)                
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DSRS, 2) {
					        If(And(LEqual(Arg1, 0x02),LPTM(Arg1) ) ) {        
					                DSR2(Arg0, Arg1)
					        } Else {
					            
					            CreateWordField(Arg0, ^IRQ1._INT, IRQM)    
					            CreateByteField(Arg0, ^DMA1._DMA, DMAM)    
					            CreateWordField(Arg0, ^IO01._MIN, IO11)    
					    
					            ENFG(CGLD(Arg1))            
					    
					            
					            And(IO11, 0xFF, IOAL)       
					            ShiftRight(IO11, 0x8, IOAH) 
					    
					            
					            If(IRQM){
					                FindSetRightBit(IRQM, Local0)
					                Subtract(Local0, 1, INTR)
					            }Else{
					                Store(0, INTR)          
					            }
					    
					            
					            If(DMAM){
					                FindSetRightBit(DMAM, Local0)
					                Subtract(Local0, 1, DMCH)
					            }Else{
					                Store(4, DMCH)          
					            }
					    
					            EXFG()                      
					    
					            
					            DCNT(Arg1, 1)               
					    
					            Store(Arg1, Local2)
					            If (LGreater(Local2, 0)){Subtract(Local2, 1, Local2)}
					        }
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DSR2, 2) {
					        CreateWordField(Arg0, ^IRQ2._INT, IRQE)    
					        CreateByteField(Arg0, ^DMA2._DMA, DMAE)    
					        CreateWordField(Arg0, ^IO02._MIN, IO21)    
					        CreateWordField(Arg0, ^IO03._MIN, IO31)    
					
					        ENFG(CGLD(Arg1))                
					
					        
					        And(IO21, 0xFF, IOAL)           
					        ShiftRight(IO21, 0x8, IOAH)     
					
					        And(IO31, 0xFF, IOL2)           
					        ShiftRight(IO31, 0x8, IOH2)     
					
					        
					        If(IRQE){
					            FindSetRightBit(IRQE, Local0)
					            Subtract(Local0, 1, INTR)
					        }Else{
					            Store(0, INTR)              
					        }
					
					        
					        If(DMAE){
					            FindSetRightBit(DMAE, Local0)
					            Subtract(Local0, 1, DMCH)
					        }Else{
					            Store(4, DMCH)              
					        }
					
					        EXFG()                          
					
					        
					        DCNT(Arg1, 1)                   
					
					        Store(Arg1, Local2)
					        If (LGreater(Local2, 0)){Subtract(Local2, 1, Local2)}
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					Name(PMFG, 0x00)    
					
					
					
					
					
					
					
					Method(SIOS, 1){
					    
					    Store("SIOS", Debug)
					
					    
					    
					    If(LNotEqual(0x05, Arg0)){
					        ^ENFG(0x0A)                        
					
					        
					        Store(0xFF, ^OPT9)   
					        Store(0xFF, ^OPTA) 
					
					        
					        if(\KBFG){
					            Or(^OPTB, 0x02, ^OPTB)    
					            Or(^RGE4, 0x40, ^RGE4)
					        }        
					        Else{
					            And(^OPTB, 0xFD, ^OPTB)   
					            And(^RGE4, 0xBF, ^RGE4)
					        }
					        if(\MSFG){
					            Or(^OPTB, 0x01, ^OPTB)    
					            Or(^RGE4, 0x80, ^RGE4)
					        }        
					        Else{
					            And(^OPTB, 0xFE, ^OPTB)   
					            And(^RGE4, 0x7F, ^RGE4)
					        }
					
					        
					        Or(^RGE3, 0x01, ^RGE3)
					
					        ^EXFG()
					    }
					}
					
					
					
					
					
					
					
					Method(SIOW, 1){
					    Store("SIOW", Debug)
					
					    
					    ^ENFG(0x0A)                    
					
					    
					    Store(^OPT9, PMFG)             
					    And(^OPT9, 0xFF, ^OPT9)   
					
					    
					    And(^RGE3, 0xFE, ^RGE3)
					    And(^OPTB, 0x00, ^OPTB)    
					    And(^OPTC, 0x00, ^OPTC)  
					
					    ^EXFG()
					}
					
					
					
					
					
					
					
					
					Method(SIOH, 0){
					    If(And(PMFG, 0x08)){
					        


					    }
					    If(And(PMFG, 0x10)){
					        


					    }
					}    
					
					
					
					
					
					
					
					
					
					
					
					
					
					

	
					Method(_PRW, 0) { Return(GPRW(0x1D, 3)) }	
				}
	
				Device(UAR1) {
					Name(_HID, EISAID("PNP0501"))	
					Name(_UID, 0x00)	
					Name(LDN, 0x02)	
				
	
	
	
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
						Method(_STA, 0) {Return(^^SIO1.DSTA(0))}	
						Method(_DIS, 0) {^^SIO1.DCNT(0, 0)}			
						Method(_CRS, 0) {Return(^^SIO1.DCRS(0, 0))}	
						Method(_SRS, 1) {^^SIO1.DSRS(Arg0, 0)} 		
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
						Name(_PRS, ResourceTemplate() {
							StartDependentFn(0, 0) {
								IO(Decode16, 0x3F8, 0x3F8, 1, 8)
								IRQNoFlags() {4}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x3F8, 0x3F8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x2F8, 0x2F8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x3E8, 0x3E8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x2E8, 0x2E8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							EndDependentFn()
						})
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

	
				}	
	
				Device(SGPI) {
					Name(_HID, EISAID("PNP0C08"))	
					Name(_UID, 0x00)	
					Name(LDN, 0x07)	
				
	
	
	
					
					Method(_STA,0){
					    
					    Return(0x00) 
					}

	
				}	
	
				Device(SCPI) {
					Name(_HID, EISAID("PNP0C08"))	
					Name(_UID, 0x01)	
					Name(LDN, 0x0A)	
				
	
	
	
					
					Method(_STA,0){
					    
					    Return(0x00) 
					}

	
				}	
	
				Device(IOEC) {
					Name(_HID, EISAID("PNP0C08"))	
					Name(_UID, 0x02)	
					Name(LDN, 0x0B)	
				
	
	
	
					
					Method(_STA,0){
					    
					    Return(0x00) 
					}

	
				}	
	
			} 
	
			Device(PEX0) { 
				Name(_ADR, 0x00090000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG03) }
					Return (PG03) 
				} 
	
				Device(SLT0) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(PEX1) { 
				Name(_ADR, 0x000A0000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG04) }
					Return (PG04) 
				} 
	
				Device(SLT1) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(PEX2) { 
				Name(_ADR, 0x000B0000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG06) }
					Return (PG06) 
				} 
	
				Device(SLT2) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(PEX3) { 
				Name(_ADR, 0x000C0000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG08) }
					Return (PG08) 
				} 
	
				Device(SLT3) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(PEX4) { 
				Name(_ADR, 0x000E0000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG0A) }
					Return (PG0A) 
				} 
	
				Device(SLT4) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(PEX5) { 
				Name(_ADR, 0x000F0000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG0C) }
					Return (PG0C) 
				} 
	
				Device(SLT5) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(PEX6) { 
				Name(_ADR, 0x00100000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG0E) }
					Return (PG0E) 
				} 
	
				Device(SLT6) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(PEX7) { 
				Name(_ADR, 0x00110000)
				Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				Method(_PRT,0) {
					If(PICM) { Return(AG10) }
					Return (PG10) 
				} 
	
				Device(SLT7) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(SMB1) { 
				Name(_ADR, 0x00120000)
			} 
	
			Device(SAT0) { 
				Name(_ADR, 0x00130000)
			} 
	
			Device(SAT1) { 
				Name(_ADR, 0x00140000)
			} 
	
			Device(XHC1) { 
				Name(_ADR, 0x00150000)
	
	
	
	
				


















				External(\_SB.PCI0.XHC1.PS0X, MethodObj) 		    
				External(\_SB.PCI0.XHC1.PS3X, MethodObj) 		    
				External(\_SB.PCI0.XHC1.RHUB.PS0X, MethodObj) 	
				External(\_SB.PCI0.XHC1.RHUB.PS2X, MethodObj) 	
				External(\_SB.PCI0.XHC1.RHUB.PS3X, MethodObj) 	
				External(\_SB.PCI0.XHC1.RHUB.INIR, MethodObj) 	
				External(\_SB.PCI0.XHC1.XHCS, MethodObj) 		    
				
				Scope(\_GPE) {
				  Method(_L6D, 0, Serialized) {
				    \_SB.PCI0.XHC1.GPEH()
				  }
				}
				
				
				Scope(\_SB.PCI0.XHC1) {
				
				
					
				    OperationRegion(XPRT,PCI_Config,0x00,0x100)
				    Field(XPRT,AnyAcc,NoLock,Preserve)
				    {
				      DVID, 16,
				      Offset(0x74),
				      D0D3,  2,  
				          ,  6,
				      PMEE,  1,  
				          ,  6,
				      PMES,  1,  
				    }
				
				    
				    
				    
				    Name (XFLT, 0)
				    
				    
				    
				    Method(_DSM,4,serialized){
				    
				      
				      return(0)
				    }
				
				    Method(_S3D, 0, NotSerialized)
				    {
				      Return(3)
				    }
				    Method(_S4D, 0, NotSerialized)
				    {
				      Return(3)
				    }
				    Method(_S3W, 0, NotSerialized)
				    {
				      Return(3)
				    }
				    Method(_S4W, 0, NotSerialized)
				    {
				      Return(3)
				    }
				
				    
				    
				    
				    Method(_S0W, 0x0, NotSerialized)
				    {
				      If(LEqual(XFLT, Zero))
				      {
				        Return(0x0)
				      }
				      Else
				      {
				        Return(0x3)
				      }
				    }
				
				      Method(_PRW, 0)
				      {
				        Return (Package (0x02) {0x6D, 0x4})
				      }
				
				    Method(_DSW, 3)
				    {
				      Store(Arg0, PMEE)
				    }
				
				    Method(_INI) {
				      
				      If(CondRefOf(\_SB.PCI0.XHC1.RHUB.INIR)) {      
				        \_SB.PCI0.XHC1.RHUB.INIR()
				      }
				
				    }
				
				    
				    
				    
				    Method(GPEH)
				    {
				      If(LEqual(DVID, 0xFFFF)) {
				        Return()
				      }
				      Store(PMES, Local0)
				      Store(1, PMES) 
				      If(LAnd(PMEE, Local0)) {
				        Notify(XHC1, 0x02)
				      }
				    }
				
				    OperationRegion(XHCP, SystemMemory, Add(\_SB.PCI0.GPCB(), 0xA8000), 0x100)
				
				    Field(XHCP,AnyAcc,Lock,Preserve)
				    {
				      Offset(0x4),
				      PDBM, 16,
				      Offset(0x10),
				      MEMB, 64
				    }
				
				    
				    
				    
				    Method(USRA,0,Serialized) {
						Return (15)
					}
				
				    Name(XRST, Zero)
				
				    Method(_PS0,0,Serialized)
				    {
				
				      If(LEqual(^DVID,0xFFFF))
				      {
				        Return()
				      }
				
				      Store(^MEMB,Local2)         
				      Store(^PDBM,Local1)         
				
				      And(^PDBM,Not(0x06),^PDBM)  
				
				      
				      
				      
				      Store(0,^D0D3)
				
				      Store(\XWMB,^MEMB)          
				      Or(Local1,0x0002,^PDBM)     
				
				      
				      
				      
				
				      And(^PDBM,Not(0x02),^PDBM)  
				
				      Store(Local2,^MEMB)         
				      Store(Local1,^PDBM)         
				
				      
				      
				      
				      If(CondRefOf(\_SB.PCI0.XHC1.PS0X))
				      {
				        \_SB.PCI0.XHC1.PS0X()
				      }
				    }
				
				    Method(_PS3,0,Serialized)
				    {
				
				      If(LEqual(^DVID,0xFFFF))
				      {
				        Return()
				      }
				
				      Store(^MEMB,Local2)         
				      Store(^PDBM,Local1)         
				
				      And(^PDBM,Not(0x06),^PDBM)  
				
				      
				      
				      
				      Store(0,^D0D3)
				
				      Store(\XWMB,^MEMB)          
				      Or(Local1,0x0002,^PDBM)     
				
				      
				      
				      
				
				
				      And(^PDBM,Not(0x02),^PDBM)  
				
				      
				      
				      
				      Store(3,^D0D3)
				
				      Store(Local2,^MEMB)         
				      Store(Local1,^PDBM)         
				
				      
				      
				      
				
				      If(CondRefOf(\_SB.PCI0.XHC1.PS3X))
				      {
				        \_SB.PCI0.XHC1.PS3X()
				      }
				    }
				
				
				    
				    
				    
				    
				    
				    Method(XHCS,0, Serialized) {
				      Store(^MEMB,Local2)         
				      Store(^PDBM,Local1)         
				
				      And(^PDBM,Not(0x06),^PDBM)  
				
				      Store(\XWMB,^MEMB)          
				      Or(Local1,0x0002,^PDBM)     
				
				      OperationRegion(MC11,SystemMemory,\XWMB,0x9000)
				      Field(MC11,DWordAcc,Lock,Preserve)
				      {
				        Offset(0x8090),   
				            ,  10,
				        UCLI,  1,         
				      }
				
				      Store(0x1,UCLI)
				
				      And(^PDBM,Not(0x02),^PDBM)  
				
				      Store(Local2,^MEMB)         
				      Store(Local1,^PDBM)         
				
				    }
				
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    Method(CUID,1,Serialized) {
				      If(LEqual(Arg0,ToUUID("7c9512a9-1705-4cb4-af7d-506a2423ab71"))) {
				        Return(1)
				      }
				      Return(0)
				    }
				
				    Device(RHUB)
				    {
				    
				    
				    
				    
				    
				    
				    
				    Method(GPLD, 2, Serialized) {
				      Name(PCKG, Package() { Buffer(0x10) {} } )
				      CreateField(DerefOf(Index(PCKG,0)), 0, 7, REV)
				      Store(1,REV)
				      CreateField(DerefOf(Index(PCKG,0)), 64, 1, VISI)
				      Store(Arg0, VISI)
				      CreateField(DerefOf(Index(PCKG,0)), 87, 8, GPOS)
				      Store(Arg1, GPOS)
				
				
				      return (PCKG)
				    }
				
				    
				    
				    
				    
				    Method(GUPC, 1, Serialized) {
				      Name(PCKG, Package(4) { 0, 0xFF, 0, 0 } )
				      Store(Arg0,Index(PCKG,0))
				
				
				      return (PCKG)
				    }
				    
				    
				    
				      Name(_ADR, Zero)
				
				      
				      Method(_PS0,0,Serialized)
				      {
				        If(LEqual(\_SB.PCI0.XHC1.DVID,0xFFFF))
				        {
				          Return()
				        }
				        
				        
				        
				        If(CondRefOf(\_SB.PCI0.XHC1.RHUB.PS0X))
				        {
				          \_SB.PCI0.XHC1.RHUB.PS0X()
				        }
				      }
				  
				      
				      Method(_PS2,0,Serialized)
				      {
				  
				        If(LEqual(\_SB.PCI0.XHC1.DVID,0xFFFF))
				        {
				          Return()
				        }
				        
				        
				        
				        If(CondRefOf(\_SB.PCI0.XHC1.RHUB.PS2X))
				        {
				          \_SB.PCI0.XHC1.RHUB.PS2X()
				        }
				      }
				  
				      
				      Method(_PS3,0,Serialized)
				      {
				  
				        If(LEqual(\_SB.PCI0.XHC1.DVID,0xFFFF))
				        {
				          Return()
				        }
				        
				        
				        
				        If(CondRefOf(\_SB.PCI0.XHC1.RHUB.PS3X))
				        {
				          \_SB.PCI0.XHC1.RHUB.PS3X()
				        }
				  
				      }
				
				
				      Device(HS01)
				      {
				        Name(_ADR,0x00000001)
				  			Method(_UPC) { Return (GUPC(1)) }
				  	    Method(_PLD) {Return (GPLD(1,1))}
				      }
				
				      Device(HS02)
				      {
				        Name(_ADR,0x00000002)
				        Method(_UPC) { Return (GUPC(1)) }
				  			Method(_PLD) {Return (GPLD(1,2))}  
					    }
				
				      Device(HS03)
				      {
				        Name(_ADR,0x00000003)
				  			Method(_UPC) { Return (GUPC(1)) }
				  			Method(_PLD) {Return (GPLD(1,3))}     
					    }
				
				      Device(HS04)
				      {
				        Name(_ADR,0x00000004)
				  			Method(_UPC) { Return (GUPC(1)) }
				  			Method(_PLD) {Return (GPLD(1,4))} 	   
					    }
				
				      Device(SS01)
				      {
				        Name(_ADR,0x00000005)      
				  			Method(_UPC) { Return (GUPC(0)) }
				  			Method(_PLD) {Return (GPLD(0,0))} 		
					    }
				
				      Device(SS02)
				      {
				        Name(_ADR,0x00000006)      
				  			Method(_UPC) { Return (GUPC(0)) }
				  			Method(_PLD) {Return (GPLD(0,0))}
					    }
				
				      Device(SS03)
				      {
				        Name(_ADR,0x00000007)      
				  			Method(_UPC) { Return (GUPC(0)) }
				  			Method(_PLD) {Return (GPLD(0,0))}
					    }
				
				      Device(SS04)
				      {
				        Name(_ADR,0x00000008)      
				  			Method(_UPC) {  			
				  				Return (GUPC(U33C)) 
				  			}
				  			Method(_PLD) {
				  				Return (GPLD(U33V,U33G))
				 				}
					    }
				    } 
				} 
				

	
			} 
	
			Device(UAR0) { 
				Name(_ADR, 0x001A0000)
			} 
	
			Device(UAR1) { 
				Name(_ADR, 0x001A0001)
			} 
	
			Device(UAR2) { 
				Name(_ADR, 0x001A0002)
			} 
	
			Device(IEH1) { 
				Name(_ADR, 0x001B0000)
			} 
	
			Device(IEH2) { 
				Name(_ADR, 0x001B0001)
			} 
	
			Device(IEKT) { 
				Name(_ADR, 0x001B0003)
			} 
	
			Device(IEH3) { 
				Name(_ADR, 0x001B0004)
			} 
	
			Device(GREG) { 
				Name(_ADR, 0x00040000)
			} 
	
			Device(RCEC) { 
				Name(_ADR, 0x00050000)
			} 
	
			Device(VRP2) { 
				Name(_ADR, 0x00060000)
				Method(_PRT,0) {
					If(PICM) { Return(AG1F) }
					Return (PG1F) 
				} 
	
				Device(IQAT) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(VRP0) { 
				Name(_ADR, 0x00160000)
				Method(_PRT,0) {
					If(PICM) { Return(AG21) }
					Return (PG21) 
				} 
	
				Device(LAN1) { 
					Name(_ADR, 0x00000001)
				} 
	
			} 
	
			Device(VRP1) { 
				Name(_ADR, 0x00170000)
				Method(_PRT,0) {
					If(PICM) { Return(AG22) }
					Return (PG22) 
				} 
	
			} 
	
			Device(HECI) { 
				Name(_ADR, 0x00180000)
			} 
	
			Device(HEC2) { 
				Name(_ADR, 0x00180001)
			} 
	
			Device(MEKT) { 
				Name(_ADR, 0x00180003)
			} 
	
			Device(HEC3) { 
				Name(_ADR, 0x00180004)
			} 
	
			Device(EMMC) { 
				Name(_ADR, 0x001C0000)
	
	
	
	
				






				


















				
				
				Device (EMMD)
				{
				    Name (_ADR, 0x08)                      
				    Method (_RMV, 0, NotSerialized)        
				    {
				        Return (Zero)
				    }
				}
	
			} 
	
			Device(P2SB) { 
				Name(_ADR, 0x001F0001)
	
	
	
	
				






				


















				
				
				OperationRegion(SBRB, PCI_Config, 0x10, 0x08)
				Field(SBRB, ANYACC, NOLOCK, PRESERVE)
				{
				    SBRL, 32,
				    SBRH, 32
				}
				

	
			} 
	
			Device(PMC0) { 
				Name(_ADR, 0x001F0002)
	
	
	
	
				






				


















				
				
				Device(PDRC)	
				{
				  Name(_HID,EISAID("PNP0C02"))        
				
				  Name(_UID, 0x10)
				
				  Name(PMCR,ResourceTemplate()
				  {
				    
				    
				    IO(Decode16,0x1800,0x1800,0x1,0xFF) 
				    
				    Memory32Fixed(ReadOnly, 0xFED03000, 0x1000) 
				
				  })
				
				  Method(_CRS, 0, Serialized)
				  {
				    return(PMCR)
				  }
				}

	
			} 
	
			Device(SMB0) { 
				Name(_ADR, 0x001F0004)
			} 
	
			Device(SPI0) { 
				Name(_ADR, 0x001F0005)
			} 
	
			Device(NPK0) { 
				Name(_ADR, 0x001F0007)
	
	
	
	
				

















				
				
				Scope(\_SB.PCI0.NPK0){
				    
				    Method(_STA, 0, NotSerialized)
				    {
				      Return(0x0B)
				    }
				}
				
	
			} 
	
		}	
	}	
	
	
	
		Scope(\_GPE){
			Method(_L09, 0) {
				Notify(\_SB.PCI0.PEX0, 0x02)
				Notify(\_SB.PCI0.PEX1, 0x02)
				Notify(\_SB.PCI0.PEX2, 0x02)
				Notify(\_SB.PCI0.PEX3, 0x02)
				Notify(\_SB.PCI0.PEX4, 0x02)
				Notify(\_SB.PCI0.PEX5, 0x02)
				Notify(\_SB.PCI0.PEX6, 0x02)
				Notify(\_SB.PCI0.PEX7, 0x02)
			}
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	








	Name(\_S0, Package(4){0x0,0x0,0,0})
	Name(\_S4, Package(4){0x6,0x0,0,0})
	Name(\_S5, Package(4){0x7,0x0,0,0})



	Method(_PTS, 1) {
		If(Arg0) {	

			\_SB.TPM.TPTS(Arg0)
			\_SB.PCI0.SBRG.SIO1.SIOS(Arg0)
		}
	}



	Method(_WAK, 1) {

		\_SB.PCI0.SBRG.SIO1.SIOW(Arg0)

		Return(WAKP)
	}





	



















	
	Scope(\) {
	
	        
	        
	
	        Name(\PCAP, 0x00010000)
	
	        
	        Name(\WHEN,0)
	
	}
	
	Scope(\_SB) {
	
	
	
	
	
	
	OperationRegion (GSTS, SystemIO, 0x1822, 1)
	Field ( GSTS, ByteAcc, NoLock, Preserve) 
	      {
	       GP0  ,   1,
	             ,   7,
	       }
	OperationRegion (GINV, SystemIO, 0x82C, 1)
	Field (GINV, ByteAcc,NoLock,Preserve) 
	      {
	       GPIN  , 1,
	             ,7 ,
	      }
	
	OperationRegion (DBG0, SystemIO, 0x80, 2)
	Field (DBG0, ByteAcc,NoLock,Preserve) 
	      {
	       IO80, 8,
	       IO81, 8,
	      }
	
	
	    
	    
	    
	
	    OperationRegion (IOB3, SystemIO, 0xB2, 2)  
	    Field (IOB3, ByteAcc, NoLock, Preserve) {
	      SMIC, 8,                           
	      SMIS, 8,                           
	    }
	
	






















		Name(OSVR, Ones)					
		Method(OSFL, 0){
			if(LNotEqual(OSVR, Ones)) {Return(OSVR)}	
			if(LEqual(PICM,0)) {Store(0xAC, \_SB.IO80)}		
			Store(1, OSVR)					
	
			if(CondRefOf(\_OSI,Local0))
			{
				If(\_OSI("Windows 2009")){Store(12, OSVR)}      
				ElseIf(\_OSI("Windows 2008")){Store(10, OSVR)}      
				ElseIf(\_OSI("Windows 2007")){Store(10, OSVR)}      
				ElseIf(\_OSI("Windows 2006")){Store(11, OSVR)       
	               
	               If (\_OSI("Windows 2006.1")){Store (10, OSVR)}}     
				ElseIf (\_OSI("Windows 2001")){Store(4, OSVR)}
				ElseIf (\_OSI("Windows 2001.1")){Store(5, OSVR)}		
				ElseIf(\_OSI("FreeBSD")){Store(6, OSVR)}
				ElseIf(\_OSI("HP-UX")){Store(7, OSVR)}
				ElseIf(\_OSI("OpenVMS")){Store(8, OSVR)}
			} 
		Return(OSVR)
		}
	 
	
	
	        
	        
	        
	        
	        OperationRegion (CMOS, SystemIO, 0x70, 4)
	        Field (CMOS, ByteAcc, NoLock, Preserve)
	        {
	            IDX0, 7,
	            , 1,
	            DAT0, 8,
	            IDX1, 7,
	            , 1,
	            DAT1, 8
	        }
	        IndexField (IDX1, DAT1, ByteAcc, NoLock, Preserve)
	        {
	            Offset (0x48),    
	            OSF1, 32,          
	            OSF2, 32          
	        }
	
	
	        
	
	        Method (SWWE,1)   
	        {
	            Store(0, \_SB.SMIS)         
	            Store(Arg0, \_SB.SMIC)         
	                                                       
	        } 
	
	
	
	
	
	
	        Device (WERR) {
	            Name(_HID, EISAID("PNP0C33"))   
			    Name (_UID, 0)
			    Method(_STA){
			          
	                       If(LEqual(OSFL, 10)) {     
	                          If(And(PCAP,0x00010000)) {
	                             Return(0x0F)
	                          }
	                       }
	                        If(LEqual(OSFL, 12)) {     
	                          If(And(PCAP,0x00010000)) {
	                             Return(0x0F)
	                          }
	                       }
	                       
	                  
	                       Return(0x00) 
	
	      
		            }
	  
			    
	
			    
			    
	        }
	
	
	
	
	
	
	
	
	





	
	
	
	
	
	
	
	
	
	
	
	
	
	        Method(_OSC , 4)
	
	        {
	            
	            
	            
	            CreateDWordField(Arg3,4,CPB2)
	
	            
	            If(LEqual(Arg0, ToUUID("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c")))
	            {
	
	              If(LEqual(OSFL, 12)) {     
	                
	                If(And(\PCAP,0x00010000))
	                {
	                    
	                    SWWE(0x9E)
	
	                    
	                    Store(0x0001, \WHEN)
	                    Return (Arg3)       
	                }
	              }
	            }
	
	            
	            Store(0x0000, \WHEN)
	
	            
	            Or (CPB2, 0x0004, CPB2)
	            Return (Arg3)
	        }
	
	
	}   
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	







	
	










	
	    Method(UXDV, 1) {
	        Store(0xff, Local0) 
	        Switch (Add(Arg0, 0)) {
	            Case (0x3F8) { Store(0, Local0) }
	            Case (0x2F8) { Store(1, Local0) }
	            Case (0x220) { Store(2, Local0) }
	            Case (0x228) { Store(3, Local0) }
	            Case (0x238) { Store(4, Local0) }
	            Case (0x2E8) { Store(5, Local0) }
	            Case (0x338) { Store(6, Local0) }
	            Case (0x3E8) { Store(7, Local0) }
	        }
	        return (Local0)
	    }
	
	

































	
	    Method(RRIO, 4) {
	
















































































        
	    }
	
	












	
	    Method(rDMA, 3) {
	    
	    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	OperationRegion(PMIO, SystemIo, 0x188C, 1) 
	Field (PMIO, ByteAcc, NoLock, Preserve)
	{
	  RESV, 1,  
	  HPST, 1,  
	  SGPS, 1,  
	}
	
	
	OperationRegion(NCIO, SystemIo, 0x1884, 1) 
	Field (NCIO, ByteAcc, NoLock, Preserve)
	{
	  GPES, 1,  
	}
	
	
	Scope(\_GPE) {
	  
	  Method(_L62) {
	    
	    Store(1,SGPS)
	    
	    Notify(\_TZ.TZ01,0x80)
	    
	    
	    
	      Store(0xBB, \_SB.IO80)
	      Notify (\_SB.WERR, 0x80)        

	  }
	
	    Method(_L20, 0x0, Serialized)
	    {
	        Store(1,GPES)
	        Notify(\_SB.BTNS, 0x80)
	    }
	
	}
	
	
	Scope(\_SB) {
	        Device (BTNS)
	         {
	          Name (_HID, "NCS0001")
	         } 
	}       
	
	
	Scope (\_TZ) {
	ThermalZone (TZ01) {
	    
	    
	    Method (_CRT) {
	      Return (Add(2732, Multiply(\CRTT, 10)))  
	    }
	
	    
	    Method (_TMP) {
	      
	      If(LGreaterEqual(DTS1, DTS2))
	      {
	          Return(Add(2732, Multiply(DTS1, 10)))
	      }
	      Return(Add(2732, Multiply(DTS2, 10)))
	    } 
	  } 
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


	
	External(CRBI)
	    Device(\_SB.TPM)
	    {
	        Method(_HID, 0){		
	           If(TCMF)		
	           {
	              Return(EISAID("ZIT0101"))
	           }
	           Else
	           {
	               If(LEqual(TTDP, 0)){
	                    Return(EISAID("PNP0C31"))
	                }else{
	                    Return("MSFT0101")
	                }
	           }
	        }
	        
	











	       
	
		    Method(_STR,0)
	        {
	           If(LEqual(TTDP, 0)){
	                Return (Unicode ("TPM 1.2 Device"))
	           }else {
	                Return (Unicode ("TPM 2.0 Device"))
	           }
	        }
	        
		    Name(_UID,0x01)
		    
	      Name(CRST,ResourceTemplate()
		  {
	            Memory32Fixed (ReadOnly, 0x00000000, 0x1000,PCRB)
	            Memory32Fixed (ReadOnly, 0xFED70000, 0x1000,PCRC)
		  })
		  
		  Name(CRSD,ResourceTemplate()
	      {
	            Memory32Fixed (ReadWrite, 0xFED40000, 0x5000, PCRE)
	      })
	
	      Name(CRSI,ResourceTemplate()
		  {
	            Memory32Fixed (ReadWrite, 0xFED40000, 0x5000,PCRS)            
		  })
	      
	      
	      
	      Method(_CRS,0,Serialized)
		  {
	         If(LEqual(AMDT, 1))
	         {
	             CreateDWordField(CRST, ^PCRB._BAS, MTFB) 
	             CreateDWordField(CRST, ^PCRB._LEN, LTFB) 
	                   
	             Store(TPMB, MTFB)
	             Store(0x1000, LTFB)
	
	             CreateDWordField(CRST, ^PCRC._BAS, MTFC) 
	             CreateDWordField(CRST, ^PCRC._LEN, LTFC) 
	               
	             Store(TPMC, MTFC)
	             Store(0x1000, LTFC)
	            
	             Return (CRST)
	         }Else{
	            If(LEqual(DTPT,1))
	            {
	               CreateDWordField(CRSD, ^PCRE._BAS, MTFE) 
	               CreateDWordField(CRSD, ^PCRE._LEN, LTFE) 
	               
	               Store(0x0FED40000, MTFE)
	               Store(0x00005000, LTFE)
	                              
	               Return(CRSD)
	            }            
	            ElseIf(LEqual(TTPF, 1))
	            {
	               CreateDWordField(CRSI, ^PCRS._BAS, MTFD) 
	               CreateDWordField(CRSI, ^PCRS._LEN, LTFD) 
	               
	               Store(0x0FED40000, MTFD)
	               Store(0x00005000, LTFD)
	               Return (CRSI)
	            }ElseIf(LEqual(TTPF, 0))
	            {
	               CreateDWordField(CRSI, ^PCRS._BAS, MTFF) 
	               Store(TPMM, MTFF)
	               Return (CRSI)
	            }
	
	            Store(0x00000000, MTFE)
	            Store(0x00000000, LTFE)
	            Return (CRSI)  
	         }
	            Return (CRSI)
	      }
	
		  OperationRegion(TMMB, SystemMemory, 0x0FED40000, 0x5000)
		  Field(TMMB, ByteAcc, Lock, Preserve)
		  {
		    Offset(0x04),
		    LCST, 32,          
		    Offset(0x40),
	        CREQ, 32,          
		    Offset(0x44), 
		    CSTS, 32,          
		    Offset(0x4C),
		    SCMD, 32,          
		  }
	
	      OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
	      Field (CRBD, AnyAcc, NoLock, Preserve)
	      {
	        Offset(0x04),
	        HERR, 32,
	        Offset (0x40),
	        HCMD, 32,
	        Offset(0x44), 
	        HSTS, 32,
	      }
	      
	
	      Method(_STA, 0){
		   	If(LEqual(TTDP, 0)){
	            If(TPMF){
	                 Return(0x0F)  
	             }
	             Return(0x00)  
	         }ElseIF(LEqual(TTDP, 1)){
	            If(TPMF){
	             Return(0x0F)  
	            }
	            Return (0x00)
	         } 
	         Return (0x00)
		   }
	   
	       Method (STRT, 3, Serialized, 0, IntObj, {UnknownObj, UnknownObj, UnknownObj}) 
	       {
	          OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
	          Field (TPMR, AnyAcc, NoLock, Preserve)
	          {
	            Offset(0x04),
	            FERR, 32,
	            Offset(0x0c),
	            BEGN, 32,
	          }
	          
	          Name (TIMR, 0)  
	          If( LNotEqual( ToInteger (Arg0), 0 ))
	          {
	            
	            
	          }
			  
	          
	          
	          
	          Switch (ToInteger (Arg1))
	          {
	              Case (0)
	              {
	                
	                
	                
	                Return (Buffer () {0x03})
	              }
	              Case (1)
	              {   
	                Store(0, TIMR)
	                
	                If(LEqual(AMDT, 1))
	                {
	                  While(LAND(LEqual(BEGN, One), LLESS(TIMR, 0x200)))
	       		      {
	        			 If(LEqual(BEGN, One))
	    				 {
	    				   Sleep(0x1)
	    				   Increment(TIMR)
	    		         }
	    			  }
	
	                }Else{
	











	                  If(LEqual(Or(And(HSTS,0x00000002),And(HSTS,0x00000001)),0x00000003))
	                  {
	                    
	                    
	                    
	                    Store (0x00000001, HCMD)
	                  }              
	                  Else
	                  {
	                    
	                    Store(0x00000001,FERR)
	                    
	                    Store(0x00000000,BEGN)
	                  }

	
	              }
	              Return(Zero)
	           }    
	        }
		  
		    Return (1)    
		  }
	
	      Method (CRYF, 3, Serialized, 0, {BuffObj, PkgObj}, {UnknownObj, UnknownObj, UnknownObj}) 
	      {
	        If( LNotEqual( ToInteger (Arg0), 1 ))
	        {
	          
	          
	        }
	          
	        
	        
	        
	        Switch (ToInteger(Arg1))
	        {
	          Case (0)
	          {
	            
	            
	            
	            Return (Buffer () {0x03})
	          }
	          Case (1)
	          {
	            
	            
	            
	            Name(TPMV, Package () {0x01, Package () {0x1, 0x20}})
	            if (LEqual (_STA (), 0x00))
	            {
	              Return (Package () {0x00})
	            }
	            Return (TPMV)
	          }
	        }
	        Return (Buffer () {0})
	      }
	
	  }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB.TPM)
	{    
	    OperationRegion (TSMI, SystemIO, SMIA , 0x2) 
	    Field (TSMI, WordAcc, NoLock, Preserve) 
	    { 
	        SMI,16,
	    } 
	
	    OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
	    Field (ATNV, AnyAcc, NoLock, Preserve)
	    {
	        RQST,   32, 
	        RCNT,   32, 
	        ERRO,   32, 
	        FLAG,   32, 
	        MISC,   32, 
	        OPTN,   32, 
	        SRSP,   32  
	    }
	
	
	    Method( _DSM , 4, Serialized)
	    {
	        if( LEqual(Arg0,ToUUID("3DDDFAA6-361B-4EB4-A424-8D10089D1653")))
	        {
	                switch(ToInteger(Arg2))            
	                {
	                    
	                    
	                    
	                    case(0)
	                    {
	                        return (Buffer() {0xff,0x01}) 
	                    }
	
	                    
	                    
	                    
	                    case(1)
	                    {
	                        If (LEqual (PPIV, 0)) {
	                             return ("1.2")                        
	                        }Else{
	                             return ("1.3")                        
	                        }
	                    }
	
	                    
	                    
	                    
	                    case(2)
	                    {
	                        Store(DeRefOf(Index(Arg3,0)), RQST)  
	                        Store (0, SRSP)
	                        Store(0x02, FLAG)  
	                        Store(OFST, TMF1)  
	                        Store (0, SRSP)                            
	                        Store(TMF1,SMI) 
	                        return(SRSP)
	                    }
	
	                    
	                    
	                    case(3)
	                    {
	                        Name(PPI1, Package(){0,0})
	                        Store(RQST, Index(PPI1,1))
	                        return(PPI1)
	                    }
	
	                    
	                    
	                    
	                    
	                    
	                    
	                    
	                    
	                    case(4)
	                    {      
	                        return (TRST) 
	                    }
	
	                    
	                    
	                    
	                    case(5)
	                    {
	                        Name(PPI2, Package(){0,0,0})
	                        Store (0, SRSP)  
	                        Store(0x05, FLAG)                           
	                        Store(OFST, SMI)
	                        Store (RCNT, Index (PPI2, 1))
	                        Store (ERRO, Index (PPI2, 2))
	                        return(PPI2) 
	                    }
	
	
	                    
	                    
	                    
	                    
	                    case(6)
	                    {
	                        return ( 0x03 ) 
	                    }
	                    
	                    
	                    
	                    
	                    
	                    
	                    case(7)
	                    {
	                        Store(DeRefOf(Index(Arg3,0)), RQST)  
	                        Store(0x07, FLAG) 
	                        Store (0, OPTN) 
	                        If (LEqual (RQST, 23)) {
	                            ToInteger(DerefOf(Index(Arg3,0x01)),OPTN)
	                        }
	                        Store(OFST, TMF1)  
	                        Store (0, SRSP)                           
	                        Store(TMF1,SMI) 
	                        return(SRSP)
	                    }
	
	                    case(8)
	                    {
	                          Store(DeRefOf(Index(Arg3,0)), RQST)  
	                          Store(0x08, FLAG)  
	                          Store(OFST, TMF1)
	                          Store (0, SRSP)                              
	                          Store(TMF1,SMI) 
	                          return (SRSP)
	                    }
	
	                    default { }                    
	                }
	        } else {if(LEqual(Arg0,
	        ToUUID("376054ED-CC13-4675-901C-4756D7F2D45D"))){
	            
	            
	            
	             switch(ToInteger(Arg2))            
	                {
	                    
	                    
	                    
	                    case(0)
	                    {
	                        return (Buffer() {0x3}) 
	                    }
	
	                    
	                    
	                    
	                    case(1)
	                    {   
	                        Store(DeRefOf(Index(Arg3,0)), RQST)  
	                        Store(0x09, FLAG) 
	                        Store(OFST, TMF1)                            
	                        Store (0, SRSP)                                
	                        Store(TMF1,SMI)  
	                        return(SRSP)
	                    }
	                    default { }                    
	                }
	            
	        }}               
	        
	        
	        If(LEqual(Arg0, ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
	        {
	          Return (CRYF (Arg1, Arg2, Arg3))
	        }
	
	        If(LEqual(Arg0, ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
	        {
	          Return (STRT (Arg1, Arg2, Arg3))
	        }
	        return (Buffer() {0})
	    }
	            
	        
	        
	        
	    Method (TPTS, 1) 
	    {
	


















	
	
	
	
	


	    }
	}


}	




































