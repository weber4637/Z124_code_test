; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectData\DNV\External\Source\ConfigMem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_ScrubIndex2SecondsTable
PUBLIC	_DClksUsec
PUBLIC	_CasLat2Ddr4Mrs0CasLatIdx
PUBLIC	_DramCmdRankMask
PUBLIC	_LeakyBucketDivisor
PUBLIC	_RegisterBacksideDriveStrength
_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_ScrubIndex2SecondsTable DD 015180H
	DD	08ca0H
	DD	03840H
	DD	0e10H
_DClksUsec DD	09c4H
	DD	085fH
	DD	0753H
	DD	0682H
	DD	05dcH
_CasLat2Ddr4Mrs0CasLatIdx DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0dH
	DB	08H
	DB	0eH
	DB	09H
	DB	0fH
	DB	0aH
	DB	00H
	DB	0bH
	DB	0cH
	ORG $+3
_DramCmdRankMask DD 00H
	DD	04000000H
	DD	08000000H
	DD	0c000000H
_LeakyBucketDivisor DD 09c4000H
	DD	0860000H
	DD	0754000H
	DD	0682000H
	DD	05dc000H
_RegisterBacksideDriveStrength DB 00H
	DB	05H
	DB	05H
	DB	0aH
	DB	05H
	DB	0aH
	DB	05H
	DB	0aH
_DATA	ENDS
PUBLIC	_WriteCmosMrc
; Function compile flags: /Ogspy
;	COMDAT _WriteCmosMrc
_TEXT	SEGMENT
_Index$ = 8						; size = 1
_Value$ = 12						; size = 1
_WriteCmosMrc PROC					; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectdata\dnv\external\source\configmem.c
; Line 117
	mov	al, BYTE PTR _Index$[esp-4]
	cmp	al, 128					; 00000080H
	jae	SHORT $LN1@WriteCmosM
; Line 118
	push	114					; 00000072H
	pop	edx
	out	dx, al
; Line 119
	mov	al, BYTE PTR _Value$[esp-4]
	push	115					; 00000073H
	pop	edx
	out	dx, al
$LN1@WriteCmosM:
; Line 121
	ret	0
_WriteCmosMrc ENDP
_TEXT	ENDS
PUBLIC	_ReadCmosMrc
; Function compile flags: /Ogspy
;	COMDAT _ReadCmosMrc
_TEXT	SEGMENT
_Index$ = 8						; size = 1
_ReadCmosMrc PROC					; COMDAT
; Line 136
	xor	al, al
; Line 138
	cmp	BYTE PTR _Index$[esp-4], 128		; 00000080H
	jae	SHORT $LN1@ReadCmosMr
; Line 139
	mov	al, BYTE PTR _Index$[esp-4]
	push	114					; 00000072H
	pop	edx
	out	dx, al
; Line 140
	push	115					; 00000073H
	pop	edx
	in	al, dx
$LN1@ReadCmosMr:
; Line 143
	ret	0
_ReadCmosMrc ENDP
_TEXT	ENDS
PUBLIC	_InitializeDdr3JedecVariables
EXTRN	_MrsCommandIndex:BYTE
EXTRN	_HandleAddressMirroring:PROC
EXTRN	_SetOdtMatrix:PROC
EXTRN	_MmrcMemset:PROC
; Function compile flags: /Ogspy
;	COMDAT _InitializeDdr3JedecVariables
_TEXT	SEGMENT
_MrsValue$ = -620					; size = 560
tv901 = -60						; size = 4
_Mrs2Command$ = -56					; size = 4
tv361 = -52						; size = 4
tv1062 = -48						; size = 4
tv1028 = -44						; size = 4
tv907 = -40						; size = 4
_SpdDeviceOrg$ = -36					; size = 1
_DramType$ = -32					; size = 1
tv669 = -28						; size = 4
_Mrs3Command$ = -28					; size = 4
_DimmType$ = -24					; size = 1
_SpdAddMap$ = -20					; size = 1
_Mrs0Command$ = -16					; size = 4
tv888 = -12						; size = 4
tv1064 = -8						; size = 4
_Mrs1Command$ = -8					; size = 4
_Rank$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_InitializeDdr3JedecVariables PROC			; COMDAT
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 620				; 0000026cH
	push	ebx
	push	esi
	push	edi
; Line 221
	push	560					; 00000230H
	xor	edi, edi
	lea	eax, DWORD PTR _MrsValue$[ebp]
	push	edi
	push	eax
	call	_MmrcMemset
; Line 227
	mov	esi, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	edi
	push	esi
	call	_SetOdtMatrix
; Line 379
	movzx	ebx, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [esi+ebx*2+28610]
	add	esp, 28					; 0000001cH
	mov	DWORD PTR tv888[ebp], edi
	mov	DWORD PTR tv907[ebp], edi
	mov	DWORD PTR tv1028[ebp], eax
	mov	DWORD PTR tv361[ebp], 2
$LL23@Initialize:
	mov	eax, DWORD PTR tv1028[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN22@Initialize
	mov	eax, DWORD PTR tv888[ebp]
	lea	eax, DWORD PTR [eax+ebx*2+15344]
	add	eax, eax
	mov	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR tv901[ebp], eax
$LL33@Initialize:
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	edx, DWORD PTR [eax+ecx]
	cmp	BYTE PTR [edx+esi], 0
	je	$LN18@Initialize
	mov	eax, DWORD PTR tv907[ebp]
	lea	edi, DWORD PTR [eax+ecx]
	mov	eax, ebx
	imul	eax, 288				; 00000120H
	mov	DWORD PTR tv1062[ebp], edi
	imul	edi, 140				; 0000008cH
	add	eax, esi
	movzx	edx, WORD PTR [eax+30748]
	add	edx, 3
	shl	edx, 9
	mov	DWORD PTR tv669[ebp], eax
	mov	eax, DWORD PTR _MrsValue$[ebp+edi+8]
	and	edx, 3584				; 00000e00H
	and	eax, -15913				; ffffc1d7H
	or	edx, eax
	or	edx, 16					; 00000010H
	cmp	BYTE PTR [esi+65461], 0
	mov	DWORD PTR tv1064[ebp], edi
	jne	SHORT $LN30@Initialize
	mov	eax, DWORD PTR tv888[ebp]
	lea	eax, DWORD PTR [eax+ebx*2]
	imul	eax, 514				; 00000202H
	mov	al, BYTE PTR [eax+esi+28662]
	test	al, 1
	je	SHORT $LN14@Initialize
; Line 266
	or	edx, 8192				; 00002000H
	jmp	SHORT $LN30@Initialize
$LN14@Initialize:
; Line 267
	test	al, 4
	je	SHORT $LN30@Initialize
; Line 268
	or	edx, 4096				; 00001000H
$LN30@Initialize:
; Line 279
	cmp	BYTE PTR _Rank$[ebp], 0
	jne	SHORT $LN10@Initialize
; Line 282
	mov	eax, ebx
	imul	eax, 4336				; 000010f0H
	mov	edi, edx
	shr	edi, 9
	and	edi, 31					; 0000001fH
	add	eax, esi
	and	DWORD PTR [eax+56986], 0
	mov	DWORD PTR [eax+56982], edi
; Line 283
	mov	edi, edx
	shr	edi, 15					; 0000000fH
	and	edi, 3
	and	DWORD PTR [eax+56994], 0
	mov	DWORD PTR [eax+56990], edi
	mov	edi, DWORD PTR tv1064[ebp]
$LN10@Initialize:
; Line 285
	cmp	BYTE PTR _Rank$[ebp], 2
	jne	SHORT $LN31@Initialize
; Line 288
	mov	eax, ebx
	imul	eax, 4336				; 000010f0H
	mov	edi, edx
	shr	edi, 9
	and	edi, 31					; 0000001fH
	add	eax, esi
	and	DWORD PTR [eax+57002], 0
	mov	DWORD PTR [eax+56998], edi
; Line 289
	mov	edi, edx
	shr	edi, 15					; 0000000fH
	and	edi, 3
	and	DWORD PTR [eax+57010], 0
	mov	DWORD PTR [eax+57006], edi
	mov	edi, DWORD PTR tv1064[ebp]
$LN31@Initialize:
; Line 300
	mov	edi, DWORD PTR _MrsValue$[ebp+edi+4]
; Line 310
	mov	eax, DWORD PTR tv888[ebp]
	and	edi, -113				; ffffff8fH
	lea	eax, DWORD PTR [eax+ebx*2+55398]
	or	edi, 136				; 00000088H
	cmp	BYTE PTR [eax+esi], 2
	jne	SHORT $LN8@Initialize
; Line 311
	and	edi, -131073				; fffdffffH
; Line 312
	jmp	SHORT $LN34@Initialize
$LN8@Initialize:
; Line 313
	or	edi, 131072				; 00020000H
$LN34@Initialize:
; Line 327
	mov	eax, ebx
	imul	eax, 4336				; 000010f0H
	cmp	DWORD PTR [eax+esi+56134], 1
	mov	DWORD PTR _Mrs1Command$[ebp], edi
	mov	DWORD PTR _Mrs0Command$[ebp], 278528	; 00044000H
	jne	SHORT $LN6@Initialize
	cmp	DWORD PTR [eax+esi+56138], 0
	jne	SHORT $LN6@Initialize
; Line 328
	mov	DWORD PTR _Mrs0Command$[ebp], 16384	; 00004000H
$LN6@Initialize:
	mov	eax, DWORD PTR tv669[ebp]
	movzx	eax, WORD PTR [eax+30756]
; Line 332
	lea	edi, DWORD PTR [eax-4]
	add	eax, -4					; fffffffcH
; Line 333
	sar	edi, 3
	and	eax, 7
	shl	eax, 2
	and	edi, 1
	or	edi, eax
	mov	eax, DWORD PTR _Mrs0Command$[ebp]
	and	eax, -3677441				; ffc7e2ffH
	shl	edi, 8
	or	edi, eax
; Line 339
	movzx	eax, BYTE PTR [esi+31275]
	sub	eax, 3
	je	SHORT $LN3@Initialize
	dec	eax
; Line 347
	jne	SHORT $LN3@Initialize
; Line 344
	or	edi, 229376				; 00038000H
; Line 345
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:
; Line 341
	and	edi, -32769				; ffff7fffH
	or	edi, 196608				; 00030000H
$LN4@Initialize:
; Line 354
	mov	eax, DWORD PTR tv1062[ebp]
	shl	eax, 22					; 00000016H
	and	eax, 62914560				; 03c00000H
	and	edi, -62914561				; fc3fffffH
	or	edi, eax
	mov	DWORD PTR _Mrs0Command$[ebp], edi
; Line 355
	mov	edi, DWORD PTR _Mrs1Command$[ebp]
; Line 356
	and	edx, -62914561				; fc3fffffH
	or	edx, eax
	and	edi, -62914561				; fc3fffffH
	or	edi, eax
; Line 357
	or	eax, 24					; 00000018H
	mov	DWORD PTR _Mrs3Command$[ebp], eax
; Line 361
	mov	al, BYTE PTR [ebx+esi+31272]
	mov	BYTE PTR _DramType$[ebp], al
; Line 362
	lea	eax, DWORD PTR [ebx+ebx]
; Line 363
	shr	ecx, 1
	add	ecx, eax
	imul	ecx, 514				; 00000202H
	mov	DWORD PTR _Mrs1Command$[ebp], edi
	mov	edi, DWORD PTR tv888[ebp]
	mov	DWORD PTR _Mrs2Command$[ebp], edx
	lea	edx, DWORD PTR [edi+eax]
	mov	al, BYTE PTR [ecx+esi+28638]
	imul	edx, 514				; 00000202H
	mov	dl, BYTE PTR [edx+esi+28694]
	mov	BYTE PTR _SpdDeviceOrg$[ebp], al
; Line 364
	lea	eax, DWORD PTR [edi+ebx*2+55414]
	mov	al, BYTE PTR [eax+esi]
	mov	BYTE PTR _DimmType$[ebp], al
; Line 365
	xor	edi, edi
	push	edi
	push	DWORD PTR _DimmType$[ebp]
	mov	BYTE PTR _SpdAddMap$[ebp], dl
	push	DWORD PTR _DramType$[ebp]
	lea	eax, DWORD PTR _Mrs0Command$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 366
	push	edi
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs1Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 367
	push	edi
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs2Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 368
	push	edi
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs3Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 372
	mov	eax, DWORD PTR tv1062[ebp]
	mov	edi, DWORD PTR _Mrs0Command$[ebp]
	imul	eax, 70					; 00000046H
	movzx	ecx, WORD PTR _MrsCommandIndex[eax]
	mov	edx, ebx
	imul	edx, 542				; 0000021eH
	add	ecx, edx
	mov	DWORD PTR [esi+ecx*8+55526], edi
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 373
	movzx	ecx, WORD PTR _MrsCommandIndex[eax+2]
	mov	edi, DWORD PTR _Mrs1Command$[ebp]
	add	ecx, edx
	mov	DWORD PTR [esi+ecx*8+55526], edi
	add	esp, 24					; 00000018H
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 374
	mov	edi, DWORD PTR _Mrs2Command$[ebp]
	movzx	ecx, WORD PTR _MrsCommandIndex[eax+4]
	add	ecx, edx
	mov	DWORD PTR [esi+ecx*8+55526], edi
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 375
	movzx	eax, WORD PTR _MrsCommandIndex[eax+6]
	mov	ecx, DWORD PTR _Mrs3Command$[ebp]
	add	eax, edx
	mov	DWORD PTR [esi+eax*8+55526], ecx
	and	DWORD PTR [esi+eax*8+55530], 0
	mov	eax, DWORD PTR tv901[ebp]
$LN18@Initialize:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 2
	jb	$LL33@Initialize
$LN22@Initialize:
; Line 230
	inc	DWORD PTR tv888[ebp]
	add	DWORD PTR tv907[ebp], 2
	inc	DWORD PTR tv1028[ebp]
	dec	DWORD PTR tv361[ebp]
	jne	$LL23@Initialize
	pop	edi
	pop	esi
; Line 379
	xor	eax, eax
	pop	ebx
; Line 380
	leave
	ret	0
_InitializeDdr3JedecVariables ENDP
_TEXT	ENDS
PUBLIC	_RegisterControlWordSetup
; Function compile flags: /Ogspy
;	COMDAT _RegisterControlWordSetup
_TEXT	SEGMENT
tv1350 = -24						; size = 4
tv1331 = -20						; size = 4
tv1361 = -16						; size = 4
_RegisterManufacturerId$ = -12				; size = 2
tv1319 = -8						; size = 4
_ChannelRankNum$ = -1					; size = 1
tv1337 = 8						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
tv1230 = 15						; size = 1
tv680 = 15						; size = 1
_Dimm$ = 16						; size = 1
_Rank$ = 20						; size = 1
_DimmX4$ = 23						; size = 1
_MrsValue$ = 24						; size = 4
_RegisterControlWordSetup PROC				; COMDAT
; Line 409
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 417
	mov	al, BYTE PTR _Dimm$[ebp]
	movzx	ecx, BYTE PTR _Dimm$[ebp]
	add	al, al
	add	al, BYTE PTR _Rank$[ebp]
	push	ebx
	push	esi
; Line 420
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _ChannelRankNum$[ebp], al
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [ecx+edi*2]
	imul	eax, 514				; 00000202H
	lea	edx, DWORD PTR [eax+esi]
	mov	al, BYTE PTR [edx+28764]
; Line 421
	movzx	bx, BYTE PTR [edx+28765]
	and	al, 127					; 0000007fH
	movzx	ax, al
	shl	bx, 8
	or	ax, bx
	movzx	eax, ax
	mov	DWORD PTR _RegisterManufacturerId$[ebp], eax
; Line 425
	lea	eax, DWORD PTR [edi+esi]
	cmp	BYTE PTR [eax+31272], 7
	mov	DWORD PTR tv1319[ebp], edx
	mov	DWORD PTR tv1331[ebp], eax
	jne	$LN46@RegisterCo
; Line 426
	mov	eax, edi
	imul	eax, 4336				; 000010f0H
	add	eax, esi
	cmp	DWORD PTR [eax+55966], 1
	mov	DWORD PTR tv1337[ebp], eax
	jne	$LN46@RegisterCo
	cmp	DWORD PTR [eax+55970], 0
	jne	$LN46@RegisterCo
; Line 449
	mov	ebx, DWORD PTR _MrsValue$[ebp]
	lea	eax, DWORD PTR [ecx+edi*2+55398]
	cmp	BYTE PTR [eax+esi], 0
	movzx	eax, BYTE PTR _ChannelRankNum$[ebp]
	sete	BYTE PTR _DimmX4$[ebp]
	mov	DWORD PTR tv1350[ebp], eax
	imul	eax, 140				; 0000008cH
	add	eax, ebx
; Line 464
	lea	ebx, DWORD PTR [ecx+edi*2+55410]
	add	ebx, esi
	mov	DWORD PTR [eax+72], 120			; 00000078H
	mov	DWORD PTR [eax+76], 4216		; 00001078H
	cmp	BYTE PTR [ebx], 3
	mov	DWORD PTR tv1361[ebp], ebx
	jne	SHORT $LN43@RegisterCo
; Line 465
	mov	DWORD PTR [eax+80], 8568		; 00002178H
; Line 466
	jmp	SHORT $LN42@RegisterCo
$LN43@RegisterCo:
; Line 467
	mov	DWORD PTR [eax+80], 8312		; 00002078H
$LN42@RegisterCo:
; Line 475
	mov	bl, BYTE PTR [edx+28768]
	shr	bl, 4
; Line 476
	cmp	BYTE PTR [edx+28632], 7
	jae	SHORT $LN41@RegisterCo
; Line 480
	movzx	ebx, BYTE PTR _DimmX4$[ebp]
	lea	edx, DWORD PTR [ecx+edi*2+55394]
	movzx	edx, BYTE PTR [edx+esi]
	mov	bl, BYTE PTR _RegisterBacksideDriveStrength[ebx+edx*2]
	mov	edx, DWORD PTR tv1319[ebp]
$LN41@RegisterCo:
; Line 482
	movzx	ebx, bl
	shl	ebx, 8
	or	ebx, 12408				; 00003078H
	mov	DWORD PTR [eax+84], ebx
; Line 488
	mov	dl, BYTE PTR [edx+28768]
; Line 490
	mov	bl, dl
	shr	bl, 2
	and	dl, 3
	shl	dl, 2
	and	bl, 3
	or	bl, dl
	mov	BYTE PTR tv680[ebp], dl
; Line 491
	mov	edx, DWORD PTR tv1319[ebp]
	cmp	BYTE PTR [edx+28632], 7
	jae	SHORT $LN40@RegisterCo
; Line 495
	movzx	ebx, BYTE PTR _DimmX4$[ebp]
	lea	edx, DWORD PTR [ecx+edi*2+55394]
	movzx	edx, BYTE PTR [edx+esi]
	mov	bl, BYTE PTR _RegisterBacksideDriveStrength[ebx+edx*2]
$LN40@RegisterCo:
; Line 497
	movzx	edx, bl
	shl	edx, 8
	or	edx, 16504				; 00004078H
	mov	DWORD PTR [eax+88], edx
; Line 499
	mov	edx, 45828				; 0000b304H
	cmp	WORD PTR _RegisterManufacturerId$[ebp], dx
	jne	SHORT $LN39@RegisterCo
; Line 501
	mov	edx, DWORD PTR tv1337[ebp]
	xor	ebx, ebx
	cmp	BYTE PTR _Dimm$[ebp], bl
	jne	SHORT $LN38@RegisterCo
	mov	DWORD PTR [edx+57270], 1
	mov	DWORD PTR [edx+57274], ebx
; Line 502
	jmp	SHORT $LN37@RegisterCo
$LN38@RegisterCo:
; Line 503
	mov	DWORD PTR [edx+57414], 1
	mov	DWORD PTR [edx+57418], ebx
$LN37@RegisterCo:
; Line 510
	mov	DWORD PTR [eax+120], 278648		; 00044078H
; Line 516
	mov	DWORD PTR [eax+124], 393848		; 00060278H
; Line 523
	mov	DWORD PTR [eax+128], 25976		; 00006578H
$LN39@RegisterCo:
; Line 531
	mov	edx, DWORD PTR tv1319[ebp]
	mov	bl, BYTE PTR [edx+28769]
; Line 533
	mov	dl, bl
	shr	dl, 2
	and	bl, 3
	shl	bl, 2
	and	dl, 3
	or	dl, bl
; Line 534
	mov	ebx, DWORD PTR tv1319[ebp]
	cmp	BYTE PTR [ebx+28632], 7
	jae	SHORT $LN50@RegisterCo
; Line 538
	movzx	ebx, BYTE PTR _DimmX4$[ebp]
	lea	edx, DWORD PTR [ecx+edi*2+55394]
	movzx	edx, BYTE PTR [edx+esi]
	mov	dl, BYTE PTR _RegisterBacksideDriveStrength[ebx+edx*2]
	mov	ebx, DWORD PTR tv1319[ebp]
$LN50@RegisterCo:
; Line 540
	movzx	edx, dl
	shl	edx, 8
	or	edx, 20600				; 00005078H
	mov	DWORD PTR [eax+92], edx
; Line 546
	mov	DWORD PTR [eax+136], 266104		; 00040f78H
; Line 553
	mov	dl, BYTE PTR [ebx+28637]
	and	dl, 3
	cmp	dl, 2
	jne	SHORT $LN35@RegisterCo
; Line 554
	mov	cl, 11					; 0000000bH
	jmp	SHORT $LN33@RegisterCo
$LN35@RegisterCo:
; Line 555
	lea	ecx, DWORD PTR [ecx+edi*2+55394]
	cmp	BYTE PTR [ecx+esi], 3
	setne	cl
	lea	ecx, DWORD PTR [ecx+ecx+9]
$LN33@RegisterCo:
; Line 561
	mov	edx, DWORD PTR tv1361[ebp]
	cmp	BYTE PTR [edx], 3
	jne	SHORT $LN31@RegisterCo
; Line 562
	and	cl, 7
$LN31@RegisterCo:
; Line 571
	mov	edi, DWORD PTR tv1331[ebp]
	movzx	ecx, cl
	shl	ecx, 8
	or	ecx, 32888				; 00008078H
	mov	DWORD PTR [eax+96], ecx
	xor	edx, edx
	inc	edx
	mov	cl, dl
	cmp	cl, BYTE PTR [edi+55385]
	sbb	cl, cl
	and	cl, 252					; 000000fcH
	add	cl, 12					; 0000000cH
; Line 576
	movzx	ecx, cl
	shl	ecx, 8
	or	ecx, 36984				; 00009078H
	mov	DWORD PTR [eax+100], ecx
; Line 582
	movzx	ecx, BYTE PTR [esi+31275]
	sub	ecx, 3
	je	SHORT $LN26@RegisterCo
	dec	ecx
	je	SHORT $LN25@RegisterCo
	dec	ecx
	je	SHORT $LN24@RegisterCo
	dec	ecx
	je	SHORT $LN23@RegisterCo
	dec	ecx
; Line 599
	jne	SHORT $LN26@RegisterCo
; Line 596
	mov	cl, 4
; Line 597
	jmp	SHORT $LN27@RegisterCo
$LN23@RegisterCo:
; Line 593
	mov	cl, 3
; Line 594
	jmp	SHORT $LN27@RegisterCo
$LN24@RegisterCo:
; Line 590
	mov	cl, 2
; Line 591
	jmp	SHORT $LN27@RegisterCo
$LN25@RegisterCo:
; Line 587
	mov	cl, dl
; Line 588
	jmp	SHORT $LN27@RegisterCo
$LN26@RegisterCo:
; Line 584
	xor	cl, cl
$LN27@RegisterCo:
; Line 601
	movzx	ecx, cl
	shl	ecx, 8
	or	ecx, 41080				; 0000a078H
	mov	DWORD PTR [eax+104], ecx
; Line 607
	mov	DWORD PTR [eax+108], 47224		; 0000b878H
; Line 613
	mov	DWORD PTR [eax+112], 49272		; 0000c078H
; Line 620
	xor	cl, cl
; Line 621
	test	BYTE PTR [ebx+28762], dl
	je	SHORT $LN20@RegisterCo
; Line 622
	add	cl, 8
$LN20@RegisterCo:
; Line 625
	movzx	ecx, cl
	shl	ecx, 8
	or	ecx, 54392				; 0000d478H
	mov	DWORD PTR [eax+116], ecx
; Line 633
	mov	DWORD PTR [eax+28], 57464		; 0000e078H
; Line 645
	mov	DWORD PTR [eax+32], 62584		; 0000f478H
; Line 646
	cmp	BYTE PTR [esi+70806], 0
	je	SHORT $LN16@RegisterCo
; Line 652
	xor	ecx, ecx
	cmp	BYTE PTR [esi+31275], 7
	setne	cl
	dec	ecx
	and	ecx, 256				; 00000100H
	add	ecx, 61560				; 0000f078H
	mov	DWORD PTR [eax+32], ecx
$LN16@RegisterCo:
; Line 666
	movzx	ecx, BYTE PTR [esi+31275]
	sub	ecx, 3
	je	SHORT $LN12@RegisterCo
	dec	ecx
	je	SHORT $LN11@RegisterCo
	dec	ecx
	je	SHORT $LN10@RegisterCo
	dec	ecx
	je	SHORT $LN9@RegisterCo
	dec	ecx
	je	SHORT $LN8@RegisterCo
; Line 683
	xor	cl, cl
	jmp	SHORT $LN13@RegisterCo
$LN8@RegisterCo:
; Line 680
	mov	cl, 71					; 00000047H
; Line 681
	jmp	SHORT $LN13@RegisterCo
$LN9@RegisterCo:
; Line 677
	mov	cl, 58					; 0000003aH
; Line 678
	jmp	SHORT $LN13@RegisterCo
$LN10@RegisterCo:
; Line 674
	mov	cl, 39					; 00000027H
; Line 675
	jmp	SHORT $LN13@RegisterCo
$LN11@RegisterCo:
; Line 671
	mov	cl, 31					; 0000001fH
; Line 672
	jmp	SHORT $LN13@RegisterCo
$LN12@RegisterCo:
; Line 668
	mov	cl, 18					; 00000012H
$LN13@RegisterCo:
; Line 685
	movzx	ecx, cl
	shl	ecx, 8
	or	ecx, 196728				; 00030078H
	mov	DWORD PTR [eax+132], ecx
; Line 690
	cmp	BYTE PTR [ebx+28766], 10		; 0000000aH
	jne	SHORT $LN6@RegisterCo
	mov	ecx, 38656				; 00009700H
	cmp	WORD PTR _RegisterManufacturerId$[ebp], cx
	jne	SHORT $LN6@RegisterCo
; Line 691
	cmp	BYTE PTR _Dimm$[ebp], 0
; Line 692
	mov	ecx, DWORD PTR tv1337[ebp]
	jne	SHORT $LN5@RegisterCo
	and	DWORD PTR [ecx+57350], 0
; Line 693
	jmp	SHORT $LN52@RegisterCo
$LN5@RegisterCo:
; Line 694
	and	DWORD PTR [ecx+57494], 0
; Line 696
	jmp	SHORT $LN51@RegisterCo
$LN6@RegisterCo:
; Line 697
	cmp	BYTE PTR _Dimm$[ebp], 0
; Line 698
	mov	ecx, DWORD PTR tv1337[ebp]
	jne	SHORT $LN2@RegisterCo
	mov	DWORD PTR [ecx+57350], edx
$LN52@RegisterCo:
	and	DWORD PTR [ecx+57354], 0
; Line 699
	jmp	SHORT $LN1@RegisterCo
$LN2@RegisterCo:
; Line 700
	mov	DWORD PTR [ecx+57494], edx
$LN51@RegisterCo:
	and	DWORD PTR [ecx+57498], 0
$LN1@RegisterCo:
; Line 707
	mov	ecx, DWORD PTR tv1350[ebp]
	lea	ecx, DWORD PTR _DramCmdRankMask[ecx*4]
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+72], edx
; Line 708
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+76], edx
; Line 709
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+80], edx
; Line 710
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+84], edx
; Line 711
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+88], edx
; Line 712
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+92], edx
; Line 713
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+96], edx
; Line 714
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+100], edx
; Line 715
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+104], edx
; Line 716
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+108], edx
; Line 717
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+112], edx
; Line 718
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+116], edx
; Line 719
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+120], edx
; Line 720
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+124], edx
; Line 721
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+128], edx
; Line 722
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+132], edx
; Line 723
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+136], edx
; Line 724
	mov	edx, DWORD PTR [ecx]
	or	DWORD PTR [eax+28], edx
; Line 725
	mov	ecx, DWORD PTR [ecx]
	or	DWORD PTR [eax+32], ecx
$LN46@RegisterCo:
	pop	edi
	pop	esi
; Line 728
	xor	eax, eax
	pop	ebx
; Line 729
	leave
	ret	0
_RegisterControlWordSetup ENDP
_TEXT	ENDS
PUBLIC	_InitializeDdr4JedecVariables
EXTRN	_ReadMrsCommand:PROC
; Function compile flags: /Ogspy
;	COMDAT _InitializeDdr4JedecVariables
_TEXT	SEGMENT
_MrsValue$ = -604					; size = 560
tv2132 = -44						; size = 4
tv2148 = -40						; size = 4
tv2131 = -36						; size = 4
tv2147 = -32						; size = 4
tv2138 = -28						; size = 4
tv2146 = -24						; size = 4
tv2134 = -20						; size = 4
tv2145 = -16						; size = 4
tv2139 = -12						; size = 4
tv2144 = -8						; size = 4
tv2137 = -4						; size = 4
tv2143 = 0						; size = 4
tv2135 = 4						; size = 4
tv2142 = 8						; size = 4
tv2133 = 12						; size = 4
tv2141 = 16						; size = 4
tv2140 = 20						; size = 4
tv2136 = 24						; size = 4
tv2543 = 28						; size = 4
tv2521 = 32						; size = 4
tv1761 = 36						; size = 4
_Mrs2Command$ = 40					; size = 4
_Mrs0Command$ = 44					; size = 4
_Mrs6Command$ = 48					; size = 4
_Mrs5Command$ = 52					; size = 4
_Dimm$ = 56						; size = 1
tv1977 = 60						; size = 4
tv1775 = 60						; size = 4
tv1771 = 67						; size = 1
tv1916 = 68						; size = 4
_Mrs6CommandVrefd$ = 68					; size = 4
_ChRankNum$ = 72					; size = 1
_Mrs1Command$ = 76					; size = 4
_Rank$ = 80						; size = 1
tv2130 = 84						; size = 4
tv1817 = 84						; size = 4
tv1788 = 84						; size = 4
_Temp$ = 84						; size = 2
_Mrs3Command$ = 88					; size = 4
_Mrs4Command$ = 92					; size = 4
_DimmType$ = 96						; size = 1
_SpdAddMap$ = 100					; size = 1
_SpdDeviceOrg$ = 104					; size = 1
_DramType$ = 108					; size = 1
_MrcData$ = 120						; size = 4
_Channel$ = 124						; size = 1
_InitializeDdr4JedecVariables PROC			; COMDAT
; Line 742
	push	ebp
	lea	ebp, DWORD PTR [esp-112]
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
; Line 764
	push	560					; 00000230H
	xor	edi, edi
	lea	eax, DWORD PTR _MrsValue$[ebp]
	push	edi
	push	eax
	call	_MmrcMemset
; Line 770
	mov	esi, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	edi
	push	esi
	call	_SetOdtMatrix
; Line 1108
	movzx	ecx, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [esi+ecx*2+28610]
	add	esp, 28					; 0000001cH
	mov	BYTE PTR _Dimm$[ebp], 0
	mov	DWORD PTR tv1761[ebp], ecx
	mov	DWORD PTR tv2521[ebp], edi
	mov	DWORD PTR tv2543[ebp], eax
$LL38@Initialize@2:
	mov	eax, DWORD PTR tv2543[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN37@Initialize@2
	mov	al, BYTE PTR _Dimm$[ebp]
	add	al, al
	mov	BYTE PTR _Rank$[ebp], 0
	mov	BYTE PTR tv1771[ebp], al
$LL50@Initialize@2:
	mov	al, BYTE PTR tv1771[ebp]
	add	al, BYTE PTR _Rank$[ebp]
	movzx	ebx, al
	mov	BYTE PTR _ChRankNum$[ebp], al
	lea	eax, DWORD PTR [ebx+ecx*4+30688]
	cmp	BYTE PTR [eax+esi], 0
	mov	DWORD PTR tv1775[ebp], ebx
	je	$LN33@Initialize@2
	mov	eax, ecx
	imul	ebx, 140				; 0000008cH
	mov	edi, DWORD PTR _MrsValue$[ebp+ebx+8]
	imul	eax, 288				; 00000120H
	add	eax, esi
	mov	DWORD PTR tv1788[ebp], eax
	movzx	eax, WORD PTR [eax+30748]
	and	edi, -209				; ffffff2fH
	or	edi, 40					; 00000028H
	cmp	ax, 14					; 0000000eH
	jae	SHORT $LN30@Initialize@2
	movzx	eax, ax
	dec	eax
	shl	eax, 11					; 0000000bH
	xor	eax, edi
	and	eax, 14336				; 00003800H
	xor	edi, eax
	jmp	SHORT $LN29@Initialize@2
$LN30@Initialize@2:
; Line 801
	movzx	ecx, ax
	lea	eax, DWORD PTR [ecx-14]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	ecx, eax
	dec	ecx
	dec	ecx
	shl	ecx, 11					; 0000000bH
	xor	ecx, edi
	and	ecx, 14336				; 00003800H
	xor	edi, ecx
	mov	ecx, DWORD PTR tv1761[ebp]
$LN29@Initialize@2:
; Line 808
	cmp	BYTE PTR [esi+65461], 0
	je	SHORT $LN28@Initialize@2
; Line 809
	and	edi, -49153				; ffff3fffH
; Line 811
	jmp	SHORT $LN27@Initialize@2
$LN28@Initialize@2:
; Line 812
	or	edi, 49152				; 0000c000H
$LN27@Initialize@2:
; Line 818
	cmp	BYTE PTR _Rank$[ebp], 0
	jne	SHORT $LN45@Initialize@2
; Line 819
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	mov	edx, edi
	shr	edx, 11					; 0000000bH
	and	edx, 31					; 0000001fH
	add	eax, esi
	and	DWORD PTR [eax+56986], 0
	mov	DWORD PTR [eax+56982], edx
; Line 820
	mov	edx, edi
	shr	edx, 17					; 00000011H
	and	edx, 15					; 0000000fH
	and	DWORD PTR [eax+56994], 0
	mov	DWORD PTR [eax+56990], edx
$LN45@Initialize@2:
; Line 822
	cmp	BYTE PTR _Rank$[ebp], 2
	jne	SHORT $LN25@Initialize@2
; Line 823
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	mov	edx, edi
	shr	edx, 11					; 0000000bH
	and	edx, 31					; 0000001fH
	add	eax, esi
	and	DWORD PTR [eax+57002], 0
	mov	DWORD PTR [eax+56998], edx
; Line 824
	mov	edx, edi
	shr	edx, 17					; 00000011H
	and	edx, 15					; 0000000fH
	and	DWORD PTR [eax+57010], 0
	mov	DWORD PTR [eax+57006], edx
$LN25@Initialize@2:
; Line 833
	movzx	eax, BYTE PTR [esi+31275]
	cmp	al, 3
	je	SHORT $LN22@Initialize@2
	sub	al, 4
	mov	dl, 3
	cmp	dl, al
	sbb	eax, eax
	and	eax, -131072				; fffe0000H
	add	eax, 131128				; 00020038H
	mov	DWORD PTR _Mrs3Command$[ebp], eax
; Line 844
	jmp	SHORT $LN23@Initialize@2
$LN22@Initialize@2:
; Line 835
	mov	DWORD PTR _Mrs3Command$[ebp], 56	; 00000038H
$LN23@Initialize@2:
; Line 849
	mov	eax, DWORD PTR _MrsValue$[ebp+ebx+4]
	and	eax, -225				; ffffff1fH
; Line 852
	or	eax, 272				; 00000110H
; Line 853
	cmp	BYTE PTR [ecx+esi+55385], 2
	je	SHORT $LN18@Initialize@2
	cmp	BYTE PTR [esi+ecx*2+65384], 0
	jne	SHORT $LN18@Initialize@2
	cmp	BYTE PTR [esi+ecx*2+65385], 0
	jne	SHORT $LN18@Initialize@2
; Line 856
	and	eax, -1025				; fffffbffH
	or	eax, 512				; 00000200H
	jmp	SHORT $LN17@Initialize@2
$LN18@Initialize@2:
; Line 854
	and	eax, -1537				; fffff9ffH
$LN17@Initialize@2:
; Line 864
	mov	edx, DWORD PTR tv2521[ebp]
	lea	edx, DWORD PTR [edx+ecx*2+55398]
	mov	dl, BYTE PTR [edx+esi]
	or	eax, 524296				; 00080008H
	mov	DWORD PTR _Mrs1Command$[ebp], eax
	test	dl, dl
	je	SHORT $LN15@Initialize@2
	cmp	dl, 2
	jne	SHORT $LN46@Initialize@2
$LN15@Initialize@2:
; Line 865
	and	eax, -524289				; fff7ffffH
	mov	DWORD PTR _Mrs1Command$[ebp], eax
$LN46@Initialize@2:
; Line 881
	mov	eax, DWORD PTR tv1788[ebp]
	movzx	edx, WORD PTR [eax+30756]
; Line 882
	movzx	eax, WORD PTR [eax+64266]
	mov	DWORD PTR _Temp$[ebp], edx
	mov	edx, 255				; 000000ffH
	cmp	ax, dx
; Line 883
	movzx	eax, ax
	jne	SHORT $LN14@Initialize@2
	mov	eax, DWORD PTR _Temp$[ebp]
$LN14@Initialize@2:
; Line 885
	cmp	ax, 9
	jae	SHORT $LN13@Initialize@2
; Line 886
	push	9
	pop	eax
$LN13@Initialize@2:
; Line 888
	cmp	ax, 25					; 00000019H
	jbe	SHORT $LN12@Initialize@2
; Line 889
	push	25					; 00000019H
	pop	eax
$LN12@Initialize@2:
	movzx	eax, ax
	movzx	eax, BYTE PTR _CasLat2Ddr4Mrs0CasLatIdx[eax-9]
; Line 892
	mov	edx, eax
	and	edx, 14					; 0000000eH
	add	edx, edx
	and	eax, 1
	or	edx, eax
; Line 898
	movzx	eax, BYTE PTR [esi+31275]
	shl	edx, 10					; 0000000aH
	or	edx, 65544				; 00010008H
	sub	eax, 3
	je	SHORT $LN9@Initialize@2
	dec	eax
	je	SHORT $LN8@Initialize@2
	dec	eax
	je	SHORT $LN7@Initialize@2
	dec	eax
	je	SHORT $LN6@Initialize@2
	dec	eax
; Line 915
	jne	SHORT $LN9@Initialize@2
	and	edx, -262145				; fffbffffH
	or	edx, 655360				; 000a0000H
	jmp	SHORT $LN10@Initialize@2
$LN6@Initialize@2:
; Line 909
	and	edx, -393217				; fff9ffffH
	or	edx, 524288				; 00080000H
; Line 910
	jmp	SHORT $LN10@Initialize@2
$LN7@Initialize@2:
; Line 906
	and	edx, -524289				; fff7ffffH
	or	edx, 393216				; 00060000H
; Line 907
	jmp	SHORT $LN10@Initialize@2
$LN8@Initialize@2:
; Line 903
	and	edx, -655361				; fff5ffffH
	or	edx, 262144				; 00040000H
; Line 904
	jmp	SHORT $LN10@Initialize@2
$LN9@Initialize@2:
; Line 900
	and	edx, -786433				; fff3ffffH
	or	edx, 131072				; 00020000H
$LN10@Initialize@2:
; Line 928
	imul	ecx, 4336				; 000010f0H
	lea	eax, DWORD PTR [ecx+esi]
	cmp	DWORD PTR [eax+55894], 1
	mov	DWORD PTR _Mrs4Command$[ebp], 72	; 00000048H
	mov	DWORD PTR tv1817[ebp], eax
	jne	SHORT $LN48@Initialize@2
	cmp	DWORD PTR [eax+55898], 0
	jne	SHORT $LN48@Initialize@2
; Line 929
	mov	DWORD PTR _Mrs4Command$[ebp], 524360	; 00080048H
$LN48@Initialize@2:
; Line 931
	cmp	DWORD PTR [eax+55886], 1
	jne	SHORT $LN2@Initialize@2
	cmp	DWORD PTR [eax+55890], 0
	jne	SHORT $LN2@Initialize@2
; Line 932
	or	DWORD PTR _Mrs4Command$[ebp], 1048576	; 00100000H
$LN2@Initialize@2:
; Line 981
	mov	ecx, DWORD PTR tv1775[ebp]
	and	ecx, 3
	mov	DWORD PTR tv1916[ebp], ecx
	shl	ecx, 26					; 0000001aH
	mov	eax, -201326593				; f3ffffffH
	and	edx, eax
	or	edx, ecx
	mov	DWORD PTR _Mrs0Command$[ebp], edx
; Line 982
	mov	edx, DWORD PTR _Mrs1Command$[ebp]
	and	edx, eax
	or	edx, ecx
	mov	DWORD PTR _Mrs1Command$[ebp], edx
; Line 984
	mov	edx, DWORD PTR _Mrs3Command$[ebp]
	and	edx, eax
	or	edx, ecx
	and	edi, eax
	mov	DWORD PTR _Mrs3Command$[ebp], edx
; Line 985
	mov	edx, DWORD PTR _Mrs4Command$[ebp]
	and	edx, eax
	mov	eax, DWORD PTR _MrsValue$[ebp+ebx+20]
	and	eax, -201336737				; f3ffd85fH
	or	eax, ecx
; Line 986
	or	eax, 88					; 00000058H
	or	edx, ecx
	mov	DWORD PTR _Mrs5Command$[ebp], eax
; Line 987
	mov	eax, DWORD PTR tv1817[ebp]
	mov	eax, DWORD PTR [eax+55982]
	or	edi, ecx
	mov	ecx, DWORD PTR tv1916[ebp]
	and	eax, 7
	shl	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR _MrsValue$[ebp+ebx+24]
	shl	eax, 18					; 00000012H
	and	ecx, -203194513				; f3e37f6fH
	or	eax, ecx
	or	eax, 104				; 00000068H
	mov	DWORD PTR _Mrs6Command$[ebp], eax
; Line 989
	or	eax, 32768				; 00008000H
	mov	DWORD PTR _Mrs6CommandVrefd$[ebp], eax
; Line 993
	mov	eax, DWORD PTR tv1761[ebp]
	mov	cl, BYTE PTR [eax+esi+31272]
	mov	DWORD PTR _Mrs4Command$[ebp], edx
	mov	DWORD PTR _Mrs2Command$[ebp], edi
; Line 994
	lea	edi, DWORD PTR [eax+eax]
	mov	BYTE PTR _DramType$[ebp], cl
	mov	ecx, DWORD PTR tv2521[ebp]
	lea	edx, DWORD PTR [edi+ecx]
	imul	edx, 514				; 00000202H
	mov	dl, BYTE PTR [edx+esi+28762]
	mov	BYTE PTR _SpdAddMap$[ebp], dl
; Line 995
	movzx	edx, BYTE PTR _Rank$[ebp]
	shr	edx, 1
	add	edx, edi
	imul	edx, 514				; 00000202H
	mov	dl, BYTE PTR [edx+esi+28643]
; Line 996
	lea	eax, DWORD PTR [ecx+eax*2+55414]
	mov	al, BYTE PTR [eax+esi]
	mov	BYTE PTR _DimmType$[ebp], al
; Line 997
	mov	edi, DWORD PTR _DimmType$[ebp]
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	mov	BYTE PTR _SpdDeviceOrg$[ebp], dl
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	lea	eax, DWORD PTR _Mrs0Command$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 998
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	lea	eax, DWORD PTR _Mrs1Command$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 999
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	lea	eax, DWORD PTR _Mrs2Command$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1000
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	lea	eax, DWORD PTR _Mrs3Command$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1001
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	lea	eax, DWORD PTR _Mrs4Command$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1002
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	lea	eax, DWORD PTR _Mrs5Command$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1003
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	lea	eax, DWORD PTR _Mrs6Command$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1004
	push	0
	push	edi
	push	DWORD PTR _DramType$[ebp]
	lea	eax, DWORD PTR _Mrs6CommandVrefd$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1008
	mov	edi, DWORD PTR tv1775[ebp]
	mov	eax, DWORD PTR tv1761[ebp]
	imul	edi, 70					; 00000046H
	movzx	ecx, WORD PTR _MrsCommandIndex[edi]
	imul	eax, 542				; 0000021eH
	mov	edx, DWORD PTR _Mrs0Command$[ebp]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 1009
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+2]
	mov	edx, DWORD PTR _Mrs1Command$[ebp]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 1010
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+4]
	mov	edx, DWORD PTR _Mrs2Command$[ebp]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 1011
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+6]
	mov	edx, DWORD PTR _Mrs3Command$[ebp]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 1012
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+8]
	mov	edx, DWORD PTR _Mrs4Command$[ebp]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 1013
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+10]
	mov	edx, DWORD PTR _Mrs5Command$[ebp]
	add	esp, 48					; 00000030H
	add	ecx, eax
	mov	DWORD PTR tv1977[ebp], eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 1014
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+12]
	mov	edx, DWORD PTR _Mrs6Command$[ebp]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	and	DWORD PTR [esi+ecx*8+55530], 0
; Line 1018
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+18]
	mov	edx, DWORD PTR _Mrs6CommandVrefd$[ebp]
	add	ecx, eax
; Line 1022
	mov	eax, DWORD PTR tv1817[ebp]
	mov	DWORD PTR [esi+ecx*8+55526], edx
	xor	edx, edx
	mov	DWORD PTR [esi+ecx*8+55530], edx
	cmp	DWORD PTR [eax+55966], 1
	jne	$LN1@Initialize@2
	cmp	DWORD PTR [eax+55970], edx
	jne	$LN1@Initialize@2
; Line 1023
	push	edx
	push	DWORD PTR _ChRankNum$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 1024
	push	1
	push	DWORD PTR _ChRankNum$[ebp]
	mov	DWORD PTR _Mrs0Command$[ebp], eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 1025
	push	2
	push	DWORD PTR _ChRankNum$[ebp]
	mov	DWORD PTR _Mrs1Command$[ebp], eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 1026
	push	3
	push	DWORD PTR _ChRankNum$[ebp]
	mov	DWORD PTR _Mrs2Command$[ebp], eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
	add	esp, 64					; 00000040H
; Line 1027
	push	4
	push	DWORD PTR _ChRankNum$[ebp]
	mov	DWORD PTR _Mrs3Command$[ebp], eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 1028
	push	5
	push	DWORD PTR _ChRankNum$[ebp]
	mov	DWORD PTR _Mrs4Command$[ebp], eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 1029
	push	6
	push	DWORD PTR _ChRankNum$[ebp]
	mov	DWORD PTR _Mrs5Command$[ebp], eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 1030
	push	6
	push	DWORD PTR _ChRankNum$[ebp]
	mov	DWORD PTR _Mrs6Command$[ebp], eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
	add	esp, 64					; 00000040H
; Line 1032
	push	1
	push	DWORD PTR _DimmType$[ebp]
	or	eax, 32768				; 00008000H
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR _Mrs6CommandVrefd$[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	lea	eax, DWORD PTR _Mrs0Command$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1033
	push	1
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs1Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1034
	push	1
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs2Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1035
	push	1
	push	DWORD PTR _DimmType$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	lea	eax, DWORD PTR _Mrs3Command$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1036
	push	1
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs4Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1037
	push	1
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs5Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1038
	push	1
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs6Command$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1039
	push	1
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _Mrs6CommandVrefd$[ebp]
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1043
	movzx	eax, WORD PTR _MrsCommandIndex[edi+20]
	mov	edx, DWORD PTR _Mrs0Command$[ebp]
	mov	ecx, DWORD PTR tv1977[ebp]
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
; Line 1044
	movzx	eax, WORD PTR _MrsCommandIndex[edi+22]
	mov	edx, DWORD PTR _Mrs1Command$[ebp]
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
; Line 1045
	movzx	eax, WORD PTR _MrsCommandIndex[edi+24]
	mov	edx, DWORD PTR _Mrs2Command$[ebp]
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
; Line 1046
	movzx	eax, WORD PTR _MrsCommandIndex[edi+26]
	mov	edx, DWORD PTR _Mrs3Command$[ebp]
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
; Line 1047
	movzx	eax, WORD PTR _MrsCommandIndex[edi+28]
	mov	edx, DWORD PTR _Mrs4Command$[ebp]
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
; Line 1048
	movzx	eax, WORD PTR _MrsCommandIndex[edi+30]
	mov	edx, DWORD PTR _Mrs5Command$[ebp]
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
; Line 1049
	movzx	eax, WORD PTR _MrsCommandIndex[edi+32]
	mov	edx, DWORD PTR _Mrs6Command$[ebp]
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
; Line 1053
	movzx	eax, WORD PTR _MrsCommandIndex[edi+34]
	mov	edx, DWORD PTR _Mrs6CommandVrefd$[ebp]
	add	eax, ecx
	add	esp, 48					; 00000030H
	mov	DWORD PTR [esi+eax*8+55526], edx
	and	DWORD PTR [esi+eax*8+55530], 0
$LN1@Initialize@2:
; Line 1058
	lea	eax, DWORD PTR _MrsValue$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RegisterControlWordSetup
; Line 1059
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+72]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2130[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1060
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+76]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2131[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 68					; 00000044H
; Line 1061
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+80]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2132[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1062
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+84]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2133[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1063
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+88]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2134[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1064
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+92]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2135[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1065
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+96]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2136[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1066
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+100]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2137[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1067
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+104]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2138[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1068
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+108]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2139[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1069
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+112]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2140[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1070
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+116]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2141[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1071
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+120]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2142[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1072
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+124]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2143[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1073
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+128]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2144[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1074
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+132]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2145[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1075
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+136]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2146[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
	add	esp, 72					; 00000048H
; Line 1076
	push	0
	push	DWORD PTR _DimmType$[ebp]
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+28]
	push	DWORD PTR _DramType$[ebp]
	mov	DWORD PTR tv2147[ebp], eax
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1077
	lea	eax, DWORD PTR _MrsValue$[ebp+ebx+32]
	xor	ebx, ebx
	push	ebx
	push	DWORD PTR _DimmType$[ebp]
	mov	DWORD PTR tv2148[ebp], eax
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 1078
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+36]
	mov	eax, DWORD PTR tv2130[ebp]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR tv1977[ebp]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1079
	mov	ecx, DWORD PTR tv2131[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+38]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1080
	mov	ecx, DWORD PTR tv2132[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+40]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1081
	mov	ecx, DWORD PTR tv2133[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+42]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1082
	mov	ecx, DWORD PTR tv2134[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+44]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1083
	mov	ecx, DWORD PTR tv2135[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+46]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1084
	mov	ecx, DWORD PTR tv2136[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+48]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1085
	mov	ecx, DWORD PTR tv2137[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+50]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1086
	mov	ecx, DWORD PTR tv2138[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+52]
	add	esp, 48					; 00000030H
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1087
	mov	ecx, DWORD PTR tv2139[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+54]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1088
	mov	ecx, DWORD PTR tv2140[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+56]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1089
	mov	ecx, DWORD PTR tv2141[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+58]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1090
	mov	ecx, DWORD PTR tv2142[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+60]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1091
	mov	ecx, DWORD PTR tv2143[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+62]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1092
	mov	ecx, DWORD PTR tv2144[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+64]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1093
	mov	ecx, DWORD PTR tv2145[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+66]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1094
	mov	ecx, DWORD PTR tv2146[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+68]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1095
	mov	ecx, DWORD PTR tv2147[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+14]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
; Line 1096
	mov	ecx, DWORD PTR tv2148[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR _MrsCommandIndex[edi+16]
	add	ecx, eax
	mov	DWORD PTR [esi+ecx*8+55526], edx
	mov	DWORD PTR [esi+ecx*8+55530], ebx
	mov	ecx, DWORD PTR tv1761[ebp]
$LN33@Initialize@2:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 2
	jb	$LL50@Initialize@2
$LN37@Initialize@2:
; Line 773
	inc	BYTE PTR _Dimm$[ebp]
	inc	DWORD PTR tv2521[ebp]
	inc	DWORD PTR tv2543[ebp]
	cmp	BYTE PTR _Dimm$[ebp], 2
	jb	$LL38@Initialize@2
	pop	edi
	pop	esi
; Line 1108
	xor	eax, eax
	pop	ebx
; Line 1109
	add	ebp, 112				; 00000070H
	leave
	ret	0
_InitializeDdr4JedecVariables ENDP
_TEXT	ENDS
PUBLIC	_CheckpointConfigure
EXTRN	_MemRegRead:PROC
EXTRN	_MemRegWrite:PROC
; Function compile flags: /Ogspy
;	COMDAT _CheckpointConfigure
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_CheckpointConfigure PROC				; COMDAT
; Line 1121
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 1132
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [eax+65518]
	or	DWORD PTR _Register$[ebp+8], -1
	push	ebx
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _Register$[ebp], 292		; 00000124H
	mov	DWORD PTR _Register$[ebp+12], ebx
	cmp	al, 1
	jne	SHORT $LN5@Checkpoint
; Line 1136
	push	15					; 0000000fH
	push	ebx
	push	ebx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegWrite
; Line 1137
	add	esp, 24					; 00000018H
	jmp	SHORT $LN11@Checkpoint
$LL4@Checkpoint:
; Line 1143
	sub	esp, 24					; 00000018H
$LN11@Checkpoint:
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LL4@Checkpoint
; Line 1145
	jmp	SHORT $LN1@Checkpoint
$LN5@Checkpoint:
	cmp	al, 2
	jne	SHORT $LN1@Checkpoint
; Line 1146
	push	15					; 0000000fH
	push	ebx
	push	ebx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
$LN1@Checkpoint:
; Line 1149
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_CheckpointConfigure ENDP
_TEXT	ENDS
PUBLIC	_SpdResetNeeded
EXTRN	_MrcDeadLoop:PROC
EXTRN	_MmrcExecuteTask:PROC
EXTRN	_FindActiveChannel:PROC
; Function compile flags: /Ogspy
;	COMDAT _SpdResetNeeded
_TEXT	SEGMENT
_Channel$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_SpdSpeedCurrentHw$ = 11				; size = 1
_SpdResetRequired$ = 11					; size = 1
_SpdResetNeeded PROC					; COMDAT
; Line 1176
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 1188
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	esi
	call	_FindActiveChannel
	mov	BYTE PTR _Channel$[ebp], al
; Line 1194
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	14809					; 000039d9H
	push	esi
	call	_MmrcExecuteTask
; Line 1208
	mov	cl, BYTE PTR [esi+31275]
	mov	bl, cl
	add	esp, 20					; 00000014H
	sub	bl, 3
; Line 1210
	cmp	cl, 3
	jb	$LN10@SpdResetNe
	cmp	cl, 7
	ja	$LN10@SpdResetNe
; Line 1217
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 4336				; 000010f0H
	push	edi
	lea	edi, DWORD PTR [eax+esi]
	cmp	DWORD PTR [edi+58582], 1
	jne	SHORT $LN17@SpdResetNe
	cmp	DWORD PTR [edi+58586], 0
	jne	SHORT $LN17@SpdResetNe
; Line 1221
	mov	al, BYTE PTR [edi+58598]
	and	al, 7
; Line 1222
	jmp	SHORT $LN18@SpdResetNe
$LN17@SpdResetNe:
; Line 1226
	mov	al, BYTE PTR [edi+57958]
$LN18@SpdResetNe:
; Line 1230
	mov	edx, DWORD PTR [edi+58574]
	or	edx, DWORD PTR [edi+58578]
	mov	BYTE PTR _SpdSpeedCurrentHw$[ebp], al
	jne	SHORT $LN14@SpdResetNe
	mov	edx, DWORD PTR [edi+58590]
	or	edx, DWORD PTR [edi+58594]
	je	SHORT $LN7@SpdResetNe
$LN14@SpdResetNe:
; Line 1231
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	10042					; 0000273aH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 1233
	cmp	BYTE PTR _SpdSpeedCurrentHw$[ebp], bl
	je	SHORT $LN3@SpdResetNe
	mov	eax, DWORD PTR [edi+58606]
	or	eax, DWORD PTR [edi+58610]
	je	SHORT $LN3@SpdResetNe
; Line 1243
	movzx	eax, WORD PTR [esi+55490]
	cmp	ax, 8
	je	SHORT $LN3@SpdResetNe
	cmp	ax, 2
	je	SHORT $LN3@SpdResetNe
	cmp	ax, 16					; 00000010H
	je	SHORT $LN3@SpdResetNe
; Line 1244
	mov	ecx, 3321				; 00000cf9H
	mov	edx, ecx
	xor	al, al
	out	dx, al
; Line 1245
	add	al, 14					; 0000000eH
	out	dx, al
; Line 1247
	hlt
; Line 1249
	mov	DWORD PTR [esi+65333], 9
; Line 1250
	call	_MrcDeadLoop
$LN3@SpdResetNe:
; Line 1257
	mov	BYTE PTR _SpdResetRequired$[ebp], 0
; Line 1262
	jmp	SHORT $LN1@SpdResetNe
$LN7@SpdResetNe:
; Line 1254
	cmp	al, bl
	je	SHORT $LN3@SpdResetNe
; Line 1273
	push	DWORD PTR _Channel$[ebp]
	movzx	eax, bl
	cdq
	mov	DWORD PTR [esi+58614], eax
	movzx	eax, cl
	push	0
	mov	DWORD PTR [esi+58618], edx
	cdq
	push	14851					; 00003a03H
	push	esi
	mov	BYTE PTR _SpdResetRequired$[ebp], 1
	mov	DWORD PTR [esi+58622], eax
	mov	DWORD PTR [esi+58626], edx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN1@SpdResetNe:
; Line 1276
	mov	al, BYTE PTR _SpdResetRequired$[ebp]
	pop	edi
	jmp	SHORT $LN12@SpdResetNe
$LN10@SpdResetNe:
; Line 1212
	xor	al, al
$LN12@SpdResetNe:
	pop	esi
	pop	ebx
; Line 1277
	leave
	ret	0
_SpdResetNeeded ENDP
_TEXT	ENDS
PUBLIC	_VerifyResetRequests
; Function compile flags: /Ogspy
;	COMDAT _VerifyResetRequests
_TEXT	SEGMENT
_MrcResetFlags$ = -4					; size = 3
_MrcData$ = 8						; size = 4
_VerifyResetRequests PROC				; COMDAT
; Line 1289
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 1295
	push	3
	lea	eax, DWORD PTR _MrcResetFlags$[ebp]
	push	0
	push	eax
	call	_MmrcMemset
; Line 1299
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	esi
	call	_SpdResetNeeded
	add	esp, 16					; 00000010H
	mov	BYTE PTR _MrcResetFlags$[ebp], al
; Line 1301
	test	al, al
	je	SHORT $LN1@VerifyRese
; Line 1306
	movzx	eax, WORD PTR [esi+55490]
	cmp	ax, 8
	je	SHORT $LN1@VerifyRese
	cmp	ax, 2
	je	SHORT $LN1@VerifyRese
	cmp	ax, 16					; 00000010H
	je	SHORT $LN1@VerifyRese
; Line 1307
	mov	ecx, 3321				; 00000cf9H
	mov	edx, ecx
	xor	al, al
	out	dx, al
; Line 1308
	add	al, 6
	out	dx, al
; Line 1314
	cli
; Line 1315
	hlt
; Line 1317
	mov	DWORD PTR [esi+65333], 9
; Line 1318
	call	_MrcDeadLoop
$LN1@VerifyRese:
	pop	esi
; Line 1321
	leave
	ret	0
_VerifyResetRequests ENDP
_TEXT	ENDS
PUBLIC	_RecordMrcStart
; Function compile flags: /Ogspy
;	COMDAT _RecordMrcStart
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_RecordMrcStart PROC					; COMDAT
; Line 1433
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 1438
	or	DWORD PTR _Register$[ebp+8], -1
	push	ebx
	push	esi
	push	edi
; Line 1440
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	xor	ebx, ebx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 288		; 00000120H
	mov	DWORD PTR _Register$[ebp+12], ebx
	mov	BYTE PTR _Register$[ebp+16], bl
	push	ebx
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
; Line 1446
	push	15					; 0000000fH
	push	ebx
	and	eax, -7					; fffffff9H
	or	eax, 1
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	ebx
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 1447
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_RecordMrcStart ENDP
_TEXT	ENDS
PUBLIC	_ExternalSiliconInit
EXTRN	_MspInit:PROC
EXTRN	_SetMspData:PROC
EXTRN	_GetPlatformSettings:PROC
; Function compile flags: /Ogspy
;	COMDAT _ExternalSiliconInit
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ExternalSiliconInit PROC				; COMDAT
; Line 1461
	push	esi
; Line 1472
	mov	esi, DWORD PTR _MrcData$[esp]
	push	edi
	push	esi
	call	_GetPlatformSettings
	pop	ecx
	cmp	eax, -1
	jne	SHORT $LN4@ExternalSi
; Line 1473
	mov	DWORD PTR [esi+65333], 20		; 00000014H
; Line 1474
	call	_MrcDeadLoop
$LN4@ExternalSi:
; Line 1479
	push	OFFSET _SetMspData
	lea	eax, DWORD PTR [esi+55486]
	push	esi
	push	eax
	call	_MspInit
	add	esp, 12					; 0000000cH
	push	2
	lea	eax, DWORD PTR [esi+59838]
	pop	ecx
	xor	edx, edx
$LL3@ExternalSi:
; Line 1496
	mov	edi, DWORD PTR [esi+65352]
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], edx
; Line 1497
	mov	edi, DWORD PTR [esi+65445]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
; Line 1498
	mov	edi, DWORD PTR [esi+65451]
	mov	DWORD PTR [eax+16], edi
	mov	DWORD PTR [eax+20], edx
	add	eax, 4336				; 000010f0H
	dec	ecx
	jne	SHORT $LL3@ExternalSi
	pop	edi
; Line 1505
	xor	eax, eax
	pop	esi
; Line 1506
	ret	0
_ExternalSiliconInit ENDP
_TEXT	ENDS
PUBLIC	_GetInputParameters
EXTRN	_FillModMrcDataStructure:PROC
EXTRN	_TimingParams:PROC
EXTRN	_PlatformUpdateBootMode:PROC
EXTRN	_DetectDimms:PROC
; Function compile flags: /Ogspy
;	COMDAT _GetInputParameters
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_GetInputParameters PROC				; COMDAT
; Line 1533
	push	esi
; Line 1535
	mov	esi, DWORD PTR _MrcData$[esp]
	push	esi
	call	_DetectDimms
; Line 1542
	push	esi
	call	_PlatformUpdateBootMode
	pop	ecx
	pop	ecx
; Line 1544
	test	eax, eax
	je	SHORT $LN3@GetInputPa
; Line 1545
	cmp	eax, 2
	jne	SHORT $LN3@GetInputPa
; Line 1546
	mov	BYTE PTR [esi+31274], 16		; 00000010H
$LN3@GetInputPa:
; Line 1556
	cmp	BYTE PTR [esi+31274], 4
; Line 1566
	push	esi
	setne	al
	mov	BYTE PTR [esi+65337], al
	call	_TimingParams
; Line 1577
	push	esi
	call	_FillModMrcDataStructure
; Line 1581
	push	OFFSET _SetMspData
	lea	eax, DWORD PTR [esi+55486]
	push	esi
	push	eax
	call	_MspInit
; Line 1585
	push	esi
	call	_RecordMrcStart
	add	esp, 24					; 00000018H
; Line 1587
	xor	eax, eax
	pop	esi
; Line 1588
	ret	0
_GetInputParameters ENDP
_TEXT	ENDS
PUBLIC	_ChannelSizeFusetoMBSize
; Function compile flags: /Ogspy
;	COMDAT _ChannelSizeFusetoMBSize
_TEXT	SEGMENT
_FuseValue$ = 8						; size = 8
_ChannelSizeFusetoMBSize PROC				; COMDAT
; Line 1598
	mov	eax, DWORD PTR _FuseValue$[esp-4]
	cmp	eax, 6
	jne	SHORT $LN2@ChannelSiz
	cmp	DWORD PTR _FuseValue$[esp], 0
	jne	SHORT $LN2@ChannelSiz
; Line 1599
	xor	eax, eax
; Line 1609
	ret	0
$LN2@ChannelSiz:
; Line 1603
	cmp	eax, 7
	jne	SHORT $LN1@ChannelSiz
	cmp	DWORD PTR _FuseValue$[esp], 0
	jne	SHORT $LN1@ChannelSiz
; Line 1604
	or	eax, -1
; Line 1609
	ret	0
$LN1@ChannelSiz:
; Line 1608
	lea	ecx, DWORD PTR [eax+11]
	xor	eax, eax
	inc	eax
	shl	eax, cl
; Line 1609
	ret	0
_ChannelSizeFusetoMBSize ENDP
_TEXT	ENDS
PUBLIC	_ConfigureInterleaving
; Function compile flags: /Ogspy
;	COMDAT _ConfigureInterleaving
_TEXT	SEGMENT
tv641 = -36						; size = 8
_Slice1Base$35376 = -28					; size = 8
_Slice0Base$35374 = -20					; size = 8
tv623 = -12						; size = 4
_Slice0Limit$35375 = -8					; size = 8
_MmioAddrSizeAddr$35378 = -8				; size = 8
tv732 = -4						; size = 4
_MrcData$ = 8						; size = 4
_NvDimmPesentCh1$35371 = 11				; size = 1
_Slot1DimmTypesMatch$35360 = 11				; size = 1
_ConfigureInterleaving PROC				; COMDAT
; Line 1639
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
; Line 1646
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	xor	edi, edi
; Line 1650
	cmp	BYTE PTR [esi+65521], 4
	lea	eax, DWORD PTR [esi+56230]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edi
	jne	SHORT $LN31@ConfigureI
; Line 1651
	mov	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+4], edi
; Line 1652
	jmp	$LN4@ConfigureI
$LN31@ConfigureI:
; Line 1655
	cmp	BYTE PTR [esi+28608], 0
	je	$LN4@ConfigureI
	cmp	BYTE PTR [esi+28609], 0
	je	$LN4@ConfigureI
; Line 1656
	cmp	BYTE PTR [esi+65480], 4
	push	ebx
	jne	$LN43@ConfigureI
; Line 1657
	cmp	DWORD PTR [esi+65300], edi
	jne	SHORT $LN34@ConfigureI
	cmp	DWORD PTR [esi+65304], edi
	jne	SHORT $LN34@ConfigureI
	xor	eax, eax
	jmp	SHORT $LN35@ConfigureI
$LN34@ConfigureI:
	xor	eax, eax
	inc	eax
$LN35@ConfigureI:
	cmp	eax, edi
; Line 1658
	mov	eax, DWORD PTR [esi+65308]
	setne	bl
	cmp	eax, edi
	jne	SHORT $LN36@ConfigureI
	cmp	DWORD PTR [esi+65312], edi
	jne	SHORT $LN36@ConfigureI
	xor	ecx, ecx
	jmp	SHORT $LN37@ConfigureI
$LN36@ConfigureI:
	xor	ecx, ecx
	inc	ecx
$LN37@ConfigureI:
	cmp	ecx, edi
	setne	dl
; Line 1664
	test	bl, bl
	jne	SHORT $LN27@ConfigureI
	test	dl, dl
	je	SHORT $LN26@ConfigureI
$LN27@ConfigureI:
; Line 1665
	cmp	DWORD PTR [esi+65300], eax
; Line 1666
	mov	eax, DWORD PTR [esi+65304]
	sete	cl
	cmp	eax, DWORD PTR [esi+65312]
; Line 1671
	mov	al, BYTE PTR [esi+55387]
	sete	BYTE PTR _Slot1DimmTypesMatch$35360[ebp]
	cmp	al, 2
	ja	SHORT $LN24@ConfigureI
	test	bl, bl
	je	SHORT $LN45@ConfigureI
	test	dl, dl
	je	SHORT $LN45@ConfigureI
$LN24@ConfigureI:
	cmp	al, 3
	jne	SHORT $LN23@ConfigureI
	test	cl, cl
	je	SHORT $LN45@ConfigureI
$LN23@ConfigureI:
	cmp	al, 4
	jne	SHORT $LN26@ConfigureI
	test	cl, cl
	je	SHORT $LN45@ConfigureI
	cmp	BYTE PTR _Slot1DimmTypesMatch$35360[ebp], 0
	jne	SHORT $LN26@ConfigureI
$LN45@ConfigureI:
; Line 1672
	mov	BYTE PTR [esi+65521], 0
$LN26@ConfigureI:
; Line 1677
	cmp	BYTE PTR [esi+65481], 0
	je	SHORT $LN43@ConfigureI
; Line 1678
	mov	BYTE PTR [esi+65521], 0
$LN43@ConfigureI:
; Line 1682
	mov	al, BYTE PTR [esi+65521]
	test	al, al
	jne	$LN20@ConfigureI
; Line 1688
	movzx	eax, WORD PTR [esi+65356]
	mov	ecx, DWORD PTR [esi+31280]
	mov	DWORD PTR tv732[ebp], eax
	movzx	eax, ax
	shr	eax, 11					; 0000000bH
	shr	ecx, 11					; 0000000bH
	lea	ebx, DWORD PTR [ecx+eax]
	lea	edx, DWORD PTR [ebx-1]
	mov	DWORD PTR [esi+56254], edx
; Line 1693
	mov	edx, DWORD PTR [esi+31280]
	mov	DWORD PTR [esi+56286], ebx
	mov	ebx, DWORD PTR [esi+31284]
	add	edx, ebx
	shr	edx, 11					; 0000000bH
	lea	eax, DWORD PTR [edx+eax-1]
	xor	edx, edx
; Line 1695
	cmp	DWORD PTR [esi+31280], 4096		; 00001000H
	mov	DWORD PTR [esi+56246], 1
	mov	DWORD PTR [esi+56250], edi
	mov	DWORD PTR [esi+56262], edi
	mov	DWORD PTR [esi+56266], edi
	mov	DWORD PTR [esi+56258], edi
	mov	DWORD PTR [esi+56270], 1
	mov	DWORD PTR [esi+56274], edi
	mov	DWORD PTR [esi+56290], edi
	mov	DWORD PTR tv623[ebp], ebx
	mov	DWORD PTR [esi+56278], eax
	mov	DWORD PTR [esi+56282], edx
	jae	SHORT $LN19@ConfigureI
; Line 1698
	mov	DWORD PTR [esi+56278], eax
	lea	edx, DWORD PTR [ecx-1]
	xor	eax, eax
	mov	DWORD PTR [esi+56254], edx
	mov	DWORD PTR [esi+56258], edi
	mov	DWORD PTR [esi+56286], ecx
	mov	DWORD PTR [esi+56290], edi
	mov	DWORD PTR [esi+56282], eax
$LN19@ConfigureI:
; Line 1701
	cmp	BYTE PTR [esi+65480], 4
	jne	$LN46@ConfigureI
; Line 1702
	cmp	DWORD PTR [esi+65300], edi
	jne	SHORT $LN38@ConfigureI
	cmp	DWORD PTR [esi+65304], edi
	jne	SHORT $LN38@ConfigureI
	xor	eax, eax
	jmp	SHORT $LN39@ConfigureI
$LN38@ConfigureI:
	xor	eax, eax
	inc	eax
$LN39@ConfigureI:
	cmp	eax, edi
	setne	dl
; Line 1703
	cmp	DWORD PTR [esi+65308], edi
	jne	SHORT $LN40@ConfigureI
	cmp	DWORD PTR [esi+65312], edi
	jne	SHORT $LN40@ConfigureI
	xor	eax, eax
	jmp	SHORT $LN41@ConfigureI
$LN40@ConfigureI:
	xor	eax, eax
	inc	eax
$LN41@ConfigureI:
	cmp	eax, edi
	setne	BYTE PTR _NvDimmPesentCh1$35371[ebp]
; Line 1705
	test	dl, dl
	jne	SHORT $LN16@ConfigureI
	cmp	BYTE PTR _NvDimmPesentCh1$35371[ebp], dl
	je	$LN46@ConfigureI
$LN16@ConfigureI:
; Line 1710
	mov	eax, DWORD PTR tv732[ebp]
	shr	ax, 11					; 0000000bH
; Line 1716
	cmp	BYTE PTR _NvDimmPesentCh1$35371[ebp], 0
	movzx	eax, ax
	cdq
	mov	DWORD PTR tv641[ebp], eax
	mov	DWORD PTR tv641[ebp+4], edx
	mov	DWORD PTR _MmioAddrSizeAddr$35378[ebp], eax
	mov	DWORD PTR _MmioAddrSizeAddr$35378[ebp+4], edx
	je	SHORT $LN15@ConfigureI
; Line 1717
	cmp	DWORD PTR [esi+31280], 4096		; 00001000H
	jae	SHORT $LN14@ConfigureI
; Line 1718
	mov	DWORD PTR _MmioAddrSizeAddr$35378[ebp], edi
	mov	DWORD PTR _MmioAddrSizeAddr$35378[ebp+4], edi
$LN14@ConfigureI:
; Line 1720
	mov	DWORD PTR _Slice0Base$35374[ebp], edi
	mov	DWORD PTR _Slice0Base$35374[ebp+4], edi
; Line 1721
	xor	edi, edi
	add	ecx, DWORD PTR _MmioAddrSizeAddr$35378[ebp]
	adc	edi, DWORD PTR _MmioAddrSizeAddr$35378[ebp+4]
	add	ecx, -1
	adc	edi, -1
	mov	DWORD PTR _Slice0Limit$35375[ebp], ecx
; Line 1722
	add	ecx, 1
	mov	eax, edi
	adc	eax, 0
; Line 1723
	shr	ebx, 11					; 0000000bH
	mov	DWORD PTR _Slice1Base$35376[ebp+4], eax
	xor	edx, edx
	mov	eax, ebx
	add	eax, ecx
	adc	edx, DWORD PTR _Slice1Base$35376[ebp+4]
	add	eax, -1
	adc	edx, -1
; Line 1724
	cmp	DWORD PTR [esi+31280], 4096		; 00001000H
	jae	SHORT $LN44@ConfigureI
; Line 1725
	add	eax, DWORD PTR tv641[ebp]
	adc	edx, DWORD PTR tv641[ebp+4]
; Line 1727
	jmp	SHORT $LN44@ConfigureI
$LN15@ConfigureI:
; Line 1728
	cmp	ebx, 4096				; 00001000H
	jae	SHORT $LN11@ConfigureI
; Line 1729
	mov	DWORD PTR _MmioAddrSizeAddr$35378[ebp], edi
	mov	DWORD PTR _MmioAddrSizeAddr$35378[ebp+4], edi
$LN11@ConfigureI:
; Line 1732
	shr	ebx, 11					; 0000000bH
	xor	edx, edx
	mov	eax, ebx
	add	eax, DWORD PTR _MmioAddrSizeAddr$35378[ebp]
	mov	DWORD PTR _Slice1Base$35376[ebp], edi
	adc	edx, DWORD PTR _MmioAddrSizeAddr$35378[ebp+4]
	add	eax, -1
	adc	edx, -1
; Line 1733
	mov	ebx, eax
	add	ebx, 1
	mov	DWORD PTR _Slice0Base$35374[ebp], ebx
	mov	DWORD PTR _Slice1Base$35376[ebp+4], edi
	mov	ebx, edx
	adc	ebx, edi
; Line 1734
	xor	edi, edi
	add	ecx, DWORD PTR _Slice0Base$35374[ebp]
	mov	DWORD PTR _Slice0Base$35374[ebp+4], ebx
	adc	edi, ebx
	add	ecx, -1
	adc	edi, -1
; Line 1735
	cmp	DWORD PTR tv623[ebp], 4096		; 00001000H
	mov	DWORD PTR _Slice0Limit$35375[ebp], ecx
	jae	SHORT $LN42@ConfigureI
; Line 1736
	add	ecx, DWORD PTR tv641[ebp]
	adc	edi, DWORD PTR tv641[ebp+4]
	mov	DWORD PTR _Slice0Limit$35375[ebp], ecx
$LN42@ConfigureI:
	mov	ecx, DWORD PTR _Slice1Base$35376[ebp]
$LN44@ConfigureI:
; Line 1739
	mov	ebx, DWORD PTR _Slice0Base$35374[ebp]
	mov	DWORD PTR [esi+56262], ebx
	mov	ebx, DWORD PTR _Slice0Base$35374[ebp+4]
	mov	DWORD PTR [esi+56266], ebx
; Line 1740
	mov	ebx, DWORD PTR _Slice0Limit$35375[ebp]
; Line 1741
	mov	DWORD PTR [esi+56286], ecx
	mov	ecx, DWORD PTR _Slice1Base$35376[ebp+4]
	mov	DWORD PTR [esi+56254], ebx
	mov	DWORD PTR [esi+56258], edi
	mov	DWORD PTR [esi+56290], ecx
; Line 1742
	mov	DWORD PTR [esi+56282], edx
; Line 1752
	jmp	$LN47@ConfigureI
$LN20@ConfigureI:
; Line 1756
	movzx	eax, al
	lea	ecx, DWORD PTR [eax-1]
	mov	eax, ecx
	cdq
	mov	DWORD PTR [esi+56222], eax
; Line 1757
	push	16					; 00000010H
	pop	eax
	shl	eax, cl
; Line 1760
	mov	ecx, DWORD PTR [esi+31280]
	mov	DWORD PTR [esi+56226], edx
	or	eax, 8196				; 00002004H
	cdq
	mov	DWORD PTR [esi+56218], edx
	mov	edx, DWORD PTR [esi+31284]
	mov	DWORD PTR [esi+56214], eax
	cmp	ecx, edx
	je	$LN46@ConfigureI
; Line 1767
	movzx	eax, WORD PTR [esi+65356]
; Line 1764
	jbe	SHORT $LN7@ConfigureI
; Line 1765
	lea	ebx, DWORD PTR [edx+edx]
; Line 1766
	cmp	ebx, 4096				; 00001000H
	jae	SHORT $LN6@ConfigureI
; Line 1767
	sub	eax, edx
	add	eax, ecx
	add	eax, ebx
; Line 1768
	jmp	SHORT $LN5@ConfigureI
$LN6@ConfigureI:
; Line 1772
	add	ebx, eax
; Line 1773
	sub	ecx, edx
	add	ecx, ebx
	mov	eax, ecx
$LN5@ConfigureI:
; Line 1777
	shr	ebx, 11					; 0000000bH
; Line 1778
	shr	eax, 11					; 0000000bH
	dec	eax
	mov	DWORD PTR [esi+56246], 1
	mov	DWORD PTR [esi+56250], edi
	mov	DWORD PTR [esi+56262], ebx
	mov	DWORD PTR [esi+56266], edi
	mov	DWORD PTR [esi+56254], eax
	mov	DWORD PTR [esi+56258], edi
; Line 1779
	jmp	SHORT $LN46@ConfigureI
$LN7@ConfigureI:
; Line 1780
	lea	ebx, DWORD PTR [ecx+ecx]
; Line 1781
	cmp	ebx, 4096				; 00001000H
	jae	SHORT $LN3@ConfigureI
; Line 1782
	sub	eax, ecx
	add	eax, edx
	add	eax, ebx
; Line 1783
	jmp	SHORT $LN2@ConfigureI
$LN3@ConfigureI:
; Line 1784
	add	ebx, eax
; Line 1785
	sub	edx, ecx
	add	edx, ebx
	mov	eax, edx
$LN2@ConfigureI:
; Line 1789
	shr	ebx, 11					; 0000000bH
; Line 1790
	shr	eax, 11					; 0000000bH
	mov	DWORD PTR [esi+56270], 1
	mov	DWORD PTR [esi+56274], edi
	mov	DWORD PTR [esi+56286], ebx
	mov	DWORD PTR [esi+56290], edi
	dec	eax
	mov	DWORD PTR [esi+56282], edi
$LN47@ConfigureI:
	mov	DWORD PTR [esi+56278], eax
$LN46@ConfigureI:
	pop	ebx
$LN4@ConfigureI:
	pop	edi
	pop	esi
; Line 1805
	leave
	ret	0
_ConfigureInterleaving ENDP
_TEXT	ENDS
PUBLIC	_ProgDramRapl
EXTRN	__aullshr:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Ogspy
;	COMDAT _ProgDramRapl
_TEXT	SEGMENT
tv168 = -8						; size = 8
_MrcData$ = 8						; size = 4
_Index$ = 11						; size = 1
_ProgDramRapl PROC					; COMDAT
; Line 1821
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 1825
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+70983], 1
	jne	$LN13@ProgDramRa
; Line 1826
	mov	ecx, DWORD PTR [esi+70975]
	push	ebx
	push	edi
	mov	edi, DWORD PTR [esi+70971]
; Line 1832
	mov	BYTE PTR _Index$[ebp], 0
	test	ecx, ecx
	ja	SHORT $LN18@ProgDramRa
	cmp	edi, 200				; 000000c8H
	jbe	SHORT $LN25@ProgDramRa
$LN18@ProgDramRa:
	push	0
	push	100					; 00000064H
	push	ecx
	push	edi
	call	__allmul
	mov	DWORD PTR tv168[ebp], eax
	mov	DWORD PTR tv168[ebp+4], edx
$LL24@ProgDramRa:
; Line 1833
	movzx	ebx, BYTE PTR _Index$[ebp]
	mov	eax, DWORD PTR tv168[ebp]
	mov	edx, DWORD PTR tv168[ebp+4]
	mov	ecx, ebx
	call	__aullshr
	inc	BYTE PTR _Index$[ebp]
	mov	edi, eax
	mov	ecx, edx
; Line 1834
	mov	eax, ebx
	cdq
	mov	DWORD PTR [esi+58062], eax
	mov	DWORD PTR [esi+58066], edx
	test	ecx, ecx
	ja	SHORT $LL24@ProgDramRa
; Line 1832
	jb	SHORT $LN25@ProgDramRa
	cmp	edi, 200				; 000000c8H
	ja	SHORT $LL24@ProgDramRa
$LN25@ProgDramRa:
; Line 1842
	mov	edx, edi
	push	-1
	add	edx, -100				; ffffff9cH
	mov	eax, ecx
	pop	ebx
	adc	eax, ebx
	test	eax, eax
	ja	SHORT $LN9@ProgDramRa
	jb	SHORT $LN20@ProgDramRa
	cmp	edx, 12					; 0000000cH
	ja	SHORT $LN9@ProgDramRa
$LN20@ProgDramRa:
; Line 1843
	and	DWORD PTR [esi+58054], 0
	jmp	SHORT $LN27@ProgDramRa
$LN9@ProgDramRa:
; Line 1844
	mov	edx, edi
	add	edx, -113				; ffffff8fH
	mov	eax, ecx
	adc	eax, ebx
	test	eax, eax
	ja	SHORT $LN7@ProgDramRa
	jb	SHORT $LN21@ProgDramRa
	cmp	edx, 24					; 00000018H
	ja	SHORT $LN7@ProgDramRa
$LN21@ProgDramRa:
; Line 1845
	mov	DWORD PTR [esi+58054], 1
	jmp	SHORT $LN27@ProgDramRa
$LN7@ProgDramRa:
; Line 1846
	mov	edx, edi
	add	edx, -138				; ffffff76H
	mov	eax, ecx
	adc	eax, ebx
	test	eax, eax
	ja	SHORT $LN5@ProgDramRa
	jb	SHORT $LN22@ProgDramRa
	cmp	edx, 24					; 00000018H
	ja	SHORT $LN5@ProgDramRa
$LN22@ProgDramRa:
; Line 1847
	mov	DWORD PTR [esi+58054], 2
	jmp	SHORT $LN27@ProgDramRa
$LN5@ProgDramRa:
; Line 1848
	add	edi, -163				; ffffff5dH
	adc	ecx, ebx
	test	ecx, ecx
	ja	SHORT $LN26@ProgDramRa
	jb	SHORT $LN23@ProgDramRa
	cmp	edi, 37					; 00000025H
	ja	SHORT $LN26@ProgDramRa
$LN23@ProgDramRa:
; Line 1849
	mov	DWORD PTR [esi+58054], 3
$LN27@ProgDramRa:
	and	DWORD PTR [esi+58058], 0
$LN26@ProgDramRa:
; Line 1856
	mov	eax, DWORD PTR [esi+70979]
	and	DWORD PTR [esi+58074], 0
	push	125					; 0000007dH
	pop	ecx
	xor	edx, edx
	div	ecx
	pop	edi
	mov	DWORD PTR [esi+58070], 1
	pop	ebx
	mov	DWORD PTR [esi+58078], eax
; Line 1857
	jmp	SHORT $LN28@ProgDramRa
$LN13@ProgDramRa:
; Line 1858
	and	DWORD PTR [esi+58078], 0
$LN28@ProgDramRa:
; Line 1860
	movzx	eax, BYTE PTR [esi+70984]
	and	DWORD PTR [esi+58082], 0
	cdq
	mov	DWORD PTR [esi+58046], eax
	mov	DWORD PTR [esi+58050], edx
	pop	esi
; Line 1862
	leave
	ret	0
_ProgDramRapl ENDP
_TEXT	ENDS
PUBLIC	_ProgLeakyBucket
EXTRN	__aulldiv:PROC
; Function compile flags: /Ogspy
;	COMDAT _ProgLeakyBucket
_TEXT	SEGMENT
_Divisor$ = 8						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_ProgLeakyBucket PROC					; COMDAT
; Line 1879
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1883
	mov	edi, DWORD PTR _MrcData$[ebp]
	movzx	eax, BYTE PTR [edi+31275]
	mov	eax, DWORD PTR _LeakyBucketDivisor[eax*4-12]
	mov	DWORD PTR _Divisor$[ebp], eax
; Line 1884
	test	eax, eax
	jne	SHORT $LN17@ProgLeakyB
; Line 1885
	mov	DWORD PTR _Divisor$[ebp], 1
$LN17@ProgLeakyB:
; Line 1890
	movzx	edx, BYTE PTR _Channel$[ebp]
	mov	eax, edx
; Line 1891
	imul	edx, 4336				; 000010f0H
	shl	eax, 5
	lea	ebx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [ebx+70891]
	mov	ecx, DWORD PTR [ebx+70895]
	mov	esi, eax
	or	esi, ecx
	lea	esi, DWORD PTR [edx+edi]
	jne	SHORT $LN16@ProgLeakyB
	or	DWORD PTR [esi+56950], -1
	mov	DWORD PTR [esi+56954], 255		; 000000ffH
; Line 1892
	jmp	SHORT $LN15@ProgLeakyB
$LN16@ProgLeakyB:
; Line 1893
	push	ecx
	push	eax
	push	DWORD PTR [edi+70887]
	push	DWORD PTR [edi+70883]
	call	__allmul
	push	0
	push	DWORD PTR _Divisor$[ebp]
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR [esi+56950], eax
	mov	DWORD PTR [esi+56954], edx
$LN15@ProgLeakyB:
; Line 1895
	mov	eax, DWORD PTR [ebx+70899]
	mov	ecx, DWORD PTR [ebx+70903]
	mov	edx, eax
	or	edx, ecx
	jne	SHORT $LN14@ProgLeakyB
; Line 1896
	or	DWORD PTR [esi+56958], -1
	mov	DWORD PTR [esi+56962], 255		; 000000ffH
; Line 1897
	jmp	SHORT $LN13@ProgLeakyB
$LN14@ProgLeakyB:
; Line 1898
	push	ecx
	push	eax
	push	DWORD PTR [edi+70887]
	push	DWORD PTR [edi+70883]
	call	__allmul
	push	0
	push	DWORD PTR _Divisor$[ebp]
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR [esi+56958], eax
	mov	DWORD PTR [esi+56962], edx
$LN13@ProgLeakyB:
; Line 1900
	mov	eax, DWORD PTR [ebx+70907]
	mov	ecx, DWORD PTR [ebx+70911]
	mov	edx, eax
	or	edx, ecx
	jne	SHORT $LN12@ProgLeakyB
; Line 1901
	or	DWORD PTR [esi+56966], -1
	mov	DWORD PTR [esi+56970], 255		; 000000ffH
; Line 1902
	jmp	SHORT $LN11@ProgLeakyB
$LN12@ProgLeakyB:
; Line 1903
	push	ecx
	push	eax
	push	DWORD PTR [edi+70887]
	push	DWORD PTR [edi+70883]
	call	__allmul
	push	0
	push	DWORD PTR _Divisor$[ebp]
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR [esi+56966], eax
	mov	DWORD PTR [esi+56970], edx
$LN11@ProgLeakyB:
; Line 1905
	mov	eax, DWORD PTR [ebx+70915]
	mov	ebx, DWORD PTR [ebx+70919]
	mov	ecx, eax
	or	ecx, ebx
	jne	SHORT $LN10@ProgLeakyB
; Line 1906
	or	DWORD PTR [esi+56974], -1
	mov	DWORD PTR [esi+56978], 255		; 000000ffH
; Line 1907
	jmp	SHORT $LN9@ProgLeakyB
$LN10@ProgLeakyB:
; Line 1908
	push	ebx
	push	eax
	push	DWORD PTR [edi+70887]
	push	DWORD PTR [edi+70883]
	call	__allmul
	push	0
	push	DWORD PTR _Divisor$[ebp]
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR [esi+56974], eax
	mov	DWORD PTR [esi+56978], edx
$LN9@ProgLeakyB:
; Line 1919
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	edi, DWORD PTR [edi+eax*8]
	movzx	eax, WORD PTR [edi+70955]
	mov	ecx, 32767				; 00007fffH
	test	ax, ax
	jne	SHORT $LN8@ProgLeakyB
; Line 1920
	and	DWORD PTR [esi+56922], 0
	mov	DWORD PTR [esi+56918], ecx
; Line 1921
	jmp	SHORT $LN7@ProgLeakyB
$LN8@ProgLeakyB:
; Line 1922
	movzx	eax, ax
	cdq
	mov	DWORD PTR [esi+56918], eax
	mov	DWORD PTR [esi+56922], edx
$LN7@ProgLeakyB:
; Line 1924
	movzx	eax, WORD PTR [edi+70957]
	test	ax, ax
	jne	SHORT $LN6@ProgLeakyB
; Line 1925
	and	DWORD PTR [esi+56930], 0
	mov	DWORD PTR [esi+56926], ecx
; Line 1926
	jmp	SHORT $LN5@ProgLeakyB
$LN6@ProgLeakyB:
; Line 1927
	movzx	eax, ax
	cdq
	mov	DWORD PTR [esi+56926], eax
	mov	DWORD PTR [esi+56930], edx
$LN5@ProgLeakyB:
; Line 1929
	movzx	eax, WORD PTR [edi+70959]
	test	ax, ax
	jne	SHORT $LN4@ProgLeakyB
; Line 1930
	and	DWORD PTR [esi+56938], 0
	mov	DWORD PTR [esi+56934], ecx
; Line 1931
	jmp	SHORT $LN3@ProgLeakyB
$LN4@ProgLeakyB:
; Line 1932
	movzx	eax, ax
	cdq
	mov	DWORD PTR [esi+56934], eax
	mov	DWORD PTR [esi+56938], edx
$LN3@ProgLeakyB:
; Line 1934
	movzx	eax, WORD PTR [edi+70961]
	test	ax, ax
	jne	SHORT $LN2@ProgLeakyB
; Line 1935
	and	DWORD PTR [esi+56946], 0
	mov	DWORD PTR [esi+56942], ecx
; Line 1936
	jmp	SHORT $LN1@ProgLeakyB
$LN2@ProgLeakyB:
; Line 1937
	movzx	eax, ax
	cdq
	mov	DWORD PTR [esi+56942], eax
	mov	DWORD PTR [esi+56946], edx
$LN1@ProgLeakyB:
	pop	edi
	pop	esi
	pop	ebx
; Line 1940
	pop	ebp
	ret	0
_ProgLeakyBucket ENDP
_TEXT	ENDS
PUBLIC	_ProgPatrolDemandScrub
; Function compile flags: /Ogspy
;	COMDAT _ProgPatrolDemandScrub
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Dimm$ = 15						; size = 1
_ProgPatrolDemandScrub PROC				; COMDAT
; Line 1953
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1963
	movzx	ebx, BYTE PTR _Channel$[ebp]
	mov	eax, ebx
	imul	eax, 4336				; 000010f0H
	push	esi
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	lea	esi, DWORD PTR [eax+edi]
	mov	al, BYTE PTR [edi+65466]
	or	al, BYTE PTR [edi+65472]
	movzx	eax, al
	cdq
	mov	DWORD PTR [esi+57974], eax
	mov	DWORD PTR [esi+57978], edx
; Line 1964
	cmp	BYTE PTR [edi+65466], 0
	je	$LN15@ProgPatrol
; Line 1965
	and	DWORD PTR [esi+58002], 0
	mov	DWORD PTR [esi+57998], 1
; Line 1990
	movzx	eax, BYTE PTR [edi+65467]
	mov	eax, DWORD PTR _ScrubIndex2SecondsTable[eax*4]
	mov	ecx, DWORD PTR [edi+ebx*4+31280]
	mov	edx, 1000000000				; 3b9aca00H
	mul	edx
	shl	ecx, 10					; 0000000aH
	shr	ecx, 6
	push	0
	shl	ecx, 10					; 0000000aH
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	push	0
	push	1000					; 000003e8H
	push	edx
	push	eax
	call	__allmul
	movzx	ecx, BYTE PTR [edi+31275]
	push	0
	push	DWORD PTR _DClksUsec[ecx*4-12]
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR [esi+57990], eax
	mov	DWORD PTR [esi+57994], edx
; Line 1994
	mov	BYTE PTR _Dimm$[ebp], 0
$LL14@ProgPatrol:
; Line 1995
	movzx	eax, BYTE PTR _Dimm$[ebp]
	lea	ecx, DWORD PTR [eax+ebx*2+28610]
	cmp	BYTE PTR [ecx+edi], 0
	je	$LN13@ProgPatrol
; Line 1997
	lea	eax, DWORD PTR [eax+ebx*2]
	imul	eax, 514				; 00000202H
	mov	al, BYTE PTR [eax+edi+28636]
	mov	cl, al
	shr	cl, 3
	and	al, 7
	and	cl, 7
; Line 2001
	cmp	al, 2
	jne	SHORT $LN8@ProgPatrol
	cmp	BYTE PTR [ebx+edi+31272], 3
	ja	SHORT $LN8@ProgPatrol
; Line 2002
	cmp	BYTE PTR _Dimm$[ebp], 0
	jne	SHORT $LN9@ProgPatrol
; Line 2003
	and	DWORD PTR [esi+58018], 0
	mov	DWORD PTR [esi+58014], 1
; Line 2004
	jmp	SHORT $LN20@ProgPatrol
$LN9@ProgPatrol:
; Line 2005
	and	DWORD PTR [esi+58010], 0
	mov	DWORD PTR [esi+58006], 1
$LN8@ProgPatrol:
; Line 2014
	cmp	BYTE PTR _Dimm$[ebp], 0
	jne	SHORT $LN7@ProgPatrol
$LN20@ProgPatrol:
; Line 2015
	xor	eax, eax
	inc	eax
	shl	eax, cl
	dec	eax
	cdq
	mov	DWORD PTR [esi+58030], eax
	mov	DWORD PTR [esi+58034], edx
; Line 2016
	jmp	SHORT $LN13@ProgPatrol
$LN7@ProgPatrol:
; Line 2017
	xor	eax, eax
	inc	eax
	shl	eax, cl
	dec	eax
	cdq
	mov	DWORD PTR [esi+58022], eax
	mov	DWORD PTR [esi+58026], edx
$LN13@ProgPatrol:
	inc	BYTE PTR _Dimm$[ebp]
	cmp	BYTE PTR _Dimm$[ebp], 2
	jb	$LL14@ProgPatrol
; Line 2021
	movzx	eax, WORD PTR [edi+65473]
	test	ax, ax
	je	SHORT $LN5@ProgPatrol
; Line 2022
	movzx	eax, ax
	cdq
	mov	DWORD PTR [esi+58038], eax
	mov	DWORD PTR [esi+58042], edx
; Line 2023
	jmp	SHORT $LN3@ProgPatrol
$LN5@ProgPatrol:
; Line 2024
	and	DWORD PTR [esi+58042], 0
	mov	DWORD PTR [esi+58038], 255		; 000000ffH
; Line 2026
	jmp	SHORT $LN3@ProgPatrol
$LN15@ProgPatrol:
; Line 2027
	and	DWORD PTR [esi+57998], 0
	and	DWORD PTR [esi+58002], 0
$LN3@ProgPatrol:
; Line 2031
	cmp	BYTE PTR [edi+65472], 1
	jne	SHORT $LN2@ProgPatrol
; Line 2032
	mov	DWORD PTR [esi+57982], 1
; Line 2034
	jmp	SHORT $LN21@ProgPatrol
$LN2@ProgPatrol:
; Line 2035
	and	DWORD PTR [esi+57982], 0
$LN21@ProgPatrol:
	and	DWORD PTR [esi+57986], 0
	pop	edi
	pop	esi
	pop	ebx
; Line 2038
	pop	ebp
	ret	0
_ProgPatrolDemandScrub ENDP
_TEXT	ENDS
PUBLIC	_SetPhyInitDynamicVariables
; Function compile flags: /Ogspy
;	COMDAT _SetPhyInitDynamicVariables
_TEXT	SEGMENT
tv588 = -16						; size = 4
tv1195 = -12						; size = 4
tv305 = -12						; size = 4
_Mrs5Command$ = -8					; size = 4
_Rank$ = -4						; size = 1
_x4bit_memory$ = -4					; size = 2
_MrcData$ = 8						; size = 4
_SetPhyInitDynamicVariables PROC			; COMDAT
; Line 2051
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 2057
	mov	edi, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR [edi+28608]
; Line 2059
	xor	ebx, ebx
	mov	ecx, eax
	mov	BYTE PTR _x4bit_memory$[ebp], 1
	mov	BYTE PTR _x4bit_memory$[ebp+1], 1
	mov	DWORD PTR _Mrs5Command$[ebp], ebx
	lea	esi, DWORD PTR _x4bit_memory$[ebp]
	lea	eax, DWORD PTR [edi+56166]
	mov	DWORD PTR tv305[ebp], 2
$LL30@SetPhyInit:
; Line 2062
	cmp	BYTE PTR [ecx], bl
	je	SHORT $LN29@SetPhyInit
; Line 2065
	mov	dl, BYTE PTR [eax]
	and	dl, 1
	mov	BYTE PTR [esi], dl
$LN29@SetPhyInit:
	inc	ecx
	add	eax, 4336				; 000010f0H
	inc	esi
	dec	DWORD PTR tv305[ebp]
	jne	SHORT $LL30@SetPhyInit
; Line 2068
	movzx	eax, BYTE PTR _x4bit_memory$[ebp+1]
	movzx	ecx, BYTE PTR _x4bit_memory$[ebp]
	add	eax, eax
	or	eax, ecx
	lea	esi, DWORD PTR [edi+55566]
	mov	DWORD PTR tv588[ebp], eax
	mov	DWORD PTR tv1195[ebp], 2
$LL26@SetPhyInit:
; Line 2069
	xor	eax, eax
	inc	eax
	cmp	DWORD PTR [edi+55966], eax
	jne	SHORT $LN23@SetPhyInit
	cmp	DWORD PTR [edi+55970], ebx
	jne	SHORT $LN23@SetPhyInit
; Line 2070
	mov	DWORD PTR [esi-8], eax
; Line 2071
	jmp	SHORT $LN45@SetPhyInit
$LN23@SetPhyInit:
; Line 2072
	mov	DWORD PTR [esi-8], ebx
$LN45@SetPhyInit:
	mov	DWORD PTR [esi-4], ebx
; Line 2075
	cmp	DWORD PTR [edi+60302], eax
	jne	SHORT $LN21@SetPhyInit
	cmp	DWORD PTR [edi+60306], ebx
	jne	SHORT $LN21@SetPhyInit
; Line 2076
	mov	DWORD PTR [esi], eax
; Line 2077
	jmp	SHORT $LN46@SetPhyInit
$LN21@SetPhyInit:
; Line 2078
	mov	DWORD PTR [esi], ebx
$LN46@SetPhyInit:
	mov	DWORD PTR [esi+4], ebx
; Line 2081
	movzx	eax, WORD PTR [edi+30756]
	cdq
	add	eax, DWORD PTR [edi+56078]
; Line 2082
	lea	ecx, DWORD PTR [edi+55566]
	adc	edx, DWORD PTR [edi+56082]
	add	eax, DWORD PTR [edi+55558]
	adc	edx, DWORD PTR [edi+55562]
	mov	DWORD PTR [esi+48], eax
	mov	DWORD PTR [esi+52], edx
	movzx	eax, WORD PTR [edi+31044]
	cdq
	add	eax, DWORD PTR [edi+60414]
	adc	edx, DWORD PTR [edi+60418]
	add	eax, DWORD PTR [ecx]
	adc	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+96], eax
	mov	DWORD PTR [esi+100], edx
; Line 2083
	movzx	eax, WORD PTR [edi+30748]
	cdq
	add	eax, DWORD PTR [edi+56078]
	adc	edx, DWORD PTR [edi+56082]
	add	eax, DWORD PTR [edi+55558]
	adc	edx, DWORD PTR [edi+55562]
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+36], edx
; Line 2084
	movzx	eax, WORD PTR [edi+31036]
	cdq
	add	eax, DWORD PTR [edi+60414]
	adc	edx, DWORD PTR [edi+60418]
	add	eax, DWORD PTR [ecx]
	adc	edx, DWORD PTR [ecx+4]
; Line 2102
	mov	ecx, DWORD PTR tv588[ebp]
	mov	DWORD PTR [esi+80], eax
	mov	DWORD PTR [esi+84], edx
	movzx	eax, BYTE PTR [edi+65296]
	inc	eax
	cdq
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], edx
	movzx	eax, BYTE PTR [edi+65297]
	inc	eax
	cdq
	mov	DWORD PTR [esi+88], eax
	xor	eax, eax
	inc	eax
	sub	ecx, ebx
	mov	DWORD PTR [esi+92], edx
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+28], ebx
	mov	DWORD PTR [esi+72], eax
	mov	DWORD PTR [esi+76], ebx
	mov	DWORD PTR [esi+112], ebx
	mov	DWORD PTR [esi+116], ebx
	mov	DWORD PTR [esi+136], ebx
	mov	DWORD PTR [esi+140], ebx
	mov	DWORD PTR [esi+120], ebx
	mov	DWORD PTR [esi+124], ebx
	mov	DWORD PTR [esi+128], ebx
	mov	DWORD PTR [esi+132], ebx
	je	SHORT $LN17@SetPhyInit
	dec	ecx
	je	SHORT $LN16@SetPhyInit
	dec	ecx
	je	SHORT $LN15@SetPhyInit
; Line 2113
	mov	DWORD PTR [esi+136], eax
	mov	DWORD PTR [esi+140], ebx
; Line 2114
	jmp	SHORT $LN18@SetPhyInit
$LN15@SetPhyInit:
; Line 2110
	mov	DWORD PTR [esi+128], eax
	mov	DWORD PTR [esi+132], ebx
; Line 2111
	jmp	SHORT $LN18@SetPhyInit
$LN16@SetPhyInit:
; Line 2107
	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR [esi+124], ebx
; Line 2108
	jmp	SHORT $LN18@SetPhyInit
$LN17@SetPhyInit:
; Line 2104
	mov	DWORD PTR [esi+112], eax
	mov	DWORD PTR [esi+116], ebx
$LN18@SetPhyInit:
; Line 2117
	mov	DWORD PTR [esi+56], ebx
	mov	DWORD PTR [esi+60], ebx
; Line 2118
	cmp	BYTE PTR [edi+28608], bl
	je	SHORT $LN43@SetPhyInit
; Line 2119
	mov	BYTE PTR _Rank$[ebp], bl
$LL12@SetPhyInit:
; Line 2120
	movzx	ecx, BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR [ecx+edi+30688], 1
	je	SHORT $LN37@SetPhyInit
	add	BYTE PTR _Rank$[ebp], 2
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL12@SetPhyInit
; Line 2133
	jmp	SHORT $LN10@SetPhyInit
$LN37@SetPhyInit:
; Line 2121
	push	5
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	edi
	call	_ReadMrsCommand
	mov	DWORD PTR _Mrs5Command$[ebp], eax
	xor	eax, eax
	add	esp, 16					; 00000010H
	inc	eax
$LN10@SetPhyInit:
; Line 2125
	cmp	BYTE PTR [edi+31272], 7
	jne	SHORT $LN43@SetPhyInit
	test	DWORD PTR _Mrs5Command$[ebp], 114688	; 0001c000H
	je	SHORT $LN43@SetPhyInit
; Line 2126
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [esi+60], ebx
$LN43@SetPhyInit:
; Line 2130
	mov	DWORD PTR [esi+104], ebx
	mov	DWORD PTR [esi+108], ebx
; Line 2131
	cmp	BYTE PTR [edi+28609], bl
	je	SHORT $LN2@SetPhyInit
; Line 2132
	mov	BYTE PTR _Rank$[ebp], bl
$LL6@SetPhyInit:
; Line 2133
	movzx	ecx, BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR [ecx+edi+30692], 1
	je	SHORT $LN38@SetPhyInit
	add	BYTE PTR _Rank$[ebp], 2
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL6@SetPhyInit
	jmp	SHORT $LN4@SetPhyInit
$LN38@SetPhyInit:
; Line 2134
	push	5
	push	DWORD PTR _Rank$[ebp]
	push	eax
	push	edi
	call	_ReadMrsCommand
	mov	DWORD PTR _Mrs5Command$[ebp], eax
	xor	eax, eax
	add	esp, 16					; 00000010H
	inc	eax
$LN4@SetPhyInit:
; Line 2138
	cmp	BYTE PTR [edi+31273], 7
	jne	SHORT $LN2@SetPhyInit
	test	DWORD PTR _Mrs5Command$[ebp], 114688	; 0001c000H
	je	SHORT $LN2@SetPhyInit
; Line 2139
	mov	DWORD PTR [esi+104], eax
	mov	DWORD PTR [esi+108], ebx
$LN2@SetPhyInit:
; Line 2145
	mov	DWORD PTR [esi-40], eax
	mov	DWORD PTR [esi-36], ebx
; Line 2146
	cmp	BYTE PTR [edi+31274], 1
	jne	SHORT $LN25@SetPhyInit
	cmp	BYTE PTR [edi+65434], 16		; 00000010H
	jne	SHORT $LN25@SetPhyInit
; Line 2147
	mov	DWORD PTR [esi-40], ebx
	mov	DWORD PTR [esi-36], ebx
$LN25@SetPhyInit:
	add	esi, 4336				; 000010f0H
	dec	DWORD PTR tv1195[ebp]
	jne	$LL26@SetPhyInit
	pop	edi
	pop	esi
	pop	ebx
; Line 2174
	leave
	ret	0
_SetPhyInitDynamicVariables ENDP
_TEXT	ENDS
PUBLIC	_SetMemThermThrotVariables
; Function compile flags: /Ogspy
;	COMDAT _SetMemThermThrotVariables
_TEXT	SEGMENT
tv888 = -28						; size = 4
tv224 = -24						; size = 4
tv808 = -20						; size = 4
tv545 = -16						; size = 4
tv651 = -12						; size = 4
tv654 = -8						; size = 4
_TsodSupport$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_SetMemThermThrotVariables PROC				; COMDAT
; Line 2187
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
; Line 2192
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	2
	xor	ebx, ebx
	lea	eax, DWORD PTR [esi+28610]
	pop	edx
	mov	DWORD PTR tv651[ebp], esi
	mov	DWORD PTR tv654[ebp], ebx
	lea	ecx, DWORD PTR [esi+57078]
	mov	DWORD PTR tv808[ebp], eax
	mov	DWORD PTR tv888[ebp], edx
$LL25@SetMemTher:
; Line 2193
	cmp	BYTE PTR [esi+65519], 1
	jne	SHORT $LN22@SetMemTher
; Line 2195
	mov	DWORD PTR [ecx], 1
	mov	DWORD PTR [ecx+4], ebx
; Line 2196
	mov	BYTE PTR [esi+70990], 1
	jmp	$LN9@SetMemTher
$LN22@SetMemTher:
; Line 2197
	mov	al, BYTE PTR [esi+70990]
	cmp	al, 2
	jne	SHORT $LN20@SetMemTher
; Line 2199
	mov	eax, DWORD PTR tv651[ebp]
	mov	BYTE PTR _TsodSupport$[ebp], 1
	cmp	BYTE PTR [eax+28608], bl
	jne	SHORT $LN19@SetMemTher
; Line 2200
	mov	BYTE PTR _TsodSupport$[ebp], bl
$LN19@SetMemTher:
; Line 2202
	mov	edi, DWORD PTR tv808[ebp]
	xor	eax, eax
	mov	DWORD PTR tv545[ebp], edi
	mov	DWORD PTR tv224[ebp], edx
$LL34@SetMemTher:
; Line 2203
	mov	edx, DWORD PTR tv545[ebp]
	cmp	BYTE PTR [edx], bl
	je	SHORT $LN17@SetMemTher
; Line 2205
	mov	edx, DWORD PTR tv651[ebp]
	mov	dl, BYTE PTR [edx+31272]
	cmp	dl, bl
	jne	SHORT $LN32@SetMemTher
	mov	edi, DWORD PTR tv654[ebp]
	add	edi, eax
	imul	edi, 514				; 00000202H
	cmp	BYTE PTR [edi+esi+28663], bl
; Line 2207
	je	SHORT $LN35@SetMemTher
$LN32@SetMemTher:
; Line 2208
	cmp	dl, 7
	jne	SHORT $LN17@SetMemTher
	mov	edx, DWORD PTR tv654[ebp]
	add	edx, eax
	imul	edx, 514				; 00000202H
	cmp	BYTE PTR [edx+esi+28645], bl
	jne	SHORT $LN17@SetMemTher
$LN35@SetMemTher:
; Line 2209
	mov	BYTE PTR _TsodSupport$[ebp], bl
$LN17@SetMemTher:
; Line 2202
	inc	eax
	inc	DWORD PTR tv545[ebp]
	dec	DWORD PTR tv224[ebp]
	jne	SHORT $LL34@SetMemTher
; Line 2214
	mov	DWORD PTR [ecx+4], ebx
	cmp	BYTE PTR _TsodSupport$[ebp], bl
	je	SHORT $LN11@SetMemTher
	mov	DWORD PTR [ecx], 1
; Line 2216
	jmp	SHORT $LN9@SetMemTher
$LN11@SetMemTher:
; Line 2217
	mov	DWORD PTR [ecx], ebx
; Line 2220
	jmp	SHORT $LN9@SetMemTher
$LN20@SetMemTher:
; Line 2221
	movzx	eax, al
	cdq
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN9@SetMemTher:
; Line 2223
	cmp	BYTE PTR [esi+65519], 1
	jne	SHORT $LN8@SetMemTher
; Line 2224
	mov	DWORD PTR [ecx+64], 1
	mov	DWORD PTR [ecx+68], ebx
; Line 2226
	mov	BYTE PTR [esi+70992], 1
; Line 2227
	jmp	SHORT $LN7@SetMemTher
$LN8@SetMemTher:
; Line 2228
	movzx	eax, BYTE PTR [esi+70992]
	cdq
	mov	DWORD PTR [ecx+64], eax
	mov	DWORD PTR [ecx+68], edx
$LN7@SetMemTher:
; Line 2230
	movzx	eax, BYTE PTR [esi+70992]
	cdq
	mov	DWORD PTR [ecx+64], eax
	mov	DWORD PTR [ecx+68], edx
; Line 2231
	movzx	eax, BYTE PTR [esi+70991]
	cdq
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 2232
	movzx	eax, BYTE PTR [esi+70993]
	cdq
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2233
	movzx	eax, BYTE PTR [esi+70994]
	cdq
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 2234
	movzx	eax, BYTE PTR [esi+70995]
	cdq
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
; Line 2235
	movzx	edx, BYTE PTR [esi+70996]
	push	100					; 00000064H
	pop	eax
	sub	eax, edx
	cdq
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], edx
; Line 2236
	movzx	edx, BYTE PTR [esi+70997]
	push	100					; 00000064H
	pop	eax
	sub	eax, edx
	cdq
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+52], edx
; Line 2237
	movzx	edx, BYTE PTR [esi+70998]
	push	100					; 00000064H
	pop	eax
	sub	eax, edx
	cdq
	mov	DWORD PTR [ecx+60], edx
	mov	DWORD PTR [ecx+56], eax
; Line 2238
	movzx	eax, BYTE PTR [esi+70999]
	cdq
	mov	DWORD PTR [ecx+76], edx
	push	2
	pop	edx
	add	DWORD PTR tv654[ebp], edx
	add	DWORD PTR tv808[ebp], edx
	inc	DWORD PTR tv651[ebp]
	mov	DWORD PTR [ecx+72], eax
	add	ecx, 4336				; 000010f0H
	dec	DWORD PTR tv888[ebp]
	jne	$LL25@SetMemTher
	pop	edi
	pop	esi
	pop	ebx
; Line 2267
	leave
	ret	0
_SetMemThermThrotVariables ENDP
_TEXT	ENDS
PUBLIC	_SetMemHotVariables
; Function compile flags: /Ogspy
;	COMDAT _SetMemHotVariables
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_SetMemHotVariables PROC				; COMDAT
; Line 2297
	mov	ecx, DWORD PTR _MrcData$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	edi
	xor	edi, edi
	xor	ebx, ebx
	inc	edi
	cmp	BYTE PTR [ecx+28610], bl
	je	SHORT $LN16@SetMemHotV
; Line 2298
	mov	DWORD PTR [ecx+59094], edi
	mov	DWORD PTR [ecx+59098], ebx
; Line 2299
	mov	DWORD PTR [ecx+59102], 24		; 00000018H
	mov	DWORD PTR [ecx+59106], ebx
$LN16@SetMemHotV:
; Line 2301
	cmp	BYTE PTR [ecx+28611], bl
	je	SHORT $LN15@SetMemHotV
; Line 2302
	mov	DWORD PTR [ecx+59110], edi
	mov	DWORD PTR [ecx+59114], ebx
; Line 2303
	mov	DWORD PTR [ecx+59118], 25		; 00000019H
	mov	DWORD PTR [ecx+59122], ebx
$LN15@SetMemHotV:
; Line 2305
	cmp	BYTE PTR [ecx+28612], bl
	je	SHORT $LN14@SetMemHotV
; Line 2306
	mov	DWORD PTR [ecx+59126], edi
	mov	DWORD PTR [ecx+59130], ebx
; Line 2307
	mov	DWORD PTR [ecx+59134], 26		; 0000001aH
	mov	DWORD PTR [ecx+59138], ebx
$LN14@SetMemHotV:
; Line 2309
	cmp	BYTE PTR [ecx+28613], bl
	je	SHORT $LN13@SetMemHotV
; Line 2310
	mov	DWORD PTR [ecx+59142], edi
	mov	DWORD PTR [ecx+59146], ebx
; Line 2311
	mov	DWORD PTR [ecx+59150], 27		; 0000001bH
	mov	DWORD PTR [ecx+59154], ebx
$LN13@SetMemHotV:
; Line 2314
	push	2
	lea	esi, DWORD PTR [ecx+57174]
	pop	ebp
$LL12@SetMemHotV:
; Line 2315
	movzx	eax, BYTE PTR [ecx+71002]
	cdq
	mov	DWORD PTR [esi-8], eax
	mov	DWORD PTR [esi-4], edx
; Line 2316
	cmp	BYTE PTR [ecx+70990], bl
; Line 2318
	mov	DWORD PTR [esi+4], ebx
	jne	SHORT $LN9@SetMemHotV
	mov	DWORD PTR [esi], edi
; Line 2319
	jmp	SHORT $LN11@SetMemHotV
$LN9@SetMemHotV:
; Line 2321
	mov	DWORD PTR [esi], ebx
$LN11@SetMemHotV:
; Line 2314
	add	esi, 4336				; 000010f0H
	dec	ebp
	jne	SHORT $LL12@SetMemHotV
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2334
	ret	0
_SetMemHotVariables ENDP
_TEXT	ENDS
PUBLIC	_SetMemTripVariables
; Function compile flags: /Ogspy
;	COMDAT _SetMemTripVariables
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_SetMemTripVariables PROC				; COMDAT
; Line 2353
	push	esi
	mov	esi, DWORD PTR _MrcData$[esp]
	push	edi
; Line 2356
	push	2
	lea	ecx, DWORD PTR [esi+57206]
	pop	edi
$LL9@SetMemTrip:
; Line 2357
	movzx	eax, BYTE PTR [esi+71003]
	cdq
	mov	DWORD PTR [ecx-8], eax
	mov	DWORD PTR [ecx-4], edx
; Line 2358
	movzx	eax, BYTE PTR [esi+71004]
	cdq
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	add	ecx, 4336				; 000010f0H
	dec	edi
	jne	SHORT $LL9@SetMemTrip
	pop	edi
	pop	esi
; Line 2374
	ret	0
_SetMemTripVariables ENDP
_TEXT	ENDS
PUBLIC	_A0DllWorkAroundEnabled
; Function compile flags: /Ogspy
;	COMDAT _A0DllWorkAroundEnabled
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_A0DllWorkAroundEnabled PROC				; COMDAT
; Line 2378
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2385
	or	DWORD PTR _Register$[ebp+8], -1
	push	esi
	push	edi
; Line 2387
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	xor	eax, eax
	mov	edi, esp
	push	eax
	push	eax
	mov	DWORD PTR _Register$[ebp+12], eax
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 316		; 0000013cH
	push	eax
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
; Line 2390
	pop	edi
	and	al, 1
	pop	esi
	leave
	ret	0
_A0DllWorkAroundEnabled ENDP
_TEXT	ENDS
PUBLIC	_InitializeJedecVariables
; Function compile flags: /Ogspy
;	COMDAT _InitializeJedecVariables
_TEXT	SEGMENT
tv148 = -16						; size = 4
tv409 = -12						; size = 4
tv490 = -8						; size = 4
tv492 = -4						; size = 4
tv445 = 8						; size = 4
_MrcData$ = 8						; size = 4
tv364 = 12						; size = 4
_Channel$ = 12						; size = 1
_InitializeJedecVariables PROC				; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
; Line 161
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [edi+esi+31272], 3
; Line 162
	push	DWORD PTR _Channel$[ebp]
	push	esi
	ja	SHORT $LN12@Initialize@3
	call	_InitializeDdr3JedecVariables
; Line 163
	jmp	SHORT $LN19@Initialize@3
$LN12@Initialize@3:
; Line 164
	call	_InitializeDdr4JedecVariables
$LN19@Initialize@3:
	pop	ecx
; Line 172
	xor	ebx, ebx
	lea	eax, DWORD PTR [esi+edi*4+30688]
	pop	ecx
	mov	DWORD PTR tv445[ebp], ebx
	mov	DWORD PTR tv490[ebp], OFFSET _MrsCommandIndex
	mov	DWORD PTR tv492[ebp], eax
	mov	DWORD PTR tv148[ebp], 4
$LL10@Initialize@3:
; Line 176
	mov	eax, DWORD PTR tv492[ebp]
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN9@Initialize@3
; Line 179
	cmp	BYTE PTR [esi+65337], bl
	je	SHORT $LN9@Initialize@3
	mov	eax, DWORD PTR tv445[ebp]
	lea	eax, DWORD PTR [eax+edi*4]
	imul	eax, 141				; 0000008dH
	add	eax, esi
	cmp	BYTE PTR [eax+25988], bl
	je	SHORT $LN9@Initialize@3
; Line 181
	mov	edx, DWORD PTR tv490[ebp]
	mov	ecx, edi
	mov	DWORD PTR tv364[ebp], edx
	imul	ecx, 542				; 0000021eH
	lea	edx, DWORD PTR [eax+25848]
	mov	DWORD PTR tv409[ebp], 35		; 00000023H
$LL5@Initialize@3:
; Line 182
	mov	eax, DWORD PTR tv364[ebp]
	movzx	eax, WORD PTR [eax]
	mov	ebx, DWORD PTR [edx]
	add	DWORD PTR tv364[ebp], 2
	add	eax, ecx
	mov	DWORD PTR [esi+eax*8+55526], ebx
	xor	ebx, ebx
	add	edx, 4
	dec	DWORD PTR tv409[ebp]
	mov	DWORD PTR [esi+eax*8+55530], ebx
	jne	SHORT $LL5@Initialize@3
$LN9@Initialize@3:
; Line 172
	inc	DWORD PTR tv445[ebp]
	inc	DWORD PTR tv492[ebp]
	add	DWORD PTR tv490[ebp], 70		; 00000046H
	dec	DWORD PTR tv148[ebp]
	jne	SHORT $LL10@Initialize@3
	pop	edi
	pop	esi
; Line 191
	xor	eax, eax
	pop	ebx
; Line 192
	leave
	ret	0
_InitializeJedecVariables ENDP
_TEXT	ENDS
PUBLIC	_ConvertInputParameters
EXTRN	_CalcRaplBandWidthScale:PROC
EXTRN	_SmbusAddressToClttTable:BYTE
EXTRN	_SetSlowFastExit:PROC
EXTRN	_SetScrambler:PROC
EXTRN	_mFrequencyMultiplier:TBYTE
EXTRN	_mDdrMaxSreDly:TBYTE
EXTRN	_mFawTableDdr4:BYTE
EXTRN	_mFawTableDdr3:TBYTE
EXTRN	_TimingGuardbands:BYTE
EXTRN	_WriteDataB2P:PROC
EXTRN	_AntiLogBase2:PROC
EXTRN	_mDmapRegisters:BYTE
; Function compile flags: /Ogspy
;	COMDAT _ConvertInputParameters
_TEXT	SEGMENT
tv5631 = -52						; size = 8
tv5065 = -44						; size = 8
tv6248 = -36						; size = 4
tv5358 = -36						; size = 4
tv5356 = -36						; size = 4
tv5353 = -36						; size = 4
tv5351 = -36						; size = 4
tv5347 = -36						; size = 4
tv5345 = -36						; size = 4
tv5343 = -36						; size = 4
tv5341 = -36						; size = 4
tv5339 = -36						; size = 4
tv4325 = -36						; size = 4
tv3064 = -36						; size = 4
tv3009 = -36						; size = 4
tv2798 = -36						; size = 4
_TOM$ = -36						; size = 4
_MemSizeToUse$ = -36					; size = 4
tv5960 = -32						; size = 4
tv4351 = -32						; size = 4
tv2930 = -32						; size = 4
tv6193 = -28						; size = 4
tv5991 = -28						; size = 4
tv4462 = -28						; size = 4
tv4414 = -28						; size = 4
_TSegSize$ = -28					; size = 2
_SmbCltt$ = -24						; size = 4
_Channel$ = -20						; size = 1
tv5349 = -16						; size = 4
tv4361 = -16						; size = 4
tv4341 = -16						; size = 4
_LowMemory$ = -16					; size = 4
tv4324 = -12						; size = 4
_BackupEnable$ = -5					; size = 1
_Tcmd$ = -4						; size = 1
_BitLimit32$ = -3					; size = 1
_MaxNMode$ = -2						; size = 1
_DetermineCommandMode$ = -1				; size = 1
_Tcl$ = -1						; size = 1
_ReclaimEn$ = -1					; size = 1
_MirrorSpd$ = -1					; size = 1
tv6376 = 8						; size = 4
tv6196 = 8						; size = 4
tv6046 = 8						; size = 4
tv5939 = 8						; size = 4
tv5001 = 8						; size = 4
_MrcData$ = 8						; size = 4
tv4754 = 11						; size = 1
_Dimm$ = 11						; size = 1
_Twl$ = 11						; size = 1
_ConvertInputParameters PROC				; COMDAT
; Line 2427
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
; Line 2460
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55509]
; Line 2462
	xor	ebx, ebx
	push	edi
	mov	BYTE PTR _SmbCltt$[ebp], 48		; 00000030H
	mov	BYTE PTR _SmbCltt$[ebp+1], 50		; 00000032H
	mov	BYTE PTR _SmbCltt$[ebp+2], 52		; 00000034H
	mov	BYTE PTR _SmbCltt$[ebp+3], 54		; 00000036H
	mov	BYTE PTR _BackupEnable$[ebp], al
	mov	BYTE PTR _MaxNMode$[ebp], bl
; Line 2468
	mov	BYTE PTR _Channel$[ebp], bl
$LL225@ConvertInp:
; Line 2469
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR tv4324[ebp], eax
	cmp	BYTE PTR [ecx+55385], bl
	je	$LN221@ConvertInp
	cmp	BYTE PTR [ecx+28608], bl
	je	$LN221@ConvertInp
; Line 2479
	cmp	BYTE PTR [esi+eax*2+55414], 1
	je	SHORT $LN219@ConvertInp
	cmp	BYTE PTR [esi+eax*2+55415], 1
	jne	SHORT $LN220@ConvertInp
$LN219@ConvertInp:
	cmp	BYTE PTR [esi+70806], 1
	jne	SHORT $LN220@ConvertInp
; Line 2484
	imul	eax, 4336				; 000010f0H
	lea	edi, DWORD PTR [eax+esi]
	mov	DWORD PTR [edi+55542], 1
; Line 2488
	jmp	SHORT $LN287@ConvertInp
$LN220@ConvertInp:
; Line 2492
	imul	eax, 4336				; 000010f0H
	lea	edi, DWORD PTR [eax+esi]
	mov	DWORD PTR [edi+55542], ebx
$LN287@ConvertInp:
	mov	DWORD PTR [edi+55546], ebx
; Line 2494
	cmp	BYTE PTR [esi+70989], bl
	mov	DWORD PTR tv4351[ebp], edi
; Line 2495
	mov	DWORD PTR [edi+57042], ebx
	je	SHORT $LN217@ConvertInp
	mov	DWORD PTR [edi+57038], 1
; Line 2496
	jmp	SHORT $LN216@ConvertInp
$LN217@ConvertInp:
; Line 2497
	mov	DWORD PTR [edi+57038], ebx
$LN216@ConvertInp:
; Line 2500
	mov	eax, DWORD PTR tv4324[ebp]
	imul	eax, 288				; 00000120H
	lea	ecx, DWORD PTR [eax+esi]
	movzx	eax, WORD PTR [ecx+30748]
	sub	eax, 6
	cdq
	mov	DWORD PTR [edi+58526], eax
	mov	DWORD PTR [edi+58530], edx
; Line 2504
	movzx	eax, WORD PTR [ecx+30756]
	sub	eax, 6
	cdq
	mov	DWORD PTR [edi+58462], eax
; Line 2507
	mov	eax, DWORD PTR tv4324[ebp]
	add	eax, esi
	mov	DWORD PTR [edi+58466], edx
	cmp	BYTE PTR [eax+31272], 7
	setne	al
	dec	al
	and	al, 68					; 00000044H
	add	al, 63					; 0000003fH
; Line 2512
	cmp	BYTE PTR [esi+31274], 1
	mov	BYTE PTR _MirrorSpd$[ebp], al
	jne	SHORT $LN213@ConvertInp
	cmp	BYTE PTR [esi+65478], bl
	je	SHORT $LN213@ConvertInp
; Line 2513
	mov	DWORD PTR [esi+59558], ebx
; Line 2514
	mov	DWORD PTR [esi+63894], ebx
; Line 2515
	mov	DWORD PTR [esi+55742], ebx
; Line 2516
	mov	DWORD PTR [esi+60078], ebx
; Line 2517
	jmp	SHORT $LN288@ConvertInp
$LN213@ConvertInp:
; Line 2518
	xor	eax, eax
	inc	eax
	mov	DWORD PTR [esi+59558], eax
; Line 2519
	mov	DWORD PTR [esi+63894], eax
; Line 2520
	mov	DWORD PTR [esi+55742], eax
; Line 2521
	mov	DWORD PTR [esi+60078], eax
$LN288@ConvertInp:
; Line 2532
	mov	eax, DWORD PTR tv4324[ebp]
	mov	DWORD PTR [esi+60082], ebx
	mov	DWORD PTR [esi+55746], ebx
	mov	DWORD PTR [esi+63898], ebx
	mov	DWORD PTR [esi+59562], ebx
	cmp	BYTE PTR [esi+eax*2+28610], bl
	je	$LN200@ConvertInp
; Line 2536
	mov	ecx, eax
	movzx	eax, BYTE PTR [esi+ecx*2+55398]
	sub	eax, ebx
	je	SHORT $LN208@ConvertInp
	dec	eax
	je	SHORT $LN207@ConvertInp
	dec	eax
; Line 2548
	mov	DWORD PTR [edi+56170], ebx
	je	SHORT $LN206@ConvertInp
	mov	DWORD PTR [edi+56166], ebx
; Line 2549
	jmp	SHORT $LN209@ConvertInp
$LN206@ConvertInp:
; Line 2544
	mov	DWORD PTR [edi+56166], 2
; Line 2545
	mov	DWORD PTR [edi+56182], 1
	mov	DWORD PTR [edi+56186], ebx
; Line 2546
	jmp	SHORT $LN209@ConvertInp
$LN207@ConvertInp:
; Line 2541
	mov	DWORD PTR [edi+56166], ebx
; Line 2542
	jmp	SHORT $LN289@ConvertInp
$LN208@ConvertInp:
; Line 2538
	mov	DWORD PTR [edi+56166], 1
$LN289@ConvertInp:
	mov	DWORD PTR [edi+56170], ebx
$LN209@ConvertInp:
; Line 2551
	movzx	edx, BYTE PTR _MirrorSpd$[ebp]
	mov	eax, ecx
	imul	eax, 1028				; 00000404H
	add	edx, eax
	mov	DWORD PTR tv4414[ebp], eax
	mov	al, BYTE PTR [edx+esi+28631]
	and	al, 1
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+56158], eax
; Line 2552
	lea	eax, DWORD PTR [ecx+esi]
	mov	DWORD PTR [edi+56162], edx
	cmp	BYTE PTR [eax+55418], 1
; Line 2557
	push	8
	jne	SHORT $LN204@ConvertInp
	mov	DWORD PTR [edi+56342], ebx
	mov	DWORD PTR [edi+56346], ebx
	mov	cl, BYTE PTR [esi+ecx*2+55410]
	mov	eax, 256				; 00000100H
	shl	eax, cl
	mov	ecx, DWORD PTR tv4324[ebp]
	mov	cl, BYTE PTR [esi+ecx*2+55406]
	cdq
	and	edx, 7
	add	eax, edx
	pop	edx
	shl	edx, cl
	sar	eax, 3
	push	4
	pop	ecx
	imul	eax, edx
	mov	edx, DWORD PTR tv4324[ebp]
	mov	DWORD PTR tv5358[ebp], ecx
	lea	ecx, DWORD PTR [esi+edx*2+55398]
	mov	cl, BYTE PTR [ecx]
	mov	edx, DWORD PTR tv5358[ebp]
	shl	edx, cl
	mov	DWORD PTR tv5356[ebp], edx
	mov	ecx, edx
; Line 2558
	jmp	SHORT $LN290@ConvertInp
$LN204@ConvertInp:
; Line 2559
	movzx	eax, BYTE PTR [esi+ecx*2+55410]
	cdq
	mov	DWORD PTR [edi+56342], eax
	mov	DWORD PTR [edi+56346], edx
; Line 2563
	mov	cl, BYTE PTR [esi+ecx*2+55406]
	pop	eax
	shl	eax, cl
	mov	ecx, DWORD PTR tv4324[ebp]
	movzx	ecx, BYTE PTR [esi+ecx*2+55410]
	mov	DWORD PTR tv5353[ebp], eax
	add	ecx, 3
	mov	eax, 256				; 00000100H
	shl	eax, cl
	mov	ecx, DWORD PTR tv5353[ebp]
	push	4
	cdq
	and	edx, 7
	add	eax, edx
	mov	edx, DWORD PTR tv4324[ebp]
	sar	eax, 3
	imul	ecx, eax
	pop	eax
	mov	DWORD PTR tv5351[ebp], eax
	lea	eax, DWORD PTR [esi+edx*2+55398]
	mov	DWORD PTR tv5349[ebp], ecx
	mov	cl, BYTE PTR [eax]
	mov	eax, DWORD PTR tv5351[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR tv5349[ebp]
	mov	DWORD PTR tv5347[ebp], eax
	mov	eax, ecx
	mov	ecx, DWORD PTR tv5347[ebp]
$LN290@ConvertInp:
	cdq
	idiv	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR tv4324[ebp]
	movzx	edx, BYTE PTR [esi+eax*2+55394]
	inc	edx
	imul	ecx, edx
	lea	eax, DWORD PTR [esi+eax*8+28614]
	mov	DWORD PTR [eax], ecx
; Line 2565
	cmp	BYTE PTR [esi+65550], 1
; Line 2566
	mov	eax, DWORD PTR tv4324[ebp]
	jne	SHORT $LN202@ConvertInp
	shr	DWORD PTR [esi+eax*8+28614], 1
$LN202@ConvertInp:
; Line 2569
	mov	ecx, DWORD PTR [esi+eax*8+28614]
	add	DWORD PTR [esi+eax*4+31280], ecx
; Line 2570
	mov	ecx, DWORD PTR [esi+eax*8+28614]
	add	DWORD PTR [esi+31276], ecx
; Line 2571
	lea	eax, DWORD PTR [esi+eax*2+55414]
	cmp	BYTE PTR [eax], 1
; Line 2572
	mov	DWORD PTR [edi+55970], ebx
	jne	SHORT $LN201@ConvertInp
; Line 2573
	mov	eax, DWORD PTR tv4414[ebp]
	add	eax, esi
	mov	DWORD PTR [edi+55966], 1
	mov	cl, BYTE PTR [eax+28767]
	mov	BYTE PTR [eax+28762], cl
; Line 2574
	jmp	SHORT $LN200@ConvertInp
$LN201@ConvertInp:
; Line 2575
	mov	DWORD PTR [edi+55966], ebx
$LN200@ConvertInp:
; Line 2578
	mov	eax, DWORD PTR tv4324[ebp]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR tv4341[ebp], eax
	cmp	BYTE PTR [eax+28611], bl
	je	$LN188@ConvertInp
; Line 2582
	movzx	eax, BYTE PTR [eax+55399]
	sub	eax, ebx
	je	SHORT $LN196@ConvertInp
	dec	eax
	je	SHORT $LN195@ConvertInp
	dec	eax
; Line 2594
	mov	DWORD PTR [edi+56170], ebx
	je	SHORT $LN194@ConvertInp
	mov	DWORD PTR [edi+56166], ebx
; Line 2595
	jmp	SHORT $LN197@ConvertInp
$LN194@ConvertInp:
; Line 2590
	mov	DWORD PTR [edi+56166], 2
; Line 2591
	mov	DWORD PTR [edi+56182], 1
	mov	DWORD PTR [edi+56186], ebx
; Line 2592
	jmp	SHORT $LN197@ConvertInp
$LN195@ConvertInp:
; Line 2587
	mov	DWORD PTR [edi+56166], ebx
; Line 2588
	jmp	SHORT $LN291@ConvertInp
$LN196@ConvertInp:
; Line 2584
	mov	DWORD PTR [edi+56166], 1
$LN291@ConvertInp:
	mov	DWORD PTR [edi+56170], ebx
$LN197@ConvertInp:
; Line 2601
	mov	ecx, DWORD PTR tv4324[ebp]
	movzx	edx, BYTE PTR _MirrorSpd$[ebp]
	mov	eax, ecx
	imul	eax, 1028				; 00000404H
	add	edx, eax
	mov	DWORD PTR tv4414[ebp], eax
	mov	al, BYTE PTR [edx+esi+29145]
	and	al, 1
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+56150], eax
; Line 2602
	lea	eax, DWORD PTR [ecx+esi]
; Line 2607
	mov	ecx, DWORD PTR tv4341[ebp]
	mov	DWORD PTR [edi+56154], edx
	cmp	BYTE PTR [eax+55418], 1
	push	8
	jne	SHORT $LN192@ConvertInp
	mov	DWORD PTR [edi+56334], ebx
	mov	DWORD PTR [edi+56338], ebx
	mov	cl, BYTE PTR [ecx+55411]
	mov	eax, 256				; 00000100H
	shl	eax, cl
	mov	ecx, DWORD PTR tv4341[ebp]
	mov	cl, BYTE PTR [ecx+55407]
	cdq
	and	edx, 7
	add	eax, edx
	pop	edx
	shl	edx, cl
	sar	eax, 3
	push	4
	pop	ecx
	imul	eax, edx
	mov	edx, DWORD PTR tv4341[ebp]
	mov	DWORD PTR tv5345[ebp], ecx
	mov	cl, BYTE PTR [edx+55399]
	mov	edx, DWORD PTR tv5345[ebp]
	shl	edx, cl
	mov	DWORD PTR tv5343[ebp], edx
	mov	ecx, edx
; Line 2608
	jmp	SHORT $LN292@ConvertInp
$LN192@ConvertInp:
; Line 2609
	add	ecx, 55411				; 0000d873H
	movzx	eax, BYTE PTR [ecx]
	cdq
	mov	DWORD PTR [edi+56338], edx
	mov	DWORD PTR [edi+56334], eax
; Line 2613
	movzx	ecx, BYTE PTR [ecx]
	add	ecx, 3
	mov	eax, 256				; 00000100H
	shl	eax, cl
	mov	ecx, DWORD PTR tv4341[ebp]
	mov	cl, BYTE PTR [ecx+55407]
	cdq
	and	edx, 7
	add	eax, edx
	pop	edx
	shl	edx, cl
	sar	eax, 3
	push	4
	pop	ecx
	imul	eax, edx
	mov	edx, DWORD PTR tv4341[ebp]
	mov	DWORD PTR tv5341[ebp], ecx
	mov	cl, BYTE PTR [edx+55399]
	mov	edx, DWORD PTR tv5341[ebp]
	shl	edx, cl
	mov	DWORD PTR tv5339[ebp], edx
	mov	ecx, edx
$LN292@ConvertInp:
	cdq
	idiv	ecx
	mov	ecx, DWORD PTR tv4341[ebp]
	movzx	ecx, BYTE PTR [ecx+55395]
	inc	ecx
	imul	eax, ecx
	mov	ecx, DWORD PTR tv4324[ebp]
	mov	DWORD PTR [esi+ecx*8+28618], eax
; Line 2615
	cmp	BYTE PTR [esi+65550], 1
; Line 2616
	mov	eax, ecx
	jne	SHORT $LN190@ConvertInp
	mov	ecx, DWORD PTR [esi+eax*8+28614]
	shr	ecx, 1
	mov	DWORD PTR [esi+eax*8+28618], ecx
$LN190@ConvertInp:
; Line 2619
	mov	ecx, DWORD PTR [esi+eax*8+28618]
	add	DWORD PTR [esi+eax*4+31280], ecx
; Line 2620
	mov	eax, DWORD PTR [esi+eax*8+28618]
	add	DWORD PTR [esi+31276], eax
; Line 2621
	mov	eax, DWORD PTR tv4341[ebp]
	cmp	BYTE PTR [eax+55415], 1
; Line 2622
	mov	DWORD PTR [edi+55970], ebx
	jne	SHORT $LN189@ConvertInp
; Line 2623
	mov	eax, DWORD PTR tv4414[ebp]
	add	eax, esi
	mov	DWORD PTR [edi+55966], 1
	mov	cl, BYTE PTR [eax+29281]
	mov	BYTE PTR [eax+29276], cl
; Line 2624
	jmp	SHORT $LN188@ConvertInp
$LN189@ConvertInp:
; Line 2625
	mov	DWORD PTR [edi+55966], ebx
$LN188@ConvertInp:
; Line 2629
	mov	eax, DWORD PTR tv4324[ebp]
	lea	ecx, DWORD PTR [esi+eax*4+30688]
	movzx	eax, BYTE PTR [ecx]
	cdq
	mov	DWORD PTR [edi+56374], eax
; Line 2630
	lea	eax, DWORD PTR [edi+57222]
	mov	DWORD PTR [edi+56378], edx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
; Line 2631
	cmp	BYTE PTR [ecx], bl
	je	SHORT $LN187@ConvertInp
	mov	ecx, DWORD PTR tv4324[ebp]
	lea	ecx, DWORD PTR [esi+ecx*2+55414]
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $LN187@ConvertInp
; Line 2632
	mov	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+4], ebx
$LN187@ConvertInp:
; Line 2634
	mov	eax, DWORD PTR tv4324[ebp]
	lea	ecx, DWORD PTR [esi+eax*4+30689]
	movzx	eax, BYTE PTR [ecx]
	cdq
	mov	DWORD PTR [edi+56366], eax
; Line 2635
	lea	eax, DWORD PTR [edi+57614]
	mov	DWORD PTR [edi+56370], edx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
; Line 2636
	cmp	BYTE PTR [ecx], bl
	mov	ecx, DWORD PTR tv4324[ebp]
	je	SHORT $LN186@ConvertInp
	cmp	BYTE PTR [esi+ecx*2+55414], 1
	jne	SHORT $LN186@ConvertInp
; Line 2637
	mov	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+4], ebx
$LN186@ConvertInp:
; Line 2639
	movzx	eax, BYTE PTR [esi+ecx*4+30690]
	cdq
	mov	DWORD PTR [edi+56358], eax
; Line 2640
	lea	eax, DWORD PTR [edi+57366]
	mov	DWORD PTR [edi+56362], edx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
; Line 2641
	cmp	BYTE PTR [esi+ecx*4+30690], bl
	je	SHORT $LN185@ConvertInp
	mov	edx, DWORD PTR tv4341[ebp]
	cmp	BYTE PTR [edx+55415], 1
	jne	SHORT $LN185@ConvertInp
; Line 2642
	mov	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+4], ebx
$LN185@ConvertInp:
; Line 2644
	movzx	eax, BYTE PTR [esi+ecx*4+30691]
	cdq
	mov	DWORD PTR [edi+56350], eax
; Line 2645
	lea	eax, DWORD PTR [edi+57766]
	mov	DWORD PTR [edi+56354], edx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
; Line 2646
	cmp	BYTE PTR [esi+ecx*4+30691], bl
	je	SHORT $LN184@ConvertInp
	mov	edx, DWORD PTR tv4341[ebp]
	cmp	BYTE PTR [edx+55415], 1
	jne	SHORT $LN184@ConvertInp
; Line 2647
	mov	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+4], ebx
$LN184@ConvertInp:
; Line 2667
	lea	eax, DWORD PTR [esi+ecx*8]
	mov	ecx, DWORD PTR [eax+28614]
; Line 2668
	lea	edx, DWORD PTR [edi+56326]
	mov	DWORD PTR [edx], ebx
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR _MemSizeToUse$[ebp], ecx
; Line 2669
	mov	ecx, DWORD PTR [eax+28618]
	mov	DWORD PTR tv4462[ebp], eax
	cmp	ecx, DWORD PTR [eax+28614]
	jbe	SHORT $LN281@ConvertInp
; Line 2670
	mov	DWORD PTR [edx], 1
	mov	DWORD PTR [edx+4], ebx
; Line 2671
	mov	eax, DWORD PTR [eax+28618]
	jmp	SHORT $LN183@ConvertInp
$LN281@ConvertInp:
	mov	eax, DWORD PTR _MemSizeToUse$[ebp]
$LN183@ConvertInp:
; Line 2676
	cmp	eax, 256				; 00000100H
	jb	SHORT $LN181@ConvertInp
	cmp	eax, 65536				; 00010000H
	jbe	SHORT $LN182@ConvertInp
$LN181@ConvertInp:
; Line 2678
	mov	DWORD PTR [esi+65333], 5
; Line 2679
	call	_MrcDeadLoop
$LN182@ConvertInp:
; Line 2684
	movzx	eax, WORD PTR [esi+55490]
	cmp	ax, 8
	je	SHORT $LN178@ConvertInp
	cmp	ax, 2
	je	SHORT $LN178@ConvertInp
	cmp	ax, 4
	je	SHORT $LN178@ConvertInp
; Line 2686
	push	DWORD PTR [edi+57938]
	push	DWORD PTR [edi+57934]
	call	_ChannelSizeFusetoMBSize
	pop	ecx
	pop	ecx
	cmp	eax, ebx
	je	$LN241@ConvertInp
	mov	ecx, DWORD PTR tv4462[ebp]
	mov	edx, DWORD PTR [ecx+28618]
	add	edx, DWORD PTR [ecx+28614]
; Line 2692
	cmp	edx, eax
	ja	$LN241@ConvertInp
$LN178@ConvertInp:
; Line 2703
	mov	eax, DWORD PTR tv4341[ebp]
	movzx	ecx, WORD PTR [eax+65525]
	imul	ecx, 24					; 00000018H
	mov	ecx, DWORD PTR _mDmapRegisters[ecx]
	mov	DWORD PTR [edi+56382], ecx
	mov	DWORD PTR [edi+56386], ebx
; Line 2704
	movzx	ecx, WORD PTR [eax+65525]
	imul	ecx, 24					; 00000018H
	mov	ecx, DWORD PTR _mDmapRegisters[ecx+4]
	mov	DWORD PTR [edi+56390], ecx
	mov	DWORD PTR [edi+56394], ebx
; Line 2705
	movzx	ecx, WORD PTR [eax+65525]
	imul	ecx, 24					; 00000018H
	mov	ecx, DWORD PTR _mDmapRegisters[ecx+8]
	mov	DWORD PTR [edi+56406], ecx
	mov	DWORD PTR [edi+56410], ebx
; Line 2706
	movzx	ecx, WORD PTR [eax+65525]
	imul	ecx, 24					; 00000018H
	mov	ecx, DWORD PTR _mDmapRegisters[ecx+12]
	mov	DWORD PTR [edi+56414], ecx
	mov	DWORD PTR [edi+56418], ebx
; Line 2707
	movzx	ecx, WORD PTR [eax+65525]
	imul	ecx, 24					; 00000018H
	mov	ecx, DWORD PTR _mDmapRegisters[ecx+16]
	mov	DWORD PTR [edi+56422], ecx
	mov	DWORD PTR [edi+56426], ebx
; Line 2708
	movzx	eax, WORD PTR [eax+65525]
	imul	eax, 24					; 00000018H
	mov	eax, DWORD PTR _mDmapRegisters[eax+20]
	mov	DWORD PTR [edi+56430], eax
	mov	DWORD PTR [edi+56434], ebx
; Line 2717
	movzx	eax, BYTE PTR [esi+65541]
	cdq
	mov	DWORD PTR [esi+57014], eax
; Line 2718
	movzx	eax, BYTE PTR [esi+65543]
	mov	DWORD PTR [esi+57018], edx
	cdq
	mov	DWORD PTR [esi+57022], eax
; Line 2719
	movzx	eax, BYTE PTR [esi+65542]
	mov	DWORD PTR [esi+57026], edx
	cdq
	mov	DWORD PTR [esi+57030], eax
; Line 2723
	movzx	eax, WORD PTR [esi+65358]
	mov	DWORD PTR _TSegSize$[ebp], eax
; Line 2724
	movzx	eax, WORD PTR [esi+65356]
; Line 2726
	mov	ecx, 4096				; 00001000H
	mov	DWORD PTR [esi+65575], -1436892331	; aa5ac355H
	mov	DWORD PTR [esi+65571], 1604664490	; 5fa53caaH
	mov	DWORD PTR [esi+57034], edx
	mov	esi, DWORD PTR [esi+31276]
	sub	ecx, eax
	mov	DWORD PTR _TOM$[ebp], esi
	mov	DWORD PTR _LowMemory$[ebp], ecx
	cmp	ecx, esi
	jb	SHORT $LN229@ConvertInp
	mov	DWORD PTR _LowMemory$[ebp], esi
$LN229@ConvertInp:
; Line 2728
	mov	BYTE PTR _ReclaimEn$[ebp], bl
; Line 2730
	cmp	esi, DWORD PTR _LowMemory$[ebp]
	jbe	SHORT $LN177@ConvertInp
; Line 2731
	mov	BYTE PTR _ReclaimEn$[ebp], 1
$LN177@ConvertInp:
; Line 2738
	pushad
; Line 2739
	mov	eax, -2147483640			; 80000008H
; Line 2740
	cpuid
; Line 2741
	cmp	al, 32					; 00000020H
; Line 2742
	je	SHORT $BitLimited$35674
; Line 2743
	mov	BYTE PTR _BitLimit32$[ebp], 0
; Line 2744
	jmp	SHORT $_Exit$35675
$BitLimited$35674:
; Line 2746
	mov	BYTE PTR _BitLimit32$[ebp], 1
$_Exit$35675:
; Line 2748
	popad
; Line 2756
	mov	ecx, DWORD PTR _LowMemory$[ebp]
	xor	ebx, ebx
	cmp	BYTE PTR _BitLimit32$[ebp], bl
	je	SHORT $LN256@ConvertInp
	mov	BYTE PTR _ReclaimEn$[ebp], bl
	mov	esi, ecx
	jmp	SHORT $LN176@ConvertInp
$LN256@ConvertInp:
	mov	esi, DWORD PTR _TOM$[ebp]
$LN176@ConvertInp:
; Line 2759
	cmp	BYTE PTR _ReclaimEn$[ebp], bl
	je	SHORT $LN175@ConvertInp
; Line 2760
	sub	esi, ecx
	add	esi, 4096				; 00001000H
	mov	eax, esi
; Line 2761
	jmp	SHORT $LN174@ConvertInp
$LN175@ConvertInp:
; Line 2762
	mov	eax, 4096				; 00001000H
$LN174@ConvertInp:
; Line 2777
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	edx, ecx
	shl	edx, 20					; 00000014H
	mov	DWORD PTR [esi+56310], edx
; Line 2781
	mov	edx, eax
; Line 2782
	shr	eax, 12					; 0000000cH
	and	eax, 127				; 0000007fH
	mov	DWORD PTR [esi+56302], eax
; Line 2783
	movzx	eax, WORD PTR _TSegSize$[ebp]
	sub	ecx, eax
; Line 2790
	mov	eax, DWORD PTR tv4351[ebp]
	shl	ecx, 20					; 00000014H
	mov	DWORD PTR [esi+56318], ecx
	shl	edx, 20					; 00000014H
	xor	ecx, ecx
	mov	DWORD PTR [esi+56314], ebx
	mov	DWORD PTR [esi+56294], edx
	mov	DWORD PTR [esi+56298], ebx
	mov	DWORD PTR [esi+56306], ebx
	mov	DWORD PTR [esi+56322], ebx
	mov	edi, DWORD PTR [eax+57854]
	mov	edx, DWORD PTR [eax+57858]
	inc	ecx
	cmp	edi, ecx
	jne	SHORT $LN251@ConvertInp
	cmp	edx, ebx
	je	$LN163@ConvertInp
$LN251@ConvertInp:
	push	2
	pop	eax
	cmp	edi, eax
	jne	SHORT $LN252@ConvertInp
	cmp	edx, ebx
	je	$LN171@ConvertInp
$LN252@ConvertInp:
	cmp	edi, 3
	jne	SHORT $LN253@ConvertInp
	cmp	edx, ebx
	je	$LN155@ConvertInp
$LN253@ConvertInp:
; Line 2884
	mov	cl, BYTE PTR [esi+31275]
	cmp	cl, 3
	jb	$LN224@ConvertInp
	cmp	cl, 4
	jbe	SHORT $LN144@ConvertInp
	push	5
	pop	edi
	cmp	cl, 5
	je	SHORT $LN143@ConvertInp
	cmp	cl, 6
	je	SHORT $LN142@ConvertInp
	cmp	cl, 7
$LN320@ConvertInp:
	push	7
	pop	eax
	jne	$LN224@ConvertInp
; Line 2903
	mov	DWORD PTR [esi+55718], edi
; Line 2905
	jmp	$LN307@ConvertInp
$LN142@ConvertInp:
; Line 2898
	mov	DWORD PTR [esi+55718], 3
$LN321@ConvertInp:
; Line 2897
	mov	DWORD PTR [esi+55726], edi
; Line 2899
	mov	DWORD PTR [esi+55710], 6
; Line 2900
	jmp	$LN317@ConvertInp
$LN143@ConvertInp:
; Line 2892
	mov	DWORD PTR [esi+55726], 3
$LN312@ConvertInp:
; Line 2893
	mov	DWORD PTR [esi+55718], eax
$LN318@ConvertInp:
; Line 2894
	mov	DWORD PTR [esi+55710], edi
; Line 2895
	jmp	$LN317@ConvertInp
$LN144@ConvertInp:
; Line 2888
	mov	DWORD PTR [esi+55718], ebx
; Line 2889
	mov	DWORD PTR [esi+55710], ebx
; Line 2910
	jmp	$LN316@ConvertInp
$LN155@ConvertInp:
; Line 2851
	mov	dl, BYTE PTR [esi+31275]
	cmp	dl, 3
	jb	$LN224@ConvertInp
	push	4
	pop	edi
	cmp	dl, 4
	jbe	SHORT $LN152@ConvertInp
	cmp	dl, 5
	je	SHORT $LN151@ConvertInp
	push	6
	pop	ecx
	cmp	dl, cl
	je	SHORT $LN150@ConvertInp
	cmp	dl, 7
	jne	$LN224@ConvertInp
; Line 2870
	mov	DWORD PTR [esi+55718], edi
$LN319@ConvertInp:
; Line 2869
	mov	DWORD PTR [esi+55726], ecx
; Line 2871
	mov	DWORD PTR [esi+55710], ecx
; Line 2872
	jmp	$LN317@ConvertInp
$LN150@ConvertInp:
; Line 2864
	mov	DWORD PTR [esi+55726], edi
; Line 2865
	mov	DWORD PTR [esi+55718], eax
; Line 2866
	mov	DWORD PTR [esi+55710], 5
; Line 2867
	jmp	$LN317@ConvertInp
$LN151@ConvertInp:
; Line 2859
	mov	DWORD PTR [esi+55726], eax
; Line 2860
	mov	DWORD PTR [esi+55718], ecx
; Line 2862
	jmp	$LN318@ConvertInp
$LN152@ConvertInp:
; Line 2855
	mov	DWORD PTR [esi+55718], ebx
; Line 2878
	jmp	SHORT $LN319@ConvertInp
$LN171@ConvertInp:
; Line 2792
	mov	dl, BYTE PTR [esi+31275]
	push	3
	pop	ecx
	cmp	dl, cl
	jb	$LN224@ConvertInp
	cmp	dl, 4
	jbe	$LN144@ConvertInp
	push	5
	pop	edi
	cmp	dl, 5
	je	SHORT $LN167@ConvertInp
	cmp	dl, 6
	je	SHORT $LN166@ConvertInp
	cmp	dl, 7
; Line 2816
	jmp	$LN320@ConvertInp
$LN166@ConvertInp:
; Line 2809
	mov	DWORD PTR [esi+55718], ecx
; Line 2811
	jmp	$LN321@ConvertInp
$LN167@ConvertInp:
; Line 2803
	mov	DWORD PTR [esi+55726], ecx
; Line 2806
	jmp	$LN312@ConvertInp
$LN163@ConvertInp:
; Line 2823
	mov	dl, BYTE PTR [esi+31275]
	push	3
	pop	eax
	cmp	dl, al
	jb	SHORT $LN224@ConvertInp
	push	4
	pop	edi
	cmp	dl, 4
	jbe	SHORT $LN160@ConvertInp
	cmp	dl, 5
	je	SHORT $LN159@ConvertInp
	push	6
	pop	eax
	cmp	dl, al
	je	SHORT $LN158@ConvertInp
	push	7
	pop	edi
	cmp	dl, 7
	jne	SHORT $LN224@ConvertInp
; Line 2841
	mov	DWORD PTR [esi+55726], edi
; Line 2844
	jmp	$LN312@ConvertInp
$LN158@ConvertInp:
; Line 2837
	mov	DWORD PTR [esi+55718], edi
; Line 2838
	mov	DWORD PTR [esi+55710], 7
; Line 2839
	jmp	SHORT $LN316@ConvertInp
$LN159@ConvertInp:
; Line 2832
	mov	DWORD PTR [esi+55718], eax
; Line 2834
	jmp	$LN321@ConvertInp
$LN160@ConvertInp:
; Line 2827
	mov	DWORD PTR [esi+55718], ecx
$LN307@ConvertInp:
; Line 2828
	mov	DWORD PTR [esi+55710], eax
$LN316@ConvertInp:
; Line 2826
	mov	DWORD PTR [esi+55726], eax
$LN317@ConvertInp:
	mov	DWORD PTR [esi+55730], ebx
; Line 2827
	mov	DWORD PTR [esi+55722], ebx
; Line 2828
	mov	DWORD PTR [esi+55714], ebx
; Line 2913
	jmp	SHORT $LN224@ConvertInp
$LN221@ConvertInp:
; Line 2470
	mov	BYTE PTR [ecx+28608], bl
$LN224@ConvertInp:
; Line 2468
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL225@ConvertInp
; Line 2917
	mov	al, BYTE PTR [esi+28608]
	mov	BYTE PTR tv4754[ebp], al
	cmp	al, bl
	jne	SHORT $LN139@ConvertInp
	cmp	BYTE PTR [esi+28609], bl
	jne	SHORT $LN139@ConvertInp
; Line 2918
	push	28					; 0000001cH
$LN306@ConvertInp:
	pop	eax
	jmp	$LN226@ConvertInp
$LN241@ConvertInp:
; Line 2688
	push	5
	pop	eax
	mov	DWORD PTR [esi+65333], eax
; Line 2689
	jmp	$LN226@ConvertInp
$LN139@ConvertInp:
; Line 2920
	movzx	eax, al
	cdq
	mov	edi, eax
; Line 2921
	movzx	eax, BYTE PTR [esi+28609]
	mov	ecx, edx
	cdq
	mov	DWORD PTR [esi+55550], eax
; Line 2923
	mov	DWORD PTR [esi+59886], eax
; Line 2924
	xor	eax, eax
	cmp	BYTE PTR tv4754[ebp], bl
	mov	DWORD PTR [esi+55554], edx
	sete	al
	mov	DWORD PTR [esi+59890], edx
	mov	DWORD PTR [esi+55538], ecx
	mov	DWORD PTR [esi+59874], ecx
	mov	DWORD PTR [esi+55534], edi
	mov	DWORD PTR [esi+59870], edi
; Line 2945
	push	esi
	cdq
	mov	ecx, eax
	xor	eax, eax
	cmp	BYTE PTR [esi+28609], bl
	mov	edi, edx
	sete	al
	mov	DWORD PTR [esi+55574], ecx
	mov	DWORD PTR [esi+55578], edi
	mov	DWORD PTR [esi+59910], ecx
	mov	DWORD PTR [esi+59914], edi
	cdq
	mov	DWORD PTR [esi+55582], eax
	mov	DWORD PTR [esi+59918], eax
	movzx	eax, BYTE PTR [esi+70805]
	mov	DWORD PTR [esi+55586], edx
	mov	DWORD PTR [esi+59922], edx
	cdq
	mov	DWORD PTR [esi+57046], eax
	mov	DWORD PTR [esi+57050], edx
	mov	DWORD PTR [esi+61382], eax
	mov	DWORD PTR [esi+61386], edx
	call	_ConfigureInterleaving
	pop	ecx
; Line 2947
	mov	BYTE PTR _Channel$[ebp], bl
$LL137@ConvertInp:
; Line 2952
	movzx	ecx, BYTE PTR _Channel$[ebp]
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	lea	edi, DWORD PTR [eax+esi]
	movzx	eax, BYTE PTR [esi+65475]
	cdq
	mov	DWORD PTR [edi+56462], eax
	mov	DWORD PTR [edi+56466], edx
; Line 2953
	movzx	eax, BYTE PTR [esi+65502]
	cdq
	mov	DWORD PTR [edi+56614], eax
	mov	DWORD PTR [edi+56618], edx
; Line 2954
	movzx	eax, BYTE PTR [esi+65503]
	cdq
	mov	DWORD PTR [edi+56606], eax
	mov	DWORD PTR [edi+56610], edx
	mov	DWORD PTR tv4324[ebp], ecx
; Line 2955
	cmp	BYTE PTR [esi+65522], bl
	jne	SHORT $LN134@ConvertInp
; Line 2956
	mov	DWORD PTR [edi+56478], ebx
; Line 2957
	jmp	SHORT $LN295@ConvertInp
$LN134@ConvertInp:
; Line 2958
	mov	al, BYTE PTR [esi+31275]
	cmp	al, 3
	je	SHORT $LN130@ConvertInp
	cmp	al, 4
	je	SHORT $LN126@ConvertInp
	sub	al, 5
; Line 2976
	mov	DWORD PTR [edi+56482], ebx
	cmp	al, 2
	ja	SHORT $LN121@ConvertInp
	mov	DWORD PTR [edi+56478], 2047		; 000007ffH
; Line 2977
	jmp	SHORT $LN127@ConvertInp
$LN121@ConvertInp:
; Line 2979
	mov	DWORD PTR [edi+56478], ebx
; Line 2980
	jmp	SHORT $LN127@ConvertInp
$LN126@ConvertInp:
; Line 2967
	mov	cl, BYTE PTR [ecx+esi+31272]
	cmp	cl, 3
	ja	SHORT $LN125@ConvertInp
$LN297@ConvertInp:
; Line 2968
	mov	DWORD PTR [edi+56478], 1822		; 0000071eH
	jmp	SHORT $LN295@ConvertInp
$LN125@ConvertInp:
; Line 2969
	cmp	cl, 7
	jne	SHORT $LN127@ConvertInp
; Line 2972
	jmp	SHORT $LN297@ConvertInp
$LN130@ConvertInp:
; Line 2960
	mov	cl, BYTE PTR [ecx+esi+31272]
	cmp	cl, 3
; Line 2961
	jbe	SHORT $LN296@ConvertInp
; Line 2962
	cmp	cl, 7
	jne	SHORT $LN127@ConvertInp
$LN296@ConvertInp:
; Line 2963
	mov	DWORD PTR [edi+56478], 1562		; 0000061aH
$LN295@ConvertInp:
	mov	DWORD PTR [edi+56482], ebx
$LN127@ConvertInp:
; Line 2984
	movzx	eax, BYTE PTR [esi+65517]
	cdq
	mov	DWORD PTR [edi+56454], eax
	mov	DWORD PTR [edi+56458], edx
; Line 2988
	mov	al, BYTE PTR [esi+65519]
	cmp	al, bl
	je	SHORT $LN120@ConvertInp
; Line 2989
	movzx	eax, al
	push	eax
	call	_AntiLogBase2
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+56198], eax
; Line 2990
	xor	eax, eax
	mov	DWORD PTR [edi+56202], edx
	cmp	BYTE PTR [esi+65519], 4
	pop	ecx
	sete	al
; Line 2995
	cmp	BYTE PTR [esi+65434], 1
	jbe	SHORT $LN114@ConvertInp
; Line 3000
	push	eax
	push	ebx
	push	55					; 00000037H
	push	esi
	call	_WriteDataB2P
	add	esp, 16					; 00000010H
; Line 3001
	cmp	eax, ebx
	je	SHORT $LN114@ConvertInp
; Line 3002
	cmp	eax, 16					; 00000010H
	jb	$LN226@ConvertInp
; Line 3003
	push	15					; 0000000fH
; Line 3005
	jmp	$LN306@ConvertInp
$LN120@ConvertInp:
; Line 3009
	mov	DWORD PTR [edi+56198], 30		; 0000001eH
	mov	DWORD PTR [edi+56202], ebx
$LN114@ConvertInp:
; Line 3012
	mov	eax, DWORD PTR tv4324[ebp]
	add	eax, esi
	cmp	BYTE PTR [eax+28608], bl
	je	$LN136@ConvertInp
; Line 3025
	mov	eax, DWORD PTR tv4324[ebp]
; Line 3030
	mov	edx, DWORD PTR [edi+55970]
	imul	eax, 288				; 00000120H
	lea	ecx, DWORD PTR [eax+esi]
	mov	al, BYTE PTR [ecx+30756]
	mov	BYTE PTR _Tcl$[ebp], al
	mov	al, BYTE PTR [ecx+30748]
	mov	BYTE PTR _Twl$[ebp], al
	mov	eax, DWORD PTR [edi+55966]
	mov	DWORD PTR tv4361[ebp], ecx
	cmp	eax, 1
	jne	SHORT $LN112@ConvertInp
	cmp	edx, ebx
	jne	SHORT $LN112@ConvertInp
; Line 3031
	inc	BYTE PTR _Tcl$[ebp]
; Line 3032
	inc	BYTE PTR _Twl$[ebp]
$LN112@ConvertInp:
; Line 3035
	mov	al, BYTE PTR [ecx+30752]
	dec	al
; Line 3037
	cmp	BYTE PTR [esi+31275], 6
	mov	BYTE PTR _Tcmd$[ebp], al
	jb	SHORT $LN111@ConvertInp
; Line 3038
	mov	eax, DWORD PTR tv4324[ebp]
	add	eax, esi
	mov	DWORD PTR tv4325[ebp], eax
	movzx	eax, BYTE PTR [eax+65294]
	cdq
	mov	DWORD PTR [edi+55894], eax
; Line 3039
	mov	eax, DWORD PTR tv4325[ebp]
	mov	DWORD PTR [edi+55898], edx
	movzx	eax, BYTE PTR [eax+65296]
	cdq
	mov	DWORD PTR [edi+55886], eax
	mov	DWORD PTR [edi+55890], edx
; Line 3042
	jmp	SHORT $LN110@ConvertInp
$LN111@ConvertInp:
; Line 3043
	mov	DWORD PTR [edi+55894], ebx
	mov	DWORD PTR [edi+55898], ebx
; Line 3044
	mov	DWORD PTR [edi+55886], ebx
	mov	DWORD PTR [edi+55890], ebx
$LN110@ConvertInp:
; Line 3046
	movzx	eax, WORD PTR [ecx+64266]
	mov	edx, 255				; 000000ffH
	cmp	ax, dx
	je	SHORT $LN109@ConvertInp
; Line 3047
	movzx	eax, ax
	sub	eax, 7
; Line 3048
	jmp	SHORT $LN298@ConvertInp
$LN109@ConvertInp:
; Line 3049
	mov	al, BYTE PTR _Tcl$[ebp]
	sub	al, 7
	movzx	eax, al
$LN298@ConvertInp:
	cdq
	mov	DWORD PTR [edi+55774], eax
	mov	DWORD PTR [edi+55778], edx
; Line 3051
	mov	al, BYTE PTR [ecx+30700]
	sub	al, 7
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55798], eax
; Line 3052
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+55802], edx
	mov	al, BYTE PTR [eax+30704]
	sub	al, 7
	movzx	eax, al
	cdq
; Line 3053
	mov	DWORD PTR [edi+55790], eax
	lea	ecx, DWORD PTR [edi+55782]
	mov	DWORD PTR [ecx], eax
	mov	eax, edx
	mov	DWORD PTR [edi+55794], eax
; Line 3054
	mov	al, BYTE PTR _Twl$[ebp]
	sub	al, 7
	movzx	eax, al
	mov	DWORD PTR [ecx+4], edx
	cdq
	mov	DWORD PTR [edi+55766], eax
; Line 3055
	movzx	eax, BYTE PTR _Tcmd$[ebp]
	mov	DWORD PTR [edi+55770], edx
	cdq
	mov	DWORD PTR [edi+55974], eax
; Line 3056
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+55978], edx
	mov	al, BYTE PTR [eax+30708]
	sub	al, 10					; 0000000aH
; Line 3057
	cmp	DWORD PTR [edi+55886], 1
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55830], eax
	mov	DWORD PTR [edi+55834], edx
	jne	SHORT $LN269@ConvertInp
	cmp	DWORD PTR [edi+55890], ebx
	jne	SHORT $LN269@ConvertInp
; Line 3058
	push	2
	pop	ecx
	add	DWORD PTR [edi+55830], ecx
	adc	DWORD PTR [edi+55834], ebx
	jmp	SHORT $LN107@ConvertInp
$LN269@ConvertInp:
	push	2
	pop	ecx
$LN107@ConvertInp:
; Line 3060
	mov	eax, DWORD PTR tv4361[ebp]
	mov	al, BYTE PTR [eax+30696]
	sub	al, 24					; 00000018H
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55838], eax
; Line 3061
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+55842], edx
	mov	al, BYTE PTR [eax+30728]
	sub	al, 5
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55750], eax
	mov	DWORD PTR [edi+55754], edx
; Line 3062
	movzx	eax, BYTE PTR [esi+31275]
	mov	al, BYTE PTR _TimingGuardbands[eax+17]
	add	al, 2
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55878], eax
	mov	DWORD PTR [edi+55882], edx
; Line 3063
	movzx	eax, BYTE PTR [esi+31275]
	mov	al, BYTE PTR _TimingGuardbands[eax+37]
	add	al, 2
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55870], eax
	mov	DWORD PTR [edi+55874], edx
; Line 3064
	movzx	eax, BYTE PTR [esi+31275]
	mov	al, BYTE PTR _TimingGuardbands[eax+22]
	add	al, 4
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55934], eax
	mov	DWORD PTR [edi+55938], edx
; Line 3065
	movzx	eax, BYTE PTR [esi+31275]
	mov	al, BYTE PTR _TimingGuardbands[eax+42]
	add	al, 4
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55926], eax
	mov	DWORD PTR [edi+55930], edx
; Line 3066
	movzx	eax, BYTE PTR [esi+31275]
	mov	al, BYTE PTR _TimingGuardbands[eax+27]
	add	al, 2
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55862], eax
	mov	DWORD PTR [edi+55866], edx
; Line 3067
	movzx	eax, BYTE PTR [esi+31275]
	mov	al, BYTE PTR _TimingGuardbands[eax+47]
	add	al, 2
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55854], eax
; Line 3068
	movzx	eax, BYTE PTR _Twl$[ebp]
	mov	DWORD PTR [edi+55858], edx
	movzx	edx, BYTE PTR _Tcl$[ebp]
	sub	eax, edx
	add	eax, 8
	cmp	eax, 6
	mov	DWORD PTR tv5001[ebp], eax
	jle	SHORT $LN230@ConvertInp
	jmp	SHORT $LN231@ConvertInp
$LN230@ConvertInp:
	push	6
	pop	eax
$LN231@ConvertInp:
	movzx	edx, BYTE PTR [esi+31275]
	mov	dl, BYTE PTR _TimingGuardbands[edx+32]
	add	dl, al
	sub	dl, 6
; Line 3069
	cmp	DWORD PTR tv5001[ebp], 6
	movzx	eax, dl
	cdq
	mov	DWORD PTR [edi+55918], eax
	mov	DWORD PTR [edi+55922], edx
	jle	SHORT $LN232@ConvertInp
	mov	eax, DWORD PTR tv5001[ebp]
	jmp	SHORT $LN233@ConvertInp
$LN232@ConvertInp:
	push	6
	pop	eax
$LN233@ConvertInp:
	movzx	edx, BYTE PTR [esi+31275]
	mov	dl, BYTE PTR _TimingGuardbands[edx+52]
	add	dl, al
	sub	dl, 6
	movzx	eax, dl
	cdq
	mov	DWORD PTR [edi+55910], eax
	mov	DWORD PTR [edi+55914], edx
; Line 3070
	movzx	eax, BYTE PTR [esi+31275]
	mov	al, BYTE PTR _TimingGuardbands[eax-3]
	sub	al, 2
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+55846], eax
	mov	DWORD PTR [edi+55850], edx
; Line 3071
	mov	DWORD PTR [edi+55806], ebx
	mov	DWORD PTR [edi+55810], ebx
; Line 3078
	mov	DWORD PTR [edi+55950], ebx
	mov	DWORD PTR [edi+55954], ebx
; Line 3079
	mov	DWORD PTR [edi+55958], ebx
	mov	DWORD PTR [edi+55962], ebx
; Line 3080
	movzx	eax, BYTE PTR [esi+31275]
	sub	eax, 3
	je	$LN104@ConvertInp
	dec	eax
	je	$LN98@ConvertInp
	dec	eax
	je	$LN92@ConvertInp
	dec	eax
; Line 3143
	mov	DWORD PTR [edi+55986], ebx
; Line 3144
	mov	DWORD PTR [edi+55994], ebx
; Line 3146
	mov	DWORD PTR [edi+55906], ebx
	je	SHORT $LN91@ConvertInp
	push	3
	dec	eax
	pop	eax
	mov	DWORD PTR [edi+55982], eax
	mov	DWORD PTR [edi+55990], eax
	je	SHORT $LN90@ConvertInp
	mov	DWORD PTR [edi+55846], 5
	mov	DWORD PTR [edi+55850], ebx
	mov	DWORD PTR [edi+55902], 6
; Line 3147
	jmp	$LN105@ConvertInp
$LN90@ConvertInp:
; Line 3137
	add	DWORD PTR [edi+55838], 1
	mov	DWORD PTR [edi+55958], eax
	mov	DWORD PTR [edi+55962], ebx
	adc	DWORD PTR [edi+55842], ebx
	mov	DWORD PTR [edi+56142], eax
	mov	DWORD PTR [edi+56126], 5
	mov	DWORD PTR [edi+56130], ebx
	mov	DWORD PTR [edi+55902], 4
; Line 3138
	jmp	$LN299@ConvertInp
$LN91@ConvertInp:
; Line 3120
	mov	DWORD PTR [edi+55958], ecx
	mov	DWORD PTR [edi+55962], ebx
; Line 3121
	mov	DWORD PTR [edi+56126], 4
	mov	DWORD PTR [edi+56130], ebx
; Line 3122
	mov	DWORD PTR [edi+55982], ecx
; Line 3123
	mov	DWORD PTR [edi+55990], ecx
; Line 3124
	mov	DWORD PTR [edi+56142], ecx
; Line 3125
	mov	DWORD PTR [edi+55902], 3
; Line 3126
	jmp	$LN299@ConvertInp
$LN92@ConvertInp:
; Line 3112
	mov	DWORD PTR [edi+55958], ecx
	mov	DWORD PTR [edi+55962], ebx
; Line 3113
	mov	DWORD PTR [edi+56126], 3
	mov	DWORD PTR [edi+56130], ebx
; Line 3114
	mov	DWORD PTR [edi+55982], ecx
; Line 3115
	mov	DWORD PTR [edi+55990], ecx
; Line 3116
	mov	DWORD PTR [edi+56142], ecx
; Line 3117
	mov	DWORD PTR [edi+55902], ecx
; Line 3118
	jmp	$LN300@ConvertInp
$LN98@ConvertInp:
; Line 3098
	mov	eax, DWORD PTR tv4324[ebp]
	mov	DWORD PTR [edi+56126], ecx
	mov	DWORD PTR [edi+56130], ebx
	mov	dl, BYTE PTR [eax+esi+31272]
	cmp	dl, 3
	ja	SHORT $LN97@ConvertInp
; Line 3099
	mov	DWORD PTR [edi+55950], ecx
	mov	DWORD PTR [edi+55954], ebx
; Line 3100
	cmp	BYTE PTR [esi+eax*2+55410], 2
	je	SHORT $LN95@ConvertInp
	cmp	BYTE PTR [esi+eax*2+55411], 2
	jne	SHORT $LN273@ConvertInp
$LN95@ConvertInp:
; Line 3101
	mov	DWORD PTR [edi+55950], 3
	mov	DWORD PTR [edi+55954], ebx
$LN273@ConvertInp:
; Line 3104
	xor	eax, eax
	inc	eax
$LN93@ConvertInp:
; Line 3106
	mov	DWORD PTR [edi+55982], eax
; Line 3107
	mov	DWORD PTR [edi+55990], eax
; Line 3108
	mov	DWORD PTR [edi+56142], eax
; Line 3109
	mov	DWORD PTR [edi+55902], eax
; Line 3110
	jmp	$LN300@ConvertInp
$LN97@ConvertInp:
; Line 3103
	cmp	dl, 7
	jne	SHORT $LN273@ConvertInp
; Line 3104
	xor	eax, eax
	inc	eax
	mov	DWORD PTR [edi+55958], eax
	mov	DWORD PTR [edi+55962], ebx
	jmp	SHORT $LN93@ConvertInp
$LN104@ConvertInp:
; Line 3083
	mov	eax, DWORD PTR tv4324[ebp]
	mov	DWORD PTR [edi+56126], ecx
	mov	DWORD PTR [edi+56130], ebx
	mov	dl, BYTE PTR [eax+esi+31272]
	cmp	dl, 3
	ja	SHORT $LN103@ConvertInp
; Line 3084
	xor	edx, edx
	inc	edx
	mov	DWORD PTR [edi+55950], edx
	mov	DWORD PTR [edi+55954], ebx
; Line 3085
	cmp	BYTE PTR [esi+eax*2+55410], 2
	je	SHORT $LN101@ConvertInp
	cmp	BYTE PTR [esi+eax*2+55411], 2
	jne	SHORT $LN99@ConvertInp
$LN101@ConvertInp:
; Line 3086
	mov	DWORD PTR [edi+55950], ecx
	mov	DWORD PTR [edi+55954], ebx
; Line 3087
	jmp	SHORT $LN99@ConvertInp
$LN103@ConvertInp:
; Line 3088
	cmp	dl, 7
	jne	SHORT $LN274@ConvertInp
; Line 3089
	xor	edx, edx
	inc	edx
	mov	DWORD PTR [edi+55958], edx
	mov	DWORD PTR [edi+55962], ebx
	jmp	SHORT $LN99@ConvertInp
$LN274@ConvertInp:
	xor	edx, edx
	inc	edx
$LN99@ConvertInp:
; Line 3091
	mov	DWORD PTR [edi+55982], edx
; Line 3092
	mov	DWORD PTR [edi+55990], edx
; Line 3093
	mov	DWORD PTR [edi+55902], ebx
; Line 3094
	mov	DWORD PTR [edi+56142], ebx
$LN300@ConvertInp:
	mov	DWORD PTR [edi+55986], ebx
	mov	DWORD PTR [edi+55994], ebx
	mov	DWORD PTR [edi+55906], ebx
$LN299@ConvertInp:
	mov	DWORD PTR [edi+56146], ebx
$LN105@ConvertInp:
; Line 3149
	movzx	eax, BYTE PTR [esi+31275]
	movzx	eax, BYTE PTR _TimingGuardbands[eax+7]
	cdq
	add	DWORD PTR [edi+55902], eax
; Line 3153
	mov	eax, DWORD PTR [edi+55990]
	mov	DWORD PTR tv5065[ebp], eax
	adc	DWORD PTR [edi+55906], edx
	mov	eax, DWORD PTR [edi+55846]
	mov	edx, DWORD PTR [edi+55994]
	add	eax, ecx
	mov	DWORD PTR tv5631[ebp], eax
	mov	eax, DWORD PTR [edi+55850]
	adc	eax, ebx
	mov	DWORD PTR tv5065[ebp+4], edx
	cmp	eax, edx
	ja	SHORT $LN88@ConvertInp
	mov	eax, DWORD PTR tv5065[ebp]
	jb	SHORT $LN254@ConvertInp
	cmp	DWORD PTR tv5631[ebp], eax
	jae	SHORT $LN88@ConvertInp
$LN254@ConvertInp:
; Line 3154
	add	eax, ecx
	adc	edx, ebx
	mov	DWORD PTR [edi+55846], eax
	mov	DWORD PTR [edi+55850], edx
$LN88@ConvertInp:
; Line 3184
	mov	eax, DWORD PTR [edi+55886]
	xor	edx, edx
	inc	edx
	cmp	eax, edx
	jne	SHORT $LN85@ConvertInp
	cmp	DWORD PTR [edi+55890], ebx
	jne	SHORT $LN85@ConvertInp
; Line 3185
	mov	edx, DWORD PTR [edi+55906]
	mov	eax, DWORD PTR [edi+55902]
	cmp	edx, ebx
	ja	SHORT $LN284@ConvertInp
	jb	SHORT $LN255@ConvertInp
	cmp	eax, 5
	jae	SHORT $LN284@ConvertInp
$LN255@ConvertInp:
; Line 3186
	add	eax, ecx
	adc	edx, ebx
	mov	DWORD PTR [edi+55902], eax
	mov	DWORD PTR [edi+55906], edx
$LN284@ConvertInp:
	xor	edx, edx
	inc	edx
$LN85@ConvertInp:
; Line 3189
	cmp	DWORD PTR [edi+55894], edx
	jne	SHORT $LN84@ConvertInp
	cmp	DWORD PTR [edi+55898], ebx
	jne	SHORT $LN84@ConvertInp
; Line 3190
	add	DWORD PTR [edi+55958], edx
	adc	DWORD PTR [edi+55962], ebx
$LN84@ConvertInp:
; Line 3195
	mov	eax, DWORD PTR tv4324[ebp]
	cmp	BYTE PTR [eax+esi+31272], 7
	jne	$LN83@ConvertInp
	cmp	BYTE PTR [esi+70806], bl
	je	SHORT $LN83@ConvertInp
; Line 3197
	cmp	DWORD PTR [edi+55966], edx
	jne	SHORT $LN82@ConvertInp
	cmp	DWORD PTR [edi+55970], ebx
	jne	SHORT $LN82@ConvertInp
; Line 3198
	mov	al, BYTE PTR [esi+31275]
	cmp	al, 3
	jb	SHORT $LN81@ConvertInp
	cmp	al, 6
	ja	SHORT $LN81@ConvertInp
; Line 3199
	mov	DWORD PTR [edi+56078], edx
	mov	DWORD PTR [edi+56082], ebx
$LN81@ConvertInp:
; Line 3201
	cmp	BYTE PTR [esi+31275], 7
	jne	SHORT $LN79@ConvertInp
; Line 3202
	mov	DWORD PTR [edi+56078], ecx
; Line 3204
	jmp	SHORT $LN301@ConvertInp
$LN82@ConvertInp:
; Line 3208
	mov	DWORD PTR [edi+56078], ebx
$LN301@ConvertInp:
	mov	DWORD PTR [edi+56082], ebx
$LN79@ConvertInp:
; Line 3210
	mov	edx, DWORD PTR [edi+56078]
	lea	eax, DWORD PTR [edi+58462]
	add	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [edi+56082]
	adc	DWORD PTR [eax+4], edx
; Line 3211
	mov	edx, DWORD PTR [edi+56078]
	lea	eax, DWORD PTR [edi+58526]
	add	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [edi+56082]
	adc	DWORD PTR [eax+4], edx
; Line 3212
	mov	eax, DWORD PTR tv4324[ebp]
	xor	edx, edx
	inc	edx
	jmp	SHORT $LN78@ConvertInp
$LN83@ConvertInp:
; Line 3213
	mov	DWORD PTR [edi+56078], ebx
	mov	DWORD PTR [edi+56082], ebx
$LN78@ConvertInp:
; Line 3216
	cmp	DWORD PTR [edi+55966], edx
	jne	SHORT $LN77@ConvertInp
	cmp	DWORD PTR [edi+55970], ebx
	jne	SHORT $LN77@ConvertInp
; Line 3217
	mov	DWORD PTR [edi+56110], edx
; Line 3218
	jmp	SHORT $LN302@ConvertInp
$LN77@ConvertInp:
; Line 3219
	mov	DWORD PTR [edi+56110], ebx
$LN302@ConvertInp:
	mov	DWORD PTR [edi+56114], ebx
; Line 3224
	cmp	BYTE PTR [esi+31275], 3
	jbe	SHORT $LN75@ConvertInp
; Line 3225
	mov	DWORD PTR [edi+56102], edx
	mov	DWORD PTR [edi+56106], ebx
$LN75@ConvertInp:
; Line 3230
	mov	DWORD PTR [edi+58182], edx
	mov	DWORD PTR [edi+58186], ebx
; Line 3234
	mov	BYTE PTR [eax+esi+71456], 2
; Line 3235
	mov	dl, BYTE PTR [esi+71007]
	cmp	dl, bl
	jne	SHORT $LN74@ConvertInp
; Line 3236
	mov	BYTE PTR _DetermineCommandMode$[ebp], bl
; Line 3237
	mov	BYTE PTR _Dimm$[ebp], bl
$LL73@ConvertInp:
; Line 3238
	movzx	edx, BYTE PTR _Dimm$[ebp]
	lea	eax, DWORD PTR [edx+eax*2+28610]
	cmp	BYTE PTR [eax+esi], bl
; Line 3239
	mov	eax, DWORD PTR tv4324[ebp]
	je	SHORT $LN72@ConvertInp
	lea	edx, DWORD PTR [edx+eax*2+55414]
	cmp	BYTE PTR [edx+esi], 1
	jne	SHORT $LN69@ConvertInp
	cmp	BYTE PTR [eax+esi+31272], 7
	jne	SHORT $LN69@ConvertInp
; Line 3243
	mov	BYTE PTR _DetermineCommandMode$[ebp], 1
$LN72@ConvertInp:
; Line 3237
	inc	BYTE PTR _Dimm$[ebp]
	cmp	BYTE PTR _Dimm$[ebp], 2
	jb	SHORT $LL73@ConvertInp
; Line 3001
	jmp	SHORT $LN71@ConvertInp
$LN69@ConvertInp:
; Line 3248
	mov	BYTE PTR _DetermineCommandMode$[ebp], bl
$LN71@ConvertInp:
; Line 3254
	cmp	BYTE PTR _DetermineCommandMode$[ebp], 1
	je	SHORT $LN66@ConvertInp
	cmp	BYTE PTR [eax+esi+55385], 2
	jae	SHORT $LN60@ConvertInp
; Line 3267
	jmp	SHORT $LN66@ConvertInp
$LN74@ConvertInp:
; Line 3268
	cmp	dl, 1
	jne	SHORT $LN60@ConvertInp
$LN66@ConvertInp:
; Line 3269
	mov	edx, DWORD PTR [edi+57870]
	or	edx, DWORD PTR [edi+57874]
	je	SHORT $LN60@ConvertInp
; Line 3275
	mov	BYTE PTR [eax+esi+71456], 1
$LN60@ConvertInp:
; Line 3279
	mov	dl, BYTE PTR [eax+esi+71456]
	cmp	BYTE PTR _MaxNMode$[ebp], dl
	jae	SHORT $LN59@ConvertInp
; Line 3280
	mov	BYTE PTR _MaxNMode$[ebp], dl
$LN59@ConvertInp:
; Line 3286
	lea	edx, DWORD PTR [esi+eax*2+28610]
	mov	DWORD PTR tv5939[ebp], ebx
	mov	DWORD PTR tv5991[ebp], edx
	mov	DWORD PTR tv3064[ebp], ecx
$LL58@ConvertInp:
; Line 3287
	mov	edx, DWORD PTR tv5991[ebp]
	cmp	BYTE PTR [edx], bl
	je	$LN57@ConvertInp
; Line 3288
	mov	edx, DWORD PTR tv5939[ebp]
	lea	edx, DWORD PTR [edx+eax*2+55410]
	cmp	BYTE PTR [edx+esi], 2
	jne	SHORT $LN53@ConvertInp
; Line 3292
	cmp	BYTE PTR [eax+esi+31272], 3
	ja	SHORT $LN53@ConvertInp
; Line 3293
	add	DWORD PTR [edi+55950], 1
; Line 3294
	mov	edx, DWORD PTR tv4361[ebp]
	adc	DWORD PTR [edi+55954], ebx
	movzx	eax, BYTE PTR [esi+31275]
	movzx	ax, BYTE PTR _mFawTableDdr3[eax*2-5]
	mov	WORD PTR [edx+30732], ax
	mov	eax, DWORD PTR tv4324[ebp]
$LN53@ConvertInp:
; Line 3297
	mov	edx, DWORD PTR tv5939[ebp]
	lea	edx, DWORD PTR [edx+eax*2+55398]
	add	edx, esi
	mov	DWORD PTR tv5960[ebp], edx
	mov	dl, BYTE PTR [edx]
	cmp	dl, 1
	je	SHORT $LN51@ConvertInp
	cmp	dl, 2
	jne	$LN57@ConvertInp
$LN51@ConvertInp:
; Line 3301
	cmp	BYTE PTR [eax+esi+31272], 7
	jne	$LN57@ConvertInp
; Line 3302
	movzx	eax, BYTE PTR [esi+31275]
	mov	edx, DWORD PTR tv5960[ebp]
	movzx	edx, BYTE PTR [edx]
	sub	eax, 3
	imul	eax, 3
	movzx	ax, BYTE PTR _mFawTableDdr4[eax+edx]
	mov	edx, DWORD PTR tv4361[ebp]
	mov	WORD PTR [edx+30732], ax
; Line 3303
	mov	eax, DWORD PTR tv5960[ebp]
	cmp	BYTE PTR [eax], 2
	jne	SHORT $LN278@ConvertInp
; Line 3322
	movzx	edx, BYTE PTR [esi+31275]
	push	3
	pop	eax
	sub	edx, eax
	je	SHORT $LN46@ConvertInp
	dec	edx
	je	SHORT $LN46@ConvertInp
	dec	edx
	je	SHORT $LN44@ConvertInp
	dec	edx
	je	SHORT $LN43@ConvertInp
	dec	edx
	jne	SHORT $LN278@ConvertInp
; Line 3340
	mov	DWORD PTR [edi+55950], eax
; Line 3341
	mov	DWORD PTR [edi+55958], 4
; Line 3343
	jmp	SHORT $LN315@ConvertInp
$LN43@ConvertInp:
; Line 3336
	mov	DWORD PTR [edi+55950], eax
$LN314@ConvertInp:
; Line 3337
	mov	DWORD PTR [edi+55958], eax
; Line 3338
	jmp	SHORT $LN315@ConvertInp
$LN44@ConvertInp:
; Line 3332
	mov	DWORD PTR [edi+55950], ecx
; Line 3334
	jmp	SHORT $LN314@ConvertInp
$LN46@ConvertInp:
; Line 3325
	mov	DWORD PTR [edi+55958], ecx
	mov	DWORD PTR [edi+55950], 1
$LN315@ConvertInp:
	mov	DWORD PTR [edi+55954], ebx
	mov	DWORD PTR [edi+55962], ebx
$LN278@ConvertInp:
	mov	eax, DWORD PTR tv4324[ebp]
$LN57@ConvertInp:
; Line 3286
	inc	DWORD PTR tv5939[ebp]
	inc	DWORD PTR tv5991[ebp]
	dec	DWORD PTR tv3064[ebp]
	jne	$LL58@ConvertInp
; Line 3360
	mov	eax, DWORD PTR tv4361[ebp]
	mov	al, BYTE PTR [eax+30732]
	sub	al, 16					; 00000010H
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi+56094], eax
; Line 3364
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+56098], edx
	movzx	eax, WORD PTR [eax+64242]
	mov	edx, 255				; 000000ffH
	cmp	ax, dx
	je	SHORT $LN40@ConvertInp
; Line 3365
	movzx	eax, ax
	sub	eax, 16					; 00000010H
	cdq
	mov	DWORD PTR [edi+56094], eax
	mov	DWORD PTR [edi+56098], edx
$LN40@ConvertInp:
; Line 3367
	mov	edx, DWORD PTR tv4361[ebp]
	mov	eax, 255				; 000000ffH
	cmp	WORD PTR [edx+64230], ax
	je	SHORT $LN39@ConvertInp
; Line 3368
	mov	eax, edx
	movzx	eax, WORD PTR [eax+30720]
	sub	eax, 4
	cdq
	mov	DWORD PTR [edi+55950], eax
; Line 3369
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+55954], edx
	movzx	eax, WORD PTR [eax+30720]
	sub	eax, 4
	cdq
	mov	DWORD PTR [edi+55958], eax
	mov	DWORD PTR [edi+55962], edx
$LN39@ConvertInp:
; Line 3371
	mov	edx, DWORD PTR tv4361[ebp]
	mov	eax, 255				; 000000ffH
	cmp	WORD PTR [edx+64246], ax
	je	SHORT $LN38@ConvertInp
; Line 3372
	mov	eax, edx
	movzx	eax, WORD PTR [eax+30736]
	sub	eax, 4
	cdq
	mov	DWORD PTR [edi+56006], eax
; Line 3373
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+56010], edx
	movzx	eax, WORD PTR [eax+30736]
	sub	eax, 4
	cdq
	mov	DWORD PTR [edi+55998], eax
; Line 3374
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+56002], edx
	movzx	eax, WORD PTR [eax+30736]
	sub	eax, ecx
	cdq
	mov	DWORD PTR [edi+55982], eax
; Line 3375
	mov	eax, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+55986], edx
	movzx	eax, WORD PTR [eax+30736]
	sub	eax, ecx
	cdq
	mov	DWORD PTR [edi+55990], eax
	mov	DWORD PTR [edi+55994], edx
$LN38@ConvertInp:
; Line 3377
	mov	eax, DWORD PTR tv4361[ebp]
	movzx	eax, WORD PTR [eax+64258]
	mov	ecx, 255				; 000000ffH
	cmp	ax, cx
	je	SHORT $LN37@ConvertInp
; Line 3378
	movzx	eax, ax
	sub	eax, 7
	cdq
	mov	DWORD PTR [edi+55766], eax
	mov	DWORD PTR [edi+55770], edx
$LN37@ConvertInp:
; Line 3383
	cmp	BYTE PTR [esi+31275], 7
	jne	SHORT $LN36@ConvertInp
; Line 3384
	add	DWORD PTR [edi+56094], -4		; fffffffcH
	adc	DWORD PTR [edi+56098], -1
$LN36@ConvertInp:
; Line 3389
	mov	eax, DWORD PTR tv4324[ebp]
	add	eax, esi
	cmp	BYTE PTR [eax+31272], 3
	ja	SHORT $LN35@ConvertInp
; Line 3390
	mov	DWORD PTR [edi+55982], ebx
	mov	DWORD PTR [edi+55986], ebx
; Line 3391
	mov	DWORD PTR [edi+55990], ebx
	mov	DWORD PTR [edi+55994], ebx
$LN35@ConvertInp:
; Line 3399
	mov	ecx, DWORD PTR tv4361[ebp]
	movzx	eax, WORD PTR [ecx+30712]
	sub	eax, 3
	cdq
	mov	DWORD PTR [edi+55822], eax
	mov	DWORD PTR [edi+55826], edx
; Line 3400
	movzx	eax, WORD PTR [ecx+30712]
	sub	eax, 3
	cdq
	mov	DWORD PTR [edi+55814], eax
	mov	DWORD PTR [edi+55818], edx
; Line 3404
	movzx	eax, WORD PTR [ecx+30712]
	cdq
	mov	DWORD PTR [esi+56174], eax
	mov	DWORD PTR [esi+56178], edx
; Line 3405
	movzx	eax, WORD PTR [ecx+30712]
	cdq
	mov	DWORD PTR [esi+60510], eax
; Line 3407
	movzx	eax, BYTE PTR [esi+65464]
	mov	DWORD PTR [esi+60514], edx
	cdq
	mov	DWORD PTR [edi+56470], eax
	mov	DWORD PTR [edi+56474], edx
; Line 3424
	movzx	eax, BYTE PTR [esi+31275]
	lea	eax, DWORD PTR [eax+eax-6]
	movzx	ecx, WORD PTR _mDdrMaxSreDly[eax]
	cmp	WORD PTR [esi+26982], cx
	jbe	SHORT $LN34@ConvertInp
; Line 3425
	mov	WORD PTR [esi+26982], cx
$LN34@ConvertInp:
; Line 3428
	movzx	ecx, WORD PTR _mFrequencyMultiplier[eax]
	mov	eax, 2000000				; 001e8480H
	cdq
	idiv	ecx
	movzx	ecx, WORD PTR [esi+26982]
	imul	eax, ecx
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
; Line 3441
	cmp	DWORD PTR [edi+55966], 1
	cdq
	mov	DWORD PTR [edi+56446], eax
	mov	DWORD PTR [edi+56450], edx
	jne	SHORT $LN33@ConvertInp
	cmp	DWORD PTR [edi+55970], ebx
	jne	SHORT $LN33@ConvertInp
; Line 3442
	mov	DWORD PTR [edi+56438], ebx
	jmp	SHORT $LN304@ConvertInp
$LN33@ConvertInp:
; Line 3443
	cmp	BYTE PTR [esi+65465], 1
	jne	SHORT $LN31@ConvertInp
; Line 3444
	mov	DWORD PTR [edi+56438], 3
; Line 3445
	jmp	SHORT $LN304@ConvertInp
$LN31@ConvertInp:
; Line 3446
	mov	DWORD PTR [edi+56438], 6
$LN304@ConvertInp:
; Line 3458
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [edi+56442], ebx
	push	esi
	mov	DWORD PTR [edi+56118], ebx
	mov	DWORD PTR [edi+56122], ebx
	call	_ProgLeakyBucket
; Line 3460
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ProgPatrolDemandScrub
; Line 3469
	mov	ecx, DWORD PTR tv4324[ebp]
	mov	DWORD PTR [edi+58422], ebx
	mov	DWORD PTR [edi+58426], ebx
	mov	eax, DWORD PTR [esi+ecx*4+31280]
	shl	eax, 14					; 0000000eH
	add	esp, 16					; 00000010H
	dec	eax
	mov	DWORD PTR [edi+58430], eax
	mov	DWORD PTR [edi+58434], ebx
; Line 3473
	movzx	eax, BYTE PTR [esi+65568]
	cdq
	mov	DWORD PTR [edi+56398], eax
; Line 3475
	lea	eax, DWORD PTR [ecx+esi]
	mov	DWORD PTR [edi+56402], edx
	cmp	BYTE PTR [eax+30686], bl
	je	SHORT $LN29@ConvertInp
	mov	eax, DWORD PTR [edi+57942]
	or	eax, DWORD PTR [edi+57946]
	jne	SHORT $LN29@ConvertInp
; Line 3476
	mov	eax, ecx
	add	eax, esi
	mov	BYTE PTR [eax+30686], bl
$LN29@ConvertInp:
; Line 3480
	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+esi]
; Line 3482
	xor	eax, eax
	inc	eax
	cmp	BYTE PTR [ecx+71000], bl
	mov	DWORD PTR [edi+56210], ebx
	je	SHORT $LN28@ConvertInp
; Line 3481
	mov	DWORD PTR [edi+56206], ebx
; Line 3482
	jmp	SHORT $LN27@ConvertInp
$LN28@ConvertInp:
; Line 3483
	mov	DWORD PTR [edi+56206], eax
$LN27@ConvertInp:
; Line 3485
	cmp	BYTE PTR [ecx+30686], bl
; Line 3486
	mov	DWORD PTR [edi+58130], ebx
; Line 3487
	mov	DWORD PTR [edi+57970], ebx
; Line 3488
	mov	DWORD PTR [edi+58194], ebx
; Line 3489
	mov	DWORD PTR [edi+56594], ebx
	je	SHORT $LN26@ConvertInp
	mov	DWORD PTR [edi+58126], 255		; 000000ffH
	mov	DWORD PTR [edi+57966], eax
	mov	DWORD PTR [edi+58190], ebx
	mov	DWORD PTR [edi+56590], 3
; Line 3490
	jmp	SHORT $LN25@ConvertInp
$LN26@ConvertInp:
; Line 3491
	mov	DWORD PTR [edi+58126], ebx
; Line 3492
	mov	DWORD PTR [edi+57966], ebx
; Line 3493
	mov	DWORD PTR [edi+58190], eax
; Line 3494
	mov	DWORD PTR [edi+56590], ebx
$LN25@ConvertInp:
; Line 3496
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SetScrambler
; Line 3497
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SetSlowFastExit
; Line 3499
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_InitializeJedecVariables
; Line 3505
	movzx	eax, WORD PTR [esi+65348]
	add	esp, 24					; 00000018H
	cmp	ax, bx
	je	$LN272@ConvertInp
; Line 3506
	movzx	ecx, ax
	mov	eax, 2048				; 00000800H
	cmp	ecx, eax
	je	$LN21@ConvertInp
	cmp	ecx, 4096				; 00001000H
	je	SHORT $LN20@ConvertInp
	cmp	ecx, 8192				; 00002000H
	je	SHORT $LN19@ConvertInp
	cmp	ecx, 16384				; 00004000H
	jne	$LN22@ConvertInp
; Line 3526
	mov	DWORD PTR [edi+56510], 32768		; 00008000H
; Line 3527
	mov	DWORD PTR [edi+56518], 4
; Line 3528
	mov	DWORD PTR [edi+56526], 1024		; 00000400H
; Line 3529
	mov	DWORD PTR [edi+56534], eax
; Line 3530
	jmp	SHORT $LN305@ConvertInp
$LN19@ConvertInp:
; Line 3520
	mov	DWORD PTR [edi+56510], 49152		; 0000c000H
; Line 3521
	mov	DWORD PTR [edi+56518], 36		; 00000024H
; Line 3522
	mov	DWORD PTR [edi+56526], 72		; 00000048H
; Line 3523
	mov	DWORD PTR [edi+56534], 3072		; 00000c00H
; Line 3524
	jmp	SHORT $LN305@ConvertInp
$LN20@ConvertInp:
; Line 3514
	mov	DWORD PTR [edi+56510], 57344		; 0000e000H
; Line 3515
	mov	DWORD PTR [edi+56518], 52		; 00000034H
; Line 3516
	mov	DWORD PTR [edi+56526], 200		; 000000c8H
; Line 3517
	mov	DWORD PTR [edi+56534], 3584		; 00000e00H
; Line 3518
	jmp	SHORT $LN305@ConvertInp
$LN21@ConvertInp:
; Line 3508
	mov	DWORD PTR [edi+56510], 61440		; 0000f000H
; Line 3509
	mov	DWORD PTR [edi+56518], 54		; 00000036H
; Line 3510
	mov	DWORD PTR [edi+56526], 201		; 000000c9H
; Line 3511
	mov	DWORD PTR [edi+56534], 3840		; 00000f00H
$LN305@ConvertInp:
	mov	DWORD PTR [edi+56538], ebx
	mov	DWORD PTR [edi+56530], ebx
	mov	DWORD PTR [edi+56522], ebx
	mov	DWORD PTR [edi+56514], ebx
$LN22@ConvertInp:
; Line 3537
	mov	ecx, DWORD PTR tv4361[ebp]
	mov	DWORD PTR [edi+56542], 4660		; 00001234H
	mov	DWORD PTR [edi+56546], ebx
	mov	DWORD PTR [edi+56550], 22136		; 00005678H
	mov	DWORD PTR [edi+56554], ebx
	mov	DWORD PTR [edi+56582], 1
	mov	DWORD PTR [edi+56586], ebx
	movzx	eax, WORD PTR [ecx+30700]
	add	eax, 12					; 0000000cH
	cdq
	mov	DWORD PTR [edi+56558], eax
	mov	DWORD PTR [edi+56562], edx
; Line 3538
	mov	ax, WORD PTR [ecx+30696]
	shr	ax, 1
	movzx	eax, ax
	cdq
	mov	DWORD PTR [edi+56566], eax
	mov	eax, DWORD PTR tv4324[ebp]
	mov	DWORD PTR [edi+56570], edx
	lea	edx, DWORD PTR [esi+eax*2+28610]
; Line 3539
	mov	DWORD PTR [edi+56574], ebx
	mov	DWORD PTR [edi+56578], ebx
	xor	ecx, ecx
	mov	DWORD PTR tv6046[ebp], edx
	mov	DWORD PTR tv3009[ebp], 2
$LL16@ConvertInp:
; Line 3544
	mov	edx, DWORD PTR tv6046[ebp]
	cmp	BYTE PTR [edx], bl
	je	SHORT $LN15@ConvertInp
; Line 3548
	lea	edx, DWORD PTR [ecx+eax*2]
	imul	edx, 514				; 00000202H
	cmp	BYTE PTR [edx+esi+28780], 206		; 000000ceH
	jne	SHORT $LN15@ConvertInp
; Line 3549
	xor	eax, eax
	inc	eax
	shl	eax, cl
	cdq
	or	DWORD PTR [edi+56574], eax
	or	DWORD PTR [edi+56578], edx
	mov	eax, DWORD PTR tv4324[ebp]
$LN15@ConvertInp:
	inc	ecx
	inc	DWORD PTR tv6046[ebp]
	dec	DWORD PTR tv3009[ebp]
	jne	SHORT $LL16@ConvertInp
; Line 3540
	jmp	SHORT $LN14@ConvertInp
$LN272@ConvertInp:
	mov	eax, DWORD PTR tv4324[ebp]
$LN14@ConvertInp:
; Line 3554
	lea	ecx, DWORD PTR _SmbCltt$[ebp+eax*2]
	mov	DWORD PTR tv6193[ebp], ecx
	lea	ecx, DWORD PTR [esi+eax*2+28610]
	mov	DWORD PTR tv6196[ebp], ecx
	mov	edi, eax
	lea	ecx, DWORD PTR _SmbusAddressToClttTable[eax*8+2]
	imul	edi, 542				; 0000021eH
	mov	DWORD PTR tv6248[ebp], ecx
	mov	DWORD PTR tv2930[ebp], 2
$LL11@ConvertInp:
; Line 3556
	mov	eax, DWORD PTR tv6196[ebp]
	cmp	BYTE PTR [eax], bl
; Line 3557
	movzx	eax, WORD PTR [ecx-2]
	je	SHORT $LN8@ConvertInp
	add	eax, edi
	mov	DWORD PTR [esi+eax*8+55526], 1
	mov	DWORD PTR [esi+eax*8+55530], ebx
; Line 3558
	mov	eax, DWORD PTR tv6193[ebp]
	mov	al, BYTE PTR [eax]
	movzx	ecx, WORD PTR [ecx]
	shr	al, 1
	movzx	eax, al
	cdq
	add	ecx, edi
	mov	DWORD PTR [esi+ecx*8+55526], eax
	mov	DWORD PTR [esi+ecx*8+55530], edx
; Line 3559
	mov	ecx, DWORD PTR tv6248[ebp]
	jmp	SHORT $LN10@ConvertInp
$LN8@ConvertInp:
; Line 3560
	add	eax, edi
	mov	DWORD PTR [esi+eax*8+55526], ebx
	mov	DWORD PTR [esi+eax*8+55530], ebx
; Line 3561
	movzx	eax, WORD PTR [ecx]
	add	eax, edi
	mov	DWORD PTR [esi+eax*8+55526], ebx
	mov	DWORD PTR [esi+eax*8+55530], ebx
$LN10@ConvertInp:
	add	ecx, 4
	inc	DWORD PTR tv6196[ebp]
	inc	DWORD PTR tv6193[ebp]
	dec	DWORD PTR tv2930[ebp]
	mov	DWORD PTR tv6248[ebp], ecx
	jne	SHORT $LL11@ConvertInp
$LN136@ConvertInp:
; Line 2947
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL137@ConvertInp
; Line 3565
	lea	eax, DWORD PTR [esi+28608]
	mov	DWORD PTR tv6376[ebp], eax
	lea	edi, DWORD PTR [esi+58134]
	mov	DWORD PTR tv2798[ebp], 2
$LL6@ConvertInp:
; Line 3566
	cmp	BYTE PTR [eax+26777], bl
	je	SHORT $LN5@ConvertInp
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN5@ConvertInp
; Line 3600
	call	_A0DllWorkAroundEnabled
	movzx	eax, al
	cdq
	mov	DWORD PTR [edi-2400], eax
	mov	DWORD PTR [edi-2396], edx
; Line 3608
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebx
$LN5@ConvertInp:
	mov	eax, DWORD PTR tv6376[ebp]
	inc	eax
	add	edi, 4336				; 000010f0H
	dec	DWORD PTR tv2798[ebp]
	mov	DWORD PTR tv6376[ebp], eax
	jne	SHORT $LL6@ConvertInp
; Line 3611
	push	esi
	call	_SetPhyInitDynamicVariables
; Line 3613
	mov	al, BYTE PTR _MaxNMode$[ebp]
; Line 3616
	push	esi
	mov	BYTE PTR [esi+71456], al
	mov	BYTE PTR [esi+71457], al
	call	_SetMemThermThrotVariables
; Line 3617
	push	esi
	call	_SetMemHotVariables
; Line 3618
	push	esi
	call	_SetMemTripVariables
; Line 3621
	push	ebx
	push	ebx
	push	16565					; 000040b5H
	push	esi
	mov	BYTE PTR [esi+55509], 1
	call	_MmrcExecuteTask
; Line 3622
	mov	al, BYTE PTR _BackupEnable$[ebp]
	add	esp, 32					; 00000020H
; Line 3624
	cmp	BYTE PTR [esi+70983], 1
	mov	BYTE PTR [esi+55509], al
	jne	SHORT $LN1@ConvertInp
; Line 3625
	push	esi
	call	_CalcRaplBandWidthScale
	pop	ecx
$LN1@ConvertInp:
; Line 3627
	push	esi
	call	_ProgDramRapl
	pop	ecx
; Line 3630
	xor	eax, eax
$LN226@ConvertInp:
; Line 3631
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_ConvertInputParameters ENDP
_TEXT	ENDS
PUBLIC	_ConfigureMemory
EXTRN	_FillOutputStructure:PROC
EXTRN	_MmrcEntry:PROC
; Function compile flags: /Ogspy
;	COMDAT _ConfigureMemory
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ConfigureMemory PROC					; COMDAT
; Line 1333
	push	esi
; Line 1381
	mov	esi, DWORD PTR _MrcData$[esp]
	push	edi
	push	esi
	call	_GetInputParameters
; Line 1387
	push	esi
	call	_ConvertInputParameters
	pop	ecx
	pop	ecx
; Line 1388
	test	eax, eax
	je	SHORT $LN2@ConfigureM
; Line 1389
	mov	DWORD PTR [esi+65333], eax
; Line 1390
	call	_MrcDeadLoop
$LN2@ConfigureM:
; Line 1398
	push	esi
	call	_CheckpointConfigure
; Line 1400
	push	0
	push	0
	push	esi
	call	_MmrcEntry
	mov	edi, eax
	add	esp, 16					; 00000010H
; Line 1402
	test	edi, edi
	je	SHORT $LN1@ConfigureM
; Line 1403
	mov	DWORD PTR [esi+65333], edi
; Line 1404
	call	_MrcDeadLoop
$LN1@ConfigureM:
; Line 1407
	push	esi
	call	_FillOutputStructure
	pop	ecx
; Line 1417
	mov	eax, edi
	pop	edi
	pop	esi
; Line 1418
	ret	0
_ConfigureMemory ENDP
_TEXT	ENDS
END
