; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectData\DNV\External\Source\Mailbox.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_mErrorEncodingMailbox
_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_mErrorEncodingMailbox DB 'mailbox_cc_success                  ', 00H
	ORG $+3
	DB	'mailbox_cc_illegal_cmd              ', 00H
	ORG $+3
	DB	'mailbox_cc_illegal_data             ', 00H
	ORG $+3
	DB	'mailbox_cc_timeout                  ', 00H
	ORG $+3
	DB	'mailbox_cc_cmd_locked               ', 00H
	ORG $+3
	DB	'mailbox_cc_illegal_addr             ', 00H
	ORG $+3
	DB	'mailbox_cc_illegal_event_busy       ', 00H
	ORG $+3
	DB	'mailbox_cc_invalid_telem_event_ctl  ', 00H
	ORG $+3
	DB	'mailbox_cc_resource_demand_exceeded ', 00H
	ORG $+3
	DB	'mailbox_cc_svid_error               ', 00H
	ORG $+3
	DB	'mailbox_cc_illegal_vr_id            ', 00H
	ORG $+3
	DB	'mailbox_cc_vr_interface_locked      ', 00H
	ORG $+3
	DB	'mailbox_cc_vr_error                 ', 00H
	ORG $+3
	DB	'mailbox_runbusybit_never_cleared    ', 00H
	ORG $+3
	DB	'mailbox_cc_illegal_channel          ', 00H
	ORG $+3
	DB	'mailbox_cc_unknown                  ', 00H
	ORG $+3
_DATA	ENDS
PUBLIC	_WaitBusy
EXTRN	_MemRegRead:PROC
; Function compile flags: /Ogspy
;	COMDAT _WaitBusy
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_MaxTry$ = 12						; size = 4
_Command$ = 16						; size = 4
_WaitBusy PROC						; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectdata\dnv\external\source\mailbox.c
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 60
	xor	eax, eax
	cmp	DWORD PTR _Command$[ebp], 9
	push	ebx
	sete	al
; Line 65
	or	DWORD PTR _Register$[ebp+8], -1
	push	esi
	push	edi
	mov	BYTE PTR _Register$[ebp+16], 0
	mov	ebx, -2147483648			; 80000000H
	dec	eax
	and	eax, 100				; 00000064H
	add	eax, 28704				; 00007020H
	and	DWORD PTR _Register$[ebp+12], 0
	mov	DWORD PTR _Register$[ebp], eax
$LL5@WaitBusy:
; Line 72
	dec	DWORD PTR _MaxTry$[ebp]
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	0
	lea	esi, DWORD PTR _Register$[ebp]
	push	17					; 00000011H
	rep movsd
	call	_MemRegRead
; Line 73
	and	eax, ebx
	add	esp, 36					; 00000024H
	cmp	eax, ebx
	jne	SHORT $LN2@WaitBusy
	cmp	DWORD PTR _MaxTry$[ebp], 0
	jne	SHORT $LL5@WaitBusy
$LN2@WaitBusy:
; Line 75
	xor	eax, eax
	cmp	DWORD PTR _MaxTry$[ebp], eax
; Line 79
	pop	edi
	setne	al
	pop	esi
	pop	ebx
	dec	eax
	leave
	ret	0
_WaitBusy ENDP
_TEXT	ENDS
PUBLIC	_WriteDataB2P
EXTRN	_McStall:PROC
EXTRN	_FindActiveChannel:PROC
EXTRN	_MemRegWrite:PROC
; Function compile flags: /Ogspy
;	COMDAT _WriteDataB2P
_TEXT	SEGMENT
_Register$ = -36					; size = 24
_InterfaceRegister$ = -12				; size = 8
_PcrMcBiosreq$ = -12					; size = 8
_ch$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Command$ = 12						; size = 4
_Address$ = 16						; size = 4
_Data$ = 20						; size = 4
_WriteDataB2P PROC					; COMDAT
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 101
	or	DWORD PTR _Register$[ebp+8], -1
	push	ebx
	push	esi
	push	edi
; Line 107
	push	DWORD PTR _Command$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	xor	ebx, ebx
	push	256					; 00000100H
	push	edi
	mov	DWORD PTR _Register$[ebp+12], ebx
	mov	BYTE PTR _Register$[ebp+16], bl
	call	_WaitBusy
	add	esp, 12					; 0000000cH
; Line 108
	test	eax, eax
	je	SHORT $LN9@WriteDataB
$LN17@WriteDataB:
; Line 109
	push	13					; 0000000dH
$LN16@WriteDataB:
	pop	eax
	jmp	$LN10@WriteDataB
$LN9@WriteDataB:
; Line 114
	cmp	DWORD PTR _Command$[ebp], 9
	je	SHORT $LN6@WriteDataB
; Line 140
	push	15					; 0000000fH
	push	ebx
	push	DWORD PTR _Data$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	mov	DWORD PTR _Register$[ebp], 28800	; 00007080H
	push	17					; 00000011H
	rep movsd
	call	_MemRegWrite
; Line 143
	mov	eax, DWORD PTR _Address$[ebp]
	movzx	ecx, BYTE PTR _Command$[ebp]
	and	eax, 2097151				; 001fffffH
	or	eax, 8388608				; 00800000H
; Line 144
	mov	ebx, eax
	xor	eax, eax
	shld	eax, ebx, 8
	shl	ebx, 8
	and	ecx, -536870657				; e00000ffH
	xor	edx, edx
	add	esp, 48					; 00000030H
	or	ebx, ecx
	or	eax, edx
	mov	DWORD PTR _InterfaceRegister$[ebp+4], eax
; Line 145
	mov	DWORD PTR _Register$[ebp], 28804	; 00007084H
; Line 146
	jmp	$LN7@WriteDataB
$LN6@WriteDataB:
; Line 116
	push	edi
	call	_FindActiveChannel
	pop	ecx
	mov	BYTE PTR _ch$[ebp], al
; Line 117
	cmp	al, 255					; 000000ffH
	jne	SHORT $LN5@WriteDataB
; Line 118
	push	14					; 0000000eH
	jmp	SHORT $LN16@WriteDataB
$LN5@WriteDataB:
; Line 121
	mov	al, BYTE PTR [edi+28608]
	xor	ecx, ecx
	inc	ecx
	and	al, cl
; Line 122
	movzx	eax, al
	cdq
	mov	esi, eax
	mov	al, BYTE PTR [edi+28609]
	and	al, cl
	movzx	eax, al
	mov	ebx, edx
	cdq
	shld	edx, eax, 1
	and	esi, -3					; fffffffdH
	add	eax, eax
	or	esi, eax
; Line 126
	mov	al, BYTE PTR [edi+55385]
	or	ebx, edx
	shld	ebx, esi, 12
	shl	esi, 12					; 0000000cH
	test	al, al
	jbe	SHORT $LN12@WriteDataB
	movzx	eax, al
	dec	eax
	jmp	SHORT $LN13@WriteDataB
$LN12@WriteDataB:
	xor	eax, eax
$LN13@WriteDataB:
	and	eax, ecx
	cdq
	shld	edx, eax, 14
	or	edx, ebx
	shl	eax, 14					; 0000000eH
	and	esi, -16385				; ffffbfffH
	mov	DWORD PTR _PcrMcBiosreq$[ebp+4], edx
; Line 127
	mov	dl, BYTE PTR [edi+55386]
	or	eax, esi
	test	dl, dl
	jbe	SHORT $LN14@WriteDataB
	movzx	edx, dl
	dec	edx
	jmp	SHORT $LN15@WriteDataB
$LN14@WriteDataB:
	xor	edx, edx
$LN15@WriteDataB:
; Line 132
	movzx	esi, BYTE PTR _ch$[ebp]
	xor	ebx, ebx
	cmp	BYTE PTR [esi+edi+31272], 7
	mov	DWORD PTR _Register$[ebp], 28704	; 00007020H
	sete	bl
	and	edx, ecx
	or	edx, -65520				; ffff0010H
	shl	edx, 9
	and	eax, -32833				; ffff7fbfH
	and	ebx, ecx
	or	ebx, edx
	shl	ebx, 6
	or	ebx, eax
	and	DWORD PTR _InterfaceRegister$[ebp+4], 0
	mov	eax, DWORD PTR _InterfaceRegister$[ebp+4]
$LN7@WriteDataB:
; Line 149
	push	15					; 0000000fH
	push	eax
	push	ebx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	0
	lea	esi, DWORD PTR _Register$[ebp]
	push	17					; 00000011H
	rep movsd
	call	_MemRegWrite
; Line 151
	push	1000					; 000003e8H
	call	_McStall
; Line 152
	push	DWORD PTR _Command$[ebp]
	push	256					; 00000100H
	push	DWORD PTR _MrcData$[ebp]
	call	_WaitBusy
	add	esp, 64					; 00000040H
; Line 153
	test	eax, eax
; Line 154
	jne	$LN17@WriteDataB
; Line 159
	cmp	DWORD PTR _Command$[ebp], 9
	je	SHORT $LN2@WriteDataB
; Line 160
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	lea	esi, DWORD PTR _Register$[ebp]
	rep movsd
	xor	esi, esi
	push	esi
	push	esi
	push	17					; 00000011H
	call	_MemRegRead
	add	esp, 36					; 00000024H
	mov	ebx, eax
	mov	DWORD PTR _InterfaceRegister$[ebp+4], esi
; Line 161
	jmp	SHORT $LN1@WriteDataB
$LN2@WriteDataB:
; Line 162
	mov	eax, DWORD PTR _InterfaceRegister$[ebp+4]
	and	ebx, -256				; ffffff00H
	mov	DWORD PTR _InterfaceRegister$[ebp+4], eax
$LN1@WriteDataB:
; Line 165
	movzx	eax, bl
$LN10@WriteDataB:
; Line 166
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_WriteDataB2P ENDP
_TEXT	ENDS
PUBLIC	_ReadDataB2P
; Function compile flags: /Ogspy
;	COMDAT _ReadDataB2P
_TEXT	SEGMENT
_Register$ = -32					; size = 24
_InterfaceRegister$ = -8				; size = 8
_MrcData$ = 8						; size = 4
_Command$ = 12						; size = 4
_Address$ = 16						; size = 4
_DataIn$ = 20						; size = 4
_DataOut$ = 24						; size = 4
_ReadDataB2P PROC					; COMDAT
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
; Line 193
	push	DWORD PTR _Command$[ebp]
	xor	ebx, ebx
	push	256					; 00000100H
	push	DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _Register$[ebp+16], bl
	mov	DWORD PTR _Register$[ebp], 28800	; 00007080H
	call	_WaitBusy
	add	esp, 12					; 0000000cH
; Line 194
	test	eax, eax
	je	SHORT $LN2@ReadDataB2
$LN5@ReadDataB2:
; Line 195
	push	13					; 0000000dH
	pop	eax
	jmp	$LN3@ReadDataB2
$LN2@ReadDataB2:
; Line 200
	push	15					; 0000000fH
	push	ebx
	push	DWORD PTR _DataIn$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	push	17					; 00000011H
	rep movsd
	call	_MemRegWrite
; Line 206
	mov	eax, DWORD PTR _Address$[ebp]
	movzx	edx, BYTE PTR _Command$[ebp]
	and	eax, 2097151				; 001fffffH
; Line 209
	xor	ecx, ecx
	add	esp, 48					; 00000030H
	or	eax, 8388608				; 00800000H
	shld	ecx, eax, 8
	push	15					; 0000000fH
	xor	esi, esi
	or	ecx, esi
	push	ecx
	shl	eax, 8
	and	edx, -536870657				; e00000ffH
	or	eax, edx
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 28804	; 00007084H
	push	17					; 00000011H
	rep movsd
	call	_MemRegWrite
; Line 213
	push	100					; 00000064H
	call	_McStall
; Line 214
	push	DWORD PTR _Command$[ebp]
	push	256					; 00000100H
	push	DWORD PTR _MrcData$[ebp]
	call	_WaitBusy
	add	esp, 64					; 00000040H
; Line 215
	test	eax, eax
; Line 216
	jne	$LN5@ReadDataB2
; Line 221
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	17					; 00000011H
	rep movsd
	call	_MemRegRead
; Line 226
	add	esp, 12					; 0000000cH
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 28800	; 00007080H
	push	17					; 00000011H
	mov	DWORD PTR _InterfaceRegister$[ebp], eax
	mov	DWORD PTR _InterfaceRegister$[ebp+4], ebx
	rep movsd
	call	_MemRegRead
	mov	ecx, DWORD PTR _DataOut$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 228
	movzx	eax, BYTE PTR _InterfaceRegister$[ebp]
	add	esp, 36					; 00000024H
$LN3@ReadDataB2:
; Line 229
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_ReadDataB2P ENDP
_TEXT	ENDS
PUBLIC	_SetVoltageOffset
; Function compile flags: /Ogspy
;	COMDAT _SetVoltageOffset
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_SetVoltageOffset PROC					; COMDAT
; Line 243
	push	esi
; Line 251
	mov	esi, DWORD PTR _MrcData$[esp]
	mov	cl, BYTE PTR [esi+26981]
	xor	eax, eax
	cmp	cl, 100					; 00000064H
	je	SHORT $LN1@SetVoltage
; Line 258
	movzx	eax, cl
	sub	eax, 100				; 00000064H
	push	5
	pop	ecx
	cdq
	idiv	ecx
	and	eax, 255				; 000000ffH
	or	eax, -2147483648			; 80000000H
; Line 260
	push	eax
	push	3
	push	8
	push	esi
	call	_WriteDataB2P
	add	esp, 16					; 00000010H
; Line 261
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN1@SetVoltage
; Line 262
	push	15					; 0000000fH
	pop	eax
$LN1@SetVoltage:
	pop	esi
; Line 268
	ret	0
_SetVoltageOffset ENDP
_TEXT	ENDS
PUBLIC	_SetRaplBandWidthScale
; Function compile flags: /Ogspy
;	COMDAT _SetRaplBandWidthScale
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_SetRaplBandWidthScale PROC				; COMDAT
; Line 293
	mov	edx, DWORD PTR _MrcData$[esp-4]
	mov	ecx, DWORD PTR [edx+70985]
	xor	eax, eax
; Line 294
	cmp	ecx, eax
	je	SHORT $LN2@SetRaplBan
; Line 295
	push	ecx
	push	eax
	push	35					; 00000023H
	push	edx
	call	_WriteDataB2P
	add	esp, 16					; 00000010H
; Line 296
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN2@SetRaplBan
; Line 297
	push	15					; 0000000fH
	pop	eax
$LN2@SetRaplBan:
; Line 305
	ret	0
_SetRaplBandWidthScale ENDP
_TEXT	ENDS
PUBLIC	_VSafe
; Function compile flags: /Ogspy
;	COMDAT _VSafe
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_VSafe	PROC						; COMDAT
; Line 321
	push	ebx
	push	esi
; Line 330
	mov	esi, DWORD PTR _MrcData$[esp+4]
	mov	bl, BYTE PTR [esi+55506]
; Line 331
	mov	al, bl
	or	al, 95					; 0000005fH
; Line 332
	push	esi
	mov	BYTE PTR [esi+55506], al
	call	_FindActiveChannel
	pop	ecx
; Line 333
	cmp	al, 255					; 000000ffH
	jne	SHORT $LN5@VSafe
	push	14					; 0000000eH
$LN9@VSafe:
	pop	eax
$LN8@VSafe:
; Line 336
	mov	BYTE PTR [esi+55506], bl
	pop	esi
	pop	ebx
; Line 361
	ret	0
$LN5@VSafe:
	movzx	eax, al
	xor	ecx, ecx
	cmp	BYTE PTR [eax+esi+31272], 7
	setne	cl
	dec	ecx
	and	ecx, -30				; ffffffe2H
	add	ecx, 221				; 000000ddH
	mov	eax, ecx
	push	eax
	push	3
	push	8
	push	esi
	call	_WriteDataB2P
; Line 346
	add	esp, 16					; 00000010H
; Line 347
	test	eax, eax
	je	SHORT $LN2@VSafe
; Line 348
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN8@VSafe
; Line 349
	push	15					; 0000000fH
	jmp	SHORT $LN9@VSafe
$LN2@VSafe:
; Line 358
	push	esi
	call	_SetVoltageOffset
	pop	ecx
	jmp	SHORT $LN8@VSafe
_VSafe	ENDP
_TEXT	ENDS
PUBLIC	_PunitMemInitDone
; Function compile flags: /Ogspy
;	COMDAT _PunitMemInitDone
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_PunitMemInitDone PROC					; COMDAT
; Line 381
	push	0
	push	0
	push	9
	push	DWORD PTR _MrcData$[esp+8]
	call	_WriteDataB2P
	add	esp, 16					; 00000010H
; Line 390
	ret	0
_PunitMemInitDone ENDP
_TEXT	ENDS
END
