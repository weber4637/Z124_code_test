; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectData\DNV\Internal\Source\MmrcHooks.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_DATA	ENDS
PUBLIC	_ProgSliceChannelHash
EXTRN	__aullshr:PROC
; Function compile flags: /Ogspy
;	COMDAT _ProgSliceChannelHash
_TEXT	SEGMENT
_HighData$ = -4						; size = 4
_LowData$ = 8						; size = 4
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_ProgSliceChannelHash PROC				; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectdata\dnv\internal\source\mmrchooks.c
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 58
	mov	ecx, DWORD PTR _MrcData$[ebp]
; Line 59
	mov	edx, DWORD PTR [ecx+56242]
	add	ecx, 56238				; 0000dbaeH
	mov	eax, DWORD PTR [ecx]
	mov	cl, 32					; 00000020H
	mov	DWORD PTR _LowData$[ebp], eax
	call	__aullshr
	mov	DWORD PTR _HighData$[ebp], eax
; Line 70
	mov	edx, DWORD PTR _HighData$[ebp]
; Line 71
	mov	eax, DWORD PTR _LowData$[ebp]
; Line 72
	mov	ecx, 290				; 00000122H
; Line 73
	wrmsr
; Line 76
	xor	eax, eax
; Line 77
	leave
	ret	0
_ProgSliceChannelHash ENDP
_TEXT	ENDS
PUBLIC	_ReturnFreqPad
; Function compile flags: /Ogspy
;	COMDAT _ReturnFreqPad
_TEXT	SEGMENT
_Freq$ = 8						; size = 1
_ReturnFreqPad PROC					; COMDAT
; Line 85
	mov	al, BYTE PTR _Freq$[esp-4]
	cmp	al, 3
	jb	SHORT $LN1@ReturnFreq
	cmp	al, 4
	jbe	SHORT $LN4@ReturnFreq
	cmp	al, 6
	jbe	SHORT $LN3@ReturnFreq
	cmp	al, 7
	jne	SHORT $LN1@ReturnFreq
; Line 93
	add	al, 253					; 000000fdH
; Line 99
	ret	0
$LN3@ReturnFreq:
; Line 91
	mov	al, 3
; Line 99
	ret	0
$LN4@ReturnFreq:
; Line 88
	mov	al, 2
; Line 99
	ret	0
$LN1@ReturnFreq:
; Line 96
	xor	al, al
; Line 99
	ret	0
_ReturnFreqPad ENDP
_TEXT	ENDS
PUBLIC	_ModifyTclOne
; Function compile flags: /Ogspy
;	COMDAT _ModifyTclOne
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_ModifyTclOne PROC					; COMDAT
; Line 112
	mov	eax, DWORD PTR _Value$[esp-4]
	cmp	eax, 10					; 0000000aH
	jb	SHORT $LN3@ModifyTclO
	cmp	eax, 11					; 0000000bH
	ja	SHORT $LN3@ModifyTclO
; Line 115
	push	12					; 0000000cH
	pop	eax
$LN3@ModifyTclO:
; Line 119
	ret	0
_ModifyTclOne ENDP
_TEXT	ENDS
PUBLIC	_ModifyTclTwo
; Function compile flags: /Ogspy
;	COMDAT _ModifyTclTwo
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_ModifyTclTwo PROC					; COMDAT
; Line 132
	mov	eax, DWORD PTR _Value$[esp-4]
	cmp	eax, 9
	je	SHORT $LN3@ModifyTclT
	cmp	eax, 11					; 0000000bH
	jbe	SHORT $LN4@ModifyTclT
	cmp	eax, 14					; 0000000eH
	ja	SHORT $LN4@ModifyTclT
; Line 138
	push	14					; 0000000eH
; Line 134
	pop	eax
; Line 142
	ret	0
$LN3@ModifyTclT:
; Line 134
	push	10					; 0000000aH
	pop	eax
$LN4@ModifyTclT:
; Line 142
	ret	0
_ModifyTclTwo ENDP
_TEXT	ENDS
PUBLIC	_ModifyTclThree
; Function compile flags: /Ogspy
;	COMDAT _ModifyTclThree
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_ModifyTclThree PROC					; COMDAT
; Line 155
	mov	eax, DWORD PTR _Value$[esp-4]
	cmp	eax, 9
	jb	SHORT $LN4@ModifyTclT@2
	cmp	eax, 11					; 0000000bH
	jbe	SHORT $LN3@ModifyTclT@2
	cmp	eax, 12					; 0000000cH
	jbe	SHORT $LN4@ModifyTclT@2
	cmp	eax, 15					; 0000000fH
	ja	SHORT $LN4@ModifyTclT@2
; Line 163
	push	16					; 00000010H
; Line 159
	pop	eax
; Line 167
	ret	0
$LN3@ModifyTclT@2:
; Line 159
	push	12					; 0000000cH
	pop	eax
$LN4@ModifyTclT@2:
; Line 167
	ret	0
_ModifyTclThree ENDP
_TEXT	ENDS
PUBLIC	_ModifyTclFour
; Function compile flags: /Ogspy
;	COMDAT _ModifyTclFour
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_ModifyTclFour PROC					; COMDAT
; Line 180
	mov	eax, DWORD PTR _Value$[esp-4]
	cmp	eax, 10					; 0000000aH
	jb	SHORT $LN5@ModifyTclF
	cmp	eax, 11					; 0000000bH
	jbe	SHORT $LN4@ModifyTclF
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN3@ModifyTclF
	cmp	eax, 14					; 0000000eH
	jbe	SHORT $LN5@ModifyTclF
	cmp	eax, 17					; 00000011H
	ja	SHORT $LN5@ModifyTclF
; Line 189
	push	18					; 00000012H
; Line 183
	pop	eax
; Line 193
	ret	0
$LN3@ModifyTclF:
; Line 185
	push	14					; 0000000eH
; Line 183
	pop	eax
; Line 193
	ret	0
$LN4@ModifyTclF:
; Line 183
	push	12					; 0000000cH
	pop	eax
$LN5@ModifyTclF:
; Line 193
	ret	0
_ModifyTclFour ENDP
_TEXT	ENDS
PUBLIC	_ReceiveEnableExit
EXTRN	_GetHalfClk:PROC
EXTRN	_GetSetDdrioGroup2:PROC
EXTRN	_IsStrobeValid:PROC
EXTRN	_RunOnThisChannel:PROC
EXTRN	_MmrcMemset:PROC
; Function compile flags: /Ogspy
;	COMDAT _ReceiveEnableExit
_TEXT	SEGMENT
_MinRcv2xVal$ = -460					; size = 288
_MaxRcv2xValPerStrobe$ = -172				; size = 144
_RecEnDelaySmallest$ = -28				; size = 72
_MaxRcv2xVal$ = 44					; size = 8
_Nibble0$ = 52						; size = 4
_Nibble1$ = 56						; size = 4
tv980 = 60						; size = 4
_TempNb1$ = 64						; size = 4
_RdCmd2rdvldValue$ = 68					; size = 4
_NextNibbleRcv2xVal$ = 72				; size = 4
_DiffAmpLenTemp$ = 76					; size = 4
_ReadRk2RkPerformance$ = 83				; size = 1
_TempNb0$ = 84						; size = 4
_RdCmdLatencyTemp$ = 88					; size = 4
tv1437 = 92						; size = 4
tv1251 = 92						; size = 4
_FlagForDevicex4$ = 99					; size = 1
_Rcv2xVal$ = 100					; size = 4
tv1279 = 104						; size = 4
tv1112 = 104						; size = 4
tv987 = 104						; size = 4
tv1552 = 108						; size = 4
_Rk$ = 108						; size = 1
_St$ = 120						; size = 1
_MrcData$ = 120						; size = 4
tv1429 = 124						; size = 4
tv1395 = 124						; size = 4
tv1376 = 124						; size = 4
tv1296 = 124						; size = 4
tv1233 = 124						; size = 4
_Channel$ = 124						; size = 1
_ReceiveEnableExit PROC					; COMDAT
; Line 206
	push	ebp
	lea	ebp, DWORD PTR [esp-112]
	sub	esp, 572				; 0000023cH
	push	esi
; Line 237
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	xor	edi, edi
	cmp	BYTE PTR [esi+31274], 1
	mov	BYTE PTR _FlagForDevicex4$[ebp], 0
	mov	DWORD PTR _DiffAmpLenTemp$[ebp], edi
	mov	BYTE PTR _ReadRk2RkPerformance$[ebp], 0
	jne	SHORT $LN86@ReceiveEna
	cmp	BYTE PTR [esi+65434], 16		; 00000010H
	je	$LN1@ReceiveEna
$LN86@ReceiveEna:
	push	ebx
; Line 242
	push	8
	lea	eax, DWORD PTR _MaxRcv2xVal$[ebp]
	push	edi
	push	eax
	call	_MmrcMemset
; Line 243
	push	144					; 00000090H
	lea	eax, DWORD PTR _MaxRcv2xValPerStrobe$[ebp]
	push	edi
	push	eax
	call	_MmrcMemset
; Line 244
	push	288					; 00000120H
	lea	eax, DWORD PTR _MinRcv2xVal$[ebp]
	push	-1
	push	eax
	call	_MmrcMemset
; Line 245
	push	72					; 00000048H
	lea	eax, DWORD PTR _RecEnDelaySmallest$[ebp]
	push	-1
	push	eax
	call	_MmrcMemset
	mov	ebx, DWORD PTR _Channel$[ebp]
	add	esp, 48					; 00000030H
; Line 247
	mov	BYTE PTR _Rk$[ebp], 0
	mov	DWORD PTR tv1251[ebp], edi
$LL85@ReceiveEna:
; Line 248
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN84@ReceiveEna
; Line 251
	mov	BYTE PTR _St$[ebp], 0
	mov	DWORD PTR tv1233[ebp], edi
$LL81@ReceiveEna:
; Line 252
	push	edi
	push	edi
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN80@ReceiveEna
; Line 258
	lea	eax, DWORD PTR _Rcv2xVal$[ebp]
	push	eax
	push	3
	push	57344					; 0000e000H
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 262
	push	ebx
	push	esi
	call	_GetHalfClk
	movzx	ecx, ax
	mov	eax, DWORD PTR _Rcv2xVal$[ebp]
	xor	edx, edx
	div	ecx
; Line 264
	mov	ecx, DWORD PTR tv1251[ebp]
	add	esp, 36					; 00000024H
	mov	DWORD PTR _Rcv2xVal$[ebp], eax
	movzx	eax, bl
	shl	eax, 2
	lea	edi, DWORD PTR [ecx+eax]
	cmp	BYTE PTR [edi+esi+55462], 4
	mov	DWORD PTR tv1112[ebp], eax
	ja	$LN77@ReceiveEna
; Line 266
	lea	eax, DWORD PTR _NextNibbleRcv2xVal$[ebp]
	push	eax
	mov	al, BYTE PTR _St$[ebp]
	push	3
	add	al, 9
	push	57344					; 0000e000H
	movzx	eax, al
	push	eax
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 267
	push	ebx
	push	esi
	call	_GetHalfClk
; Line 270
	imul	edi, 9
	movzx	ecx, ax
	mov	eax, DWORD PTR _NextNibbleRcv2xVal$[ebp]
	xor	edx, edx
	div	ecx
	add	edi, DWORD PTR tv1233[ebp]
	mov	ecx, DWORD PTR _Rcv2xVal$[ebp]
	add	esp, 36					; 00000024H
	lea	edi, DWORD PTR _MinRcv2xVal$[ebp+edi*4]
	mov	DWORD PTR _NextNibbleRcv2xVal$[ebp], eax
	cmp	ecx, eax
	jae	SHORT $LN76@ReceiveEna
	mov	DWORD PTR [edi], ecx
; Line 271
	jmp	SHORT $LN75@ReceiveEna
$LN76@ReceiveEna:
; Line 272
	mov	DWORD PTR [edi], eax
$LN75@ReceiveEna:
; Line 275
	push	edi
	push	24					; 00000018H
	push	20490					; 0000500aH
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 276
	push	edi
	push	24					; 00000018H
	push	20489					; 00005009H
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 279
	mov	ecx, DWORD PTR _Rcv2xVal$[ebp]
	mov	eax, DWORD PTR _NextNibbleRcv2xVal$[ebp]
	add	esp, 56					; 00000038H
	cmp	ecx, eax
	jbe	SHORT $LN74@ReceiveEna
; Line 280
	mov	eax, DWORD PTR tv1112[ebp]
	mov	DWORD PTR _MaxRcv2xVal$[ebp+eax], ecx
	jmp	SHORT $LN80@ReceiveEna
$LN74@ReceiveEna:
; Line 281
	mov	ecx, DWORD PTR tv1112[ebp]
	lea	ecx, DWORD PTR _MaxRcv2xVal$[ebp+ecx]
	cmp	DWORD PTR [ecx], eax
	jae	SHORT $LN80@ReceiveEna
; Line 282
	mov	DWORD PTR [ecx], eax
; Line 285
	jmp	SHORT $LN80@ReceiveEna
$LN77@ReceiveEna:
; Line 287
	lea	eax, DWORD PTR _Rcv2xVal$[ebp]
	push	eax
	push	24					; 00000018H
	push	20490					; 0000500aH
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 288
	lea	eax, DWORD PTR _Rcv2xVal$[ebp]
	push	eax
	push	24					; 00000018H
	push	20489					; 00005009H
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 291
	mov	eax, DWORD PTR tv1112[ebp]
	mov	ecx, DWORD PTR _Rcv2xVal$[ebp]
	lea	eax, DWORD PTR _MaxRcv2xVal$[ebp+eax]
	add	esp, 56					; 00000038H
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN80@ReceiveEna
; Line 292
	mov	DWORD PTR [eax], ecx
$LN80@ReceiveEna:
; Line 251
	inc	BYTE PTR _St$[ebp]
	inc	DWORD PTR tv1233[ebp]
	xor	edi, edi
	cmp	BYTE PTR _St$[ebp], 9
	jb	$LL81@ReceiveEna
$LN84@ReceiveEna:
; Line 247
	inc	BYTE PTR _Rk$[ebp]
	inc	DWORD PTR tv1251[ebp]
	cmp	BYTE PTR _Rk$[ebp], 4
	jb	$LL85@ReceiveEna
; Line 299
	mov	BYTE PTR _St$[ebp], 0
	mov	DWORD PTR tv1296[ebp], edi
$LL111@ReceiveEna:
; Line 300
	and	DWORD PTR tv1279[ebp], 0
	mov	BYTE PTR _Rk$[ebp], 0
$LL66@ReceiveEna:
; Line 301
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN65@ReceiveEna
; Line 307
	lea	eax, DWORD PTR _Rcv2xVal$[ebp]
	push	eax
	push	3
	push	57344					; 0000e000H
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 311
	push	ebx
	push	esi
	call	_GetHalfClk
	movzx	ecx, ax
	mov	eax, DWORD PTR _Rcv2xVal$[ebp]
	xor	edx, edx
	div	ecx
; Line 313
	mov	ecx, DWORD PTR tv1279[ebp]
	movzx	edi, bl
	lea	ecx, DWORD PTR [ecx+edi*4]
	add	esp, 36					; 00000024H
	cmp	BYTE PTR [ecx+esi+55462], 4
	mov	DWORD PTR _Rcv2xVal$[ebp], eax
	ja	SHORT $LN62@ReceiveEna
; Line 315
	lea	eax, DWORD PTR _NextNibbleRcv2xVal$[ebp]
	push	eax
	mov	al, BYTE PTR _St$[ebp]
	push	3
	add	al, 9
	push	57344					; 0000e000H
	movzx	eax, al
	push	eax
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 316
	push	ebx
	push	esi
	call	_GetHalfClk
; Line 319
	imul	edi, 18					; 00000012H
	movzx	ecx, ax
	mov	eax, DWORD PTR _NextNibbleRcv2xVal$[ebp]
	xor	edx, edx
	div	ecx
	mov	ecx, DWORD PTR _Rcv2xVal$[ebp]
	add	edi, DWORD PTR tv1296[ebp]
	add	esp, 36					; 00000024H
	mov	DWORD PTR _NextNibbleRcv2xVal$[ebp], eax
	cmp	ecx, eax
	jbe	SHORT $LN61@ReceiveEna
	lea	eax, DWORD PTR _MaxRcv2xValPerStrobe$[ebp+edi*4]
	cmp	DWORD PTR [eax], ecx
	jae	SHORT $LN65@ReceiveEna
; Line 320
	mov	DWORD PTR [eax], ecx
; Line 321
	jmp	SHORT $LN65@ReceiveEna
$LN61@ReceiveEna:
; Line 322
	lea	ecx, DWORD PTR _MaxRcv2xValPerStrobe$[ebp+edi*4]
	cmp	DWORD PTR [ecx], eax
	jae	SHORT $LN65@ReceiveEna
; Line 325
	jmp	SHORT $LN114@ReceiveEna
$LN62@ReceiveEna:
; Line 327
	imul	edi, 18					; 00000012H
	add	edi, DWORD PTR tv1296[ebp]
	lea	ecx, DWORD PTR _MaxRcv2xValPerStrobe$[ebp+edi*4]
	cmp	eax, DWORD PTR [ecx]
	jbe	SHORT $LN65@ReceiveEna
$LN114@ReceiveEna:
; Line 328
	mov	DWORD PTR [ecx], eax
$LN65@ReceiveEna:
; Line 300
	inc	BYTE PTR _Rk$[ebp]
	inc	DWORD PTR tv1279[ebp]
	cmp	BYTE PTR _Rk$[ebp], 4
	jb	$LL66@ReceiveEna
	inc	BYTE PTR _St$[ebp]
	inc	DWORD PTR tv1296[ebp]
	cmp	BYTE PTR _St$[ebp], 9
	jb	$LL111@ReceiveEna
; Line 335
	movzx	eax, bl
	mov	DWORD PTR tv980[ebp], eax
	imul	eax, 72					; 00000048H
	lea	eax, DWORD PTR _MaxRcv2xValPerStrobe$[ebp+eax]
	mov	BYTE PTR _St$[ebp], 0
	mov	DWORD PTR tv1376[ebp], eax
	mov	edi, 20486				; 00005006H
$LL55@ReceiveEna:
; Line 339
	lea	eax, DWORD PTR _DiffAmpLenTemp$[ebp]
	push	eax
	push	3
	push	edi
	push	DWORD PTR _St$[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 341
	mov	eax, DWORD PTR tv1376[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, eax
	shr	ecx, 1
	add	DWORD PTR _DiffAmpLenTemp$[ebp], ecx
	add	esp, 28					; 0000001cH
; Line 342
	test	al, 1
	je	SHORT $LN52@ReceiveEna
; Line 343
	inc	DWORD PTR _DiffAmpLenTemp$[ebp]
$LN52@ReceiveEna:
; Line 348
	lea	eax, DWORD PTR _DiffAmpLenTemp$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _St$[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	DWORD PTR tv1376[ebp], 4
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _St$[ebp]
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	SHORT $LL55@ReceiveEna
; Line 351
	mov	BYTE PTR _St$[ebp], 0
	lea	edi, DWORD PTR _RecEnDelaySmallest$[ebp+36]
$LL51@ReceiveEna:
; Line 352
	and	DWORD PTR tv1395[ebp], 0
	mov	BYTE PTR _Rk$[ebp], 0
$LL48@ReceiveEna:
; Line 353
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN47@ReceiveEna
; Line 359
	lea	eax, DWORD PTR _Nibble0$[ebp]
	push	eax
	push	3
	push	57344					; 0000e000H
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 360
	push	ebx
	push	esi
	call	_GetHalfClk
	movzx	ecx, ax
	mov	eax, DWORD PTR _Nibble0$[ebp]
	xor	edx, edx
	div	ecx
	add	esp, 36					; 00000024H
	mov	DWORD PTR _Nibble0$[ebp], eax
; Line 362
	cmp	eax, DWORD PTR [edi-36]
	jae	SHORT $LN44@ReceiveEna
; Line 363
	mov	DWORD PTR [edi-36], eax
$LN44@ReceiveEna:
; Line 367
	mov	eax, DWORD PTR tv980[ebp]
	mov	ecx, DWORD PTR tv1395[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	cmp	BYTE PTR [eax+esi+55462], 4
	ja	SHORT $LN47@ReceiveEna
; Line 368
	lea	eax, DWORD PTR _Nibble1$[ebp]
	push	eax
	mov	al, BYTE PTR _St$[ebp]
	push	3
	add	al, 9
	push	57344					; 0000e000H
	movzx	eax, al
	push	eax
	push	DWORD PTR _Rk$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 369
	push	ebx
	push	esi
	call	_GetHalfClk
	movzx	ecx, ax
	mov	eax, DWORD PTR _Nibble1$[ebp]
	xor	edx, edx
	div	ecx
	add	esp, 36					; 00000024H
; Line 370
	mov	BYTE PTR _FlagForDevicex4$[ebp], 1
	mov	DWORD PTR _Nibble1$[ebp], eax
; Line 372
	cmp	eax, DWORD PTR [edi]
	jae	SHORT $LN47@ReceiveEna
; Line 373
	mov	DWORD PTR [edi], eax
$LN47@ReceiveEna:
; Line 352
	inc	BYTE PTR _Rk$[ebp]
	inc	DWORD PTR tv1395[ebp]
	cmp	BYTE PTR _Rk$[ebp], 4
	jb	$LL48@ReceiveEna
	inc	BYTE PTR _St$[ebp]
	add	edi, 4
	cmp	BYTE PTR _St$[ebp], 9
	jb	$LL51@ReceiveEna
; Line 380
	movzx	eax, BYTE PTR [esi+31275]
	sub	eax, 3
	je	SHORT $LN36@ReceiveEna
	dec	eax
	je	SHORT $LN36@ReceiveEna
	dec	eax
	je	SHORT $LN36@ReceiveEna
	dec	eax
	je	SHORT $LN36@ReceiveEna
	dec	eax
	jne	SHORT $LN109@ReceiveEna
$LN36@ReceiveEna:
; Line 382
	mov	al, 2
; Line 387
	jmp	SHORT $LN26@ReceiveEna
$LN109@ReceiveEna:
; Line 410
	mov	al, BYTE PTR _ReadRk2RkPerformance$[ebp]
$LN26@ReceiveEna:
; Line 465
	movzx	eax, al
	mov	DWORD PTR tv987[ebp], eax
	lea	eax, DWORD PTR _RecEnDelaySmallest$[ebp+36]
	mov	BYTE PTR tv1429[ebp], 9
	mov	DWORD PTR tv1552[ebp], eax
	mov	edi, 20492				; 0000500cH
$LL23@ReceiveEna:
	mov	eax, DWORD PTR tv1552[ebp]
	mov	eax, DWORD PTR [eax-36]
	sub	eax, DWORD PTR tv987[ebp]
	lea	ecx, DWORD PTR _RdCmdLatencyTemp$[ebp]
	and	eax, 1
	mov	DWORD PTR _TempNb0$[ebp], eax
	movzx	eax, BYTE PTR tv1429[ebp]
	push	ecx
	sub	al, 9
	push	3
	push	edi
	mov	BYTE PTR tv1437[ebp], al
	push	eax
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	mov	eax, DWORD PTR _RdCmdLatencyTemp$[ebp]
	mov	ecx, DWORD PTR tv1552[ebp]
	add	eax, eax
	sub	eax, DWORD PTR tv987[ebp]
	add	eax, DWORD PTR [ecx-36]
	shr	eax, 1
	mov	DWORD PTR _RdCmdLatencyTemp$[ebp], eax
	lea	eax, DWORD PTR _RdCmdLatencyTemp$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR tv1437[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20496					; 00005010H
	push	DWORD PTR tv1437[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20493					; 0000500dH
	push	DWORD PTR tv1437[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20494					; 0000500eH
	push	DWORD PTR tv1437[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20497					; 00005011H
	push	DWORD PTR tv1437[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
	cmp	BYTE PTR _FlagForDevicex4$[ebp], 0
	je	$LN20@ReceiveEna
	mov	eax, DWORD PTR tv1552[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR tv987[ebp]
	and	eax, 1
	mov	DWORD PTR _TempNb1$[ebp], eax
	lea	eax, DWORD PTR _RdCmdLatencyTemp$[ebp]
	push	eax
	push	3
	push	edi
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	mov	eax, DWORD PTR _RdCmdLatencyTemp$[ebp]
	mov	ecx, DWORD PTR tv1552[ebp]
	add	eax, eax
	sub	eax, DWORD PTR tv987[ebp]
	add	eax, DWORD PTR [ecx]
	shr	eax, 1
	mov	DWORD PTR _RdCmdLatencyTemp$[ebp], eax
	lea	eax, DWORD PTR _RdCmdLatencyTemp$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	lea	eax, DWORD PTR _TempNb1$[ebp]
	push	eax
	push	24					; 00000018H
	push	20496					; 00005010H
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
	lea	eax, DWORD PTR _TempNb1$[ebp]
	push	eax
	push	24					; 00000018H
	push	20493					; 0000500dH
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	lea	eax, DWORD PTR _TempNb1$[ebp]
	push	eax
	push	24					; 00000018H
	push	20494					; 0000500eH
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	lea	eax, DWORD PTR _TempNb1$[ebp]
	push	eax
	push	24					; 00000018H
	push	20497					; 00005011H
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
	jmp	SHORT $LN22@ReceiveEna
$LN20@ReceiveEna:
; Line 451
	lea	eax, DWORD PTR _RdCmdLatencyTemp$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 452
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20496					; 00005010H
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 453
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20493					; 0000500dH
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
; Line 454
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20494					; 0000500eH
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 455
	lea	eax, DWORD PTR _TempNb0$[ebp]
	push	eax
	push	24					; 00000018H
	push	20497					; 00005011H
	push	DWORD PTR tv1429[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
$LN22@ReceiveEna:
	add	DWORD PTR tv1552[ebp], 4
	inc	BYTE PTR tv1429[ebp]
	mov	al, BYTE PTR tv1429[ebp]
	sub	al, 9
	cmp	al, 9
	jb	$LL23@ReceiveEna
; Line 467
	mov	ecx, DWORD PTR tv980[ebp]
	test	bl, bl
	jne	SHORT $LN18@ReceiveEna
; Line 466
	mov	edi, DWORD PTR [esi+55614]
; Line 467
	jmp	SHORT $LN17@ReceiveEna
$LN18@ReceiveEna:
; Line 468
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	mov	edi, DWORD PTR [eax+esi+55662]
$LN17@ReceiveEna:
; Line 474
	movzx	eax, BYTE PTR [esi+31275]
	push	eax
	call	_ReturnFreqPad
	imul	edi, 10					; 0000000aH
	movzx	eax, al
	imul	eax, 10					; 0000000aH
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _MaxRcv2xVal$[ebp+ecx*4]
	imul	edx, 10					; 0000000aH
	shr	edx, 2
	sar	eax, 1
	add	eax, edx
	add	esp, 4
	shr	edi, 1
	lea	eax, DWORD PTR [eax+edi-10]
; Line 475
	xor	edx, edx
	push	10					; 0000000aH
	pop	edi
	div	edi
	test	edx, edx
; Line 477
	lea	edx, DWORD PTR [eax+1]
	jne	SHORT $LN15@ReceiveEna
; Line 479
	mov	edx, eax
$LN15@ReceiveEna:
; Line 481
	inc	edx
; Line 482
	cmp	BYTE PTR [esi+65551], 1
	mov	DWORD PTR _RdCmd2rdvldValue$[ebp], edx
	jne	SHORT $LN10@ReceiveEna
; Line 483
	imul	ecx, 4336				; 000010f0H
	mov	eax, DWORD PTR [ecx+esi+55966]
	mov	ecx, DWORD PTR [ecx+esi+55970]
	cmp	eax, 1
	jne	SHORT $LN108@ReceiveEna
	test	ecx, ecx
	je	SHORT $LN110@ReceiveEna
$LN108@ReceiveEna:
	cmp	eax, 3
	jne	SHORT $LN10@ReceiveEna
	test	ecx, ecx
	jne	SHORT $LN10@ReceiveEna
$LN110@ReceiveEna:
; Line 487
	movzx	eax, BYTE PTR [esi+31275]
	sub	eax, 3
	je	SHORT $LN9@ReceiveEna
	dec	eax
	je	SHORT $LN8@ReceiveEna
	dec	eax
	je	SHORT $LN7@ReceiveEna
	dec	eax
	jne	SHORT $LN10@ReceiveEna
; Line 498
	push	edx
	call	_ModifyTclFour
; Line 499
	jmp	SHORT $LN115@ReceiveEna
$LN7@ReceiveEna:
; Line 495
	push	edx
	call	_ModifyTclThree
; Line 496
	jmp	SHORT $LN115@ReceiveEna
$LN8@ReceiveEna:
; Line 492
	push	edx
	call	_ModifyTclTwo
; Line 493
	jmp	SHORT $LN115@ReceiveEna
$LN9@ReceiveEna:
; Line 489
	push	edx
	call	_ModifyTclOne
$LN115@ReceiveEna:
	mov	DWORD PTR _RdCmd2rdvldValue$[ebp], eax
	add	esp, 4
$LN10@ReceiveEna:
; Line 506
	mov	BYTE PTR _St$[ebp], 0
$LL3@ReceiveEna:
; Line 508
	lea	eax, DWORD PTR _RdCmd2rdvldValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	20491					; 0000500bH
	push	DWORD PTR _St$[ebp]
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _St$[ebp]
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	SHORT $LL3@ReceiveEna
	pop	ebx
$LN1@ReceiveEna:
	pop	edi
	pop	esi
; Line 513
	add	ebp, 112				; 00000070H
	leave
	ret	0
_ReceiveEnableExit ENDP
_TEXT	ENDS
PUBLIC	_WriteTrainingExit
; Function compile flags: /Ogspy
;	COMDAT _WriteTrainingExit
_TEXT	SEGMENT
_TxDqDelaySmallest$ = -92				; size = 72
_TxDqDelayTemp$ = -20					; size = 4
_Temp1$ = -16						; size = 4
_WrCmdLatencyTemp$ = -12				; size = 4
tv294 = -8						; size = 4
_Rk$ = -8						; size = 1
_WriteRk2RkPerformance$ = -1				; size = 1
_St$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_WriteTrainingExit PROC					; COMDAT
; Line 526
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
; Line 542
	push	72					; 00000048H
	lea	eax, DWORD PTR _TxDqDelaySmallest$[ebp]
	push	-1
	push	eax
	mov	BYTE PTR _WriteRk2RkPerformance$[ebp], 0
	call	_MmrcMemset
; Line 543
	mov	ebx, DWORD PTR _MrcData$[ebp]
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [ebx+31274], 1
	jne	SHORT $LN30@WriteTrain
	cmp	BYTE PTR [ebx+65434], 16		; 00000010H
	je	$LN1@WriteTrain
$LN30@WriteTrain:
	push	esi
	push	edi
; Line 546
	mov	BYTE PTR _St$[ebp], 0
	lea	esi, DWORD PTR _TxDqDelaySmallest$[ebp]
$LL29@WriteTrain:
; Line 547
	mov	BYTE PTR _Rk$[ebp], 0
$LL26@WriteTrain:
; Line 548
	push	DWORD PTR _Rk$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN25@WriteTrain
; Line 551
	lea	eax, DWORD PTR _TxDqDelayTemp$[ebp]
	push	eax
	push	3
	push	57359					; 0000e00fH
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rk$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
; Line 552
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetHalfClk
	movzx	ecx, ax
	mov	eax, DWORD PTR _TxDqDelayTemp$[ebp]
	xor	edx, edx
	div	ecx
	add	esp, 36					; 00000024H
	mov	DWORD PTR _TxDqDelayTemp$[ebp], eax
; Line 555
	cmp	eax, DWORD PTR [esi]
	jae	SHORT $LN25@WriteTrain
; Line 556
	mov	DWORD PTR [esi], eax
$LN25@WriteTrain:
; Line 547
	inc	BYTE PTR _Rk$[ebp]
	cmp	BYTE PTR _Rk$[ebp], 4
	jb	SHORT $LL26@WriteTrain
	inc	BYTE PTR _St$[ebp]
	add	esi, 4
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	SHORT $LL29@WriteTrain
; Line 562
	movzx	eax, BYTE PTR [ebx+31275]
	sub	eax, 3
	je	SHORT $LN7@WriteTrain
	dec	eax
	je	SHORT $LN7@WriteTrain
	dec	eax
	je	SHORT $LN7@WriteTrain
	dec	eax
	je	SHORT $LN7@WriteTrain
	dec	eax
	jne	SHORT $LN39@WriteTrain
$LN7@WriteTrain:
; Line 592
	mov	BYTE PTR _WriteRk2RkPerformance$[ebp], 1
$LN39@WriteTrain:
; Line 602
	movzx	eax, BYTE PTR _WriteRk2RkPerformance$[ebp]
	mov	BYTE PTR _St$[ebp], 0
	mov	DWORD PTR tv294[ebp], eax
	lea	edi, DWORD PTR _TxDqDelaySmallest$[ebp]
	mov	esi, 20520				; 00005028H
$LL40@WriteTrain:
; Line 606
	lea	eax, DWORD PTR _WrCmdLatencyTemp$[ebp]
	push	eax
	push	3
	push	esi
	push	DWORD PTR _St$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
; Line 609
	mov	eax, DWORD PTR _WrCmdLatencyTemp$[ebp]
	add	eax, eax
	sub	eax, DWORD PTR tv294[ebp]
	add	eax, DWORD PTR [edi]
	shr	eax, 1
	mov	DWORD PTR _WrCmdLatencyTemp$[ebp], eax
; Line 611
	lea	eax, DWORD PTR _WrCmdLatencyTemp$[ebp]
	push	eax
	push	24					; 00000018H
	push	esi
	push	DWORD PTR _St$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
; Line 613
	mov	eax, DWORD PTR [edi]
	sub	eax, DWORD PTR tv294[ebp]
	and	eax, 1
	mov	DWORD PTR _Temp1$[ebp], eax
; Line 615
	lea	eax, DWORD PTR _Temp1$[ebp]
	push	eax
	push	24					; 00000018H
	push	20488					; 00005008H
	push	DWORD PTR _St$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
; Line 616
	lea	eax, DWORD PTR _Temp1$[ebp]
	push	eax
	push	24					; 00000018H
	push	20514					; 00005022H
	push	DWORD PTR _St$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
; Line 617
	lea	eax, DWORD PTR _Temp1$[ebp]
	push	eax
	push	24					; 00000018H
	push	20512					; 00005020H
	push	DWORD PTR _St$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
	inc	BYTE PTR _St$[ebp]
	add	edi, 4
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	$LL40@WriteTrain
	pop	edi
	pop	esi
$LN1@WriteTrain:
	pop	ebx
; Line 621
	leave
	ret	0
_WriteTrainingExit ENDP
_TEXT	ENDS
PUBLIC	_BreakpointMrc
EXTRN	_MemRegRead:PROC
EXTRN	_MemRegWrite:PROC
; Function compile flags: /Ogspy
;	COMDAT _BreakpointMrc
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_Name$ = 12						; size = 4
_BreakpointMrc PROC					; COMDAT
; Line 640
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
; Line 645
	or	DWORD PTR _Register$[ebp+8], -1
	push	edi
; Line 649
	push	15					; 0000000fH
	xor	ebx, ebx
	push	ebx
	push	128					; 00000080H
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 304		; 00000130H
	mov	DWORD PTR _Register$[ebp+12], ebx
	mov	BYTE PTR _Register$[ebp+16], bl
	push	ebx
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
$LL3@Breakpoint:
; Line 651
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	ebx
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
; Line 652
	test	eax, eax
	jne	SHORT $LL3@Breakpoint
; Line 653
	push	15					; 0000000fH
	push	ebx
	push	ebx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	ebx
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 654
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_BreakpointMrc ENDP
_TEXT	ENDS
PUBLIC	_MrcDelay
EXTRN	_McStall:PROC
EXTRN	_McStallNanoSecond:PROC
; Function compile flags: /Ogspy
;	COMDAT _MrcDelay
_TEXT	SEGMENT
_Type$ = 8						; size = 1
_Delay$ = 12						; size = 4
_MrcDelay PROC						; COMDAT
; Line 661
	push	ebp
	mov	ebp, esp
; Line 665
	movzx	eax, BYTE PTR _Type$[ebp]
	sub	eax, 0
	je	SHORT $LN7@MrcDelay
	dec	eax
; Line 678
	push	DWORD PTR _Delay$[ebp]
	je	SHORT $LN3@MrcDelay
; Line 665
	dec	eax
; Line 679
	jne	SHORT $LN3@MrcDelay
; Line 675
	call	_McStallNanoSecond
; Line 676
	jmp	SHORT $LN15@MrcDelay
$LN3@MrcDelay:
; Line 672
	call	_McStall
$LN15@MrcDelay:
	pop	ecx
; Line 673
	jmp	SHORT $LN4@MrcDelay
$LN7@MrcDelay:
	push	esi
; Line 667
	mov	esi, DWORD PTR _Delay$[ebp]
	test	esi, esi
	jbe	SHORT $LN14@MrcDelay
$LL6@MrcDelay:
; Line 668
	push	1000					; 000003e8H
	call	_McStall
	dec	esi
	pop	ecx
	jne	SHORT $LL6@MrcDelay
$LN14@MrcDelay:
	pop	esi
$LN4@MrcDelay:
; Line 682
	xor	eax, eax
; Line 683
	pop	ebp
	ret	0
_MrcDelay ENDP
_TEXT	ENDS
PUBLIC	_ProgramParityCheck
EXTRN	_MmrcWriteMsr:PROC
EXTRN	_MmrcReadMsr:PROC
EXTRN	_Mmio32Write:PROC
EXTRN	_Mmio32Read:PROC
; Function compile flags: /Ogspy
;	COMDAT _ProgramParityCheck
_TEXT	SEGMENT
_BmcMode$ = -8						; size = 8
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_ProgramParityCheck PROC				; COMDAT
; Line 703
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 710
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+65516], 2
	push	edi
	je	SHORT $LN7@ProgramPar
; Line 711
	mov	eax, DWORD PTR [esi+65445]
	mov	edi, 28232				; 00006e48H
	add	eax, edi
	push	eax
	call	_Mmio32Read
	pop	ecx
	xor	ecx, ecx
; Line 713
	mov	DWORD PTR _BmcMode$[ebp+4], ecx
	cmp	BYTE PTR [esi+65516], cl
	jne	SHORT $LN6@ProgramPar
	and	eax, -2					; fffffffeH
; Line 714
	jmp	SHORT $LN5@ProgramPar
$LN6@ProgramPar:
; Line 715
	or	eax, 1
$LN5@ProgramPar:
; Line 717
	push	eax
	mov	eax, DWORD PTR [esi+65445]
	add	eax, edi
	push	eax
	call	_Mmio32Write
	pop	ecx
	pop	ecx
$LN7@ProgramPar:
; Line 720
	cmp	BYTE PTR [esi+70989], 0
	je	SHORT $LN4@ProgramPar
; Line 733
	mov	edi, 1040				; 00000410H
	push	edi
	push	esi
	call	_MmrcReadMsr
	pop	ecx
; Line 735
	and	eax, -385				; fffffe7fH
; Line 737
	cmp	BYTE PTR [esi+70805], 0
	pop	ecx
	je	SHORT $LN2@ProgramPar
; Line 738
	or	eax, 384				; 00000180H
$LN2@ProgramPar:
; Line 740
	push	edx
	push	eax
	push	edi
	push	esi
	call	_MmrcWriteMsr
; Line 741
	push	edi
	push	esi
	call	_MmrcReadMsr
; Line 749
	mov	edi, 1048				; 00000418H
	push	edi
	push	esi
	call	_MmrcReadMsr
	add	esp, 32					; 00000020H
; Line 751
	and	eax, -2031617				; ffe0ffffH
; Line 753
	cmp	BYTE PTR [esi+70805], 0
	je	SHORT $LN1@ProgramPar
; Line 754
	or	eax, 2031616				; 001f0000H
$LN1@ProgramPar:
; Line 756
	push	edx
	push	eax
	push	edi
	push	esi
	call	_MmrcWriteMsr
; Line 757
	push	edi
	push	esi
	call	_MmrcReadMsr
	add	esp, 24					; 00000018H
$LN4@ProgramPar:
	pop	edi
	xor	eax, eax
	pop	esi
; Line 761
	leave
	ret	0
_ProgramParityCheck ENDP
_TEXT	ENDS
PUBLIC	_MciDunit
; Function compile flags: /Ogspy
;	COMDAT _MciDunit
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_MciDunit PROC						; COMDAT
; Line 781
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 785
	or	DWORD PTR _Register$[ebp+8], -1
	and	DWORD PTR _Register$[ebp+12], 0
	push	esi
	push	edi
; Line 789
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	BYTE PTR _Register$[ebp+16], 0
	mov	DWORD PTR _Register$[ebp], 24		; 00000018H
	push	1
	rep movsd
	call	_MemRegRead
	mov	ecx, eax
; Line 790
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	ax, WORD PTR [eax+71459]
	mov	edx, 32767				; 00007fffH
	and	ax, dx
	add	esp, 36					; 00000024H
; Line 792
	movzx	eax, ax
	push	15					; 0000000fH
	cdq
	and	ecx, -32768				; ffff8000H
	xor	esi, esi
	or	eax, ecx
	or	edx, esi
	push	edx
	or	eax, 1073741824				; 40000000H
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 795
	pop	edi
	xor	eax, eax
	pop	esi
	leave
	ret	0
_MciDunit ENDP
_TEXT	ENDS
PUBLIC	_TestCasePpr
; Function compile flags: /Ogspy
;	COMDAT _TestCasePpr
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_BankGroup$ = 20					; size = 1
_RowAddress$ = 24					; size = 4
_BankAddress$ = 28					; size = 1
_DramDevice$ = 32					; size = 1
_TestCasePpr PROC					; COMDAT
; Line 821
	push	ebp
	mov	ebp, esp
; Line 822
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _BankGroup$[ebp]
	push	ebx
; Line 824
	mov	bl, BYTE PTR _BankAddress$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+54904]
	push	edi
	mov	edi, DWORD PTR _RowAddress$[ebp]
	mov	BYTE PTR [edx+esi], 1
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+edx*4+54936], edi
	lea	edx, DWORD PTR [ecx+eax*4+55064]
; Line 825
	lea	eax, DWORD PTR [ecx+eax*4+55096]
	mov	cl, BYTE PTR _DramDevice$[ebp]
	pop	edi
	mov	BYTE PTR [edx+esi], bl
	mov	BYTE PTR [eax+esi], cl
	pop	esi
	pop	ebx
; Line 826
	pop	ebp
	ret	0
_TestCasePpr ENDP
_TEXT	ENDS
PUBLIC	_ExecutePprTestCase
; Function compile flags: /Ogspy
;	COMDAT _ExecutePprTestCase
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SoftPpr$ = 16						; size = 1
_ExecutePprTestCase PROC				; COMDAT
; Line 845
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 847
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
; Line 867
	xor	eax, eax
	push	eax
	push	eax
	push	18					; 00000012H
	push	eax
	mov	BYTE PTR [esi+edi*4+30688], 1
	mov	BYTE PTR [esi+edi*4+30689], 1
	mov	BYTE PTR [esi+edi*4+30690], 1
	mov	BYTE PTR [esi+edi*4+30691], 1
	push	eax
	push	DWORD PTR _Channel$[ebp]
	lea	ebx, DWORD PTR [esi+edi*2]
	mov	BYTE PTR [esi+edi*2+28610], 1
	mov	BYTE PTR [ebx+28611], 1
	mov	BYTE PTR [edi+esi+31272], 7
	push	esi
	mov	BYTE PTR [esi+edi*2+55168], 2
	mov	BYTE PTR [ebx+55169], 2
	mov	BYTE PTR [esi+edi*2+55164], 1
	mov	BYTE PTR [ebx+55165], 0
	call	_TestCasePpr
; Line 872
	push	6
	push	1
	push	8448					; 00002100H
	push	1
	push	1
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TestCasePpr
; Line 877
	push	11					; 0000000bH
	push	2
	push	816					; 00000330H
	push	2
	push	2
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TestCasePpr
	add	esp, 84					; 00000054H
; Line 882
	push	10					; 0000000aH
	push	3
	push	30464					; 00007700H
	push	3
	push	3
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TestCasePpr
; Line 885
	mov	al, BYTE PTR _SoftPpr$[ebp]
	add	esp, 28					; 0000001cH
	mov	BYTE PTR [esi+edi*2+55132], al
	mov	BYTE PTR [esi+edi*2+55128], 1
; Line 889
	mov	BYTE PTR [esi+edi*2+55136], 1
	test	al, al
	pop	edi
	sete	al
	pop	esi
	mov	BYTE PTR [ebx+55129], 1
	mov	BYTE PTR [ebx+55133], al
; Line 890
	mov	BYTE PTR [ebx+55137], 1
	pop	ebx
; Line 891
	pop	ebp
	ret	0
_ExecutePprTestCase ENDP
_TEXT	ENDS
PUBLIC	_GetRowBankLocation
EXTRN	_DynamicDmapBitLocations:BYTE
; Function compile flags: /Ogspy
;	COMDAT _GetRowBankLocation
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_GetRowBankLocation PROC				; COMDAT
; Line 970
	movzx	eax, BYTE PTR _Channel$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _MrcData$[esp+8]
	xor	bl, bl
	imul	eax, 542				; 0000021eH
	lea	esi, DWORD PTR [edi+55140]
	mov	edx, OFFSET _DynamicDmapBitLocations
$LL6@GetRowBank:
	movzx	ecx, WORD PTR [edx]
	add	ecx, eax
	lea	ecx, DWORD PTR [edi+ecx*8+55526]
	cmp	DWORD PTR [ecx], 31			; 0000001fH
	jne	SHORT $LN11@GetRowBank
; Line 956
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@GetRowBank
$LN11@GetRowBank:
; Line 957
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [esi], cl
; Line 958
	cmp	bl, 22					; 00000016H
	jb	SHORT $LN5@GetRowBank
; Line 962
	add	cl, 7
	mov	BYTE PTR [esi], cl
; Line 964
	jmp	SHORT $LN5@GetRowBank
$LN3@GetRowBank:
; Line 965
	mov	BYTE PTR [esi], 255			; 000000ffH
$LN5@GetRowBank:
; Line 955
	inc	bl
	inc	edx
	inc	edx
	inc	esi
	cmp	bl, 24					; 00000018H
	jb	SHORT $LL6@GetRowBank
	pop	edi
	pop	esi
; Line 970
	xor	eax, eax
	pop	ebx
; Line 971
	ret	0
_GetRowBankLocation ENDP
_TEXT	ENDS
PUBLIC	_GetPprMask
; Function compile flags: /Ogspy
;	COMDAT _GetPprMask
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_DqMask$ = 20						; size = 4
_DqPins$ = 24						; size = 4
_MaxMask$ = 28						; size = 4
_GetPprMask PROC					; COMDAT
; Line 995
	push	ebp
	mov	ebp, esp
; Line 999
	movzx	edx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR _MrcData$[ebp]
	shr	edx, 1
	add	edx, ecx
	movzx	eax, BYTE PTR [edx+eax*2+55164]
	sub	eax, 0
	je	SHORT $LN4@GetPprMask
	dec	eax
	je	SHORT $LN3@GetPprMask
	dec	eax
	je	SHORT $LN2@GetPprMask
; Line 1016
	push	37					; 00000025H
	pop	eax
	mov	DWORD PTR [ecx+65333], eax
; Line 1022
	pop	ebp
	ret	0
$LN2@GetPprMask:
; Line 1011
	mov	ecx, DWORD PTR _DqMask$[ebp]
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR [ecx], ax
; Line 1012
	mov	eax, DWORD PTR _DqPins$[ebp]
	mov	BYTE PTR [eax], 16			; 00000010H
; Line 1013
	mov	eax, DWORD PTR _MaxMask$[ebp]
	mov	BYTE PTR [eax], 2
; Line 1014
	jmp	SHORT $LN5@GetPprMask
$LN3@GetPprMask:
; Line 1006
	mov	ecx, DWORD PTR _DqMask$[ebp]
	mov	eax, 255				; 000000ffH
	mov	WORD PTR [ecx], ax
; Line 1007
	mov	eax, DWORD PTR _DqPins$[ebp]
	mov	BYTE PTR [eax], 8
; Line 1008
	mov	eax, DWORD PTR _MaxMask$[ebp]
	mov	BYTE PTR [eax], 4
; Line 1009
	jmp	SHORT $LN5@GetPprMask
$LN4@GetPprMask:
; Line 1001
	mov	ecx, DWORD PTR _DqMask$[ebp]
	push	15					; 0000000fH
	pop	eax
	mov	WORD PTR [ecx], ax
; Line 1002
	mov	eax, DWORD PTR _DqPins$[ebp]
	mov	BYTE PTR [eax], 4
; Line 1003
	mov	eax, DWORD PTR _MaxMask$[ebp]
	mov	BYTE PTR [eax], 8
$LN5@GetPprMask:
; Line 1021
	xor	eax, eax
; Line 1022
	pop	ebp
	ret	0
_GetPprMask ENDP
_TEXT	ENDS
PUBLIC	_PprSetupAddress
; Function compile flags: /Ogspy
;	COMDAT _PprSetupAddress
_TEXT	SEGMENT
tv355 = -12						; size = 4
tv223 = -8						; size = 4
_TargetAddress$ = -4					; size = 4
tv481 = 8						; size = 4
_Status$ = 8						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DqMask$ = 12						; size = 2
_Rank$ = 16						; size = 1
_DqPins$ = 19						; size = 1
tv442 = 20						; size = 4
_BankGroup$ = 20					; size = 1
_MaxMask$ = 23						; size = 1
_PprSetupAddress PROC					; COMDAT
; Line 1043
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1054
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	and	DWORD PTR _TargetAddress$[ebp], 0
	lea	edx, DWORD PTR [ecx+eax*4]
	push	ebx
	movzx	ebx, BYTE PTR _BankGroup$[ebp]
	push	esi
; Line 1061
	shl	ecx, 2
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	or	ecx, ebx
	lea	esi, DWORD PTR [ebx+edx*4+55064]
	movzx	esi, BYTE PTR [esi+edi]
	shl	ecx, 2
	or	esi, ecx
	shl	esi, 18					; 00000012H
	lea	ecx, DWORD PTR [ebx+edx*4]
	or	esi, DWORD PTR [edi+ecx*4+54936]
	and	DWORD PTR tv442[ebp], 0
	lea	ecx, DWORD PTR [edi+55140]
; Line 1070
	mov	DWORD PTR tv355[ebp], edx
	mov	DWORD PTR tv481[ebp], ecx
	mov	DWORD PTR tv223[ebp], 24		; 00000018H
$LL6@PprSetupAd:
	mov	ecx, DWORD PTR tv481[ebp]
	cmp	BYTE PTR [ecx], 255			; 000000ffH
	je	SHORT $LN5@PprSetupAd
	mov	ecx, DWORD PTR tv442[ebp]
	xor	edx, edx
	inc	edx
	shl	edx, cl
	and	edx, esi
	shr	edx, cl
	mov	ecx, DWORD PTR tv481[ebp]
	mov	cl, BYTE PTR [ecx]
	shl	edx, cl
	or	DWORD PTR _TargetAddress$[ebp], edx
$LN5@PprSetupAd:
	inc	DWORD PTR tv442[ebp]
	inc	DWORD PTR tv481[ebp]
	dec	DWORD PTR tv223[ebp]
	jne	SHORT $LL6@PprSetupAd
	imul	eax, 4336				; 000010f0H
	lea	esi, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR _TargetAddress$[ebp]
	and	DWORD PTR [esi+59354], 0
	mov	DWORD PTR [esi+59350], eax
; Line 1072
	lea	eax, DWORD PTR _MaxMask$[ebp]
	push	eax
	lea	eax, DWORD PTR _DqPins$[ebp]
	push	eax
	lea	eax, DWORD PTR _DqMask$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_GetPprMask
; Line 1074
	or	DWORD PTR [esi+59358], -1
	and	DWORD PTR [esi+59362], 0
; Line 1075
	or	DWORD PTR [esi+59366], -1
	and	DWORD PTR [esi+59370], 0
	mov	DWORD PTR _Status$[ebp], eax
; Line 1077
	mov	eax, DWORD PTR tv355[ebp]
	lea	eax, DWORD PTR [ebx+eax*4+55096]
	mov	al, BYTE PTR [eax+edi]
	add	esp, 24					; 00000018H
	cmp	al, BYTE PTR _MaxMask$[ebp]
	jb	SHORT $LN2@PprSetupAd
; Line 1078
	sub	al, BYTE PTR _MaxMask$[ebp]
	imul	BYTE PTR _DqPins$[ebp]
	mov	cl, al
; Line 1079
	movzx	eax, WORD PTR _DqMask$[ebp]
	shl	eax, cl
	and	DWORD PTR [esi+59370], 0
	not	eax
	cdq
	mov	DWORD PTR [esi+59366], eax
; Line 1080
	jmp	SHORT $LN1@PprSetupAd
$LN2@PprSetupAd:
; Line 1081
	imul	BYTE PTR _DqPins$[ebp]
	mov	cl, al
; Line 1082
	movzx	eax, WORD PTR _DqMask$[ebp]
	shl	eax, cl
	and	DWORD PTR [esi+59362], 0
	not	eax
	cdq
	mov	DWORD PTR [esi+59358], eax
$LN1@PprSetupAd:
; Line 1093
	mov	eax, DWORD PTR _Status$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 1094
	leave
	ret	0
_PprSetupAddress ENDP
_TEXT	ENDS
PUBLIC	_VerifyPprResult
EXTRN	_CpgcExecuteSingleTest:PROC
EXTRN	_MmrcExecuteTask:PROC
; Function compile flags: /Ogspy
;	COMDAT _VerifyPprResult
_TEXT	SEGMENT
_Results$ = -12						; size = 4
_LaneErrorHigh$ = -8					; size = 4
_LaneErrorLow$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_DqPins$ = 11						; size = 1
_Channel$ = 12						; size = 1
_MaxMask$ = 15						; size = 1
_Rank$ = 16						; size = 1
_DqMask$ = 16						; size = 2
_BankGroup$ = 20					; size = 1
_VerifyPprResult PROC					; COMDAT
; Line 1114
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1133
	push	DWORD PTR _Channel$[ebp]
	mov	eax, -559038737				; deadbeefH
	push	65535					; 0000ffffH
	push	17244					; 0000435cH
	push	DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _LaneErrorHigh$[ebp], eax
	mov	DWORD PTR _LaneErrorLow$[ebp], eax
	call	_MmrcExecuteTask
; Line 1134
	lea	eax, DWORD PTR _LaneErrorLow$[ebp]
	push	eax
	lea	eax, DWORD PTR _LaneErrorHigh$[ebp]
	push	eax
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_CpgcExecuteSingleTest
; Line 1136
	lea	eax, DWORD PTR _MaxMask$[ebp]
	push	eax
	lea	eax, DWORD PTR _DqPins$[ebp]
	push	eax
	lea	eax, DWORD PTR _DqMask$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetPprMask
	add	esp, 64					; 00000040H
; Line 1156
	leave
	ret	0
_VerifyPprResult ENDP
_TEXT	ENDS
PUBLIC	_RunPpr
; Function compile flags: /Ogspy
;	COMDAT _RunPpr
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_RunPpr	PROC						; COMDAT
; Line 1174
	movzx	ecx, BYTE PTR _Channel$[esp-4]
	mov	edx, DWORD PTR _MrcData$[esp-4]
	push	esi
	xor	al, al
	shl	ecx, 4
	push	4
	lea	ecx, DWORD PTR [ecx+edx+54904]
	pop	esi
$LL7@RunPpr:
; Line 1179
	push	4
	pop	edx
$LL4@RunPpr:
; Line 1180
	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN3@RunPpr
; Line 1181
	mov	al, 1
$LN3@RunPpr:
; Line 1179
	inc	ecx
	dec	edx
	jne	SHORT $LL4@RunPpr
; Line 1176
	dec	esi
	jne	SHORT $LL7@RunPpr
	pop	esi
; Line 1186
	ret	0
_RunPpr	ENDP
_TEXT	ENDS
PUBLIC	_MrcAcquireBus
; Function compile flags: /Ogspy
;	COMDAT _MrcAcquireBus
_TEXT	SEGMENT
_SmbusBase$ = 8						; size = 2
_MrcAcquireBus PROC					; COMDAT
; Line 1544
	mov	dx, WORD PTR _SmbusBase$[esp-4]
	in	al, dx
; Line 1545
	test	al, 64					; 00000040H
	je	SHORT $LN7@MrcAcquire
; Line 1546
	mov	eax, -1
; Line 1566
	ret	0
$LN7@MrcAcquire:
; Line 1547
	test	al, 1
	je	SHORT $LN5@MrcAcquire
$LL4@MrcAcquire:
; Line 1553
	in	al, dx
; Line 1554
	test	al, 1
	jne	SHORT $LL4@MrcAcquire
; Line 1557
	mov	al, 254					; 000000feH
$LN5@MrcAcquire:
; Line 1563
	out	dx, al
; Line 1564
	xor	eax, eax
; Line 1566
	ret	0
_MrcAcquireBus ENDP
_TEXT	ENDS
PUBLIC	_SetPageAddress
; Function compile flags: /Ogspy
;	COMDAT _SetPageAddress
_TEXT	SEGMENT
_Retry$ = -1						; size = 1
_SmbusBase$ = 8						; size = 2
_Page$ = 12						; size = 1
_SetPageAddress PROC					; COMDAT
; Line 1581
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1594
	mov	ecx, DWORD PTR _SmbusBase$[ebp]
	push	ecx
	mov	BYTE PTR _Retry$[ebp], 3
	call	_MrcAcquireBus
	add	esp, 4
; Line 1595
	cmp	eax, -1
	jne	SHORT $LN22@SetPageAdd
; Line 1596
	or	eax, eax
; Line 1668
	leave
	ret	0
$LN22@SetPageAdd:
	push	ebx
	push	esi
	push	edi
	lea	ebx, DWORD PTR [ecx+5]
	lea	edi, DWORD PTR [ecx+13]
	lea	esi, DWORD PTR [ecx+2]
$LL12@SetPageAdd:
; Line 1599
	dec	BYTE PTR _Retry$[ebp]
; Line 1603
	xor	al, al
; Line 1617
	cmp	BYTE PTR _Page$[ebp], 0
	mov	dx, bx
	out	dx, al
	mov	dx, di
	out	dx, al
	mov	dx, si
	in	al, dx
	jne	SHORT $LN10@SetPageAdd
; Line 1618
	mov	al, 108					; 0000006cH
	jmp	SHORT $LN25@SetPageAdd
$LN10@SetPageAdd:
; Line 1619
	cmp	BYTE PTR _Page$[ebp], 1
	jne	SHORT $LN8@SetPageAdd
; Line 1620
	mov	al, 110					; 0000006eH
$LN25@SetPageAdd:
	lea	edx, DWORD PTR [ecx+4]
	out	dx, al
$LN8@SetPageAdd:
; Line 1626
	lea	edx, DWORD PTR [ecx+3]
	xor	al, al
	out	dx, al
; Line 1630
	mov	dx, si
	add	al, 72					; 00000048H
	out	dx, al
$LL7@SetPageAdd:
; Line 1635
	mov	dx, cx
	in	al, dx
; Line 1636
	test	al, 30					; 0000001eH
	je	SHORT $LL7@SetPageAdd
; Line 1638
	test	al, 4
	jne	SHORT $LN18@SetPageAdd
; Line 1648
	test	al, 8
	je	SHORT $LN2@SetPageAdd
; Line 1652
	or	al, 255					; 000000ffH
	cmp	BYTE PTR _Retry$[ebp], 0
	out	dx, al
; Line 1653
	lea	edx, DWORD PTR [ecx+12]
	mov	al, 1
	out	dx, al
	jne	SHORT $LL12@SetPageAdd
$LN2@SetPageAdd:
	xor	esi, esi
	jmp	SHORT $LN24@SetPageAdd
$LN18@SetPageAdd:
	or	esi, -1
$LN24@SetPageAdd:
; Line 1642
	or	al, 255					; 000000ffH
	mov	dx, cx
	out	dx, al
; Line 1643
	mov	al, 1
	lea	edx, DWORD PTR [ecx+12]
	out	dx, al
; Line 1644
	mov	dx, di
	xor	al, al
	pop	edi
	out	dx, al
; Line 1646
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1668
	leave
	ret	0
_SetPageAddress ENDP
_TEXT	ENDS
PUBLIC	_MrcSmbusExec
; Function compile flags: /Ogspy
;	COMDAT _MrcSmbusExec
_TEXT	SEGMENT
tv360 = -16						; size = 4
tv498 = -12						; size = 4
tv476 = -12						; size = 4
_Status$ = -8						; size = 4
_BufferTooSmall$ = -3					; size = 1
_RetryCount$ = -3					; size = 1
_BlockCount$ = -2					; size = 1
_SmbusOperation$ = -1					; size = 1
_SmbusBase$ = 8						; size = 2
_SlvAddr$ = 12						; size = 1
_Operation$ = 16					; size = 1
_Offset$ = 20						; size = 2
_Length$ = 24						; size = 4
_Buffer$ = 28						; size = 4
_MrcSmbusExec PROC					; COMDAT
; Line 1691
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
; Line 1708
	mov	esi, DWORD PTR _SmbusBase$[ebp]
	mov	eax, 256				; 00000100H
	push	edi
	mov	BYTE PTR _SmbusOperation$[ebp], 0
	mov	BYTE PTR _BlockCount$[ebp], 0
	mov	BYTE PTR _RetryCount$[ebp], 3
	cmp	WORD PTR _Offset$[ebp], ax
	jb	SHORT $LN42@MrcSmbusEx
; Line 1710
	push	1
	push	esi
	call	_SetPageAddress
	pop	ecx
	pop	ecx
$LN42@MrcSmbusEx:
; Line 1717
	mov	edi, DWORD PTR _Length$[ebp]
	mov	al, BYTE PTR [edi]
	cmp	al, 1
	je	SHORT $LN41@MrcSmbusEx
	cmp	al, 4
	je	SHORT $LN41@MrcSmbusEx
; Line 1718
	mov	eax, -1
	jmp	$LN43@MrcSmbusEx
$LN41@MrcSmbusEx:
; Line 1734
	push	esi
	call	_MrcAcquireBus
	add	esp, 4
; Line 1735
	cmp	eax, -1
	jne	SHORT $LN40@MrcSmbusEx
; Line 1736
	or	eax, eax
	jmp	$LN43@MrcSmbusEx
$LN40@MrcSmbusEx:
; Line 1753
	movzx	eax, BYTE PTR _Operation$[ebp]
	mov	DWORD PTR tv360[ebp], eax
	push	ebx
$LL39@MrcSmbusEx:
; Line 1762
	mov	eax, DWORD PTR tv360[ebp]
	dec	BYTE PTR _RetryCount$[ebp]
	and	DWORD PTR _Status$[ebp], 0
	mov	cl, BYTE PTR _SlvAddr$[ebp]
	xor	bl, bl
	sub	eax, 0
	je	SHORT $LN34@MrcSmbusEx
	dec	eax
	je	SHORT $LN35@MrcSmbusEx
	dec	eax
	je	SHORT $LN29@MrcSmbusEx
	dec	eax
; Line 1801
	jne	SHORT $LN30@MrcSmbusEx
	mov	al, BYTE PTR [edi]
	lea	edx, DWORD PTR [esi+5]
	out	dx, al
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR _BlockCount$[ebp], al
$LN60@MrcSmbusEx:
	mov	BYTE PTR _SmbusOperation$[ebp], 20	; 00000014H
	cmp	al, 1
	jb	SHORT $LN30@MrcSmbusEx
; Line 1782
	cmp	al, 32					; 00000020H
	ja	SHORT $LN30@MrcSmbusEx
; Line 1786
	mov	bl, 2
; Line 1787
	jmp	SHORT $LN36@MrcSmbusEx
$LN30@MrcSmbusEx:
; Line 1783
	or	DWORD PTR _Status$[ebp], -1
; Line 1784
	jmp	SHORT $LN36@MrcSmbusEx
$LN29@MrcSmbusEx:
; Line 1792
	mov	al, BYTE PTR [edi]
	or	cl, 1
; Line 1797
	jmp	SHORT $LN60@MrcSmbusEx
$LN35@MrcSmbusEx:
; Line 1765
	mov	eax, DWORD PTR _Buffer$[ebp]
	mov	al, BYTE PTR [eax]
	lea	edx, DWORD PTR [esi+5]
	out	dx, al
; Line 1766
	mov	BYTE PTR _SmbusOperation$[ebp], 8
; Line 1767
	jmp	SHORT $LN36@MrcSmbusEx
$LN34@MrcSmbusEx:
; Line 1771
	or	cl, 1
; Line 1772
	cmp	BYTE PTR [edi], 1
	mov	BYTE PTR _SmbusOperation$[ebp], 8
	jae	SHORT $LN33@MrcSmbusEx
; Line 1773
	or	DWORD PTR _Status$[ebp], -1
$LN33@MrcSmbusEx:
; Line 1775
	mov	BYTE PTR [edi], 1
$LN36@MrcSmbusEx:
; Line 1818
	cmp	BYTE PTR _Operation$[ebp], 3
	lea	edx, DWORD PTR [esi+13]
	mov	al, bl
	out	dx, al
	lea	edx, DWORD PTR [esi+2]
	in	al, dx
	jne	SHORT $LN22@MrcSmbusEx
; Line 1819
	cmp	BYTE PTR _BlockCount$[ebp], 0
	jbe	SHORT $LN22@MrcSmbusEx
	mov	eax, DWORD PTR _Buffer$[ebp]
	movzx	edi, BYTE PTR _BlockCount$[ebp]
	lea	ebx, DWORD PTR [esi+7]
	mov	DWORD PTR tv476[ebp], eax
$LL57@MrcSmbusEx:
; Line 1823
	mov	eax, DWORD PTR tv476[ebp]
	mov	al, BYTE PTR [eax]
	inc	DWORD PTR tv476[ebp]
	dec	edi
	mov	dx, bx
	out	dx, al
	jne	SHORT $LL57@MrcSmbusEx
; Line 1819
	mov	edi, DWORD PTR _Length$[ebp]
$LN22@MrcSmbusEx:
; Line 1830
	lea	edx, DWORD PTR [esi+4]
	mov	al, cl
	out	dx, al
; Line 1836
	mov	al, BYTE PTR _Offset$[ebp]
	lea	edx, DWORD PTR [esi+3]
	out	dx, al
; Line 1841
	mov	al, BYTE PTR _SmbusOperation$[ebp]
	add	al, 64					; 00000040H
	lea	edx, DWORD PTR [esi+2]
	out	dx, al
$LL21@MrcSmbusEx:
; Line 1847
	mov	dx, si
	in	al, dx
; Line 1848
	test	al, 30					; 0000001eH
	je	SHORT $LL21@MrcSmbusEx
; Line 1850
	test	al, 4
	jne	SHORT $LN50@MrcSmbusEx
; Line 1853
	test	al, 8
	je	SHORT $LN16@MrcSmbusEx
; Line 1857
	or	DWORD PTR _Status$[ebp], -1
; Line 1858
	mov	al, 8
	out	dx, al
; Line 1862
	or	al, 255					; 000000ffH
	cmp	BYTE PTR _RetryCount$[ebp], 0
	out	dx, al
; Line 1863
	lea	edx, DWORD PTR [esi+12]
	mov	al, 1
	out	dx, al
	jne	$LL39@MrcSmbusEx
; Line 1753
	jmp	SHORT $LN56@MrcSmbusEx
$LN16@MrcSmbusEx:
; Line 1872
	mov	eax, DWORD PTR tv360[ebp]
	sub	eax, 0
	je	SHORT $LN13@MrcSmbusEx
	dec	eax
	dec	eax
	je	SHORT $LN11@MrcSmbusEx
	dec	eax
	jne	SHORT $LN56@MrcSmbusEx
; Line 1879
	mov	al, 128					; 00000080H
	out	dx, al
; Line 1880
	jmp	SHORT $LN56@MrcSmbusEx
$LN11@MrcSmbusEx:
; Line 1887
	lea	edx, DWORD PTR [esi+5]
	in	al, dx
	mov	cl, al
	mov	BYTE PTR _BufferTooSmall$[ebp], 0
; Line 1888
	cmp	BYTE PTR [edi], cl
	jae	SHORT $LN10@MrcSmbusEx
; Line 1889
	mov	BYTE PTR _BufferTooSmall$[ebp], 1
; Line 1890
	jmp	SHORT $LN6@MrcSmbusEx
$LN10@MrcSmbusEx:
; Line 1891
	test	cl, cl
	jbe	SHORT $LN6@MrcSmbusEx
	mov	eax, DWORD PTR _Buffer$[ebp]
	lea	ebx, DWORD PTR [esi+7]
	mov	DWORD PTR tv498[ebp], eax
	movzx	edi, cl
$LL8@MrcSmbusEx:
; Line 1895
	mov	dx, bx
	in	al, dx
	mov	edx, DWORD PTR tv498[ebp]
	inc	DWORD PTR tv498[ebp]
	dec	edi
	mov	BYTE PTR [edx], al
	jne	SHORT $LL8@MrcSmbusEx
; Line 1891
	mov	edi, DWORD PTR _Length$[ebp]
$LN6@MrcSmbusEx:
; Line 1900
	cmp	BYTE PTR _BufferTooSmall$[ebp], 0
	mov	BYTE PTR [edi], cl
	je	SHORT $LN56@MrcSmbusEx
$LN50@MrcSmbusEx:
; Line 1851
	or	DWORD PTR _Status$[ebp], -1
$LN56@MrcSmbusEx:
; Line 1925
	or	al, 255					; 000000ffH
	mov	dx, si
	out	dx, al
; Line 1926
	mov	al, 1
	lea	edx, DWORD PTR [esi+12]
	out	dx, al
; Line 1927
	xor	al, al
	lea	edx, DWORD PTR [esi+13]
	out	dx, al
; Line 1928
	mov	eax, 256				; 00000100H
	pop	ebx
	cmp	WORD PTR _Offset$[ebp], ax
	jb	SHORT $LN1@MrcSmbusEx
; Line 1929
	push	0
	push	esi
	call	_SetPageAddress
	pop	ecx
	pop	ecx
$LN1@MrcSmbusEx:
; Line 1932
	mov	eax, DWORD PTR _Status$[ebp]
$LN43@MrcSmbusEx:
	pop	edi
	pop	esi
; Line 1933
	leave
	ret	0
$LN13@MrcSmbusEx:
; Line 1875
	mov	ecx, DWORD PTR _Buffer$[ebp]
	lea	edx, DWORD PTR [esi+5]
	in	al, dx
	mov	BYTE PTR [ecx], al
; Line 1909
	jmp	SHORT $LN56@MrcSmbusEx
_MrcSmbusExec ENDP
_TEXT	ENDS
PUBLIC	_ConvertLinearToPhysicalValue
EXTRN	_MrcDeadLoop:PROC
EXTRN	_GetOffsetIndex:PROC
; Function compile flags: /Ogspy
;	COMDAT _ConvertLinearToPhysicalValue
_TEXT	SEGMENT
_PhysicalValue$ = -8					; size = 4
_DummyValue$ = -2					; size = 1
_TotalSize$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DimIndex$ = 16						; size = 2
_LinearValue$ = 20					; size = 4
_ConvertLinearToPhysicalValue PROC			; COMDAT
; Line 1942
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1950
	mov	eax, DWORD PTR _LinearValue$[ebp]
	push	ebx
	push	esi
; Line 1953
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	DWORD PTR _DimIndex$[ebp]
	mov	BYTE PTR _TotalSize$[ebp], 0
	push	esi
	mov	BYTE PTR _DummyValue$[ebp], 0
	mov	DWORD PTR _PhysicalValue$[ebp], eax
	lea	edi, DWORD PTR _DummyValue$[ebp]
	call	_GetOffsetIndex
	push	57360					; 0000e010H
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	jne	SHORT $LN9@ConvertLin
	movzx	eax, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [eax+esi+31272], 3
	ja	SHORT $LN9@ConvertLin
; Line 1954
	mov	al, BYTE PTR [esi+65364]
; Line 1955
	mov	edi, DWORD PTR [esi+65360]
	jmp	SHORT $LN15@ConvertLin
$LN9@ConvertLin:
; Line 1956
	push	DWORD PTR _DimIndex$[ebp]
	push	esi
	call	_GetOffsetIndex
	push	57385					; 0000e029H
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	jne	SHORT $LN7@ConvertLin
; Line 1957
	mov	al, BYTE PTR [esi+65374]
; Line 1958
	mov	edi, DWORD PTR [esi+65370]
$LN15@ConvertLin:
; Line 1959
	mov	ebx, DWORD PTR _PhysicalValue$[ebp]
	mov	BYTE PTR _TotalSize$[ebp], al
	jmp	SHORT $LN4@ConvertLin
$LN7@ConvertLin:
; Line 1960
	push	DWORD PTR _DimIndex$[ebp]
	push	esi
	call	_GetOffsetIndex
	push	20501					; 00005015H
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	jb	SHORT $LN5@ConvertLin
	push	DWORD PTR _DimIndex$[ebp]
	push	esi
	call	_GetOffsetIndex
	push	20508					; 0000501cH
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	ja	SHORT $LN5@ConvertLin
; Line 1961
	push	7
	pop	ebx
	cmp	DWORD PTR _LinearValue$[ebp], ebx
	ja	SHORT $LN5@ConvertLin
	sub	ebx, DWORD PTR _LinearValue$[ebp]
; Line 1963
	jmp	SHORT $LN4@ConvertLin
$LN5@ConvertLin:
; Line 1964
	mov	ebx, DWORD PTR _LinearValue$[ebp]
$LN4@ConvertLin:
; Line 1967
	movzx	ecx, BYTE PTR _TotalSize$[ebp]
	mov	eax, DWORD PTR _LinearValue$[ebp]
	cmp	eax, ecx
	jb	SHORT $LN3@ConvertLin
	cmp	BYTE PTR _TotalSize$[ebp], 0
	je	SHORT $LN1@ConvertLin
; Line 1969
	mov	DWORD PTR [esi+65333], 21		; 00000015H
; Line 1970
	call	_MrcDeadLoop
	jmp	SHORT $LN1@ConvertLin
$LN3@ConvertLin:
; Line 1971
	cmp	BYTE PTR _TotalSize$[ebp], 0
	je	SHORT $LN1@ConvertLin
; Line 1972
	movzx	ebx, BYTE PTR [edi+eax]
$LN1@ConvertLin:
	pop	edi
	pop	esi
; Line 1975
	mov	eax, ebx
	pop	ebx
; Line 1976
	leave
	ret	0
_ConvertLinearToPhysicalValue ENDP
_TEXT	ENDS
PUBLIC	_ConvertPhysicalToLinearValue
; Function compile flags: /Ogspy
;	COMDAT _ConvertPhysicalToLinearValue
_TEXT	SEGMENT
_LinearValue$ = -8					; size = 4
_DummyValue$ = -2					; size = 1
_TotalSize$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DimIndex$ = 16						; size = 2
_PhysicalValue$ = 20					; size = 4
_ConvertPhysicalToLinearValue PROC			; COMDAT
; Line 1985
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1993
	mov	eax, DWORD PTR _PhysicalValue$[ebp]
	push	ebx
	push	esi
; Line 1995
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	DWORD PTR _DimIndex$[ebp]
	mov	BYTE PTR _TotalSize$[ebp], 0
	push	esi
	mov	BYTE PTR _DummyValue$[ebp], 0
	mov	DWORD PTR _LinearValue$[ebp], eax
	lea	edi, DWORD PTR _DummyValue$[ebp]
	call	_GetOffsetIndex
	push	57360					; 0000e010H
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	jne	SHORT $LN9@ConvertPhy
	movzx	eax, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [eax+esi+31272], 3
	ja	SHORT $LN9@ConvertPhy
; Line 1996
	mov	al, BYTE PTR [esi+65369]
; Line 1997
	mov	edi, DWORD PTR [esi+65365]
	jmp	SHORT $LN15@ConvertPhy
$LN9@ConvertPhy:
; Line 1998
	push	DWORD PTR _DimIndex$[ebp]
	push	esi
	call	_GetOffsetIndex
	push	57385					; 0000e029H
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	jne	SHORT $LN7@ConvertPhy
; Line 1999
	mov	al, BYTE PTR [esi+65379]
; Line 2000
	mov	edi, DWORD PTR [esi+65375]
$LN15@ConvertPhy:
; Line 2001
	mov	ebx, DWORD PTR _LinearValue$[ebp]
	mov	BYTE PTR _TotalSize$[ebp], al
	jmp	SHORT $LN4@ConvertPhy
$LN7@ConvertPhy:
; Line 2002
	push	DWORD PTR _DimIndex$[ebp]
	push	esi
	call	_GetOffsetIndex
	push	20501					; 00005015H
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	jb	SHORT $LN5@ConvertPhy
	push	DWORD PTR _DimIndex$[ebp]
	push	esi
	call	_GetOffsetIndex
	push	20508					; 0000501cH
	push	esi
	mov	bx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	bx, ax
	ja	SHORT $LN5@ConvertPhy
; Line 2003
	push	7
	pop	ebx
	cmp	DWORD PTR _PhysicalValue$[ebp], ebx
	ja	SHORT $LN5@ConvertPhy
	sub	ebx, DWORD PTR _PhysicalValue$[ebp]
; Line 2005
	jmp	SHORT $LN4@ConvertPhy
$LN5@ConvertPhy:
; Line 2006
	mov	ebx, DWORD PTR _PhysicalValue$[ebp]
$LN4@ConvertPhy:
; Line 2009
	movzx	ecx, BYTE PTR _TotalSize$[ebp]
	mov	eax, DWORD PTR _PhysicalValue$[ebp]
	cmp	eax, ecx
	jb	SHORT $LN3@ConvertPhy
	cmp	BYTE PTR _TotalSize$[ebp], 0
	je	SHORT $LN1@ConvertPhy
; Line 2011
	mov	DWORD PTR [esi+65333], 22		; 00000016H
; Line 2012
	call	_MrcDeadLoop
	jmp	SHORT $LN1@ConvertPhy
$LN3@ConvertPhy:
; Line 2013
	cmp	BYTE PTR _TotalSize$[ebp], 0
	je	SHORT $LN1@ConvertPhy
; Line 2014
	movzx	ebx, BYTE PTR [edi+eax]
$LN1@ConvertPhy:
	pop	edi
	pop	esi
; Line 2017
	mov	eax, ebx
	pop	ebx
; Line 2018
	leave
	ret	0
_ConvertPhysicalToLinearValue ENDP
_TEXT	ENDS
PUBLIC	_Value2RxVrefRegs
; Function compile flags: /Ogspy
;	COMDAT _Value2RxVrefRegs
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_RangeSel$ = 12						; size = 4
_Ctrl$ = 16						; size = 4
_Value2RxVrefRegs PROC					; COMDAT
; Line 2195
	push	ebp
	mov	ebp, esp
; Line 2198
	mov	eax, DWORD PTR _Value$[ebp]
	cmp	eax, 50					; 00000032H
	ja	SHORT $LN4@Value2RxVr
; Line 2199
	mov	ecx, DWORD PTR _RangeSel$[ebp]
	and	DWORD PTR [ecx], 0
; Line 2200
	jmp	SHORT $LN7@Value2RxVr
$LN4@Value2RxVr:
; Line 2201
	cmp	eax, 113				; 00000071H
	ja	SHORT $LN2@Value2RxVr
; Line 2202
	mov	ecx, DWORD PTR _RangeSel$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 2203
	add	eax, -50				; ffffffceH
$LN7@Value2RxVr:
	mov	ecx, DWORD PTR _Ctrl$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2208
	xor	eax, eax
; Line 2209
	pop	ebp
	ret	0
$LN2@Value2RxVr:
; Line 2206
	or	eax, -1
; Line 2209
	pop	ebp
	ret	0
_Value2RxVrefRegs ENDP
_TEXT	ENDS
PUBLIC	_RxVrefRegs2Value
; Function compile flags: /Ogspy
;	COMDAT _RxVrefRegs2Value
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_RangeSel$ = 12						; size = 4
_Ctrl$ = 16						; size = 4
_RxVrefRegs2Value PROC					; COMDAT
; Line 2228
	mov	eax, DWORD PTR _RangeSel$[esp-4]
	mov	ecx, DWORD PTR _Value$[esp-4]
	imul	eax, 50					; 00000032H
	add	eax, DWORD PTR _Ctrl$[esp-4]
	mov	DWORD PTR [ecx], eax
; Line 2229
	xor	eax, eax
; Line 2230
	ret	0
_RxVrefRegs2Value ENDP
_TEXT	ENDS
PUBLIC	_GetSetRxVref
; Function compile flags: /Ogspy
;	COMDAT _GetSetRxVref
_TEXT	SEGMENT
_Status$ = -8						; size = 4
_Ctrl$ = -4						; size = 4
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_RangeSel$ = 44						; size = 4
_Value$ = 48						; size = 4
_GetSetRxVref PROC					; COMDAT
; Line 2262
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 2268
	mov	ebx, DWORD PTR _Cmd$[ebp]
	xor	eax, eax
	and	DWORD PTR _Status$[ebp], eax
	push	esi
	push	edi
	cmp	bl, 2
	jb	$LN1@GetSetRxVr
	cmp	bl, 3
	jbe	$LN7@GetSetRxVr
	cmp	bl, 8
	je	$LN3@GetSetRxVr
	cmp	bl, 19					; 00000013H
	je	$LN7@GetSetRxVr
	mov	edi, 20511				; 0000501fH
	lea	esi, DWORD PTR [edi-1]
	cmp	bl, 24					; 00000018H
	je	SHORT $LN16@GetSetRxVr
	cmp	bl, 28					; 0000001cH
	jne	$LN1@GetSetRxVr
; Line 2277
	lea	eax, DWORD PTR _RangeSel$[ebp]
	push	eax
	push	2
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2278
	lea	eax, DWORD PTR _Ctrl$[ebp]
	push	eax
	push	2
	push	esi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2279
	mov	eax, DWORD PTR _RangeSel$[ebp]
	imul	eax, 50					; 00000032H
	add	esp, 56					; 00000038H
	add	eax, DWORD PTR _Ctrl$[ebp]
$LN16@GetSetRxVr:
; Line 2282
	lea	ecx, DWORD PTR _Ctrl$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _RangeSel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, eax
	push	ecx
	call	_Value2RxVrefRegs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Status$[ebp], eax
; Line 2283
	test	eax, eax
	jne	$LN17@GetSetRxVr
; Line 2284
	lea	eax, DWORD PTR _RangeSel$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2285
	lea	eax, DWORD PTR _Ctrl$[ebp]
	push	eax
	push	24					; 00000018H
	push	esi
$LN18@GetSetRxVr:
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
; Line 2287
	jmp	$LN17@GetSetRxVr
$LN3@GetSetRxVr:
; Line 2289
	lea	eax, DWORD PTR _Ctrl$[ebp]
	push	eax
	lea	eax, DWORD PTR _RangeSel$[ebp]
	push	eax
	mov	eax, DWORD PTR _Value$[ebp]
	push	DWORD PTR [eax]
	call	_Value2RxVrefRegs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Status$[ebp], eax
; Line 2290
	test	eax, eax
	jne	SHORT $LN17@GetSetRxVr
; Line 2291
	lea	eax, DWORD PTR _RangeSel$[ebp]
	push	eax
	push	8
	push	20511					; 0000501fH
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2292
	lea	eax, DWORD PTR _Ctrl$[ebp]
	push	eax
	push	8
	push	20510					; 0000501eH
; Line 2294
	jmp	SHORT $LN18@GetSetRxVr
$LN7@GetSetRxVr:
; Line 2272
	lea	eax, DWORD PTR _RangeSel$[ebp]
	push	eax
	push	ebx
	push	20511					; 0000501fH
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2273
	lea	eax, DWORD PTR _Ctrl$[ebp]
	push	eax
	push	ebx
	push	20510					; 0000501eH
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2274
	mov	eax, DWORD PTR _RangeSel$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	imul	eax, 50					; 00000032H
	add	esp, 56					; 00000038H
	add	eax, DWORD PTR _Ctrl$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2275
	jmp	SHORT $LN17@GetSetRxVr
$LN1@GetSetRxVr:
; Line 2297
	or	DWORD PTR _Status$[ebp], -1
$LN17@GetSetRxVr:
; Line 2301
	mov	eax, DWORD PTR _Status$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 2302
	leave
	ret	0
_GetSetRxVref ENDP
_TEXT	ENDS
PUBLIC	_GetSetWrLvlSmp
; Function compile flags: /Ogspy
;	COMDAT _GetSetWrLvlSmp
_TEXT	SEGMENT
_Nibble1$ = -12						; size = 4
_TargetStrobe$ = -8					; size = 1
_Nibble0$ = -8						; size = 4
_MaxDq$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetWrLvlSmp PROC					; COMDAT
; Line 2318
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 2328
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	add	ecx, DWORD PTR _MrcData$[ebp]
	push	ebx
; Line 2331
	mov	bl, BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR [ecx+eax*4+55470]
	push	esi
	mov	BYTE PTR _MaxDq$[ebp], al
	mov	BYTE PTR _TargetStrobe$[ebp], bl
; Line 2332
	cmp	bl, 9
	jb	SHORT $LN5@GetSetWrLv
; Line 2333
	sub	bl, 9
	mov	BYTE PTR _TargetStrobe$[ebp], bl
$LN5@GetSetWrLv:
; Line 2336
	lea	eax, DWORD PTR _Nibble0$[ebp]
	push	eax
	push	3
	mov	esi, 20523				; 0000502bH
	push	esi
	push	DWORD PTR _TargetStrobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2337
	lea	eax, DWORD PTR _Nibble1$[ebp]
	push	eax
	push	3
	add	bl, 9
	push	esi
	movzx	eax, bl
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
; Line 2339
	cmp	BYTE PTR _MaxDq$[ebp], 9
	pop	esi
	pop	ebx
	ja	SHORT $LN4@GetSetWrLv
; Line 2340
	mov	eax, DWORD PTR _Nibble1$[ebp]
	or	eax, DWORD PTR _Nibble0$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN1@GetSetWrLv
$LN4@GetSetWrLv:
; Line 2341
	cmp	BYTE PTR _Strobe$[ebp], 9
; Line 2342
	mov	eax, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR _Nibble0$[ebp]
	jb	SHORT $LN8@GetSetWrLv
; Line 2344
	mov	ecx, DWORD PTR _Nibble1$[ebp]
$LN8@GetSetWrLv:
	mov	DWORD PTR [eax], ecx
$LN1@GetSetWrLv:
; Line 2347
	xor	eax, eax
; Line 2348
	leave
	ret	0
_GetSetWrLvlSmp ENDP
_TEXT	ENDS
PUBLIC	_GetSetTxDqDelayGExt
; Function compile flags: /Ogspy
;	COMDAT _GetSetTxDqDelayGExt
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetTxDqDelayGExt PROC				; COMDAT
; Line 2374
	xor	eax, eax
; Line 2375
	ret	0
_GetSetTxDqDelayGExt ENDP
_TEXT	ENDS
PUBLIC	_GetSetWrLvlDelay
; Function compile flags: /Ogspy
;	COMDAT _GetSetWrLvlDelay
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetWrLvlDelay PROC					; COMDAT
; Line 2404
	xor	eax, eax
; Line 2405
	ret	0
_GetSetWrLvlDelay ENDP
_TEXT	ENDS
PUBLIC	_GetSetRxDqsTether
; Function compile flags: /Ogspy
;	COMDAT _GetSetRxDqsTether
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetRxDqsTether PROC					; COMDAT
; Line 2421
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 2429
	mov	ebx, DWORD PTR _Cmd$[ebp]
	push	esi
	mov	esi, DWORD PTR _Value$[ebp]
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	push	esi
	push	ebx
	push	57347					; 0000e003H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 2431
	cmp	bl, 3
; Line 2432
	je	SHORT $LN6@GetSetRxDq
; Line 2435
	cmp	bl, 24					; 00000018H
	jne	SHORT $LN5@GetSetRxDq
; Line 2436
	movzx	eax, BYTE PTR _Strobe$[ebp]
	movsx	eax, BYTE PTR [eax+edi+71475]
	add	DWORD PTR [esi], eax
$LN5@GetSetRxDq:
; Line 2445
	push	esi
	push	ebx
	push	57348					; 0000e004H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN6@GetSetRxDq:
	pop	edi
	pop	esi
; Line 2447
	xor	eax, eax
	pop	ebx
; Line 2448
	pop	ebp
	ret	0
_GetSetRxDqsTether ENDP
_TEXT	ENDS
PUBLIC	_GetSetTxEq
; Function compile flags: /Ogspy
;	COMDAT _GetSetTxEq
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetTxEq PROC					; COMDAT
; Line 2489
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 2490
	xor	ebx, ebx
	inc	ebx
	test	BYTE PTR _Cmd$[ebp], bl
	je	SHORT $LN5@GetSetTxEq
; Line 2494
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR _MrcData$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+26984]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2495
	jmp	$LN4@GetSetTxEq
$LN5@GetSetTxEq:
; Line 2496
	mov	edx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	edi
	xor	edi, edi
	cmp	eax, edi
	jbe	SHORT $LN2@GetSetTxEq
	cmp	eax, 9
	jae	SHORT $LN2@GetSetTxEq
; Line 2500
	mov	ecx, DWORD PTR _MrcData$[ebp]
	push	esi
	movzx	esi, BYTE PTR _Channel$[ebp]
	mov	eax, esi
	imul	eax, 4336				; 000010f0H
	add	eax, ecx
	mov	DWORD PTR [eax+59518], ebx
	mov	DWORD PTR [eax+59522], edi
; Line 2501
	mov	ebx, DWORD PTR [edx]
	dec	ebx
	mov	DWORD PTR [eax+59526], ebx
	mov	DWORD PTR [eax+59530], edi
; Line 2502
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+esi*4+26984], eax
	pop	esi
	jmp	SHORT $LN1@GetSetTxEq
$LN2@GetSetTxEq:
; Line 2497
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR _MrcData$[ebp]
	imul	eax, 4336				; 000010f0H
	add	eax, ecx
	mov	DWORD PTR [eax+59518], edi
	mov	DWORD PTR [eax+59522], edi
; Line 2498
	mov	DWORD PTR [eax+59526], edi
	mov	DWORD PTR [eax+59530], edi
$LN1@GetSetTxEq:
; Line 2504
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	18198					; 00004716H
	push	ecx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
	pop	edi
$LN4@GetSetTxEq:
; Line 2507
	xor	eax, eax
	pop	ebx
; Line 2508
	pop	ebp
	ret	0
_GetSetTxEq ENDP
_TEXT	ENDS
PUBLIC	_GetSetCtle
; Function compile flags: /Ogspy
;	COMDAT _GetSetCtle
_TEXT	SEGMENT
_Index$ = -16						; size = 4
_Ctle_enabled$ = -12					; size = 4
_Cap$ = -8						; size = 4
_Bias$ = -4						; size = 4
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_TempValue$ = 48					; size = 4
_Value$ = 48						; size = 4
_GetSetCtle PROC					; COMDAT
; Line 2523
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 2526
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [ecx]
	xor	edx, edx
; Line 2529
	test	BYTE PTR _Cmd$[ebp], 1
	mov	DWORD PTR _Bias$[ebp], edx
	mov	DWORD PTR _Cap$[ebp], edx
	mov	DWORD PTR _Index$[ebp], eax
	mov	DWORD PTR _Ctle_enabled$[ebp], edx
	mov	DWORD PTR _TempValue$[ebp], edx
	je	SHORT $LN28@GetSetCtle
; Line 2531
	cmp	eax, edx
; Line 2532
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	edx, BYTE PTR _Strobe$[ebp]
	jne	SHORT $LN27@GetSetCtle
	imul	eax, 9
	add	eax, edx
	mov	edx, DWORD PTR _MrcData$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+26992]
; Line 2533
	jmp	SHORT $LN39@GetSetCtle
$LN27@GetSetCtle:
; Line 2534
	imul	eax, 9
	add	eax, edx
	mov	edx, DWORD PTR _MrcData$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+27064]
$LN39@GetSetCtle:
	mov	DWORD PTR [ecx], eax
; Line 2538
	jmp	$LN1@GetSetCtle
$LN28@GetSetCtle:
	push	esi
; Line 2540
	cmp	eax, 7
	ja	SHORT $LN24@GetSetCtle
; Line 2541
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	24					; 00000018H
	mov	esi, 20481				; 00005001H
	push	esi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2542
	lea	eax, DWORD PTR _Bias$[ebp]
	push	eax
	push	3
	push	esi
	jmp	$LN37@GetSetCtle
$LN24@GetSetCtle:
; Line 2543
	cmp	eax, 8
	jne	$LN38@GetSetCtle
	push	ebx
; Line 2546
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _Strobe$[ebp], dl
$LL21@GetSetCtle:
; Line 2551
	mov	BYTE PTR _Bit$[ebp], 0
$LL35@GetSetCtle:
; Line 2553
	movzx	si, BYTE PTR _Bit$[ebp]
	mov	eax, 20501				; 00005015H
	add	si, ax
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	3
	push	esi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	edi
	call	_GetSetDdrioGroup2
; Line 2554
	mov	eax, DWORD PTR _TempValue$[ebp]
	xor	ecx, ecx
	inc	ecx
	add	esp, 28					; 0000001cH
	cmp	eax, ecx
	ja	SHORT $LN15@GetSetCtle
; Line 2555
	mov	DWORD PTR _TempValue$[ebp], 5
	jmp	SHORT $LN3@GetSetCtle
$LN15@GetSetCtle:
; Line 2556
	lea	edx, DWORD PTR [eax-2]
	cmp	edx, ecx
	ja	SHORT $LN13@GetSetCtle
; Line 2557
	mov	DWORD PTR _TempValue$[ebp], 6
	jmp	SHORT $LN3@GetSetCtle
$LN13@GetSetCtle:
; Line 2558
	lea	edx, DWORD PTR [eax-4]
	cmp	edx, ecx
	ja	SHORT $LN11@GetSetCtle
; Line 2559
	mov	DWORD PTR _TempValue$[ebp], 7
	jmp	SHORT $LN3@GetSetCtle
$LN11@GetSetCtle:
; Line 2560
	lea	edx, DWORD PTR [eax-6]
	cmp	edx, 3
	ja	SHORT $LN9@GetSetCtle
; Line 2561
	mov	DWORD PTR _TempValue$[ebp], 8
	jmp	SHORT $LN3@GetSetCtle
$LN9@GetSetCtle:
; Line 2562
	lea	edx, DWORD PTR [eax-10]
	cmp	edx, ecx
	ja	SHORT $LN7@GetSetCtle
; Line 2563
	mov	DWORD PTR _TempValue$[ebp], 9
	jmp	SHORT $LN3@GetSetCtle
$LN7@GetSetCtle:
; Line 2564
	lea	edx, DWORD PTR [eax-12]
	cmp	edx, ecx
	ja	SHORT $LN5@GetSetCtle
; Line 2565
	mov	DWORD PTR _TempValue$[ebp], 10		; 0000000aH
	jmp	SHORT $LN3@GetSetCtle
$LN5@GetSetCtle:
; Line 2566
	add	eax, -14				; fffffff2H
	cmp	eax, ecx
	ja	SHORT $LN3@GetSetCtle
; Line 2567
	mov	DWORD PTR _TempValue$[ebp], 11		; 0000000bH
$LN3@GetSetCtle:
; Line 2569
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	esi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	edi
	call	_GetSetDdrioGroup2
; Line 2570
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	3
	push	esi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	edi
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
	inc	BYTE PTR _Bit$[ebp]
	cmp	BYTE PTR _Bit$[ebp], 4
	jb	$LL35@GetSetCtle
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL21@GetSetCtle
; Line 2576
	and	DWORD PTR _Bias$[ebp], 0
; Line 2577
	and	DWORD PTR _Cap$[ebp], 0
; Line 2578
	lea	eax, DWORD PTR _Bias$[ebp]
	push	eax
	push	24					; 00000018H
	push	20481					; 00005001H
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _Ctle_enabled$[ebp], 1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	edi
	call	_GetSetDdrioGroup2
; Line 2579
	lea	eax, DWORD PTR _Ctle_enabled$[ebp]
	push	eax
	push	24					; 00000018H
	push	20484					; 00005004H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	edi
	call	_GetSetDdrioGroup2
; Line 2580
	lea	eax, DWORD PTR _Cap$[ebp]
	push	eax
	push	24					; 00000018H
	push	20482					; 00005002H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	edi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
	pop	edi
	pop	ebx
	jmp	SHORT $LN36@GetSetCtle
$LN38@GetSetCtle:
; Line 2582
	jbe	SHORT $LN36@GetSetCtle
	cmp	eax, 39					; 00000027H
	ja	SHORT $LN36@GetSetCtle
; Line 2583
	lea	ecx, DWORD PTR [eax-8]
; Line 2584
	and	eax, 3
	mov	DWORD PTR _Cap$[ebp], eax
; Line 2585
	lea	eax, DWORD PTR _Bias$[ebp]
	push	eax
	push	24					; 00000018H
	push	20481					; 00005001H
	push	DWORD PTR _Strobe$[ebp]
	shr	ecx, 2
	push	DWORD PTR _Rank$[ebp]
	mov	DWORD PTR _Bias$[ebp], ecx
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2586
	lea	eax, DWORD PTR _Cap$[ebp]
	push	eax
	push	24					; 00000018H
	push	20482					; 00005002H
$LN37@GetSetCtle:
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
$LN36@GetSetCtle:
	pop	esi
$LN1@GetSetCtle:
; Line 2591
	xor	eax, eax
; Line 2592
	leave
	ret	0
_GetSetCtle ENDP
_TEXT	ENDS
PUBLIC	_GetSetTxSwingB
; Function compile flags: /Ogspy
;	COMDAT _GetSetTxSwingB
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_TempValue$ = 44					; size = 4
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetTxSwingB PROC					; COMDAT
; Line 2608
	push	ebp
	mov	ebp, esp
; Line 2610
	test	BYTE PTR _Cmd$[ebp], 1
	jne	$LN1@GetSetTxSw
; Line 2613
	mov	edx, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, 64					; 00000040H
	jae	$LN1@GetSetTxSw
	push	ebx
; Line 2614
	mov	ebx, DWORD PTR _Channel$[ebp]
	movzx	eax, bl
	imul	eax, 4336				; 000010f0H
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	shr	ecx, 4
	add	eax, esi
	and	DWORD PTR [eax+59538], 0
	and	ecx, 3
; Line 2616
	push	ebx
	mov	DWORD PTR [eax+59534], ecx
	mov	ecx, DWORD PTR [edx]
	and	DWORD PTR [eax+59546], 0
	push	65535					; 0000ffffH
	and	ecx, 15					; 0000000fH
	push	18215					; 00004727H
	push	esi
	mov	DWORD PTR [eax+59542], ecx
	call	_MmrcExecuteTask
; Line 2621
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	20517					; 00005025H
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _TempValue$[ebp], 1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 2623
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	20516					; 00005024H
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _TempValue$[ebp], 15		; 0000000fH
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 72					; 00000048H
	pop	esi
	pop	ebx
$LN1@GetSetTxSw:
; Line 2626
	xor	eax, eax
; Line 2627
	pop	ebp
	ret	0
_GetSetTxSwingB ENDP
_TEXT	ENDS
PUBLIC	_ReadWriteDelay
EXTRN	_DisplayOrRestoreTrainingResults:PROC
EXTRN	_SignalInfoGenerated:BYTE
EXTRN	_GetSignalInfoIndex:PROC
; Function compile flags: /Ogspy
;	COMDAT _ReadWriteDelay
_TEXT	SEGMENT
tv139 = -24						; size = 4
_TrainingDelay$ = -20					; size = 2
tv389 = -16						; size = 4
tv316 = -12						; size = 4
_Rank$ = -8						; size = 1
_Strobe$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SweepAllGroups$ = 16					; size = 1
_MaxGroups$ = 19					; size = 1
_Delay$ = 20						; size = 2
_ComandType$ = 24					; size = 1
_DelayValue$ = 28					; size = 4
_OffsetValue$ = 32					; size = 4
_ReadWriteDelay PROC					; COMDAT
; Line 2653
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2661
	push	DWORD PTR _Delay$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetOffsetIndex
; Line 2662
	cmp	BYTE PTR _SweepAllGroups$[ebp], 0
	movzx	eax, ax
	pop	ecx
	pop	ecx
	mov	DWORD PTR _TrainingDelay$[ebp], eax
	je	SHORT $LN15@ReadWriteD
; Line 2663
	push	eax
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	mov	al, BYTE PTR _SignalInfoGenerated[eax]
	pop	ecx
	mov	BYTE PTR _MaxGroups$[ebp], al
; Line 2664
	jmp	SHORT $LN14@ReadWriteD
$LN15@ReadWriteD:
; Line 2665
	mov	BYTE PTR _MaxGroups$[ebp], 1
$LN14@ReadWriteD:
; Line 2668
	and	DWORD PTR tv389[ebp], 0
	push	ebx
	push	esi
	mov	BYTE PTR _Rank$[ebp], 0
	push	edi
$LL28@ReadWriteD:
; Line 2669
	xor	bl, bl
; Line 2670
	cmp	BYTE PTR _MaxGroups$[ebp], bl
	jbe	$LN12@ReadWriteD
	movzx	eax, BYTE PTR _MaxGroups$[ebp]
	xor	edi, edi
	mov	DWORD PTR tv139[ebp], eax
$LL26@ReadWriteD:
; Line 2671
	and	DWORD PTR tv316[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL27@ReadWriteD:
; Line 2672
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN6@ReadWriteD
; Line 2675
	mov	eax, DWORD PTR tv389[ebp]
	mov	ecx, DWORD PTR _DelayValue$[ebp]
	add	eax, edi
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv316[ebp]
	lea	esi, DWORD PTR [ecx+eax*4]
	movzx	ax, bl
	add	ax, WORD PTR _TrainingDelay$[ebp]
	push	esi
	push	DWORD PTR _ComandType$[ebp]
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 2676
	mov	eax, DWORD PTR _OffsetValue$[ebp]
	add	esp, 28					; 0000001cH
	add	DWORD PTR [esi], eax
$LN6@ReadWriteD:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv316[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL27@ReadWriteD
; Line 2678
	movzx	ax, bl
	add	ax, WORD PTR _TrainingDelay$[ebp]
	movzx	eax, ax
	push	eax
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	add	bl, BYTE PTR _SignalInfoGenerated[eax+1]
	add	edi, 4
	dec	DWORD PTR tv139[ebp]
	pop	ecx
	jne	$LL26@ReadWriteD
$LN12@ReadWriteD:
; Line 2668
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv389[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL28@ReadWriteD
; Line 2682
	xor	bl, bl
; Line 2683
	cmp	BYTE PTR _MaxGroups$[ebp], bl
	jbe	SHORT $LN1@ReadWriteD
; Line 2682
	movzx	edi, BYTE PTR _MaxGroups$[ebp]
$LL3@ReadWriteD:
; Line 2684
	movzx	si, bl
	add	si, WORD PTR _TrainingDelay$[ebp]
	push	0
	push	esi
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_DisplayOrRestoreTrainingResults
; Line 2685
	push	esi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	add	bl, BYTE PTR _SignalInfoGenerated[eax+1]
	add	esp, 20					; 00000014H
	dec	edi
	jne	SHORT $LL3@ReadWriteD
$LN1@ReadWriteD:
	pop	edi
	pop	esi
; Line 2688
	xor	eax, eax
	pop	ebx
; Line 2689
	leave
	ret	0
_ReadWriteDelay ENDP
_TEXT	ENDS
PUBLIC	_OverrideDelay
; Function compile flags: /Ogspy
;	COMDAT _OverrideDelay
_TEXT	SEGMENT
_DelayValue$ = -2304					; size = 2304
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SweepAllGroups$ = 16					; size = 1
_Delay$ = 20						; size = 2
_OffsetValue$ = 24					; size = 4
_OverrideDelay PROC					; COMDAT
; Line 2710
	push	ebp
	mov	ebp, esp
	sub	esp, 2304				; 00000900H
	push	ebx
	push	esi
; Line 2714
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55506]
	push	edi
; Line 2718
	push	DWORD PTR _OffsetValue$[ebp]
	lea	eax, DWORD PTR _DelayValue$[ebp]
	push	eax
	push	19					; 00000013H
	push	DWORD PTR _Delay$[ebp]
	mov	BYTE PTR [esi+55506], 0
	push	DWORD PTR _SweepAllGroups$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadWriteDelay
; Line 2720
	push	0
	lea	eax, DWORD PTR _DelayValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _Delay$[ebp]
	push	DWORD PTR _SweepAllGroups$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadWriteDelay
; Line 2721
	push	DWORD PTR _Delay$[ebp]
	push	esi
	call	_GetOffsetIndex
	add	esp, 64					; 00000040H
	push	57359					; 0000e00fH
	push	esi
	mov	di, ax
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
	cmp	di, ax
	jne	SHORT $LN1@OverrideDe
; Line 2722
	push	0
	lea	eax, DWORD PTR _DelayValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12308					; 00003014H
	push	DWORD PTR _SweepAllGroups$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadWriteDelay
	add	esp, 28					; 0000001cH
$LN1@OverrideDe:
	pop	edi
; Line 2724
	mov	BYTE PTR [esi+55506], bl
	pop	esi
; Line 2725
	xor	eax, eax
	pop	ebx
; Line 2726
	leave
	ret	0
_OverrideDelay ENDP
_TEXT	ENDS
PUBLIC	_DisableChannel
EXTRN	_MspDelay:PROC
; Function compile flags: /Ogspy
;	COMDAT _DisableChannel
_TEXT	SEGMENT
_Register$ = -52					; size = 24
_Dpmc0$ = -28						; size = 8
_DramSrCmd$ = -20					; size = 8
_Dsch$ = -12						; size = 8
tv332 = -4						; size = 4
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_DisableChannel PROC					; COMDAT
; Line 2780
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
; Line 2787
	mov	eax, DWORD PTR _MrcData$[ebp]
	or	DWORD PTR _Register$[ebp+8], -1
	push	ebx
	xor	ebx, ebx
	push	esi
	add	eax, 28608				; 00006fc0H
	push	edi
	mov	DWORD PTR _Register$[ebp+12], ebx
; Line 2788
	mov	BYTE PTR _Register$[ebp+16], bl
; Line 2790
	mov	BYTE PTR _Channel$[ebp], bl
	mov	DWORD PTR tv332[ebp], eax
$LL19@DisableCha:
; Line 2791
	mov	eax, DWORD PTR tv332[ebp]
; Line 2793
	sub	esp, 24					; 00000018H
	cmp	BYTE PTR [eax], 1
	push	6
	pop	ecx
	mov	edi, esp
	lea	esi, DWORD PTR _Register$[ebp]
	push	ebx
	jne	SHORT $LN9@DisableCha
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR _Register$[ebp], 400		; 00000190H
	push	1
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
; Line 2795
	push	15					; 0000000fH
	push	ebx
	or	eax, 1
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 2796
	jmp	$LN11@DisableCha
$LN9@DisableCha:
; Line 2799
	push	ebx
	mov	DWORD PTR _Register$[ebp], ebx
	push	ebx
	rep movsd
	call	_MemRegRead
; Line 2801
	add	esp, 12					; 0000000cH
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 148		; 00000094H
	push	1
	mov	DWORD PTR _Dsch$[ebp], eax
	rep movsd
	call	_MemRegRead
; Line 2803
	add	esp, 12					; 0000000cH
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 376		; 00000178H
	push	1
	mov	DWORD PTR _DramSrCmd$[ebp], eax
	rep movsd
	call	_MemRegRead
; Line 2807
	or	DWORD PTR _Dsch$[ebp], 8
	add	esp, 36					; 00000024H
; Line 2809
	push	15					; 0000000fH
	push	ebx
	push	DWORD PTR _Dsch$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	mov	DWORD PTR _Register$[ebp], ebx
	push	ebx
	mov	DWORD PTR _Dpmc0$[ebp], eax
	mov	DWORD PTR _Dsch$[ebp+4], ebx
	rep movsd
	call	_MemRegWrite
; Line 2810
	mov	eax, DWORD PTR _DramSrCmd$[ebp]
	add	esp, 48					; 00000030H
; Line 2812
	push	15					; 0000000fH
	xor	ecx, ecx
	push	ecx
	or	eax, 1
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 148		; 00000094H
	push	1
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
$LL8@DisableCha:
; Line 2816
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 148		; 00000094H
	push	1
	rep movsd
	call	_MemRegRead
; Line 2817
	push	100					; 00000064H
	push	2
	mov	DWORD PTR _DramSrCmd$[ebp], eax
	call	_MspDelay
; Line 2818
	mov	eax, DWORD PTR _DramSrCmd$[ebp]
	and	eax, 1
	xor	ecx, ecx
	add	esp, 44					; 0000002cH
	or	eax, ecx
	je	SHORT $LN5@DisableCha
	mov	eax, DWORD PTR _MrcData$[ebp]
	cmp	WORD PTR [eax+55490], 8
	jne	SHORT $LL8@DisableCha
$LN5@DisableCha:
; Line 2820
	mov	eax, DWORD PTR _Dsch$[ebp]
; Line 2822
	push	15					; 0000000fH
	push	DWORD PTR _Dsch$[ebp+4]
	and	eax, -9					; fffffff7H
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], ebx
	push	ebx
	rep movsd
	call	_MemRegWrite
; Line 2826
	mov	eax, DWORD PTR _Dpmc0$[ebp]
	add	esp, 48					; 00000030H
; Line 2828
	push	15					; 0000000fH
	xor	ecx, ecx
	push	ecx
	and	eax, -419430401				; e6ffffffH
	or	eax, 100663296				; 06000000H
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 376		; 00000178H
	push	1
	rep movsd
	call	_MemRegWrite
; Line 2832
	mov	eax, DWORD PTR _DramSrCmd$[ebp]
	add	esp, 48					; 00000030H
; Line 2834
	push	15					; 0000000fH
	push	ebx
	or	eax, 4
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 148		; 00000094H
	push	1
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
$LL4@DisableCha:
; Line 2838
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 148		; 00000094H
	push	1
	rep movsd
	call	_MemRegRead
; Line 2839
	push	100					; 00000064H
	push	2
	mov	esi, eax
	mov	DWORD PTR _DramSrCmd$[ebp+4], ebx
	call	_MspDelay
; Line 2840
	and	esi, 4
	mov	eax, esi
	xor	ecx, ecx
	add	esp, 44					; 0000002cH
	or	eax, ecx
	je	SHORT $LN11@DisableCha
	mov	eax, DWORD PTR _MrcData$[ebp]
	cmp	WORD PTR [eax+55490], 8
	jne	SHORT $LL4@DisableCha
$LN11@DisableCha:
; Line 2790
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv332[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL19@DisableCha
; Line 2844
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_DisableChannel ENDP
_TEXT	ENDS
PUBLIC	_GetMin2xPIPerRank
EXTRN	_GranularityGenerated:BYTE
EXTRN	_ADdllGenerated:WORD
EXTRN	_NumberOfDelayElementsPerAlgoGenerated:BYTE
EXTRN	_NumberOfElementsPerAlgoGenerated:BYTE
; Function compile flags: /Ogspy
;	COMDAT _GetMin2xPIPerRank
_TEXT	SEGMENT
_Value32$ = -12						; size = 4
_LinearDelay$ = -8					; size = 4
_Element$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_MaxElements$ = 20					; size = 1
_Name$ = 24						; size = 4
_DelayIndex$ = 27					; size = 1
_Delay$ = 28						; size = 2
_Minimum$ = 32						; size = 4
_GlobalMinimum$ = 36					; size = 4
_GetMin2xPIPerRank PROC					; COMDAT
; Line 2868
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
; Line 2875
	mov	esi, DWORD PTR _Minimum$[ebp]
	or	DWORD PTR [esi], -1
	push	edi
; Line 2878
	push	DWORD PTR _Delay$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	push	edi
	xor	bl, bl
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
; Line 2880
	mov	ecx, 4096				; 00001000H
	sub	ax, cx
; Line 2881
	movzx	cx, BYTE PTR _NumberOfElementsPerAlgoGenerated
	movzx	eax, ax
	imul	cx, ax
	movzx	eax, cx
	mov	DWORD PTR _Delay$[ebp], eax
; Line 2883
	mov	eax, DWORD PTR _Name$[ebp]
	test	eax, eax
	je	SHORT $LN34@GetMin2xPI
	mov	cl, BYTE PTR [eax]
$LL21@GetMin2xPI:
	test	cl, cl
	je	SHORT $LN34@GetMin2xPI
; Line 2884
	movzx	edx, bl
	cmp	BYTE PTR [edx+eax], 0
	je	SHORT $LN34@GetMin2xPI
; Line 2887
	inc	bl
; Line 2883
	jmp	SHORT $LL21@GetMin2xPI
$LN34@GetMin2xPI:
; Line 2900
	cmp	BYTE PTR _MaxElements$[ebp], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	$LN12@GetMin2xPI
$LL14@GetMin2xPI:
; Line 2905
	xor	eax, eax
	mov	DWORD PTR _LinearDelay$[ebp], eax
; Line 2906
	mov	BYTE PTR _DelayIndex$[ebp], al
	cmp	BYTE PTR _NumberOfDelayElementsPerAlgoGenerated, al
	jbe	$LN9@GetMin2xPI
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	esi, DWORD PTR [edi+eax*2+55494]
$LL33@GetMin2xPI:
; Line 2907
	push	DWORD PTR _Channel$[ebp]
	movzx	ebx, BYTE PTR _DelayIndex$[ebp]
	push	edi
	call	_GetHalfClk
	movzx	edx, WORD PTR [esi]
	pop	ecx
	pop	ecx
	movzx	ecx, BYTE PTR [edi+65338]
	movzx	ecx, BYTE PTR _ADdllGenerated[ecx]
	imul	ecx, 5
	add	ecx, edx
	imul	ecx, 3
	add	ecx, ebx
	cmp	WORD PTR _GranularityGenerated[ecx*2], ax
	ja	SHORT $LN10@GetMin2xPI
; Line 2910
	lea	eax, DWORD PTR _Value32$[ebp]
	push	eax
	movzx	ax, BYTE PTR _DelayIndex$[ebp]
	add	ax, WORD PTR _Delay$[ebp]
	push	3
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN10@GetMin2xPI
; Line 2911
	movzx	eax, BYTE PTR [edi+65338]
	movzx	eax, BYTE PTR _ADdllGenerated[eax]
	movzx	ecx, WORD PTR [esi]
	imul	eax, 5
	add	eax, ecx
	imul	eax, 3
	add	eax, ebx
	movzx	eax, WORD PTR _GranularityGenerated[eax*2]
	imul	eax, DWORD PTR _Value32$[ebp]
	add	DWORD PTR _LinearDelay$[ebp], eax
$LN10@GetMin2xPI:
	inc	BYTE PTR _DelayIndex$[ebp]
	mov	al, BYTE PTR _DelayIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	jb	$LL33@GetMin2xPI
	mov	esi, DWORD PTR _Minimum$[ebp]
	mov	eax, DWORD PTR _LinearDelay$[ebp]
$LN9@GetMin2xPI:
; Line 2915
	cmp	eax, DWORD PTR [esi]
	jae	SHORT $LN13@GetMin2xPI
; Line 2916
	mov	DWORD PTR [esi], eax
$LN13@GetMin2xPI:
; Line 2900
	inc	BYTE PTR _Element$[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR _MaxElements$[ebp]
	jb	$LL14@GetMin2xPI
$LN12@GetMin2xPI:
; Line 2925
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _GlobalMinimum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN2@GetMin2xPI
; Line 2926
	mov	DWORD PTR [ecx], eax
$LN2@GetMin2xPI:
; Line 2932
	xor	eax, eax
; Line 2933
	leave
	ret	0
_GetMin2xPIPerRank ENDP
_TEXT	ENDS
PUBLIC	_WriteDimmVref
; Function compile flags: /Ogspy
;	COMDAT _WriteDimmVref
_TEXT	SEGMENT
_Length$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_vref$ = 16						; size = 4
_txVref$ = 20						; size = 4
_Override$ = 20						; size = 1
_WriteDimmVref PROC					; COMDAT
; Line 3060
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3070
	cmp	BYTE PTR _Override$[ebp], 1
	mov	BYTE PTR _Length$[ebp], 1
	jne	SHORT $LN3@WriteDimmV
; Line 3071
	mov	eax, DWORD PTR _vref$[ebp]
	mov	DWORD PTR _txVref$[ebp], eax
; Line 3072
	jmp	SHORT $LN2@WriteDimmV
$LN3@WriteDimmV:
; Line 3073
	mov	DWORD PTR _txVref$[ebp], 64		; 00000040H
$LN2@WriteDimmV:
; Line 3076
	movzx	ecx, BYTE PTR _Channel$[ebp]
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	cl, BYTE PTR [ecx+eax+65388]
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN1@WriteDimmV
; Line 3084
	movzx	eax, WORD PTR [eax+65350]
	lea	edx, DWORD PTR _txVref$[ebp]
	push	edx
	lea	edx, DWORD PTR _Length$[ebp]
	push	edx
	push	0
	push	1
	push	ecx
	push	eax
	call	_MrcSmbusExec
	add	esp, 24					; 00000018H
$LN1@WriteDimmV:
; Line 3089
	push	100					; 00000064H
	push	1
	call	_MspDelay
	pop	ecx
	pop	ecx
; Line 3090
	leave
	ret	0
_WriteDimmVref ENDP
_TEXT	ENDS
PUBLIC	_WriteCmdVref
; Function compile flags: /Ogspy
;	COMDAT _WriteCmdVref
_TEXT	SEGMENT
_Length$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_vref$ = 16						; size = 4
_WriteCmdVref PROC					; COMDAT
; Line 3098
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3107
	movzx	ecx, BYTE PTR _Channel$[ebp]
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	cl, BYTE PTR [ecx+eax+65390]
	mov	BYTE PTR _Length$[ebp], 1
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN1@WriteCmdVr
; Line 3115
	movzx	eax, WORD PTR [eax+65350]
	lea	edx, DWORD PTR _vref$[ebp]
	push	edx
	lea	edx, DWORD PTR _Length$[ebp]
	push	edx
	push	0
	push	1
	push	ecx
	push	eax
	call	_MrcSmbusExec
	add	esp, 24					; 00000018H
$LN1@WriteCmdVr:
; Line 3120
	push	100					; 00000064H
	push	1
	call	_MspDelay
	pop	ecx
	pop	ecx
; Line 3121
	leave
	ret	0
_WriteCmdVref ENDP
_TEXT	ENDS
PUBLIC	_MirrorAddrBits
; Function compile flags: /Ogspy
;	COMDAT _MirrorAddrBits
_TEXT	SEGMENT
_data$ = 8						; size = 4
_DramType$ = 12						; size = 1
_MirrorAddrBits PROC					; COMDAT
; Line 3296
	cmp	BYTE PTR _DramType$[esp-4], 3
; Line 3297
	mov	ecx, DWORD PTR _data$[esp-4]
	mov	eax, ecx
	ja	SHORT $LN3@MirrorAddr
	and	eax, -505				; fffffe07H
; Line 3298
	jmp	SHORT $LN2@MirrorAddr
$LN3@MirrorAddr:
; Line 3299
	and	eax, -10745				; ffffd607H
$LN2@MirrorAddr:
	push	esi
	push	edi
; Line 3304
	mov	edx, 168				; 000000a8H
	mov	esi, ecx
	shr	esi, 1
	mov	edi, ecx
	and	edi, edx
	and	esi, edx
	add	edi, edi
	or	esi, edi
	or	eax, esi
; Line 3309
	cmp	BYTE PTR _DramType$[esp+4], 7
	jne	SHORT $LN1@MirrorAddr
; Line 3310
	mov	esi, ecx
	mov	edx, 2048				; 00000800H
	shr	esi, 2
	and	ecx, edx
	and	esi, edx
	shl	ecx, 2
	or	esi, ecx
	or	eax, esi
$LN1@MirrorAddr:
	pop	edi
	pop	esi
; Line 3314
	ret	0
_MirrorAddrBits ENDP
_TEXT	ENDS
PUBLIC	_MirrorBankBits
; Function compile flags: /Ogspy
;	COMDAT _MirrorBankBits
_TEXT	SEGMENT
_bank$ = 8						; size = 1
_MirrorBankBits PROC					; COMDAT
; Line 3335
	mov	cl, BYTE PTR _bank$[esp-4]
	mov	al, cl
	shr	al, 1
	and	cl, 1
	and	al, 1
	add	cl, cl
	or	al, cl
; Line 3336
	ret	0
_MirrorBankBits ENDP
_TEXT	ENDS
PUBLIC	_HandleAddressMirroring
; Function compile flags: /Ogspy
;	COMDAT _HandleAddressMirroring
_TEXT	SEGMENT
_Data$ = 8						; size = 4
_AddressMirroringSpdByte$ = 12				; size = 1
_DramDeviceSpdByte$ = 16				; size = 1
_DramType$ = 20						; size = 1
_DimmType$ = 24						; size = 1
_Side$ = 28						; size = 1
_HandleAddressMirroring PROC				; COMDAT
; Line 3347
	push	ebp
	mov	ebp, esp
; Line 3353
	mov	eax, DWORD PTR _Data$[ebp]
; Line 3355
	mov	ecx, DWORD PTR _DramType$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	esi, edi
	cmp	cl, 3
	ja	SHORT $LN10@HandleAddr
; Line 3356
	mov	eax, edi
	shr	eax, 22					; 00000016H
; Line 3357
	jmp	SHORT $LN21@HandleAddr
$LN10@HandleAddr:
; Line 3358
	mov	eax, esi
	shr	eax, 26					; 0000001aH
$LN21@HandleAddr:
; Line 3361
	xor	ebx, ebx
	inc	ebx
	and	al, 3
	test	BYTE PTR _AddressMirroringSpdByte$[ebp], bl
	je	$LN19@HandleAddr
; Line 3362
	test	al, bl
	je	$LN19@HandleAddr
; Line 3364
	push	ecx
	cmp	cl, 3
	ja	SHORT $LN6@HandleAddr
	mov	eax, edi
	shr	eax, 6
	and	eax, 65535				; 0000ffffH
	push	eax
	call	_MirrorAddrBits
	movzx	eax, ax
	shl	eax, 6
	and	edi, -4194241				; ffc0003fH
	or	edi, eax
; Line 3365
	mov	eax, edi
	shr	eax, 3
	and	al, 7
	pop	ecx
	pop	ecx
	movzx	ecx, al
	and	al, bl
	shr	ecx, 1
	add	al, al
	and	ecx, ebx
	movzx	eax, al
	or	ecx, eax
	shl	ecx, 3
	xor	ecx, edi
	and	ecx, 56					; 00000038H
	xor	edi, ecx
; Line 3366
	jmp	SHORT $LN19@HandleAddr
$LN6@HandleAddr:
; Line 3367
	mov	eax, esi
	shr	eax, 8
	and	eax, 262143				; 0003ffffH
	push	eax
	call	_MirrorAddrBits
	shl	eax, 8
	xor	eax, esi
	and	eax, 67108608				; 03ffff00H
	xor	esi, eax
; Line 3368
	mov	eax, esi
	shr	eax, 4
	and	al, 3
	pop	ecx
	pop	ecx
	movzx	ecx, al
	and	al, bl
	shr	ecx, 1
	add	al, al
	and	ecx, ebx
	movzx	eax, al
	or	ecx, eax
; Line 3372
	mov	al, BYTE PTR _DramDeviceSpdByte$[ebp]
	shl	ecx, 4
	xor	ecx, esi
	and	ecx, 48					; 00000030H
	and	al, 7
	xor	esi, ecx
	cmp	al, 2
	je	SHORT $LN19@HandleAddr
; Line 3373
	mov	eax, esi
	shr	eax, 6
	and	al, 3
	movzx	ecx, al
	and	al, bl
	shr	ecx, 1
	add	al, al
	and	ecx, ebx
	movzx	eax, al
	or	ecx, eax
	shl	ecx, 6
	xor	ecx, esi
	and	ecx, 192				; 000000c0H
	xor	esi, ecx
$LN19@HandleAddr:
; Line 3381
	cmp	BYTE PTR _DramType$[ebp], 7
	jne	SHORT $LN3@HandleAddr
	cmp	BYTE PTR _DimmType$[ebp], bl
	jne	SHORT $LN2@HandleAddr
	cmp	BYTE PTR _Side$[ebp], bl
	jne	SHORT $LN2@HandleAddr
; Line 3383
	mov	eax, esi
	shr	eax, 8
	not	eax
; Line 3384
	shl	eax, 8
	xor	eax, esi
	and	eax, 36435968				; 022bf800H
	xor	esi, eax
; Line 3386
	mov	eax, esi
	shr	eax, 4
	not	eax
; Line 3387
	shl	eax, 4
	xor	eax, esi
	and	eax, 48					; 00000030H
	xor	esi, eax
; Line 3389
	mov	eax, esi
	shr	eax, 6
	not	eax
; Line 3390
	shl	eax, 6
	xor	eax, esi
	and	eax, 192				; 000000c0H
	xor	esi, eax
$LN3@HandleAddr:
; Line 3393
	cmp	BYTE PTR _DramType$[ebp], 3
	ja	SHORT $LN2@HandleAddr
; Line 3394
	mov	eax, DWORD PTR _Data$[ebp]
	mov	DWORD PTR [eax], edi
; Line 3395
	jmp	SHORT $LN1@HandleAddr
$LN2@HandleAddr:
; Line 3396
	mov	eax, DWORD PTR _Data$[ebp]
	mov	DWORD PTR [eax], esi
$LN1@HandleAddr:
	pop	edi
	pop	esi
	pop	ebx
; Line 3398
	pop	ebp
	ret	0
_HandleAddressMirroring ENDP
_TEXT	ENDS
PUBLIC	_ConvertMrsDataToMirrored
; Function compile flags: /Ogspy
;	COMDAT _ConvertMrsDataToMirrored
_TEXT	SEGMENT
_DramType$ = -12					; size = 1
_DimmType$ = -8						; size = 1
_SpdAddMap$ = -4					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SpdDeviceOrg$ = 16					; size = 1
_Rank$ = 16						; size = 1
_MiscCommand$ = 20					; size = 4
_Side$ = 24						; size = 1
_ConvertMrsDataToMirrored PROC				; COMDAT
; Line 3465
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 3473
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LN5@ConvertMrs
; Line 3474
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 44		; 0000002cH
; Line 3475
	call	_MrcDeadLoop
; Line 3500
	leave
	ret	0
$LN5@ConvertMrs:
; Line 3482
	cmp	BYTE PTR _Rank$[ebp], 1
; Line 3487
	movzx	eax, BYTE PTR _Channel$[ebp]
	seta	dl
	push	ebx
; Line 3488
	movzx	edx, dl
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	mov	BYTE PTR [esi+55508], 0
	mov	cl, BYTE PTR [eax+esi+31272]
	add	edx, esi
	mov	dl, BYTE PTR [edx+eax*2+55414]
	mov	BYTE PTR _DramType$[ebp], cl
; Line 3489
	cmp	cl, 3
; Line 3490
	movzx	ecx, BYTE PTR _Rank$[ebp]
	mov	BYTE PTR _DimmType$[ebp], dl
	ja	SHORT $LN2@ConvertMrs
	shr	ecx, 1
	lea	eax, DWORD PTR [ecx+eax*2]
	imul	eax, 514				; 00000202H
	add	eax, esi
	mov	cl, BYTE PTR [eax+28694]
; Line 3491
	mov	al, BYTE PTR [eax+28638]
; Line 3492
	jmp	SHORT $LN8@ConvertMrs
$LN2@ConvertMrs:
; Line 3493
	shr	ecx, 1
	lea	eax, DWORD PTR [ecx+eax*2]
	imul	eax, 514				; 00000202H
	add	eax, esi
	mov	cl, BYTE PTR [eax+28762]
; Line 3494
	mov	al, BYTE PTR [eax+28643]
$LN8@ConvertMrs:
; Line 3497
	push	DWORD PTR _Side$[ebp]
	mov	BYTE PTR _SpdDeviceOrg$[ebp], al
	push	DWORD PTR _DimmType$[ebp]
	mov	BYTE PTR _SpdAddMap$[ebp], cl
	push	DWORD PTR _DramType$[ebp]
	push	DWORD PTR _SpdDeviceOrg$[ebp]
	push	DWORD PTR _SpdAddMap$[ebp]
	push	DWORD PTR _MiscCommand$[ebp]
	call	_HandleAddressMirroring
	add	esp, 24					; 00000018H
; Line 3499
	mov	BYTE PTR [esi+55508], bl
	pop	esi
	pop	ebx
; Line 3500
	leave
	ret	0
_ConvertMrsDataToMirrored ENDP
_TEXT	ENDS
PUBLIC	_ReadMrsCommand
EXTRN	_MrsCommandIndex:BYTE
; Function compile flags: /Ogspy
;	COMDAT _ReadMrsCommand
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_MiscCommand$ = 20					; size = 4
_Index$ = 20						; size = 1
_ReadMrsCommand PROC					; COMDAT
; Line 3509
	push	ebp
	mov	ebp, esp
; Line 3516
	movzx	eax, BYTE PTR _Rank$[ebp]
	movzx	ecx, BYTE PTR _Index$[ebp]
	imul	eax, 35					; 00000023H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Channel$[ebp]
	push	ebx
	imul	ecx, 542				; 0000021eH
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	mov	BYTE PTR [esi+55508], 0
	movzx	eax, WORD PTR _MrsCommandIndex[eax*2]
	add	eax, ecx
	mov	eax, DWORD PTR [esi+eax*8+55526]
; Line 3517
	push	0
	mov	DWORD PTR _MiscCommand$[ebp], eax
	lea	eax, DWORD PTR _MiscCommand$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ConvertMrsDataToMirrored
; Line 3520
	mov	eax, DWORD PTR _MiscCommand$[ebp]
	add	esp, 20					; 00000014H
	mov	BYTE PTR [esi+55508], bl
	pop	esi
	pop	ebx
; Line 3521
	pop	ebp
	ret	0
_ReadMrsCommand ENDP
_TEXT	ENDS
PUBLIC	_DisablePatrolDemandScrubbing
; Function compile flags: /Ogspy
;	COMDAT _DisablePatrolDemandScrubbing
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DisablePatrolDemandScrubbing PROC			; COMDAT
; Line 3529
	movzx	eax, BYTE PTR _Channel$[esp-4]
; Line 3531
	push	DWORD PTR _Channel$[esp-4]
	imul	eax, 4336				; 000010f0H
	mov	ecx, DWORD PTR _MrcData$[esp]
	add	eax, ecx
	xor	edx, edx
	push	65535					; 0000ffffH
	push	11754					; 00002deaH
	push	ecx
	mov	DWORD PTR [eax+57998], edx
	mov	DWORD PTR [eax+58002], edx
	mov	DWORD PTR [eax+57982], edx
	mov	DWORD PTR [eax+57986], edx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 3532
	ret	0
_DisablePatrolDemandScrubbing ENDP
_TEXT	ENDS
PUBLIC	_RestorePatrolDemandScrubbing
; Function compile flags: /Ogspy
;	COMDAT _RestorePatrolDemandScrubbing
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_RestorePatrolDemandScrubbing PROC			; COMDAT
; Line 3541
	movzx	eax, BYTE PTR _Channel$[esp-4]
	push	esi
	imul	eax, 4336				; 000010f0H
	mov	esi, DWORD PTR _MrcData$[esp]
	xor	edx, edx
	cmp	BYTE PTR [esi+65466], dl
	je	SHORT $LN2@RestorePat
	add	eax, esi
	xor	ecx, ecx
	inc	ecx
	mov	DWORD PTR [eax+57998], ecx
	mov	DWORD PTR [eax+58002], edx
; Line 3542
	mov	DWORD PTR [eax+57982], ecx
	mov	DWORD PTR [eax+57986], edx
; Line 3543
	jmp	SHORT $LN1@RestorePat
$LN2@RestorePat:
; Line 3544
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR [ecx+57998], edx
	mov	DWORD PTR [ecx+58002], edx
; Line 3545
	movzx	eax, BYTE PTR [esi+65472]
	cdq
	mov	DWORD PTR [ecx+57982], eax
	mov	DWORD PTR [ecx+57986], edx
$LN1@RestorePat:
; Line 3547
	push	DWORD PTR _Channel$[esp]
	push	65535					; 0000ffffH
	push	11754					; 00002deaH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
	pop	esi
; Line 3548
	ret	0
_RestorePatrolDemandScrubbing ENDP
_TEXT	ENDS
PUBLIC	_UpdateSelfRefreshDelay
; Function compile flags: /Ogspy
;	COMDAT _UpdateSelfRefreshDelay
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_NewDelay$ = 16						; size = 8
_UpdateSelfRefreshDelay PROC				; COMDAT
; Line 3556
	push	ebp
	mov	ebp, esp
; Line 3557
	movzx	eax, BYTE PTR _Channel$[ebp]
; Line 3558
	push	DWORD PTR _Channel$[ebp]
	imul	eax, 4336				; 000010f0H
	mov	ecx, DWORD PTR _MrcData$[ebp]
	mov	edx, DWORD PTR _NewDelay$[ebp]
	push	65535					; 0000ffffH
	mov	DWORD PTR [eax+ecx+56446], edx
	mov	edx, DWORD PTR _NewDelay$[ebp+4]
	push	7305					; 00001c89H
	push	ecx
	mov	DWORD PTR [eax+ecx+56450], edx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 3559
	pop	ebp
	ret	0
_UpdateSelfRefreshDelay ENDP
_TEXT	ENDS
PUBLIC	_GetAddress
; Function compile flags: /Ogspy
;	COMDAT _GetAddress
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_GetAddress PROC					; COMDAT
; Line 3568
	movzx	eax, BYTE PTR _Rank$[esp-4]
	shl	eax, 28					; 0000001cH
; Line 3569
	ret	0
_GetAddress ENDP
_TEXT	ENDS
PUBLIC	_GetAddressBit
; Function compile flags: /Ogspy
;	COMDAT _GetAddressBit
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_GetAddressBit PROC					; COMDAT
; Line 3579
	push	28					; 0000001cH
	pop	eax
; Line 3580
	ret	0
_GetAddressBit ENDP
_TEXT	ENDS
PUBLIC	_CpgcOptionsSetup
; Function compile flags: /Ogspy
;	COMDAT _CpgcOptionsSetup
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_CpgcOptionsSetup PROC					; COMDAT
; Line 3588
	mov	eax, DWORD PTR _MrcData$[esp-4]
; Line 3590
	movzx	ecx, BYTE PTR _Channel$[esp-4]
	mov	BYTE PTR [eax+65579], 1
	mov	BYTE PTR [eax+65580], 28		; 0000001cH
	mov	cl, BYTE PTR [ecx+eax+31272]
	cmp	cl, 3
	ja	SHORT $LN3@CpgcOption
; Line 3591
	mov	BYTE PTR [eax+65581], 13		; 0000000dH
; Line 3595
	ret	0
$LN3@CpgcOption:
; Line 3592
	cmp	cl, 7
	jne	SHORT $LN1@CpgcOption
; Line 3593
	mov	BYTE PTR [eax+65581], 6
$LN1@CpgcOption:
; Line 3595
	ret	0
_CpgcOptionsSetup ENDP
_TEXT	ENDS
PUBLIC	_CheckpointSet
; Function compile flags: /Ogspy
;	COMDAT _CheckpointSet
_TEXT	SEGMENT
_Content$ = 8						; size = 2
_CheckpointSet PROC					; COMDAT
; Line 3611
	movzx	eax, WORD PTR _Content$[esp-4]
	mov	edx, 128				; 00000080H
	out	dx, eax
; Line 3612
	ret	0
_CheckpointSet ENDP
_TEXT	ENDS
PUBLIC	_DumpDdrioRegisters
; Function compile flags: /Ogspy
;	COMDAT _DumpDdrioRegisters
_TEXT	SEGMENT
_Dq$ = -28						; size = 1
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DumpDdrioRegisters PROC				; COMDAT
; Line 3619
	sub	esp, 28					; 0000001cH
; Line 3625
	or	DWORD PTR _Register$[esp+36], -1
	and	DWORD PTR _Register$[esp+40], 0
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 3626
	mov	BYTE PTR _Register$[esp+60], 0
; Line 3632
	mov	BYTE PTR _Dq$[esp+44], 0
$LL52@DumpDdrioR:
; Line 3633
	xor	ebp, ebp
$LL49@DumpDdrioR:
; Line 3634
	cmp	bp, 48					; 00000030H
	jne	SHORT $LN46@DumpDdrioR
	mov	ebp, 256				; 00000100H
$LN46@DumpDdrioR:
; Line 3635
	mov	eax, 324				; 00000144H
	cmp	bp, ax
	jne	SHORT $LN45@DumpDdrioR
	lea	ebp, DWORD PTR [eax+60]
$LN45@DumpDdrioR:
; Line 3636
	mov	eax, 556				; 0000022cH
	cmp	bp, ax
	jne	SHORT $LN44@DumpDdrioR
	lea	ebp, DWORD PTR [eax+84]
$LN44@DumpDdrioR:
; Line 3637
	mov	eax, 648				; 00000288H
	cmp	bp, ax
	jne	SHORT $LN43@DumpDdrioR
	lea	ebp, DWORD PTR [eax+40]
$LN43@DumpDdrioR:
; Line 3638
	mov	eax, 548				; 00000224H
	cmp	bp, ax
	jne	SHORT $LN42@DumpDdrioR
	lea	ebp, DWORD PTR [eax+4]
$LN42@DumpDdrioR:
; Line 3639
	mov	eax, 904				; 00000388H
	cmp	bp, ax
	jne	SHORT $LN41@DumpDdrioR
	lea	ebp, DWORD PTR [eax+40]
$LN41@DumpDdrioR:
; Line 3640
	mov	eax, 1108				; 00000454H
	cmp	bp, ax
	jne	SHORT $LN40@DumpDdrioR
	lea	ebp, DWORD PTR [eax+4]
$LN40@DumpDdrioR:
; Line 3641
	mov	eax, 1116				; 0000045cH
	cmp	bp, ax
	jne	SHORT $LN39@DumpDdrioR
	lea	ebp, DWORD PTR [eax+84]
$LN39@DumpDdrioR:
; Line 3642
	mov	eax, 1208				; 000004b8H
	cmp	bp, ax
	jne	SHORT $LN38@DumpDdrioR
	lea	ebp, DWORD PTR [eax+40]
$LN38@DumpDdrioR:
; Line 3643
	mov	eax, 1464				; 000005b8H
	cmp	bp, ax
	jne	SHORT $LN37@DumpDdrioR
	lea	ebp, DWORD PTR [eax+40]
$LN37@DumpDdrioR:
; Line 3645
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _Dq$[esp+68]
	movzx	eax, bp
	push	DWORD PTR _Channel$[esp+68]
	mov	DWORD PTR _Register$[esp+76], eax
	lea	esi, DWORD PTR _Register$[esp+76]
	push	2
	rep movsd
	call	_MemRegRead
	add	ebp, 4
	mov	eax, 1588				; 00000634H
	add	esp, 36					; 00000024H
	cmp	bp, ax
	jb	$LL49@DumpDdrioR
	inc	BYTE PTR _Dq$[esp+44]
	cmp	BYTE PTR _Dq$[esp+44], 9
	jb	$LL52@DumpDdrioR
; Line 3652
	xor	ebp, ebp
$LL36@DumpDdrioR:
; Line 3653
	cmp	bp, 28					; 0000001cH
	jne	SHORT $LN33@DumpDdrioR
	push	32					; 00000020H
	pop	ebp
$LN33@DumpDdrioR:
; Line 3654
	cmp	bp, 40					; 00000028H
	jne	SHORT $LN32@DumpDdrioR
	push	44					; 0000002cH
	pop	ebp
$LN32@DumpDdrioR:
; Line 3656
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[esp+68]
	movzx	eax, bp
	mov	DWORD PTR _Register$[esp+76], eax
	lea	esi, DWORD PTR _Register$[esp+76]
	push	6
	rep movsd
	call	_MemRegRead
	add	ebp, 4
	add	esp, 36					; 00000024H
	cmp	bp, 56					; 00000038H
	jb	SHORT $LL36@DumpDdrioR
; Line 3662
	xor	ebp, ebp
	mov	ebx, 1580				; 0000062cH
$LL31@DumpDdrioR:
; Line 3663
	cmp	bp, 48					; 00000030H
	jne	SHORT $LN28@DumpDdrioR
	mov	ebp, 256				; 00000100H
$LN28@DumpDdrioR:
; Line 3664
	mov	eax, 288				; 00000120H
	cmp	bp, ax
	jne	SHORT $LN27@DumpDdrioR
	lea	ebp, DWORD PTR [eax+96]
$LN27@DumpDdrioR:
; Line 3665
	mov	eax, 432				; 000001b0H
	cmp	bp, ax
	jne	SHORT $LN26@DumpDdrioR
	mov	ebp, 640				; 00000280H
$LN26@DumpDdrioR:
; Line 3666
	mov	eax, 648				; 00000288H
	cmp	bp, ax
	jne	SHORT $LN25@DumpDdrioR
	mov	ebp, 944				; 000003b0H
$LN25@DumpDdrioR:
; Line 3667
	mov	eax, 992				; 000003e0H
	cmp	bp, ax
	jne	SHORT $LN24@DumpDdrioR
	mov	ebp, 1200				; 000004b0H
$LN24@DumpDdrioR:
; Line 3668
	mov	eax, 1208				; 000004b8H
	cmp	bp, ax
	jne	SHORT $LN23@DumpDdrioR
	mov	ebp, 1504				; 000005e0H
$LN23@DumpDdrioR:
; Line 3670
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[esp+68]
	movzx	eax, bp
	mov	DWORD PTR _Register$[esp+76], eax
	lea	esi, DWORD PTR _Register$[esp+76]
	push	7
	rep movsd
	call	_MemRegRead
	add	ebp, 4
	mov	eax, ebx
	add	esp, 36					; 00000024H
	cmp	bp, ax
	jb	$LL31@DumpDdrioR
; Line 3676
	xor	ebp, ebp
$LL67@DumpDdrioR:
; Line 3677
	mov	eax, 140				; 0000008cH
	cmp	bp, ax
	jne	SHORT $LN19@DumpDdrioR
	lea	ebp, DWORD PTR [eax+116]
$LN19@DumpDdrioR:
; Line 3678
	mov	eax, 304				; 00000130H
	cmp	bp, ax
	jne	SHORT $LN18@DumpDdrioR
	lea	ebp, DWORD PTR [eax+80]
$LN18@DumpDdrioR:
; Line 3679
	mov	eax, 424				; 000001a8H
	cmp	bp, ax
	jne	SHORT $LN17@DumpDdrioR
	mov	ebp, 640				; 00000280H
$LN17@DumpDdrioR:
; Line 3680
	mov	eax, 648				; 00000288H
	cmp	bp, ax
	jne	SHORT $LN16@DumpDdrioR
	lea	ebp, DWORD PTR [eax+40]
$LN16@DumpDdrioR:
; Line 3681
	mov	eax, 760				; 000002f8H
	cmp	bp, ax
	jne	SHORT $LN15@DumpDdrioR
	mov	ebp, 944				; 000003b0H
$LN15@DumpDdrioR:
; Line 3682
	mov	eax, 984				; 000003d8H
	cmp	bp, ax
	jne	SHORT $LN14@DumpDdrioR
	mov	ebp, 1200				; 000004b0H
$LN14@DumpDdrioR:
; Line 3683
	mov	eax, 1208				; 000004b8H
	cmp	bp, ax
	jne	SHORT $LN13@DumpDdrioR
	lea	ebp, DWORD PTR [eax+40]
$LN13@DumpDdrioR:
; Line 3684
	mov	eax, 1320				; 00000528H
	cmp	bp, ax
	jne	SHORT $LN12@DumpDdrioR
	mov	ebp, 1504				; 000005e0H
$LN12@DumpDdrioR:
; Line 3685
	mov	eax, 1560				; 00000618H
	cmp	bp, ax
	jne	SHORT $LN11@DumpDdrioR
	lea	ebp, DWORD PTR [eax+4]
$LN11@DumpDdrioR:
; Line 3686
	mov	eax, ebx
	cmp	bp, ax
	jne	SHORT $LN10@DumpDdrioR
	mov	ebp, 1760				; 000006e0H
$LN10@DumpDdrioR:
; Line 3688
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[esp+68]
	movzx	eax, bp
	mov	DWORD PTR _Register$[esp+76], eax
	lea	esi, DWORD PTR _Register$[esp+76]
	push	8
	rep movsd
	call	_MemRegRead
	add	ebp, 4
	mov	eax, 1800				; 00000708H
	add	esp, 36					; 00000024H
	cmp	bp, ax
	jb	$LL67@DumpDdrioR
; Line 3694
	xor	ebp, ebp
$LL68@DumpDdrioR:
; Line 3695
	cmp	bp, 52					; 00000034H
	jne	SHORT $LN6@DumpDdrioR
	mov	ebp, 256				; 00000100H
$LN6@DumpDdrioR:
; Line 3696
	mov	eax, 288				; 00000120H
	cmp	bp, ax
	jne	SHORT $LN5@DumpDdrioR
	lea	ebp, DWORD PTR [eax+96]
$LN5@DumpDdrioR:
; Line 3697
	mov	eax, 432				; 000001b0H
	cmp	bp, ax
	jne	SHORT $LN4@DumpDdrioR
	mov	ebp, 640				; 00000280H
$LN4@DumpDdrioR:
; Line 3698
	mov	eax, 648				; 00000288H
	cmp	bp, ax
	jne	SHORT $LN3@DumpDdrioR
	mov	ebp, 944				; 000003b0H
$LN3@DumpDdrioR:
; Line 3699
	mov	eax, 992				; 000003e0H
	cmp	bp, ax
	jne	SHORT $LN2@DumpDdrioR
	mov	ebp, 1200				; 000004b0H
$LN2@DumpDdrioR:
; Line 3700
	mov	eax, 1208				; 000004b8H
	cmp	bp, ax
	jne	SHORT $LN1@DumpDdrioR
	mov	ebp, 1504				; 000005e0H
$LN1@DumpDdrioR:
; Line 3702
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[esp+68]
	movzx	eax, bp
	mov	DWORD PTR _Register$[esp+76], eax
	lea	esi, DWORD PTR _Register$[esp+76]
	push	7
	rep movsd
	call	_MemRegRead
	add	ebp, 4
	mov	eax, ebx
	add	esp, 36					; 00000024H
	cmp	bp, ax
	jb	$LL68@DumpDdrioR
; Line 3707
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	0
_DumpDdrioRegisters ENDP
_TEXT	ENDS
PUBLIC	_DumpDunitRegisters
; Function compile flags: /Ogspy
;	COMDAT _DumpDunitRegisters
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DumpDunitRegisters PROC				; COMDAT
; Line 3714
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 3719
	or	DWORD PTR _Register$[ebp+8], -1
	push	ebx
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _Register$[ebp+12], ebx
; Line 3720
	mov	BYTE PTR _Register$[ebp+16], bl
; Line 3721
	cmp	BYTE PTR _Channel$[ebp], bl
	jne	SHORT $LN9@DumpDunitR
$LL19@DumpDunitR:
; Line 3724
	cmp	bx, 40					; 00000028H
	jne	SHORT $LN8@DumpDunitR
	push	48					; 00000030H
	pop	ebx
$LN8@DumpDunitR:
; Line 3725
	cmp	bx, 64					; 00000040H
	jne	SHORT $LN7@DumpDunitR
	mov	ebx, 128				; 00000080H
$LN7@DumpDunitR:
; Line 3726
	mov	eax, 200				; 000000c8H
	cmp	bx, ax
	jne	SHORT $LN6@DumpDunitR
	lea	ebx, DWORD PTR [eax+56]
$LN6@DumpDunitR:
; Line 3728
	sub	esp, 24					; 00000018H
	movzx	eax, bx
	push	6
	pop	ecx
	mov	DWORD PTR _Register$[ebp], eax
	xor	eax, eax
	mov	edi, esp
	push	eax
	push	eax
	lea	esi, DWORD PTR _Register$[ebp]
	push	eax
	rep movsd
	call	_MemRegRead
	add	ebx, 4
	mov	eax, 320				; 00000140H
	add	esp, 36					; 00000024H
	cmp	bx, ax
	jb	SHORT $LL19@DumpDunitR
$LN9@DumpDunitR:
; Line 3733
	push	60					; 0000003cH
	pop	ebx
$LL20@DumpDunitR:
; Line 3734
	cmp	bx, 64					; 00000040H
	jne	SHORT $LN2@DumpDunitR
	push	68					; 00000044H
	pop	ebx
$LN2@DumpDunitR:
; Line 3735
	cmp	bx, 80					; 00000050H
	jne	SHORT $LN1@DumpDunitR
	push	84					; 00000054H
	pop	ebx
$LN1@DumpDunitR:
; Line 3737
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	movzx	eax, bx
	mov	DWORD PTR _Register$[ebp], eax
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegRead
	add	ebx, 4
	mov	eax, 416				; 000001a0H
	add	esp, 36					; 00000024H
	cmp	bx, ax
	jb	SHORT $LL20@DumpDunitR
; Line 3741
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_DumpDunitRegisters ENDP
_TEXT	ENDS
PUBLIC	_DumpCpgcRegisters
; Function compile flags: /Ogspy
;	COMDAT _DumpCpgcRegisters
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DumpCpgcRegisters PROC					; COMDAT
; Line 3748
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 3753
	or	DWORD PTR _Register$[ebp+8], -1
	and	DWORD PTR _Register$[ebp+12], 0
	push	ebx
	push	esi
	push	edi
; Line 3758
	push	64					; 00000040H
	mov	BYTE PTR _Register$[ebp+16], 0
	pop	ebx
$LL14@DumpCpgcRe:
; Line 3759
	cmp	bx, 92					; 0000005cH
	jne	SHORT $LN6@DumpCpgcRe
	mov	ebx, 128				; 00000080H
$LN6@DumpCpgcRe:
; Line 3760
	mov	eax, 424				; 000001a8H
	cmp	bx, ax
	jne	SHORT $LN5@DumpCpgcRe
	lea	ebx, DWORD PTR [eax+4]
$LN5@DumpCpgcRe:
; Line 3761
	mov	eax, 476				; 000001dcH
	cmp	bx, ax
	jne	SHORT $LN4@DumpCpgcRe
	lea	ebx, DWORD PTR [eax+36]
$LN4@DumpCpgcRe:
; Line 3762
	mov	eax, 680				; 000002a8H
	cmp	bx, ax
	jne	SHORT $LN3@DumpCpgcRe
	lea	ebx, DWORD PTR [eax+4]
$LN3@DumpCpgcRe:
; Line 3763
	mov	eax, 776				; 00000308H
	cmp	bx, ax
	jne	SHORT $LN2@DumpCpgcRe
	lea	ebx, DWORD PTR [eax+12]
$LN2@DumpCpgcRe:
; Line 3764
	mov	eax, 812				; 0000032cH
	cmp	bx, ax
	jne	SHORT $LN1@DumpCpgcRe
	lea	ebx, DWORD PTR [eax+48]
$LN1@DumpCpgcRe:
; Line 3766
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	movzx	eax, bx
	mov	DWORD PTR _Register$[ebp], eax
	lea	esi, DWORD PTR _Register$[ebp]
	push	13					; 0000000dH
	rep movsd
	call	_MemRegRead
	add	ebx, 4
	mov	eax, 868				; 00000364H
	add	esp, 36					; 00000024H
	cmp	bx, ax
	jb	SHORT $LL14@DumpCpgcRe
; Line 3770
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_DumpCpgcRegisters ENDP
_TEXT	ENDS
PUBLIC	_DumpBunitRegisters
; Function compile flags: /Ogspy
;	COMDAT _DumpBunitRegisters
_TEXT	SEGMENT
_Register$ = -28					; size = 24
tv94 = -4						; size = 4
_MrcData$ = 8						; size = 4
_DumpBunitRegisters PROC				; COMDAT
; Line 3776
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 3781
	or	DWORD PTR _Register$[ebp+8], -1
	push	ebx
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _Register$[ebp+12], ebx
; Line 3782
	mov	BYTE PTR _Register$[ebp+16], bl
	mov	DWORD PTR tv94[ebp], 255		; 000000ffH
$LL8@DumpBunitR:
; Line 3788
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	0
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], ebx
	push	11					; 0000000bH
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
	inc	ebx
	dec	DWORD PTR tv94[ebp]
	jne	SHORT $LL8@DumpBunitR
; Line 3792
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_DumpBunitRegisters ENDP
_TEXT	ENDS
PUBLIC	_DumpRegs
; Function compile flags: /Ogspy
;	COMDAT _DumpRegs
_TEXT	SEGMENT
_i$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_DumpRegs PROC						; COMDAT
; Line 3798
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 3800
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	push	edi
	push	ebx
	call	_DumpBunitRegisters
	lea	esi, DWORD PTR [ebx+28608]
	pop	ecx
; Line 3801
	mov	BYTE PTR _i$[ebp], 0
	mov	edi, esi
$LL8@DumpRegs:
; Line 3803
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN7@DumpRegs
; Line 3805
	push	DWORD PTR _i$[ebp]
	push	ebx
	call	_DumpDunitRegisters
	pop	ecx
	pop	ecx
$LN7@DumpRegs:
	inc	BYTE PTR _i$[ebp]
	inc	edi
	cmp	BYTE PTR _i$[ebp], 2
	jb	SHORT $LL8@DumpRegs
; Line 3808
	mov	BYTE PTR _i$[ebp], 0
$LL4@DumpRegs:
; Line 3809
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN3@DumpRegs
; Line 3810
	push	DWORD PTR _i$[ebp]
	push	ebx
	call	_DumpDdrioRegisters
; Line 3811
	push	DWORD PTR _i$[ebp]
	push	ebx
	call	_DumpCpgcRegisters
	add	esp, 16					; 00000010H
$LN3@DumpRegs:
	inc	BYTE PTR _i$[ebp]
	inc	esi
	cmp	BYTE PTR _i$[ebp], 2
	jb	SHORT $LL4@DumpRegs
	pop	edi
	pop	esi
; Line 3814
	xor	eax, eax
	pop	ebx
; Line 3815
	leave
	ret	0
_DumpRegs ENDP
_TEXT	ENDS
PUBLIC	_BreakStrobeLoop
EXTRN	_IsCtlSignalDelay:PROC
EXTRN	_IsCmdSignalDelay:PROC
; Function compile flags: /Ogspy
;	COMDAT _BreakStrobeLoop
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Dim1Index$ = 12					; size = 2
_Strobe$ = 16						; size = 4
_BreakStrobeLoop PROC					; COMDAT
; Line 3823
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3828
	mov	esi, DWORD PTR _Dim1Index$[ebp]
	push	edi
; Line 3829
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	eax, 57344				; 0000e000H
	push	esi
	push	edi
	cmp	si, ax
	jb	SHORT $LN6@BreakStrob
	call	_IsCmdSignalDelay
	pop	ecx
	pop	ecx
	test	al, al
	jne	SHORT $LN1@BreakStrob
	mov	eax, 57360				; 0000e010H
; Line 3832
	jmp	SHORT $LN10@BreakStrob
$LN6@BreakStrob:
; Line 3833
	call	_IsCmdSignalDelay
	pop	ecx
	pop	ecx
	test	al, al
	jne	SHORT $LN1@BreakStrob
	mov	eax, 20519				; 00005027H
$LN10@BreakStrob:
	cmp	si, ax
	je	SHORT $LN1@BreakStrob
	push	esi
	push	edi
	call	_IsCtlSignalDelay
	pop	ecx
	pop	ecx
	test	al, al
	jne	SHORT $LN1@BreakStrob
	push	esi
	push	edi
	call	_GetOffsetIndex
	push	57384					; 0000e028H
	push	edi
	mov	si, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	si, ax
	jne	SHORT $LN2@BreakStrob
$LN1@BreakStrob:
; Line 3834
	mov	eax, DWORD PTR _Strobe$[ebp]
	mov	BYTE PTR [eax], 18			; 00000012H
$LN2@BreakStrob:
	pop	edi
; Line 3842
	xor	eax, eax
	pop	esi
; Line 3843
	pop	ebp
	ret	0
_BreakStrobeLoop ENDP
_TEXT	ENDS
PUBLIC	_SignalUpperBound
EXTRN	_GetDdrioGroupLimits:PROC
; Function compile flags: /Ogspy
;	COMDAT _SignalUpperBound
_TEXT	SEGMENT
_MaxLimit$ = -4						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Dim1Index$ = 20					; size = 2
_WaitTime$ = 20						; size = 4
_SignalUpperBound PROC					; COMDAT
; Line 3852
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3859
	mov	eax, DWORD PTR _Dim1Index$[ebp]
	and	DWORD PTR _MaxLimit$[ebp], 0
	mov	ecx, 16387				; 00004003H
	cmp	ax, cx
	jne	SHORT $LN10@SignalUppe
; Line 3860
	mov	eax, 12305				; 00003011H
$LN10@SignalUppe:
	push	esi
; Line 3863
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	eax
	push	esi
	movzx	edi, ax
	call	_GetOffsetIndex
	movzx	eax, ax
	pop	ecx
	pop	ecx
; Line 3865
	test	ax, ax
	jbe	SHORT $LN9@SignalUppe
; Line 3866
	lea	ecx, DWORD PTR _WaitTime$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _MaxLimit$[ebp]
	push	ecx
	push	eax
	push	0
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	esi
	call	_GetDdrioGroupLimits
	add	esp, 32					; 00000020H
; Line 3867
	jmp	SHORT $LN8@SignalUppe
$LN9@SignalUppe:
; Line 3869
	call	_MrcDeadLoop
$LN8@SignalUppe:
; Line 3874
	mov	eax, 57360				; 0000e010H
	cmp	di, ax
	jne	SHORT $LN13@SignalUppe
; Line 3876
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	al, BYTE PTR [eax+esi+31272]
	cmp	al, 3
	ja	SHORT $LN4@SignalUppe
; Line 3877
	push	DWORD PTR _MaxLimit$[ebp]
	push	edi
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ConvertPhysicalToLinearValue
	add	esp, 16					; 00000010H
	mov	DWORD PTR _MaxLimit$[ebp], eax
	jmp	SHORT $LN13@SignalUppe
$LN4@SignalUppe:
; Line 3878
	cmp	al, 7
	jne	SHORT $LN13@SignalUppe
; Line 3879
	mov	DWORD PTR _MaxLimit$[ebp], 72		; 00000048H
$LN13@SignalUppe:
; Line 3885
	mov	eax, DWORD PTR _MaxLimit$[ebp]
	pop	edi
	pop	esi
; Line 3889
	leave
	ret	0
_SignalUpperBound ENDP
_TEXT	ENDS
PUBLIC	_MirrorAddrBitsPassGate
; Function compile flags: /Ogspy
;	COMDAT _MirrorAddrBitsPassGate
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Address$ = 16						; size = 4
_MirrorAddrBitsPassGate PROC				; COMDAT
; Line 3907
	movzx	eax, BYTE PTR _Channel$[esp-4]
	mov	ecx, DWORD PTR _MrcData$[esp-4]
	movzx	eax, BYTE PTR [eax+ecx+31272]
	push	eax
	push	DWORD PTR _Address$[esp]
	call	_MirrorAddrBits
	pop	ecx
	pop	ecx
; Line 3908
	ret	0
_MirrorAddrBitsPassGate ENDP
_TEXT	ENDS
PUBLIC	_DelayForXActivates
; Function compile flags: /Ogspy
;	COMDAT _DelayForXActivates
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Activations$ = 16					; size = 4
_ReadCounter$ = 20					; size = 4
_WriteCounter$ = 24					; size = 4
_ActivateCounter$ = 28					; size = 4
_DelayForXActivates PROC				; COMDAT
; Line 3931
	push	ebp
	mov	ebp, esp
; Line 3934
	mov	ecx, DWORD PTR _ReadCounter$[ebp]
	push	ebx
; Line 3957
	mov	ebx, DWORD PTR _MrcData$[ebp]
	xor	eax, eax
	push	esi
	mov	esi, DWORD PTR _ActivateCounter$[ebp]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _WriteCounter$[ebp]
	mov	DWORD PTR [ecx], eax
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 4336				; 000010f0H
	push	edi
	lea	edi, DWORD PTR [eax+ebx]
$LL3@DelayForXA:
	push	10					; 0000000aH
	push	1
	call	_MspDelay
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	16499					; 00004073H
	push	ebx
	call	_MmrcExecuteTask
	mov	eax, DWORD PTR [edi+58966]
	add	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+58974]
	mov	eax, DWORD PTR _ReadCounter$[ebp]
	add	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edi+58982]
	mov	eax, DWORD PTR _WriteCounter$[ebp]
	add	DWORD PTR [eax], ecx
	movzx	ecx, BYTE PTR [ebx+70840]
	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	div	ecx
	movzx	ecx, WORD PTR [ebx+70873]
	mov	edx, DWORD PTR _Activations$[ebp]
	sub	edx, ecx
	add	esp, 24					; 00000018H
	cmp	eax, edx
	jb	SHORT $LL3@DelayForXA
	pop	edi
	pop	esi
	pop	ebx
; Line 3961
	pop	ebp
	ret	0
_DelayForXActivates ENDP
_TEXT	ENDS
PUBLIC	_GetDimmGeometry
; Function compile flags: /Ogspy
;	COMDAT _GetDimmGeometry
_TEXT	SEGMENT
_DimmDeviceWidth$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Dimm$ = 11						; size = 1
_Channel$ = 12						; size = 1
_GetDimmGeometry PROC					; COMDAT
; Line 3976
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3984
	mov	eax, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	push	edi
; Line 3989
	movzx	edi, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR [eax+70849], 255		; 000000ffH
	mov	BYTE PTR [eax+70850], 255		; 000000ffH
	mov	BYTE PTR _Dimm$[ebp], 0
$LL14@GetDimmGeo:
; Line 3990
	movzx	ecx, BYTE PTR _Dimm$[ebp]
	mov	bl, BYTE PTR [eax+70818]
	lea	edx, DWORD PTR [ecx+eax]
; Line 3991
	lea	esi, DWORD PTR [ecx+edi*2]
	mov	BYTE PTR [edx+70851], bl
	cmp	BYTE PTR [esi+eax+70875], 0
	je	SHORT $LN11@GetDimmGeo
	cmp	BYTE PTR [eax+70818], 0
	jne	SHORT $LN11@GetDimmGeo
; Line 3992
	mov	BYTE PTR [edx+70851], 1
$LN11@GetDimmGeo:
; Line 3994
	lea	ebx, DWORD PTR [ecx+edi*2+28610]
	cmp	BYTE PTR [ebx+eax], 0
	je	$LN13@GetDimmGeo
; Line 3997
	lea	ebx, DWORD PTR [ecx+edi*2+55410]
	mov	bl, BYTE PTR [ebx+eax]
; Line 3998
	lea	ecx, DWORD PTR [ecx+edi*2+55398]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _DimmDeviceWidth$[ebp], cl
; Line 4000
	mov	cl, BYTE PTR [edi+eax+31272]
	inc	bl
	cmp	cl, 3
	ja	SHORT $LN9@GetDimmGeo
; Line 4004
	imul	esi, 514				; 00000202H
	mov	cl, BYTE PTR [esi+eax+28694]
	jmp	SHORT $LN21@GetDimmGeo
$LN9@GetDimmGeo:
; Line 4005
	cmp	cl, 7
	jne	SHORT $LN7@GetDimmGeo
; Line 4009
	imul	esi, 514				; 00000202H
	mov	cl, BYTE PTR [esi+eax+28762]
$LN21@GetDimmGeo:
	and	cl, 1
	mov	BYTE PTR [edx+70853], cl
$LN7@GetDimmGeo:
; Line 4011
	mov	cl, BYTE PTR [eax+70849]
	cmp	cl, 255					; 000000ffH
	jne	SHORT $LN6@GetDimmGeo
; Line 4012
	mov	cl, BYTE PTR _DimmDeviceWidth$[ebp]
	mov	BYTE PTR [eax+70849], cl
	jmp	SHORT $LN4@GetDimmGeo
$LN6@GetDimmGeo:
; Line 4013
	cmp	cl, BYTE PTR _DimmDeviceWidth$[ebp]
	jne	SHORT $LN18@GetDimmGeo
$LN4@GetDimmGeo:
; Line 4018
	mov	cl, BYTE PTR [eax+70850]
	cmp	cl, 255					; 000000ffH
	jne	SHORT $LN3@GetDimmGeo
; Line 4019
	mov	BYTE PTR [eax+70850], bl
	jmp	SHORT $LN13@GetDimmGeo
$LN3@GetDimmGeo:
; Line 4020
	cmp	cl, bl
	jne	SHORT $LN18@GetDimmGeo
$LN13@GetDimmGeo:
; Line 3989
	inc	BYTE PTR _Dimm$[ebp]
	cmp	BYTE PTR _Dimm$[ebp], 2
	jb	$LL14@GetDimmGeo
; Line 4026
	xor	eax, eax
$LN15@GetDimmGeo:
	pop	edi
	pop	esi
	pop	ebx
; Line 4027
	leave
	ret	0
$LN18@GetDimmGeo:
; Line 4015
	push	29					; 0000001dH
	pop	eax
	jmp	SHORT $LN15@GetDimmGeo
_GetDimmGeometry ENDP
_TEXT	ENDS
PUBLIC	_PassGateTestEntryHooks
EXTRN	_AntiLogBase2:PROC
; Function compile flags: /Ogspy
;	COMDAT _PassGateTestEntryHooks
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_PassGateTestEntryHooks PROC				; COMDAT
; Line 4042
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 4046
	push	DWORD PTR _Channel$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	esi, 65535				; 0000ffffH
	push	esi
	push	15600					; 00003cf0H
	push	edi
	call	_MmrcExecuteTask
; Line 4050
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	12247					; 00002fd7H
	push	edi
	call	_MmrcExecuteTask
; Line 4055
	add	BYTE PTR [edi+70868], 250		; 000000faH
; Line 4056
	add	BYTE PTR [edi+70869], 250		; 000000faH
	add	BYTE PTR [edi+70867], 250		; 000000faH
; Line 4057
	add	BYTE PTR [edi+70870], 250		; 000000faH
; Line 4061
	movzx	ecx, BYTE PTR _Channel$[ebp]
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	lea	esi, DWORD PTR [eax+edi]
	add	esp, 32					; 00000020H
	xor	ebx, ebx
	push	31					; 0000001fH
	pop	eax
; Line 4064
	mov	DWORD PTR [esi+58902], eax
	mov	DWORD PTR [esi+58878], eax
	mov	DWORD PTR [esi+58886], eax
	mov	DWORD PTR [esi+58894], eax
; Line 4065
	push	63					; 0000003fH
	pop	eax
; Line 4066
	mov	DWORD PTR [esi+58918], eax
	mov	DWORD PTR [esi+58910], eax
; Line 4067
	mov	DWORD PTR [esi+58926], eax
; Line 4068
	mov	DWORD PTR [esi+58934], eax
; Line 4069
	mov	DWORD PTR [esi+58942], eax
; Line 4070
	mov	DWORD PTR [esi+58950], eax
	mov	DWORD PTR [esi+58906], ebx
	mov	DWORD PTR [esi+58922], ebx
	mov	DWORD PTR [esi+58882], ebx
	mov	DWORD PTR [esi+58890], ebx
	mov	DWORD PTR [esi+58898], ebx
	mov	DWORD PTR [esi+58914], ebx
	mov	DWORD PTR [esi+58930], ebx
	mov	DWORD PTR [esi+58938], ebx
	mov	DWORD PTR [esi+58946], ebx
	mov	DWORD PTR [esi+58954], ebx
; Line 4075
	movzx	eax, BYTE PTR [edi+70868]
	cdq
	mov	DWORD PTR [esi+58902], eax
	mov	DWORD PTR [esi+58906], edx
; Line 4076
	movzx	eax, BYTE PTR [edi+70869]
	cdq
	mov	DWORD PTR [esi+58918], eax
	mov	DWORD PTR [esi+58922], edx
; Line 4077
	cmp	BYTE PTR [edi+70866], 18		; 00000012H
	jb	SHORT $LN24@PassGateTe
; Line 4078
	add	eax, 17					; 00000011H
	adc	edx, ebx
	mov	DWORD PTR [esi+58926], eax
	mov	DWORD PTR [esi+58930], edx
$LN24@PassGateTe:
; Line 4080
	cmp	BYTE PTR [edi+70866], 17		; 00000011H
	jb	SHORT $LN23@PassGateTe
; Line 4081
	mov	eax, DWORD PTR [esi+58918]
	mov	edx, DWORD PTR [esi+58922]
	add	eax, 16					; 00000010H
	adc	edx, ebx
	mov	DWORD PTR [esi+58934], eax
	mov	DWORD PTR [esi+58938], edx
$LN23@PassGateTe:
; Line 4083
	cmp	BYTE PTR [edi+70866], 16		; 00000010H
	jb	SHORT $LN22@PassGateTe
; Line 4084
	mov	eax, DWORD PTR [esi+58918]
	mov	edx, DWORD PTR [esi+58922]
	add	eax, 15					; 0000000fH
	adc	edx, ebx
	mov	DWORD PTR [esi+58942], eax
	mov	DWORD PTR [esi+58946], edx
$LN22@PassGateTe:
; Line 4086
	cmp	BYTE PTR [edi+70866], 15		; 0000000fH
	jb	SHORT $LN21@PassGateTe
; Line 4087
	mov	eax, DWORD PTR [esi+58918]
	mov	edx, DWORD PTR [esi+58922]
	add	eax, 14					; 0000000eH
	adc	edx, ebx
	mov	DWORD PTR [esi+58950], eax
	mov	DWORD PTR [esi+58954], edx
$LN21@PassGateTe:
; Line 4089
	movzx	eax, BYTE PTR [edi+70870]
	sub	eax, 6
	cdq
	mov	DWORD PTR [esi+58878], eax
	mov	DWORD PTR [esi+58882], edx
; Line 4090
	movzx	eax, BYTE PTR [edi+70870]
	sub	eax, 7
	cdq
	mov	DWORD PTR [esi+58886], eax
	mov	DWORD PTR [esi+58890], edx
; Line 4092
	mov	cl, BYTE PTR [ecx+edi+31272]
	cmp	cl, 3
	jbe	SHORT $LN18@PassGateTe
	cmp	cl, 7
	jne	SHORT $LN17@PassGateTe
; Line 4102
	mov	eax, DWORD PTR [esi+58902]
	mov	ecx, DWORD PTR [esi+58906]
	add	eax, 1
	adc	ecx, ebx
	mov	DWORD PTR [esi+58894], eax
	mov	DWORD PTR [esi+58898], ecx
; Line 4103
	jmp	SHORT $LN17@PassGateTe
$LN18@PassGateTe:
; Line 4097
	cmp	BYTE PTR [edi+70863], 11		; 0000000bH
	jne	SHORT $LN17@PassGateTe
; Line 4098
	mov	DWORD PTR [esi+58910], ebx
	mov	DWORD PTR [esi+58914], ebx
$LN17@PassGateTe:
; Line 4114
	movzx	eax, WORD PTR [edi+70871]
	cdq
	mov	DWORD PTR [esi+59014], eax
	mov	DWORD PTR [esi+59018], edx
; Line 4115
	movzx	eax, BYTE PTR [edi+70840]
	cdq
	mov	DWORD PTR [esi+59054], eax
	mov	DWORD PTR [esi+59058], edx
; Line 4116
	movzx	eax, BYTE PTR [edi+70840]
	push	eax
	call	_AntiLogBase2
	movzx	eax, al
	pop	ecx
	movzx	ecx, BYTE PTR [edi+70868]
	lea	eax, DWORD PTR [eax+ecx-3]
	cdq
	mov	DWORD PTR [esi+59030], eax
	mov	DWORD PTR [esi+59034], edx
; Line 4117
	mov	DWORD PTR [esi+59022], ebx
	mov	DWORD PTR [esi+59026], ebx
; Line 4118
	movzx	eax, BYTE PTR [edi+70868]
	cdq
	mov	DWORD PTR [esi+59070], eax
	mov	DWORD PTR [esi+59074], edx
; Line 4119
	mov	DWORD PTR [esi+59062], ebx
	mov	DWORD PTR [esi+59066], ebx
; Line 4123
	movzx	eax, BYTE PTR [edi+31275]
	dec	eax
	dec	eax
	je	SHORT $LN8@PassGateTe
	dec	eax
	je	SHORT $LN9@PassGateTe
	dec	eax
	je	SHORT $LN10@PassGateTe
	dec	eax
	je	SHORT $LN11@PassGateTe
	dec	eax
	jne	SHORT $LN13@PassGateTe
; Line 4125
	mov	DWORD PTR [esi+59078], 54		; 00000036H
$LN28@PassGateTe:
	mov	DWORD PTR [esi+59082], ebx
; Line 4126
	jmp	SHORT $LN13@PassGateTe
$LN11@PassGateTe:
; Line 4128
	mov	DWORD PTR [esi+59078], 47		; 0000002fH
; Line 4129
	jmp	SHORT $LN28@PassGateTe
$LN10@PassGateTe:
; Line 4131
	mov	DWORD PTR [esi+59078], 40		; 00000028H
; Line 4132
	jmp	SHORT $LN28@PassGateTe
$LN9@PassGateTe:
; Line 4134
	mov	DWORD PTR [esi+59078], 34		; 00000022H
; Line 4135
	push	90					; 0000005aH
; Line 4136
	jmp	SHORT $LN27@PassGateTe
$LN8@PassGateTe:
; Line 4138
	mov	DWORD PTR [esi+59078], 27		; 0000001bH
; Line 4139
	push	100					; 00000064H
$LN27@PassGateTe:
	pop	eax
	mov	DWORD PTR [esi+59082], ebx
	mov	WORD PTR [edi+70873], ax
$LN13@PassGateTe:
; Line 4147
	movzx	eax, BYTE PTR [edi+70840]
	dec	eax
	cdq
	lea	ecx, DWORD PTR [esi+59078]
	sub	DWORD PTR [ecx], eax
	sbb	DWORD PTR [ecx+4], edx
; Line 4152
	cmp	BYTE PTR [edi+70808], bl
; Line 4153
	mov	DWORD PTR [esi+58962], ebx
	je	SHORT $LN6@PassGateTe
	mov	DWORD PTR [esi+58958], 1
; Line 4154
	jmp	SHORT $LN5@PassGateTe
$LN6@PassGateTe:
; Line 4155
	mov	DWORD PTR [esi+58958], ebx
$LN5@PassGateTe:
; Line 4160
	cmp	BYTE PTR [edi+70819], bl
; Line 4161
	mov	DWORD PTR [esi+58994], ebx
	jne	SHORT $LN4@PassGateTe
	mov	DWORD PTR [esi+58990], ebx
; Line 4162
	jmp	SHORT $LN3@PassGateTe
$LN4@PassGateTe:
; Line 4163
	or	DWORD PTR [esi+58990], -1
$LN3@PassGateTe:
; Line 4165
	cmp	BYTE PTR [edi+70820], bl
; Line 4166
	mov	DWORD PTR [esi+59002], ebx
	jne	SHORT $LN2@PassGateTe
	mov	DWORD PTR [esi+58998], ebx
; Line 4167
	jmp	SHORT $LN1@PassGateTe
$LN2@PassGateTe:
; Line 4168
	or	DWORD PTR [esi+58998], -1
$LN1@PassGateTe:
; Line 4220
	push	DWORD PTR _Channel$[ebp]
	mov	esi, 65535				; 0000ffffH
	push	esi
	push	15854					; 00003deeH
	push	edi
	call	_MmrcExecuteTask
; Line 4221
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	16076					; 00003eccH
	push	edi
	call	_MmrcExecuteTask
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
; Line 4223
	xor	eax, eax
	pop	ebx
; Line 4224
	pop	ebp
	ret	0
_PassGateTestEntryHooks ENDP
_TEXT	ENDS
PUBLIC	_PassGateTestExitHooks
; Function compile flags: /Ogspy
;	COMDAT _PassGateTestExitHooks
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_PassGateTestExitHooks PROC				; COMDAT
; Line 4240
	push	DWORD PTR _Channel$[esp-4]
	push	65535					; 0000ffffH
	push	15724					; 00003d6cH
	push	DWORD PTR _MrcData$[esp+8]
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 4242
	xor	eax, eax
; Line 4243
	ret	0
_PassGateTestExitHooks ENDP
_TEXT	ENDS
PUBLIC	_ClearSelfRefreshClamp
EXTRN	_OemClearSelfRefreshClamp:PROC
; Function compile flags: /Ogspy
;	COMDAT _ClearSelfRefreshClamp
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_ClearSelfRefreshClamp PROC				; COMDAT
; Line 4268
	jmp	_OemClearSelfRefreshClamp
_ClearSelfRefreshClamp ENDP
_TEXT	ENDS
PUBLIC	_RestoreArmNvDimms
EXTRN	_PlatformArmNvDimms:PROC
EXTRN	_PlatformRestoreNvDimms:PROC
; Function compile flags: /Ogspy
;	COMDAT _RestoreArmNvDimms
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_RestoreArmNvDimms PROC					; COMDAT
; Line 4284
	push	esi
; Line 4285
	mov	esi, DWORD PTR _MrcData$[esp]
	cmp	BYTE PTR [esi+65480], 4
	jne	SHORT $LN1@RestoreArm
; Line 4286
	push	esi
	call	_PlatformRestoreNvDimms
; Line 4287
	push	esi
	call	_PlatformArmNvDimms
	pop	ecx
	pop	ecx
$LN1@RestoreArm:
; Line 4289
	xor	eax, eax
	pop	esi
; Line 4290
	ret	0
_RestoreArmNvDimms ENDP
_TEXT	ENDS
PUBLIC	_SignalPunitMemInitDone
EXTRN	_PunitMemInitDone:PROC
; Function compile flags: /Ogspy
;	COMDAT _SignalPunitMemInitDone
_TEXT	SEGMENT
_Register$ = -28					; size = 24
_Ch$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_SignalPunitMemInitDone PROC				; COMDAT
; Line 4335
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 4346
	mov	eax, DWORD PTR _MrcData$[ebp]
	or	DWORD PTR _Register$[ebp+8], -1
	and	DWORD PTR _Register$[ebp+12], 0
	cmp	BYTE PTR [eax+65520], 1
	push	ebx
	push	esi
	push	edi
	mov	BYTE PTR _Register$[ebp+16], 0
	mov	DWORD PTR _Register$[ebp], 16		; 00000010H
	jne	SHORT $LN2@SignalPuni
; Line 4347
	mov	BYTE PTR _Ch$[ebp], 0
	lea	ebx, DWORD PTR [eax+28608]
$LL10@SignalPuni:
; Line 4348
	cmp	BYTE PTR [ebx], 1
	jne	SHORT $LN3@SignalPuni
; Line 4349
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Ch$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
; Line 4354
	push	15					; 0000000fH
	xor	ecx, ecx
	push	ecx
	and	eax, -2202				; fffff766H
	or	eax, 1894				; 00000766H
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Ch$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	1
	rep movsd
	call	_MemRegWrite
	mov	eax, DWORD PTR _MrcData$[ebp]
	add	esp, 48					; 00000030H
$LN3@SignalPuni:
	inc	BYTE PTR _Ch$[ebp]
	inc	ebx
	cmp	BYTE PTR _Ch$[ebp], 2
	jb	SHORT $LL10@SignalPuni
$LN2@SignalPuni:
; Line 4361
	push	eax
	call	_PunitMemInitDone
	pop	ecx
; Line 4364
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_SignalPunitMemInitDone ENDP
_TEXT	ENDS
PUBLIC	_GetJedecResetTypeForRd
; Function compile flags: /Ogspy
;	COMDAT _GetJedecResetTypeForRd
_TEXT	SEGMENT
_GetJedecResetTypeForRd PROC				; COMDAT
; Line 4375
	xor	eax, eax
; Line 4376
	ret	0
_GetJedecResetTypeForRd ENDP
_TEXT	ENDS
PUBLIC	_GetJedecResetTypeForWr
; Function compile flags: /Ogspy
;	COMDAT _GetJedecResetTypeForWr
_TEXT	SEGMENT
_GetJedecResetTypeForWr PROC				; COMDAT
; Line 4387
	xor	eax, eax
; Line 4388
	ret	0
_GetJedecResetTypeForWr ENDP
_TEXT	ENDS
PUBLIC	_Getx4FloorPlan
; Function compile flags: /Ogspy
;	COMDAT _Getx4FloorPlan
_TEXT	SEGMENT
_FloorPlanx4Config$ = -12				; size = 9
_Strobe$ = 8						; size = 1
_Getx4FloorPlan PROC					; COMDAT
; Line 4402
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 4408
	cmp	BYTE PTR _Strobe$[ebp], 9
	mov	BYTE PTR _FloorPlanx4Config$[ebp], 9
	mov	BYTE PTR _FloorPlanx4Config$[ebp+1], 10	; 0000000aH
	mov	BYTE PTR _FloorPlanx4Config$[ebp+2], 11	; 0000000bH
	mov	BYTE PTR _FloorPlanx4Config$[ebp+3], 12	; 0000000cH
	mov	BYTE PTR _FloorPlanx4Config$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _FloorPlanx4Config$[ebp+5], 14	; 0000000eH
	mov	BYTE PTR _FloorPlanx4Config$[ebp+6], 15	; 0000000fH
	mov	BYTE PTR _FloorPlanx4Config$[ebp+7], 16	; 00000010H
	mov	BYTE PTR _FloorPlanx4Config$[ebp+8], 17	; 00000011H
	jae	SHORT $LN1@Getx4Floor
; Line 4409
	movzx	eax, BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _FloorPlanx4Config$[ebp+eax]
; Line 4413
	leave
	ret	0
$LN1@Getx4Floor:
; Line 4412
	or	al, 255					; 000000ffH
; Line 4413
	leave
	ret	0
_Getx4FloorPlan ENDP
_TEXT	ENDS
PUBLIC	_CheckX4Support
; Function compile flags: /Ogspy
;	COMDAT _CheckX4Support
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_function$ = 12						; size = 4
_line$ = 16						; size = 4
_CheckX4Support PROC					; COMDAT
; Line 4427
	xor	eax, eax
; Line 4428
	ret	0
_CheckX4Support ENDP
_TEXT	ENDS
PUBLIC	_CheckPerBitSupport
; Function compile flags: /Ogspy
;	COMDAT _CheckPerBitSupport
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_function$ = 12						; size = 4
_line$ = 16						; size = 4
_CheckPerBitSupport PROC				; COMDAT
; Line 4444
	xor	eax, eax
; Line 4445
	ret	0
_CheckPerBitSupport ENDP
_TEXT	ENDS
PUBLIC	_IsInitRequired
EXTRN	_EccInitializeNeeded:PROC
; Function compile flags: /Ogspy
;	COMDAT _IsInitRequired
_TEXT	SEGMENT
_SkipInit$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Dimm$ = 16						; size = 1
_IsInitRequired PROC					; COMDAT
; Line 4467
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 4470
	lea	eax, DWORD PTR _SkipInit$[ebp]
	push	eax
	push	DWORD PTR _Dimm$[ebp]
	mov	BYTE PTR _SkipInit$[ebp], 0
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_EccInitializeNeeded
; Line 4471
	xor	eax, eax
	add	esp, 16					; 00000010H
	cmp	BYTE PTR _SkipInit$[ebp], al
	sete	al
; Line 4472
	leave
	ret	0
_IsInitRequired ENDP
_TEXT	ENDS
PUBLIC	_DetermineRankMap
; Function compile flags: /Ogspy
;	COMDAT _DetermineRankMap
_TEXT	SEGMENT
tv433 = -4						; size = 4
_MrcData$ = 8						; size = 4
tv435 = 11						; size = 1
_Channel$ = 12						; size = 1
_Dimm$ = 16						; size = 1
_Rank$ = 20						; size = 1
_RsOffset$ = 24						; size = 4
_DetermineRankMap PROC					; COMDAT
; Line 4492
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 4494
	movzx	edx, BYTE PTR _Channel$[ebp]
	mov	eax, edx
	push	ebx
	imul	eax, 4336				; 000010f0H
	push	esi
; Line 4505
	movzx	esi, BYTE PTR _Dimm$[ebp]
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	add	eax, edi
	push	63					; 0000003fH
	pop	ecx
	mov	DWORD PTR [eax+58950], ecx
	xor	ebx, ebx
	mov	DWORD PTR [eax+58942], ecx
	mov	DWORD PTR [eax+58934], ecx
	mov	DWORD PTR [eax+58926], ecx
	lea	ecx, DWORD PTR [esi+edx*2+55410]
	add	ecx, edi
	mov	DWORD PTR [eax+58954], ebx
	mov	DWORD PTR [eax+58946], ebx
	mov	DWORD PTR [eax+58938], ebx
	mov	DWORD PTR [eax+58930], ebx
	mov	DWORD PTR [eax+58886], 18		; 00000012H
	mov	DWORD PTR [eax+58890], ebx
	mov	DWORD PTR tv433[ebp], ecx
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR tv435[ebp], cl
	cmp	cl, bl
	jne	SHORT $LN12@DetermineR
	lea	ecx, DWORD PTR [esi+edx*2+55398]
	cmp	BYTE PTR [ecx+edi], bl
	je	SHORT $LN13@DetermineR
$LN12@DetermineR:
	cmp	BYTE PTR tv435[ebp], bl
	jbe	SHORT $LN14@DetermineR
$LN13@DetermineR:
; Line 4506
	mov	DWORD PTR [eax+58950], 25		; 00000019H
	mov	DWORD PTR [eax+58954], ebx
; Line 4507
	mov	DWORD PTR [eax+58886], 19		; 00000013H
	mov	DWORD PTR [eax+58890], ebx
$LN14@DetermineR:
; Line 4509
	mov	ecx, DWORD PTR tv433[ebp]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR tv435[ebp], cl
	cmp	cl, 1
	jne	SHORT $LN9@DetermineR
	lea	ecx, DWORD PTR [esi+edx*2+55398]
	cmp	BYTE PTR [ecx+edi], bl
	je	SHORT $LN10@DetermineR
$LN9@DetermineR:
	cmp	BYTE PTR tv435[ebp], 1
	jbe	SHORT $LN11@DetermineR
$LN10@DetermineR:
; Line 4510
	mov	DWORD PTR [eax+58942], 26		; 0000001aH
	mov	DWORD PTR [eax+58946], ebx
; Line 4511
	mov	DWORD PTR [eax+58886], 20		; 00000014H
	mov	DWORD PTR [eax+58890], ebx
$LN11@DetermineR:
; Line 4513
	mov	ecx, DWORD PTR tv433[ebp]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR tv435[ebp], cl
	cmp	cl, 2
	jne	SHORT $LN6@DetermineR
	lea	ecx, DWORD PTR [esi+edx*2+55398]
	cmp	BYTE PTR [ecx+edi], bl
	je	SHORT $LN7@DetermineR
$LN6@DetermineR:
	cmp	BYTE PTR tv435[ebp], 2
	jbe	SHORT $LN8@DetermineR
$LN7@DetermineR:
; Line 4514
	mov	DWORD PTR [eax+58934], 27		; 0000001bH
	mov	DWORD PTR [eax+58938], ebx
; Line 4515
	mov	DWORD PTR [eax+58886], 21		; 00000015H
	mov	DWORD PTR [eax+58890], ebx
$LN8@DetermineR:
; Line 4517
	mov	ecx, DWORD PTR tv433[ebp]
	mov	cl, BYTE PTR [ecx]
	cmp	cl, 3
	jne	SHORT $LN17@DetermineR
	lea	edx, DWORD PTR [esi+edx*2+55398]
	cmp	BYTE PTR [edx+edi], bl
	je	SHORT $LN4@DetermineR
	cmp	cl, cl
$LN17@DetermineR:
	jbe	SHORT $LN5@DetermineR
$LN4@DetermineR:
; Line 4518
	mov	DWORD PTR [eax+58926], 28		; 0000001cH
	mov	DWORD PTR [eax+58930], ebx
; Line 4519
	mov	DWORD PTR [eax+58886], 22		; 00000016H
	mov	DWORD PTR [eax+58890], ebx
$LN5@DetermineR:
; Line 4522
	mov	cl, BYTE PTR [eax+58886]
	mov	edx, DWORD PTR _RsOffset$[ebp]
	add	cl, 7
	mov	BYTE PTR [edx], cl
; Line 4524
	mov	ecx, DWORD PTR [eax+56166]
	mov	DWORD PTR [eax+59382], ecx
	mov	ecx, DWORD PTR [eax+56170]
	mov	DWORD PTR [eax+59386], ecx
; Line 4525
	cmp	BYTE PTR _Dimm$[ebp], bl
	jne	SHORT $LN2@DetermineR
; Line 4526
	mov	ecx, DWORD PTR [eax+56342]
	mov	DWORD PTR [eax+59374], ecx
	mov	ecx, DWORD PTR [eax+56346]
; Line 4527
	jmp	SHORT $LN18@DetermineR
$LN2@DetermineR:
; Line 4528
	mov	ecx, DWORD PTR [eax+56334]
	mov	DWORD PTR [eax+59374], ecx
	mov	ecx, DWORD PTR [eax+56338]
$LN18@DetermineR:
; Line 4542
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [eax+59378], ecx
	push	65535					; 0000ffffH
	push	17450					; 0000442aH
	push	edi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
; Line 4544
	xor	eax, eax
	pop	ebx
; Line 4545
	leave
	ret	0
_DetermineRankMap ENDP
_TEXT	ENDS
PUBLIC	_IsAdrFlow
; Function compile flags: /Ogspy
;	COMDAT _IsAdrFlow
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_IsAdrFlow PROC						; COMDAT
; Line 4559
	mov	eax, DWORD PTR _MrcData$[esp-4]
	cmp	BYTE PTR [eax+31274], 16		; 00000010H
	sete	al
; Line 4563
	ret	0
_IsAdrFlow ENDP
_TEXT	ENDS
PUBLIC	_MemInitPerDimm
EXTRN	_MemInit:PROC
; Function compile flags: /Ogspy
;	COMDAT _MemInitPerDimm
_TEXT	SEGMENT
_Errors$ = -20						; size = 4
tv462 = -16						; size = 4
tv428 = -12						; size = 4
_Dimm$ = -8						; size = 1
_Rank$ = -4						; size = 1
_Status$ = -4						; size = 4
_MrcData$ = 8						; size = 4
_RsOffset$ = 11						; size = 1
_Segments$ = 11						; size = 1
_Channel$ = 12						; size = 1
_MemInitPerDimm PROC					; COMDAT
; Line 4578
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
; Line 4589
	mov	esi, DWORD PTR _MrcData$[ebp]
	test	BYTE PTR [esi+71008], 2
	je	SHORT $LN23@MemInitPer
	movzx	eax, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [eax+esi+31272], 3
	ja	SHORT $LN23@MemInitPer
; Line 4591
	xor	eax, eax
	jmp	$LN17@MemInitPer
$LN23@MemInitPer:
	push	edi
; Line 4592
	movzx	edi, BYTE PTR _Channel$[ebp]
	mov	al, BYTE PTR [edi+esi+31272]
	cmp	al, 3
	ja	SHORT $LN14@MemInitPer
; Line 4596
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_MemInit
	add	esp, 12					; 0000000cH
	jmp	$LN26@MemInitPer
$LN14@MemInitPer:
	push	ebx
; Line 4597
	cmp	al, 7
	jne	$LN7@MemInitPer
; Line 4599
	xor	ebx, ebx
	cmp	BYTE PTR [esi+65392], bl
	je	SHORT $LN11@MemInitPer
; Line 4601
	mov	DWORD PTR _Status$[ebp], ebx
; Line 4602
	mov	BYTE PTR _Segments$[ebp], bl
	cmp	BYTE PTR [esi+65393], bl
	jbe	SHORT $LN8@MemInitPer
	imul	edi, 4336				; 000010f0H
	add	edi, esi
$LL24@MemInitPer:
; Line 4603
	movzx	eax, BYTE PTR _Segments$[ebp]
	lea	eax, DWORD PTR [esi+eax*8]
	mov	ecx, DWORD PTR [eax+65394]
	shl	ecx, 14					; 0000000eH
	mov	DWORD PTR [edi+58422], ecx
	mov	DWORD PTR [edi+58426], ebx
; Line 4604
	mov	eax, DWORD PTR [eax+65398]
; Line 4610
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	shl	eax, 14					; 0000000eH
	dec	eax
	push	esi
	mov	DWORD PTR [edi+58430], eax
	mov	DWORD PTR [edi+58434], ebx
	call	_MemInit
	or	DWORD PTR _Status$[ebp], eax
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Segments$[ebp]
	mov	al, BYTE PTR _Segments$[ebp]
	cmp	al, BYTE PTR [esi+65393]
	jb	SHORT $LL24@MemInitPer
$LN8@MemInitPer:
; Line 4612
	mov	eax, DWORD PTR _Status$[ebp]
	jmp	$LN27@MemInitPer
$LN11@MemInitPer:
; Line 4619
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_MemInit
	add	esp, 12					; 0000000cH
	jmp	$LN27@MemInitPer
$LN7@MemInitPer:
; Line 4623
	push	DWORD PTR _Channel$[ebp]
	mov	ebx, 65535				; 0000ffffH
	push	ebx
	push	17299					; 00004393H
	push	esi
	call	_MmrcExecuteTask
; Line 4624
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	17534					; 0000447eH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 32					; 00000020H
; Line 4626
	xor	ebx, ebx
	lea	eax, DWORD PTR [esi+edi*4+55438]
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv428[ebp], ebx
	mov	DWORD PTR tv462[ebp], eax
$LL6@MemInitPer:
; Line 4628
	mov	al, BYTE PTR _Rank$[ebp]
	shr	al, 1
	mov	BYTE PTR _Dimm$[ebp], al
; Line 4630
	mov	eax, DWORD PTR tv462[ebp]
	cmp	BYTE PTR [eax], bl
	je	$LN5@MemInitPer
; Line 4634
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsInitRequired
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN5@MemInitPer
; Line 4638
	lea	eax, DWORD PTR _RsOffset$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DetermineRankMap
; Line 4640
	movzx	eax, BYTE PTR _Dimm$[ebp]
	lea	ecx, DWORD PTR [eax+edi*2+55394]
	movzx	ecx, BYTE PTR [ecx+esi]
	lea	eax, DWORD PTR [eax+edi*2]
	mov	eax, DWORD PTR [esi+eax*4+28614]
	inc	ecx
	xor	edx, edx
	div	ecx
; Line 4643
	mov	cl, BYTE PTR _RsOffset$[ebp]
	mov	edx, DWORD PTR tv428[ebp]
; Line 4654
	push	DWORD PTR _Channel$[ebp]
	shl	edx, cl
	mov	ecx, edi
	imul	ecx, 4336				; 000010f0H
	add	ecx, esi
	push	ebx
	push	17718					; 00004536H
	push	esi
	mov	DWORD PTR [ecx+59390], edx
	mov	DWORD PTR [ecx+59394], ebx
	mov	DWORD PTR [ecx+59402], ebx
	shl	eax, 14					; 0000000eH
	dec	eax
	or	eax, edx
	mov	DWORD PTR [ecx+59398], eax
	call	_MmrcExecuteTask
; Line 4656
	push	ebx
	push	ebx
	lea	eax, DWORD PTR _Errors$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_CpgcExecuteSingleTest
	add	esp, 60					; 0000003cH
$LN5@MemInitPer:
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv428[ebp]
	inc	DWORD PTR tv462[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL6@MemInitPer
; Line 4663
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	17382					; 000043e6H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 4665
	xor	eax, eax
$LN27@MemInitPer:
	pop	ebx
$LN26@MemInitPer:
	pop	edi
$LN17@MemInitPer:
	pop	esi
; Line 4666
	leave
	ret	0
_MemInitPerDimm ENDP
_TEXT	ENDS
PUBLIC	_RxTxSkewCtl
; Function compile flags: /Ogspy
;	COMDAT _RxTxSkewCtl
_TEXT	SEGMENT
_SkewStruct$ = -44					; size = 12
tv220 = -32						; size = 4
tv454 = -28						; size = 4
tv413 = -24						; size = 4
tv365 = -20						; size = 4
_ValueOffset$ = -16					; size = 4
tv480 = -12						; size = 4
_ch$ = -8						; size = 1
_rk$ = -4						; size = 1
_st$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_RxTxSkewCtl PROC					; COMDAT
; Line 4681
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	ebx
; Line 4689
	mov	eax, 57345				; 0000e001H
	mov	WORD PTR _SkewStruct$[ebp], ax
; Line 4690
	dec	eax
	push	esi
; Line 4691
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	WORD PTR _SkewStruct$[ebp+2], ax
	mov	al, BYTE PTR [esi+71009]
	push	edi
	mov	BYTE PTR _SkewStruct$[ebp+4], al
; Line 4693
	mov	edi, 65535				; 0000ffffH
	mov	eax, edi
	mov	WORD PTR _SkewStruct$[ebp+6], ax
; Line 4694
	mov	eax, 57357				; 0000e00dH
	mov	WORD PTR _SkewStruct$[ebp+8], ax
; Line 4695
	mov	al, BYTE PTR [esi+71010]
	xor	ebx, ebx
	mov	BYTE PTR _SkewStruct$[ebp+10], al
	mov	DWORD PTR tv480[ebp], ebx
	mov	DWORD PTR tv220[ebp], 2
$LL37@RxTxSkewCt:
; Line 4712
	lea	eax, DWORD PTR [esi+28608]
	mov	DWORD PTR tv413[ebp], eax
	lea	eax, DWORD PTR [esi+55438]
	mov	BYTE PTR _ch$[ebp], bl
	mov	DWORD PTR tv454[ebp], eax
$LL36@RxTxSkewCt:
; Line 4713
	mov	eax, DWORD PTR tv413[ebp]
	cmp	BYTE PTR [eax], bl
	je	$LN21@RxTxSkewCt
; Line 4714
	mov	eax, DWORD PTR tv480[ebp]
	mov	al, BYTE PTR _SkewStruct$[ebp+eax+4]
	cmp	al, bl
	je	$LN21@RxTxSkewCt
; Line 4715
	movzx	eax, al
	dec	eax
	je	SHORT $LN15@RxTxSkewCt
	dec	eax
	je	SHORT $LN14@RxTxSkewCt
; Line 4723
	mov	DWORD PTR _ValueOffset$[ebp], ebx
; Line 4724
	jmp	SHORT $LN16@RxTxSkewCt
$LN14@RxTxSkewCt:
; Line 4720
	mov	DWORD PTR _ValueOffset$[ebp], -2	; fffffffeH
; Line 4721
	jmp	SHORT $LN16@RxTxSkewCt
$LN15@RxTxSkewCt:
; Line 4717
	mov	DWORD PTR _ValueOffset$[ebp], 2
$LN16@RxTxSkewCt:
; Line 4726
	mov	eax, DWORD PTR tv454[ebp]
	mov	BYTE PTR _rk$[ebp], bl
	mov	DWORD PTR tv365[ebp], eax
$LL12@RxTxSkewCt:
; Line 4727
	mov	eax, DWORD PTR tv365[ebp]
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN11@RxTxSkewCt
; Line 4728
	mov	BYTE PTR _st$[ebp], bl
$LL8@RxTxSkewCt:
; Line 4729
	push	ebx
	push	ebx
	push	DWORD PTR _st$[ebp]
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN7@RxTxSkewCt
; Line 4730
	mov	eax, DWORD PTR tv480[ebp]
	movzx	eax, WORD PTR _SkewStruct$[ebp+eax+2]
	mov	ecx, edi
	cmp	ax, cx
	je	SHORT $LN4@RxTxSkewCt
; Line 4731
	lea	ecx, DWORD PTR _ValueOffset$[ebp]
	push	ecx
	push	28					; 0000001cH
	push	eax
	push	DWORD PTR _st$[ebp]
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN4@RxTxSkewCt:
; Line 4733
	mov	eax, DWORD PTR tv480[ebp]
	movzx	eax, WORD PTR _SkewStruct$[ebp+eax]
	mov	ecx, edi
	cmp	ax, cx
	je	SHORT $LN7@RxTxSkewCt
; Line 4734
	lea	ecx, DWORD PTR _ValueOffset$[ebp]
	push	ecx
	push	28					; 0000001cH
	push	eax
	push	DWORD PTR _st$[ebp]
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN7@RxTxSkewCt:
	inc	BYTE PTR _st$[ebp]
	cmp	BYTE PTR _st$[ebp], 18			; 00000012H
	jb	SHORT $LL8@RxTxSkewCt
$LN11@RxTxSkewCt:
; Line 4726
	inc	BYTE PTR _rk$[ebp]
	inc	DWORD PTR tv365[ebp]
	cmp	BYTE PTR _rk$[ebp], 4
	jb	$LL12@RxTxSkewCt
$LN21@RxTxSkewCt:
; Line 4712
	inc	BYTE PTR _ch$[ebp]
	inc	DWORD PTR tv413[ebp]
	add	DWORD PTR tv454[ebp], 4
	cmp	BYTE PTR _ch$[ebp], 2
	jb	$LL36@RxTxSkewCt
	add	DWORD PTR tv480[ebp], 6
	dec	DWORD PTR tv220[ebp]
	jne	$LL37@RxTxSkewCt
; Line 4741
	mov	edi, DWORD PTR _Channel$[ebp]
	cmp	BYTE PTR [esi+71009], bl
	je	SHORT $LN2@RxTxSkewCt
; Line 4742
	push	ebx
	push	57344					; 0000e000H
	push	edi
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4743
	push	ebx
	push	57347					; 0000e003H
	push	edi
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4744
	push	ebx
	push	57348					; 0000e004H
	push	edi
	push	esi
	call	_DisplayOrRestoreTrainingResults
	add	esp, 48					; 00000030H
$LN2@RxTxSkewCt:
; Line 4746
	cmp	BYTE PTR [esi+71010], bl
	je	SHORT $LN1@RxTxSkewCt
; Line 4747
	push	ebx
	push	57358					; 0000e00eH
	push	edi
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4748
	push	1
	push	57359					; 0000e00fH
	push	edi
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4750
	push	ebx
	push	12308					; 00003014H
	push	edi
	push	esi
	call	_DisplayOrRestoreTrainingResults
	add	esp, 48					; 00000030H
$LN1@RxTxSkewCt:
	pop	edi
	pop	esi
; Line 4753
	xor	eax, eax
	pop	ebx
; Line 4754
	leave
	ret	0
_RxTxSkewCtl ENDP
_TEXT	ENDS
PUBLIC	_ProgDramRaplLimitMsr
; Function compile flags: /Ogspy
;	COMDAT _ProgDramRaplLimitMsr
_TEXT	SEGMENT
_HighData$ = -4						; size = 4
_LowData$ = 8						; size = 4
_MrcData$ = 8						; size = 4
_ProgDramRaplLimitMsr PROC				; COMDAT
; Line 4766
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 4771
	mov	ecx, DWORD PTR _MrcData$[ebp]
; Line 4772
	mov	edx, DWORD PTR [ecx+58090]
	add	ecx, 58086				; 0000e2e6H
	mov	eax, DWORD PTR [ecx]
	mov	cl, 32					; 00000020H
	mov	DWORD PTR _LowData$[ebp], eax
	call	__aullshr
	mov	DWORD PTR _HighData$[ebp], eax
; Line 4783
	mov	edx, DWORD PTR _HighData$[ebp]
; Line 4784
	mov	eax, DWORD PTR _LowData$[ebp]
; Line 4785
	mov	ecx, 1560				; 00000618H
; Line 4786
	wrmsr
; Line 4789
	xor	eax, eax
; Line 4790
	leave
	ret	0
_ProgDramRaplLimitMsr ENDP
_TEXT	ENDS
PUBLIC	_SaveMrs
; Function compile flags: /Ogspy
;	COMDAT _SaveMrs
_TEXT	SEGMENT
_Register$ = -36					; size = 24
tv190 = -12						; size = 4
tv358 = -8						; size = 4
tv362 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SaveMrs PROC						; COMDAT
; Line 4805
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 4815
	or	DWORD PTR _Register$[ebp+8], -1
	and	DWORD PTR _Register$[ebp+12], 0
	push	ebx
; Line 4835
	movzx	ebx, BYTE PTR _Channel$[ebp]
	push	esi
	imul	ebx, 542				; 0000021eH
	mov	ecx, OFFSET _MrsCommandIndex+140
	push	edi
	mov	BYTE PTR _Register$[ebp+16], 0
	mov	DWORD PTR tv358[ebp], ecx
	mov	DWORD PTR tv362[ebp], 512		; 00000200H
	mov	DWORD PTR tv190[ebp], 7
	jmp	SHORT $LN3@SaveMrs
$LL8@SaveMrs:
; Line 4815
	mov	ecx, DWORD PTR tv358[ebp]
$LN3@SaveMrs:
; Line 4827
	mov	eax, DWORD PTR tv362[ebp]
; Line 4829
	mov	edx, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _Register$[ebp], eax
	movzx	eax, WORD PTR [ecx-140]
; Line 4832
	movzx	ecx, WORD PTR [ecx]
	add	ecx, ebx
	mov	ecx, DWORD PTR [edx+ecx*8+55526]
	add	eax, ebx
	mov	eax, DWORD PTR [edx+eax*8+55526]
	push	15					; 0000000fH
	shr	ecx, 8
	xor	esi, esi
	and	eax, -256				; ffffff00H
	and	ecx, 65535				; 0000ffffH
	xor	edx, edx
	or	edx, esi
	push	edx
	shl	eax, 8
	or	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
	add	DWORD PTR tv362[ebp], 4
	add	DWORD PTR tv358[ebp], 2
	add	esp, 48					; 00000030H
	dec	DWORD PTR tv190[ebp]
	jne	SHORT $LL8@SaveMrs
; Line 4836
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_SaveMrs ENDP
_TEXT	ENDS
PUBLIC	_SaveRcw
; Function compile flags: /Ogspy
;	COMDAT _SaveRcw
_TEXT	SEGMENT
_Register$ = -28					; size = 24
tv993 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SaveRcw PROC						; COMDAT
; Line 4850
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 4871
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, WORD PTR _MrsCommandIndex+176
	imul	eax, 542				; 0000021eH
	push	ebx
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	add	ecx, eax
	mov	esi, DWORD PTR [ebx+ecx*8+55526]
	mov	ecx, DWORD PTR [ebx+ecx*8+55530]
	shrd	esi, ecx, 8
	push	edi
	shr	ecx, 8
	mov	cx, WORD PTR _MrsCommandIndex+36
	movzx	edi, cx
	or	DWORD PTR _Register$[ebp+8], -1
	add	edi, eax
	mov	edi, DWORD PTR [ebx+edi*8+55526]
	movzx	ecx, cx
	add	ecx, eax
	push	15					; 0000000fH
	shl	edi, 8
	xor	esi, edi
	mov	DWORD PTR tv993[ebp], eax
	mov	eax, DWORD PTR [ebx+ecx*8+55526]
	xor	edx, edx
	push	edx
	and	esi, 65535				; 0000ffffH
	shl	eax, 8
	xor	esi, eax
	push	esi
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	edx
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR _Register$[ebp+12], edx
	mov	BYTE PTR _Register$[ebp+16], dl
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 540		; 0000021cH
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4880
	movzx	eax, WORD PTR _MrsCommandIndex+178
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+38
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 544		; 00000220H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4889
	movzx	eax, WORD PTR _MrsCommandIndex+180
	add	esp, 48					; 00000030H
	add	eax, DWORD PTR tv993[ebp]
	mov	DWORD PTR _Register$[ebp], 548		; 00000224H
	push	15					; 0000000fH
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+40
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4898
	movzx	eax, WORD PTR _MrsCommandIndex+182
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+42
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 552		; 00000228H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4907
	movzx	eax, WORD PTR _MrsCommandIndex+184
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+44
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	xor	ecx, edx
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _Register$[ebp], 556		; 0000022cH
	push	15					; 0000000fH
	shl	eax, 8
	push	0
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4916
	movzx	eax, WORD PTR _MrsCommandIndex+186
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+46
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 560		; 00000230H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4925
	movzx	eax, WORD PTR _MrsCommandIndex+204
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+64
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 564		; 00000234H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 4930
	mov	DWORD PTR _Register$[ebp], 572		; 0000023cH
; Line 4934
	movzx	eax, WORD PTR _MrsCommandIndex+188
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+48
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4943
	movzx	eax, WORD PTR _MrsCommandIndex+190
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+50
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 576		; 00000240H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4952
	movzx	eax, WORD PTR _MrsCommandIndex+192
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+52
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	mov	DWORD PTR _Register$[ebp], 580		; 00000244H
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	15					; 0000000fH
	and	ecx, 65535				; 0000ffffH
	movzx	eax, ax
	add	eax, DWORD PTR tv993[ebp]
	push	0
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4961
	movzx	eax, WORD PTR _MrsCommandIndex+194
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+54
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 584		; 00000248H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4970
	movzx	eax, WORD PTR _MrsCommandIndex+196
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+56
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	add	eax, DWORD PTR tv993[ebp]
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	push	15					; 0000000fH
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 588		; 0000024cH
	rep movsd
	push	13					; 0000000dH
	call	_MemRegWrite
; Line 4979
	movzx	eax, WORD PTR _MrsCommandIndex+198
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+58
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 592		; 00000250H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4988
	movzx	eax, WORD PTR _MrsCommandIndex+154
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+14
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 596		; 00000254H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 4997
	movzx	eax, WORD PTR _MrsCommandIndex+156
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+16
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	mov	DWORD PTR _Register$[ebp], 600		; 00000258H
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	push	15					; 0000000fH
	shl	edx, 8
	movzx	eax, ax
	add	eax, DWORD PTR tv993[ebp]
	xor	ecx, edx
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 5006
	movzx	eax, WORD PTR _MrsCommandIndex+206
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+66
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 612		; 00000264H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
; Line 5015
	movzx	eax, WORD PTR _MrsCommandIndex+208
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+68
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	add	eax, DWORD PTR tv993[ebp]
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	15					; 0000000fH
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	0
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	lea	esi, DWORD PTR _Register$[ebp]
	mov	edi, esp
	mov	DWORD PTR _Register$[ebp], 616		; 00000268H
	rep movsd
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	13					; 0000000dH
	call	_MemRegWrite
; Line 5024
	movzx	eax, WORD PTR _MrsCommandIndex+202
	add	eax, DWORD PTR tv993[ebp]
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR [ebx+eax*8+55526]
	mov	eax, DWORD PTR [ebx+eax*8+55530]
	shrd	ecx, eax, 8
	shr	eax, 8
	mov	ax, WORD PTR _MrsCommandIndex+62
	movzx	edx, ax
	add	edx, DWORD PTR tv993[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ebx+edx*8+55526]
	add	eax, DWORD PTR tv993[ebp]
	push	15					; 0000000fH
	mov	eax, DWORD PTR [ebx+eax*8+55526]
	shl	edx, 8
	xor	ecx, edx
	push	0
	and	ecx, 65535				; 0000ffffH
	shl	eax, 8
	xor	ecx, eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 624		; 00000270H
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 5027
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_SaveRcw ENDP
_TEXT	ENDS
PUBLIC	_SetExtDefault
; Function compile flags: /Ogspy
;	COMDAT _SetExtDefault
_TEXT	SEGMENT
_Register$ = -28					; size = 24
tv190 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SetExtDefault PROC					; COMDAT
; Line 5041
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 5049
	and	DWORD PTR _Register$[ebp+12], 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _Register$[ebp+8], 65535	; 0000ffffH
; Line 5050
	mov	BYTE PTR _Register$[ebp+16], 0
	mov	ebx, 512				; 00000200H
	mov	DWORD PTR tv190[ebp], 31		; 0000001fH
$LL8@SetExtDefa:
; Line 5056
	push	15					; 0000000fH
	xor	eax, eax
	push	eax
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	eax
	push	DWORD PTR _Channel$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], ebx
	push	13					; 0000000dH
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
	add	ebx, 4
	dec	DWORD PTR tv190[ebp]
	jne	SHORT $LL8@SetExtDefa
; Line 5059
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_SetExtDefault ENDP
_TEXT	ENDS
PUBLIC	_RaplSupport
EXTRN	_SetRaplBandWidthScale:PROC
; Function compile flags: /Ogspy
;	COMDAT _RaplSupport
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_RaplSupport PROC					; COMDAT
; Line 5073
	push	esi
; Line 5074
	mov	esi, DWORD PTR _MrcData$[esp]
	cmp	BYTE PTR [esi+70983], 1
	jne	SHORT $LN1@RaplSuppor
; Line 5075
	push	DWORD PTR _Channel$[esp]
	push	65535					; 0000ffffH
	push	11784					; 00002e08H
	push	esi
	call	_MmrcExecuteTask
; Line 5076
	push	esi
	call	_ProgDramRaplLimitMsr
; Line 5077
	push	esi
	call	_SetRaplBandWidthScale
	add	esp, 24					; 00000018H
$LN1@RaplSuppor:
; Line 5079
	push	DWORD PTR _Channel$[esp]
	push	0
	push	11775					; 00002dffH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 5081
	xor	eax, eax
	pop	esi
; Line 5082
	ret	0
_RaplSupport ENDP
_TEXT	ENDS
PUBLIC	_DnvNibbleTrainingExitHook
; Function compile flags: /Ogspy
;	COMDAT _DnvNibbleTrainingExitHook
_TEXT	SEGMENT
tv265 = -8						; size = 4
tv72 = -4						; size = 4
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_DnvNibbleTrainingExitHook PROC				; COMDAT
; Line 5148
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 5153
	mov	edi, DWORD PTR _MrcData$[ebp]
	xor	edx, edx
	lea	esi, DWORD PTR [edi+28608]
	mov	DWORD PTR tv265[ebp], 2
$LL14@DnvNibbleT:
; Line 5154
	xor	ecx, ecx
	mov	DWORD PTR tv72[ebp], 4
$LL15@DnvNibbleT:
; Line 5155
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN3@DnvNibbleT
; Line 5161
	lea	eax, DWORD PTR [edx+ecx]
	add	eax, edi
	mov	bl, BYTE PTR [eax+55470]
	mov	BYTE PTR [eax+55454], bl
; Line 5162
	mov	bl, BYTE PTR [eax+55478]
	mov	BYTE PTR [eax+55462], bl
$LN3@DnvNibbleT:
	inc	ecx
	dec	DWORD PTR tv72[ebp]
	jne	SHORT $LL15@DnvNibbleT
	add	edx, 4
	inc	esi
	dec	DWORD PTR tv265[ebp]
	jne	SHORT $LL14@DnvNibbleT
	pop	edi
	pop	esi
; Line 5166
	xor	eax, eax
	pop	ebx
; Line 5167
	leave
	ret	0
_DnvNibbleTrainingExitHook ENDP
_TEXT	ENDS
PUBLIC	_DnvNibbleTrainingHook
; Function compile flags: /Ogspy
;	COMDAT _DnvNibbleTrainingHook
_TEXT	SEGMENT
tv156 = -12						; size = 4
tv128 = -8						; size = 4
tv354 = -4						; size = 4
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_DnvNibbleTrainingHook PROC				; COMDAT
; Line 5186
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 5191
	mov	edi, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR [edi+28608]
	xor	edx, edx
	mov	DWORD PTR tv354[ebp], eax
	mov	DWORD PTR tv156[ebp], 2
$LL17@DnvNibbleT@2:
; Line 5192
	xor	esi, esi
	mov	DWORD PTR tv128[ebp], 4
$LL16@DnvNibbleT@2:
; Line 5193
	mov	eax, DWORD PTR tv354[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN5@DnvNibbleT@2
; Line 5201
	lea	eax, DWORD PTR [edx+esi]
	add	eax, edi
	lea	ecx, DWORD PTR [eax+55470]
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LN2@DnvNibbleT@2
; Line 5202
	mov	bl, BYTE PTR [eax+55454]
	mov	BYTE PTR [ecx], bl
$LN2@DnvNibbleT@2:
; Line 5204
	lea	ecx, DWORD PTR [eax+55478]
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LN1@DnvNibbleT@2
; Line 5205
	mov	bl, BYTE PTR [eax+55462]
	mov	BYTE PTR [ecx], bl
$LN1@DnvNibbleT@2:
; Line 5207
	mov	BYTE PTR [eax+55454], 18		; 00000012H
; Line 5208
	mov	BYTE PTR [eax+55462], 4
$LN5@DnvNibbleT@2:
	inc	esi
	dec	DWORD PTR tv128[ebp]
	jne	SHORT $LL16@DnvNibbleT@2
	add	edx, 4
	inc	DWORD PTR tv354[ebp]
	dec	DWORD PTR tv156[ebp]
	jne	SHORT $LL17@DnvNibbleT@2
	pop	edi
	pop	esi
; Line 5212
	xor	eax, eax
	pop	ebx
; Line 5213
	leave
	ret	0
_DnvNibbleTrainingHook ENDP
_TEXT	ENDS
PUBLIC	_VrefOverride
; Function compile flags: /Ogspy
;	COMDAT _VrefOverride
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_VrefOverride PROC					; COMDAT
; Line 1450
	mov	eax, DWORD PTR _MrcData$[esp-4]
	cmp	BYTE PTR [eax+65504], 0
	je	SHORT $LN1@VrefOverri
; Line 1454
	movzx	ecx, BYTE PTR [eax+65505]
	push	1
	push	ecx
	push	DWORD PTR _Channel$[esp+4]
	push	eax
	call	_WriteDimmVref
	add	esp, 16					; 00000010H
$LN1@VrefOverri:
; Line 1457
	xor	eax, eax
; Line 1458
	ret	0
_VrefOverride ENDP
_TEXT	ENDS
PUBLIC	_EarlySetWriteVref
; Function compile flags: /Ogspy
;	COMDAT _EarlySetWriteVref
_TEXT	SEGMENT
tv438 = -16						; size = 4
tv306 = -12						; size = 4
_TempValue$ = -8					; size = 4
_Rank$ = -4						; size = 1
_Strobe$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_EarlySetWriteVref PROC					; COMDAT
; Line 1477
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 1489
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+31274], 4
	push	edi
; Line 1490
	mov	BYTE PTR _Rank$[ebp], 0
	jne	SHORT $LN22@EarlySetWr
	mov	DWORD PTR _TempValue$[ebp], 32		; 00000020H
	lea	edi, DWORD PTR [esi+eax*4+55438]
$LL21@EarlySetWr:
; Line 1491
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN20@EarlySetWr
; Line 1494
	mov	BYTE PTR _Strobe$[ebp], 0
$LL35@EarlySetWr:
; Line 1495
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN16@EarlySetWr
; Line 1498
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	57360					; 0000e010H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN16@EarlySetWr:
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL35@EarlySetWr
$LN20@EarlySetWr:
; Line 1490
	inc	BYTE PTR _Rank$[ebp]
	inc	edi
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL21@EarlySetWr
; Line 1501
	jmp	$LN10@EarlySetWr
$LN22@EarlySetWr:
; Line 1503
	mov	edi, eax
	lea	eax, DWORD PTR [esi+eax*4+55438]
	imul	edi, 72					; 00000048H
	mov	DWORD PTR tv438[ebp], eax
$LL12@EarlySetWr:
; Line 1504
	cmp	BYTE PTR [eax], 0
	je	$LN11@EarlySetWr
; Line 1508
	mov	BYTE PTR _Strobe$[ebp], 0
$LL36@EarlySetWr:
; Line 1509
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL36@EarlySetWr
; Line 1516
	and	DWORD PTR tv306[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL37@EarlySetWr:
; Line 1517
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN3@EarlySetWr
; Line 1520
	mov	eax, DWORD PTR tv306[ebp]
	add	eax, edi
	movzx	eax, BYTE PTR [eax+esi+192]
	push	eax
	push	57360					; 0000e010H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ConvertPhysicalToLinearValue
	mov	DWORD PTR _TempValue$[ebp], eax
; Line 1522
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	57360					; 0000e010H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 44					; 0000002cH
$LN3@EarlySetWr:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv306[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL37@EarlySetWr
$LN11@EarlySetWr:
; Line 1503
	mov	eax, DWORD PTR tv438[ebp]
	inc	BYTE PTR _Rank$[ebp]
	add	edi, 18					; 00000012H
	inc	eax
	cmp	BYTE PTR _Rank$[ebp], 4
	mov	DWORD PTR tv438[ebp], eax
	jb	$LL12@EarlySetWr
$LN10@EarlySetWr:
	pop	edi
; Line 1527
	xor	eax, eax
	pop	esi
; Line 1528
	leave
	ret	0
_EarlySetWriteVref ENDP
_TEXT	ENDS
PUBLIC	_GetSetCmdVref
; Function compile flags: /Ogspy
;	COMDAT _GetSetCmdVref
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetCmdVref PROC					; COMDAT
; Line 2464
	push	ebp
	mov	ebp, esp
; Line 2465
	test	BYTE PTR _Cmd$[ebp], 1
	je	SHORT $LN2@GetSetCmdV
; Line 2466
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR _MrcData$[ebp]
	imul	eax, 72					; 00000048H
	movzx	eax, BYTE PTR [eax+ecx+336]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2467
	jmp	SHORT $LN1@GetSetCmdV
$LN2@GetSetCmdV:
	push	esi
; Line 2468
	mov	esi, DWORD PTR _Value$[ebp]
	push	edi
	push	DWORD PTR [esi]
	mov	edi, DWORD PTR _MrcData$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_WriteCmdVref
; Line 2469
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	cl, BYTE PTR [esi]
	add	esp, 12					; 0000000cH
	imul	eax, 72					; 00000048H
	mov	BYTE PTR [eax+edi+336], cl
	pop	edi
	pop	esi
$LN1@GetSetCmdV:
; Line 2472
	xor	eax, eax
; Line 2473
	pop	ebp
	ret	0
_GetSetCmdVref ENDP
_TEXT	ENDS
PUBLIC	_CmdOverrideSettings
; Function compile flags: /Ogspy
;	COMDAT _CmdOverrideSettings
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_CmdOverrideSettings PROC				; COMDAT
; Line 2745
	push	ebx
; Line 2747
	mov	ebx, DWORD PTR _Channel$[esp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[esp+4]
	push	edi
	push	DWORD PTR [esi+55172]
	push	57373					; 0000e01dH
	push	1
	push	ebx
	push	esi
	call	_OverrideDelay
; Line 2748
	push	DWORD PTR [esi+55180]
	xor	edi, edi
	push	57377					; 0000e021H
	push	edi
	push	ebx
	push	esi
	call	_OverrideDelay
; Line 2749
	push	DWORD PTR [esi+55188]
	push	57378					; 0000e022H
	push	edi
	push	ebx
	push	esi
	call	_OverrideDelay
; Line 2750
	push	DWORD PTR [esi+55184]
	push	57379					; 0000e023H
	push	edi
	push	ebx
	push	esi
	call	_OverrideDelay
	add	esp, 80					; 00000050H
; Line 2751
	push	DWORD PTR [esi+55176]
	push	57384					; 0000e028H
	push	edi
	push	ebx
	push	esi
	call	_OverrideDelay
; Line 2753
	push	DWORD PTR [esi+55176]
	push	57344					; 0000e000H
	push	edi
	push	ebx
	push	esi
	call	_OverrideDelay
; Line 2755
	push	ebx
	push	edi
	push	edi
	push	esi
	call	_DnvNibbleTrainingHook
; Line 2756
	push	DWORD PTR [esi+55176]
	push	57358					; 0000e00eH
	push	edi
	push	ebx
	push	esi
	call	_OverrideDelay
	add	esp, 76					; 0000004cH
; Line 2757
	push	DWORD PTR [esi+55176]
	push	57359					; 0000e00fH
	push	edi
	push	ebx
	push	esi
	call	_OverrideDelay
; Line 2759
	push	ebx
	push	edi
	push	edi
	push	esi
	call	_DnvNibbleTrainingExitHook
	add	esp, 36					; 00000024H
	pop	edi
	pop	esi
; Line 2761
	xor	eax, eax
	pop	ebx
; Line 2762
	ret	0
_CmdOverrideSettings ENDP
_TEXT	ENDS
PUBLIC	_HandleCheckpoint
; Function compile flags: /Ogspy
;	COMDAT _HandleCheckpoint
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_MrcData$ = 8						; size = 4
tv161 = 12						; size = 4
_CheckPoint$ = 12					; size = 1
_HandleCheckpoint PROC					; COMDAT
; Line 3137
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 3146
	cmp	BYTE PTR _CheckPoint$[ebp], 255		; 000000ffH
	push	ebx
	push	esi
	push	edi
	je	SHORT $LN7@HandleChec
; Line 3147
	movzx	eax, BYTE PTR _CheckPoint$[ebp]
	mov	edx, 128				; 00000080H
	out	dx, eax
$LN7@HandleChec:
; Line 3158
	movzx	eax, BYTE PTR _CheckPoint$[ebp]
	or	DWORD PTR _Register$[ebp+8], -1
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	xor	ebx, ebx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 292		; 00000124H
	mov	DWORD PTR _Register$[ebp+12], ebx
	mov	BYTE PTR _Register$[ebp+16], bl
	push	ebx
	mov	DWORD PTR tv161[ebp], eax
	rep movsd
	call	_MemRegRead
; Line 3159
	mov	ecx, DWORD PTR tv161[ebp]
	add	esp, 36					; 00000024H
; Line 3160
	push	15					; 0000000fH
	push	ebx
	shl	ecx, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	or	eax, ecx
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	ebx
	rep movsd
	call	_MemRegWrite
; Line 3164
	add	esp, 24					; 00000018H
; Line 3169
	jmp	SHORT $LN12@HandleChec
$LL2@HandleChec:
; Line 3170
	sub	esp, 24					; 00000018H
$LN12@HandleChec:
	push	6
	pop	ecx
	mov	edi, esp
	push	ebx
	push	ebx
	lea	esi, DWORD PTR _Register$[ebp]
	push	ebx
	rep movsd
	call	_MemRegRead
	and	eax, 65535				; 0000ffffH
	add	esp, 36					; 00000024H
	cmp	DWORD PTR tv161[ebp], eax
	je	SHORT $LL2@HandleChec
; Line 3173
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_HandleCheckpoint ENDP
_TEXT	ENDS
PUBLIC	_MirrorMrsAndAssignToDynamicVars
; Function compile flags: /Ogspy
;	COMDAT _MirrorMrsAndAssignToDynamicVars
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_MiscCommand$ = 20					; size = 4
_DynamicVar$ = 24					; size = 2
_Side$ = 28						; size = 1
_MirrorMrsAndAssignToDynamicVars PROC			; COMDAT
; Line 3409
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3410
	push	DWORD PTR _Side$[ebp]
	mov	esi, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR _MiscCommand$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ConvertMrsDataToMirrored
; Line 3411
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, WORD PTR _DynamicVar$[ebp]
	imul	eax, 542				; 0000021eH
	add	eax, ecx
	mov	ecx, DWORD PTR _MiscCommand$[ebp]
	add	esp, 20					; 00000014H
	and	DWORD PTR [esi+eax*8+55530], 0
	mov	DWORD PTR [esi+eax*8+55526], ecx
	pop	esi
; Line 3412
	pop	ebp
	ret	0
_MirrorMrsAndAssignToDynamicVars ENDP
_TEXT	ENDS
PUBLIC	_WriteDramCommand
; Function compile flags: /Ogspy
;	COMDAT _WriteDramCommand
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_MiscCommand$ = 20					; size = 4
_Side$ = 24						; size = 1
_WriteDramCommand PROC					; COMDAT
; Line 3439
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 3445
	push	DWORD PTR _Side$[ebp]
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	push	370					; 00000172H
	push	DWORD PTR _MiscCommand$[ebp]
	mov	BYTE PTR [esi+55508], 0
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_MirrorMrsAndAssignToDynamicVars
; Line 3446
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	14185					; 00003769H
	push	esi
	call	_MmrcExecuteTask
; Line 3451
	push	50					; 00000032H
	push	2
	call	_MspDelay
	add	esp, 48					; 00000030H
; Line 3454
	mov	BYTE PTR [esi+55508], bl
	pop	esi
	pop	ebx
; Line 3455
	pop	ebp
	ret	0
_WriteDramCommand ENDP
_TEXT	ENDS
PUBLIC	_DisplayOrRestoreTrainingResultsRxDqsWrapper
; Function compile flags: /Ogspy
;	COMDAT _DisplayOrRestoreTrainingResultsRxDqsWrapper
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_FaultyPartProcess$ = 16				; size = 1
_DisplayOrRestoreTrainingResultsRxDqsWrapper PROC	; COMDAT
; Line 4305
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 4306
	push	DWORD PTR _FaultyPartProcess$[ebp]
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	57347					; 0000e003H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4307
	push	DWORD PTR _FaultyPartProcess$[ebp]
	push	57348					; 0000e004H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4308
	xor	ebx, ebx
	add	esp, 32					; 00000020H
	cmp	BYTE PTR [esi+71005], bl
	je	SHORT $LN1@DisplayOrR
; Line 4309
	push	ebx
	push	ebx
	push	ebx
	push	esi
	call	_DnvNibbleTrainingHook
; Line 4310
	push	DWORD PTR _FaultyPartProcess$[ebp]
	push	57351					; 0000e007H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4311
	push	ebx
	push	ebx
	push	ebx
	push	esi
	call	_DnvNibbleTrainingExitHook
	add	esp, 48					; 00000030H
$LN1@DisplayOrR:
	pop	esi
; Line 4314
	xor	eax, eax
	pop	ebx
; Line 4315
	pop	ebp
	ret	0
_DisplayOrRestoreTrainingResultsRxDqsWrapper ENDP
_TEXT	ENDS
PUBLIC	_CaParityEnable
; Function compile flags: /Ogspy
;	COMDAT _CaParityEnable
_TEXT	SEGMENT
tv228 = 8						; size = 4
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_CaParityEnable PROC					; COMDAT
; Line 5101
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5105
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+70806], 1
	jne	SHORT $LN3@CaParityEn
	push	ebx
	push	edi
; Line 5106
	movzx	edi, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR tv228[ebp], 0
	lea	ebx, DWORD PTR [esi+edi*2+28610]
$LL11@CaParityEn:
; Line 5110
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN4@CaParityEn
	cmp	BYTE PTR [edi+esi+31272], 7
	jne	SHORT $LN4@CaParityEn
	mov	eax, edi
	imul	eax, 4336				; 000010f0H
	cmp	DWORD PTR [eax+esi+55966], 1
	jne	SHORT $LN4@CaParityEn
	cmp	DWORD PTR [eax+esi+55970], 0
	jne	SHORT $LN4@CaParityEn
; Line 5121
	push	7
	push	DWORD PTR tv228[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 5125
	push	0
	or	eax, 256				; 00000100H
	push	eax
	push	DWORD PTR tv228[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommand
	add	esp, 36					; 00000024H
$LN4@CaParityEn:
	add	BYTE PTR tv228[ebp], 2
	inc	ebx
	cmp	BYTE PTR tv228[ebp], 4
	jb	SHORT $LL11@CaParityEn
	pop	edi
	pop	ebx
$LN3@CaParityEn:
; Line 5128
	xor	eax, eax
	pop	esi
; Line 5129
	pop	ebp
	ret	0
_CaParityEnable ENDP
_TEXT	ENDS
PUBLIC	_PdaSequence
EXTRN	_PrechargeAll:PROC
; Function compile flags: /Ogspy
;	COMDAT _PdaSequence
_TEXT	SEGMENT
_Mrs6Command$ = -4					; size = 4
_InternalValue$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Strobe$ = 24						; size = 1
_Value$ = 28						; size = 4
_Side$ = 32						; size = 1
_PdaEnable$ = 36					; size = 1
_PdaSequence PROC					; COMDAT
; Line 2032
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2040
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LN10@PdaSequenc
; Line 2041
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 44		; 0000002cH
; Line 2042
	call	_MrcDeadLoop
; Line 2043
	or	eax, -1
; Line 2114
	leave
	ret	0
$LN10@PdaSequenc:
; Line 2045
	mov	eax, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [eax]
	push	ebx
; Line 2046
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	DWORD PTR _Rank$[ebp]
	mov	DWORD PTR _InternalValue$[ebp], eax
	push	ebx
	push	esi
	call	_PrechargeAll
; Line 2050
	push	6
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_ReadMrsCommand
	mov	edi, eax
; Line 2052
	mov	eax, DWORD PTR _InternalValue$[ebp]
	add	esp, 28					; 0000001cH
	or	edi, 32768				; 00008000H
	cmp	eax, 23					; 00000017H
	ja	SHORT $LN9@PdaSequenc
; Line 2053
	or	edi, 16384				; 00004000H
; Line 2054
	jmp	SHORT $LN8@PdaSequenc
$LN9@PdaSequenc:
; Line 2055
	and	edi, -16385				; ffffbfffH
; Line 2056
	sub	eax, 23					; 00000017H
$LN8@PdaSequenc:
; Line 2061
	shl	eax, 8
	xor	eax, edi
	and	eax, 16128				; 00003f00H
	xor	edi, eax
; Line 2063
	cmp	BYTE PTR _PdaEnable$[ebp], 0
	mov	DWORD PTR _Mrs6Command$[ebp], edi
	jne	SHORT $LN13@PdaSequenc
; Line 2064
	push	DWORD PTR _Side$[ebp]
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommand
	add	esp, 20					; 00000014H
$LN13@PdaSequenc:
; Line 2066
	cmp	BYTE PTR _PdaEnable$[ebp], 1
	jne	$LN5@PdaSequenc
; Line 2070
	push	3
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 2072
	push	DWORD PTR _Side$[ebp]
	or	eax, 4096				; 00001000H
	push	371					; 00000173H
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_MirrorMrsAndAssignToDynamicVars
; Line 2074
	push	3
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 2076
	push	DWORD PTR _Side$[ebp]
	and	eax, -4097				; ffffefffH
	push	373					; 00000175H
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_MirrorMrsAndAssignToDynamicVars
	add	esp, 80					; 00000050H
; Line 2080
	push	DWORD PTR _Side$[ebp]
	push	372					; 00000174H
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_MirrorMrsAndAssignToDynamicVars
; Line 2081
	movzx	eax, BYTE PTR _Rank$[ebp]
	shr	eax, 1
	movzx	edi, bl
	add	eax, esi
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [eax+edi*2+55398], 0
	jne	SHORT $LN4@PdaSequenc
; Line 2082
	mov	al, 1
; Line 2083
	mov	dl, al
; Line 2084
	jmp	SHORT $LN3@PdaSequenc
$LN4@PdaSequenc:
; Line 2085
	mov	al, 2
; Line 2086
	mov	dl, 3
$LN3@PdaSequenc:
; Line 2088
	movzx	ecx, al
	imul	edi, 4336				; 000010f0H
	movzx	eax, BYTE PTR _Strobe$[ebp]
	imul	ecx, eax
	movzx	eax, dl
	shl	eax, cl
; Line 2090
	push	ebx
	mov	ebx, 65535				; 0000ffffH
	push	ebx
	not	eax
	cdq
	mov	DWORD PTR [edi+esi+58518], eax
	mov	DWORD PTR [edi+esi+58522], edx
	mov	edi, 14196				; 00003774H
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 2091
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 2096
	push	DWORD PTR _Side$[ebp]
	and	DWORD PTR _Mrs6Command$[ebp], -32769	; ffff7fffH
	push	372					; 00000174H
	push	DWORD PTR _Mrs6Command$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_MirrorMrsAndAssignToDynamicVars
; Line 2097
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 72					; 00000048H
; Line 2098
	jmp	SHORT $LN1@PdaSequenc
$LN5@PdaSequenc:
; Line 2102
	push	DWORD PTR _Side$[ebp]
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommand
	add	esp, 20					; 00000014H
; Line 2107
	cmp	BYTE PTR _PdaEnable$[ebp], 0
	jne	SHORT $LN1@PdaSequenc
; Line 2109
	push	DWORD PTR _Side$[ebp]
	and	edi, -32769				; ffff7fffH
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommand
	add	esp, 20					; 00000014H
$LN1@PdaSequenc:
	pop	edi
	pop	esi
; Line 2113
	xor	eax, eax
	pop	ebx
; Line 2114
	leave
	ret	0
_PdaSequence ENDP
_TEXT	ENDS
PUBLIC	_GetSetDimmVref
; Function compile flags: /Ogspy
;	COMDAT _GetSetDimmVref
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Cmd$ = 44						; size = 1
_Value$ = 48						; size = 4
_GetSetDimmVref PROC					; COMDAT
; Line 2130
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 2131
	movzx	esi, BYTE PTR _Channel$[ebp]
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+edi+31272]
	cmp	al, 3
	jbe	$LN10@GetSetDimm
	cmp	al, 7
	jne	$LN8@GetSetDimm
; Line 2145
	test	BYTE PTR _Cmd$[ebp], 1
; Line 2146
	movzx	eax, BYTE PTR _Rank$[ebp]
	je	SHORT $LN6@GetSetDimm
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	lea	eax, DWORD PTR [eax+esi*4]
	imul	eax, 18					; 00000012H
	add	eax, edi
	movzx	eax, BYTE PTR [ecx+eax+71023]
; Line 2147
	jmp	$LN17@GetSetDimm
$LN6@GetSetDimm:
; Line 2151
	mov	ebx, DWORD PTR _Value$[ebp]
	movzx	edx, BYTE PTR _Strobe$[ebp]
	mov	bl, BYTE PTR [ebx]
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	eax, ecx
	imul	eax, 18					; 00000012H
	add	eax, edi
	mov	BYTE PTR [edx+eax+71023], bl
; Line 2153
	mov	al, BYTE PTR [edi+71022]
	xor	ebx, ebx
	cmp	al, bl
	jne	SHORT $LN15@GetSetDimm
	cmp	BYTE PTR _Strobe$[ebp], bl
	ja	$LN8@GetSetDimm
$LN15@GetSetDimm:
	cmp	BYTE PTR [ecx+edi+55470], 9
	jne	SHORT $LN16@GetSetDimm
	cmp	BYTE PTR _Strobe$[ebp], 8
; Line 2154
	ja	$LN8@GetSetDimm
$LN16@GetSetDimm:
; Line 2156
	push	eax
	push	ebx
	push	DWORD PTR _Value$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	edi
	call	_PdaSequence
; Line 2161
	imul	esi, 4336				; 000010f0H
	add	esp, 32					; 00000020H
	cmp	DWORD PTR [esi+edi+55966], 1
	jne	SHORT $LN8@GetSetDimm
	cmp	DWORD PTR [esi+edi+55970], ebx
	jne	SHORT $LN8@GetSetDimm
; Line 2162
	movzx	eax, BYTE PTR [edi+71022]
	push	eax
	push	1
	push	DWORD PTR _Value$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	edi
	call	_PdaSequence
	add	esp, 32					; 00000020H
; Line 2167
	jmp	SHORT $LN8@GetSetDimm
$LN10@GetSetDimm:
; Line 2136
	test	BYTE PTR _Cmd$[ebp], 1
	je	SHORT $LN9@GetSetDimm
; Line 2137
	imul	esi, 72					; 00000048H
	movzx	eax, BYTE PTR [esi+edi+192]
$LN17@GetSetDimm:
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2138
	jmp	SHORT $LN8@GetSetDimm
$LN9@GetSetDimm:
; Line 2139
	mov	ebx, DWORD PTR _Value$[ebp]
	push	1
	push	DWORD PTR [ebx]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_WriteDimmVref
; Line 2140
	mov	al, BYTE PTR [ebx]
	add	esp, 16					; 00000010H
	imul	esi, 72					; 00000048H
	mov	BYTE PTR [esi+edi+192], al
$LN8@GetSetDimm:
	pop	edi
	pop	esi
; Line 2169
	xor	eax, eax
	pop	ebx
; Line 2170
	pop	ebp
	ret	0
_GetSetDimmVref ENDP
_TEXT	ENDS
PUBLIC	??_C@_05ICDOEJHF@CkAll?$AA@			; `string'
PUBLIC	??_C@_06FKBIONIN@CkeGrp?$AA@			; `string'
PUBLIC	??_C@_06DBGOILBO@OdtGrp?$AA@			; `string'
PUBLIC	??_C@_05HAKBJMN@CsGrp?$AA@			; `string'
PUBLIC	??_C@_06LBCBCHCA@CmdGrp?$AA@			; `string'
PUBLIC	??_C@_05CKOGBCJH@TxDrv?$AA@			; `string'
PUBLIC	??_C@_05MEEBFGBM@TxDq?5?$AA@			; `string'
PUBLIC	??_C@_05FFNHFIIL@TxDqs?$AA@			; `string'
PUBLIC	??_C@_05BCJCAMHP@RcvEn?$AA@			; `string'
PUBLIC	_PerformanceLatency
EXTRN	_TestMrcTrainingSteps:PROC
EXTRN	_AverageGroups:PROC
;	COMDAT ??_C@_05ICDOEJHF@CkAll?$AA@
CONST	SEGMENT
??_C@_05ICDOEJHF@CkAll?$AA@ DB 'CkAll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKBIONIN@CkeGrp?$AA@
CONST	SEGMENT
??_C@_06FKBIONIN@CkeGrp?$AA@ DB 'CkeGrp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DBGOILBO@OdtGrp?$AA@
CONST	SEGMENT
??_C@_06DBGOILBO@OdtGrp?$AA@ DB 'OdtGrp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HAKBJMN@CsGrp?$AA@
CONST	SEGMENT
??_C@_05HAKBJMN@CsGrp?$AA@ DB 'CsGrp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBCBCHCA@CmdGrp?$AA@
CONST	SEGMENT
??_C@_06LBCBCHCA@CmdGrp?$AA@ DB 'CmdGrp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CKOGBCJH@TxDrv?$AA@
CONST	SEGMENT
??_C@_05CKOGBCJH@TxDrv?$AA@ DB 'TxDrv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEEBFGBM@TxDq?5?$AA@
CONST	SEGMENT
??_C@_05MEEBFGBM@TxDq?5?$AA@ DB 'TxDq ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FFNHFIIL@TxDqs?$AA@
CONST	SEGMENT
??_C@_05FFNHFIIL@TxDqs?$AA@ DB 'TxDqs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BCJCAMHP@RcvEn?$AA@
CONST	SEGMENT
??_C@_05BCJCAMHP@RcvEn?$AA@ DB 'RcvEn', 00H		; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _PerformanceLatency
_TEXT	SEGMENT
tv464 = -20						; size = 4
_TrainingDelay$ = -20					; size = 2
tv362 = -16						; size = 4
_Minimum$ = -16						; size = 4
_GlobalMinimum$ = -12					; size = 4
_Rank$ = -5						; size = 1
_BackupMsg$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_GroupOffset$ = 11					; size = 1
_BackupEnable$ = 11					; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
tv354 = 20						; size = 4
tv224 = 20						; size = 4
_Channel$ = 20						; size = 1
_PerformanceLatency PROC				; COMDAT
; Line 2953
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 2965
	or	DWORD PTR _GlobalMinimum$[ebp], -1
; Line 2966
	or	DWORD PTR _Minimum$[ebp], -1
	and	DWORD PTR tv464[ebp], 0
	push	ebx
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55509]
	mov	BYTE PTR _BackupEnable$[ebp], al
; Line 2967
	mov	al, BYTE PTR [esi+55506]
	push	edi
	mov	BYTE PTR _BackupMsg$[ebp], al
; Line 2969
	mov	BYTE PTR _Rank$[ebp], 0
	mov	edi, 12308				; 00003014H
$LL13@Performanc:
; Line 2970
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN12@Performanc
; Line 2980
	mov	ecx, DWORD PTR tv464[ebp]
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	movzx	eax, bl
	push	57344					; 0000e000H
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	eax, BYTE PTR [eax+esi+55454]
	push	OFFSET ??_C@_05BCJCAMHP@RcvEn?$AA@
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
; Line 2981
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	57358					; 0000e00eH
	push	OFFSET ??_C@_05FFNHFIIL@TxDqs?$AA@
	push	18					; 00000012H
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
	add	esp, 64					; 00000040H
; Line 2982
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	57359					; 0000e00fH
	push	OFFSET ??_C@_05MEEBFGBM@TxDq?5?$AA@
	push	18					; 00000012H
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
; Line 2983
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	edi
	push	OFFSET ??_C@_05CKOGBCJH@TxDrv?$AA@
	push	18					; 00000012H
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
	add	esp, 64					; 00000040H
; Line 2984
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	57373					; 0000e01dH
	push	OFFSET ??_C@_06LBCBCHCA@CmdGrp?$AA@
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
; Line 2985
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	57377					; 0000e021H
	push	OFFSET ??_C@_05HAKBJMN@CsGrp?$AA@
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
	add	esp, 64					; 00000040H
; Line 2986
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	57378					; 0000e022H
	push	OFFSET ??_C@_06DBGOILBO@OdtGrp?$AA@
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
; Line 2987
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	57379					; 0000e023H
	push	OFFSET ??_C@_06FKBIONIN@CkeGrp?$AA@
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
	add	esp, 64					; 00000040H
; Line 2988
	lea	eax, DWORD PTR _GlobalMinimum$[ebp]
	push	eax
	lea	eax, DWORD PTR _Minimum$[ebp]
	push	eax
	push	57384					; 0000e028H
	push	OFFSET ??_C@_05ICDOEJHF@CkAll?$AA@
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetMin2xPIPerRank
	add	esp, 32					; 00000020H
$LN12@Performanc:
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv464[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL13@Performanc
; Line 2991
	push	ebx
	push	esi
	call	_GetHalfClk
	movzx	ecx, ax
	mov	eax, DWORD PTR _GlobalMinimum$[ebp]
	xor	edx, edx
	div	ecx
	push	ebx
	push	esi
	mov	DWORD PTR tv224[ebp], eax
	call	_GetHalfClk
	movzx	eax, ax
	imul	eax, DWORD PTR tv224[ebp]
; Line 3000
	push	ebx
	neg	eax
	push	0
	push	0
	push	esi
	mov	DWORD PTR [esi+55172], eax
	mov	DWORD PTR [esi+55180], eax
	mov	DWORD PTR [esi+55188], eax
	mov	DWORD PTR [esi+55184], eax
	mov	DWORD PTR [esi+55176], eax
	call	_CmdOverrideSettings
; Line 3001
	push	ebx
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
; Line 3002
	and	BYTE PTR [esi+55506], 251		; 000000fbH
	add	esp, 48					; 00000030H
; Line 3005
	push	0
	mov	BYTE PTR [esi+55509], 1
	push	0
	test	bl, bl
	jne	SHORT $LN6@Performanc
	push	12046					; 00002f0eH
; Line 3006
	jmp	SHORT $LN23@Performanc
$LN6@Performanc:
; Line 3007
	push	12142					; 00002f6eH
$LN23@Performanc:
	push	esi
	call	_MmrcExecuteTask
; Line 3009
	mov	al, BYTE PTR _BackupEnable$[ebp]
	add	esp, 16					; 00000010H
; Line 3010
	push	ebx
	push	esi
	mov	BYTE PTR [esi+55509], al
	call	_ReceiveEnableExit
; Line 3011
	push	ebx
	push	esi
	call	_WriteTrainingExit
; Line 3012
	mov	al, BYTE PTR _BackupMsg$[ebp]
; Line 3013
	push	ebx
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	mov	BYTE PTR [esi+55506], al
	call	_MmrcExecuteTask
; Line 3015
	push	0
	push	57344					; 0000e000H
	push	ebx
	push	esi
	call	_AverageGroups
; Line 3017
	push	1
	push	57348					; 0000e004H
	push	ebx
	push	esi
	call	_AverageGroups
	add	esp, 64					; 00000040H
; Line 3021
	push	0
	push	57358					; 0000e00eH
	push	ebx
	push	esi
	call	_AverageGroups
; Line 3022
	push	0
	push	57359					; 0000e00fH
	push	ebx
	push	esi
	call	_AverageGroups
; Line 3024
	push	0
	push	edi
	push	ebx
	push	esi
	call	_AverageGroups
; Line 3029
	push	57373					; 0000e01dH
	push	esi
	call	_GetOffsetIndex
	movzx	eax, ax
	add	esp, 56					; 00000038H
	mov	DWORD PTR _TrainingDelay$[ebp], eax
; Line 3030
	mov	BYTE PTR _GroupOffset$[ebp], 0
	mov	DWORD PTR tv354[ebp], 8
$LL22@Performanc:
; Line 3032
	movzx	ax, BYTE PTR _GroupOffset$[ebp]
	add	ax, WORD PTR _TrainingDelay$[ebp]
	push	1
	mov	WORD PTR tv362[ebp], ax
	push	eax
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 3033
	push	DWORD PTR tv362[ebp]
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	mov	al, BYTE PTR _SignalInfoGenerated[eax+1]
	add	BYTE PTR _GroupOffset$[ebp], al
	add	esp, 20					; 00000014H
	dec	DWORD PTR tv354[ebp]
	jne	SHORT $LL22@Performanc
; Line 3035
	push	1
	push	57377					; 0000e021H
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 3036
	push	1
	push	57378					; 0000e022H
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 3037
	push	1
	push	57379					; 0000e023H
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 3038
	push	1
	push	57384					; 0000e028H
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
	add	esp, 64					; 00000040H
; Line 3040
	push	1
	push	57344					; 0000e000H
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 3041
	push	1
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResultsRxDqsWrapper
; Line 3042
	push	1
	push	57358					; 0000e00eH
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 3043
	push	1
	push	57359					; 0000e00fH
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 3044
	push	0
	push	edi
	push	ebx
	push	esi
	call	_DisplayOrRestoreTrainingResults
	add	esp, 76					; 0000004cH
; Line 3046
	push	ebx
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
; Line 3047
	push	6
	push	8
	push	0
	push	2
	push	2
	push	ebx
	push	esi
	call	_TestMrcTrainingSteps
	add	esp, 44					; 0000002cH
	pop	edi
	pop	esi
; Line 3051
	xor	eax, eax
	pop	ebx
; Line 3052
	leave
	ret	0
_PerformanceLatency ENDP
_TEXT	ENDS
PUBLIC	_ToggleMprModeSide
; Function compile flags: /Ogspy
;	COMDAT _ToggleMprModeSide
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Toggle$ = 20						; size = 1
_Side$ = 24						; size = 1
_ToggleMprModeSide PROC					; COMDAT
; Line 3249
	push	ebp
	mov	ebp, esp
; Line 3260
	cmp	BYTE PTR _Toggle$[ebp], 1
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	push	edi
	mov	edi, DWORD PTR _Channel$[ebp]
	mov	BYTE PTR [esi+55508], 0
	jne	SHORT $LN2@ToggleMprM
; Line 3261
	push	edi
	push	65535					; 0000ffffH
	push	14532					; 000038c4H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN2@ToggleMprM:
; Line 3264
	push	3
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	esi
	call	_ReadMrsCommand
; Line 3265
	movzx	ecx, BYTE PTR _Toggle$[ebp]
; Line 3266
	push	DWORD PTR _Side$[ebp]
	and	ecx, 1
	and	eax, -1025				; fffffbffH
	shl	ecx, 10					; 0000000aH
	or	eax, ecx
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	esi
	call	_WriteDramCommand
	add	esp, 36					; 00000024H
; Line 3271
	cmp	BYTE PTR _Toggle$[ebp], 0
	jne	SHORT $LN1@ToggleMprM
; Line 3272
	push	edi
	push	65535					; 0000ffffH
	push	14540					; 000038ccH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN1@ToggleMprM:
; Line 3275
	push	10					; 0000000aH
	push	1
	call	_MspDelay
	pop	ecx
	pop	ecx
	pop	edi
; Line 3277
	mov	BYTE PTR [esi+55508], bl
	pop	esi
	pop	ebx
; Line 3278
	pop	ebp
	ret	0
_ToggleMprModeSide ENDP
_TEXT	ENDS
PUBLIC	_WriteDramCommandSideWrap
; Function compile flags: /Ogspy
;	COMDAT _WriteDramCommandSideWrap
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_MiscCommand$ = 20					; size = 4
_WriteDramCommandSideWrap PROC				; COMDAT
; Line 3421
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3422
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	0
	push	DWORD PTR _MiscCommand$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommand
; Line 3426
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 4336				; 000010f0H
	add	esp, 20					; 00000014H
	cmp	DWORD PTR [eax+esi+55966], 1
	jne	SHORT $LN1@WriteDramC
	cmp	DWORD PTR [eax+esi+55970], 0
	jne	SHORT $LN1@WriteDramC
; Line 3427
	push	1
	push	DWORD PTR _MiscCommand$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommand
	add	esp, 20					; 00000014H
$LN1@WriteDramC:
	pop	esi
; Line 3429
	pop	ebp
	ret	0
_WriteDramCommandSideWrap ENDP
_TEXT	ENDS
PUBLIC	_JedecDllOffToOnFlow
EXTRN	_SearchSubtaskName:PROC
; Function compile flags: /Ogspy
;	COMDAT _JedecDllOffToOnFlow
_TEXT	SEGMENT
tv223 = -8						; size = 4
_NextDimmsRank$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Dimm$ = 16						; size = 1
tv192 = 19						; size = 1
_JedecDllOffToOnFlow PROC				; COMDAT
; Line 5221
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 5225
	mov	bl, BYTE PTR _Dimm$[ebp]
	push	esi
; Line 5231
	push	DWORD PTR _Channel$[ebp]
	add	bl, bl
	mov	BYTE PTR tv192[ebp], bl
	mov	esi, 14597				; 00003905H
	add	bl, 2
	push	esi
	mov	BYTE PTR _NextDimmsRank$[ebp], bl
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	esi
	call	_MmrcExecuteTask
; Line 5233
	mov	al, BYTE PTR tv192[ebp]
	add	esp, 16					; 00000010H
	mov	BYTE PTR _Rank$[ebp], al
	cmp	al, bl
	jae	SHORT $LN2@JedecDllOf
	movzx	ebx, BYTE PTR _Channel$[ebp]
	movzx	ecx, al
	mov	DWORD PTR tv223[ebp], ecx
	push	edi
$LL4@JedecDllOf:
; Line 5234
	cmp	BYTE PTR [ebx+esi+28608], 0
	je	SHORT $LN3@JedecDllOf
	mov	ecx, DWORD PTR tv223[ebp]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	cmp	BYTE PTR [ecx+esi+55438], 0
	je	SHORT $LN3@JedecDllOf
; Line 5235
	push	0
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 5236
	push	1
	push	DWORD PTR _Rank$[ebp]
	mov	edi, eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReadMrsCommand
; Line 5237
	or	eax, 256				; 00000100H
; Line 5244
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommandSideWrap
	or	edi, 65536				; 00010000H
; Line 5245
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommandSideWrap
	mov	al, BYTE PTR _Rank$[ebp]
	add	esp, 64					; 00000040H
$LN3@JedecDllOf:
	inc	al
	inc	DWORD PTR tv223[ebp]
	mov	BYTE PTR _Rank$[ebp], al
	cmp	al, BYTE PTR _NextDimmsRank$[ebp]
	jb	SHORT $LL4@JedecDllOf
	pop	edi
$LN2@JedecDllOf:
	pop	esi
	pop	ebx
; Line 5248
	leave
	ret	0
_JedecDllOffToOnFlow ENDP
_TEXT	ENDS
PUBLIC	_SendGuardKeyPattern
EXTRN	_MaxGuardkeyPatterns:QWORD
; Function compile flags: /Ogspy
;	COMDAT _SendGuardKeyPattern
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_SendGuardKeyPattern PROC				; COMDAT
; Line 909
	push	ebx
	push	esi
; Line 923
	movzx	esi, BYTE PTR _Rank$[esp+4]
	push	edi
	and	esi, 3
	shl	esi, 26					; 0000001aH
; Line 925
	push	4
	or	esi, 8
; Line 929
	mov	edi, OFFSET _MaxGuardkeyPatterns
	pop	ebx
$LL8@SendGuardK:
	movzx	eax, WORD PTR [edi]
	shl	eax, 8
	xor	eax, esi
	and	eax, 67108608				; 03ffff00H
	xor	esi, eax
; Line 930
	push	esi
	push	DWORD PTR _Rank$[esp+12]
	push	DWORD PTR _Channel$[esp+16]
	push	DWORD PTR _MrcData$[esp+20]
	call	_WriteDramCommandSideWrap
	add	esp, 16					; 00000010H
	inc	edi
	inc	edi
	dec	ebx
	jne	SHORT $LL8@SendGuardK
	pop	edi
	pop	esi
; Line 936
	xor	eax, eax
	pop	ebx
; Line 937
	ret	0
_SendGuardKeyPattern ENDP
_TEXT	ENDS
PUBLIC	_PostPackageRepairEntry
; Function compile flags: /Ogspy
;	COMDAT _PostPackageRepairEntry
_TEXT	SEGMENT
tv538 = -36						; size = 4
_Mrs0Command$ = -32					; size = 4
tv575 = -28						; size = 4
tv541 = -24						; size = 4
tv501 = -20						; size = 4
tv525 = -16						; size = 4
_Failures$ = -12					; size = 4
_BankGroup$ = -8					; size = 1
_Mrs4Command$ = -4					; size = 4
_Rank$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_Dimm$ = 23						; size = 1
_PostPackageRepairEntry PROC				; COMDAT
; Line 1208
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 1227
	and	DWORD PTR _Failures$[ebp], 0
	push	ebx
; Line 1232
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_SaveMrs
; Line 1233
	movzx	edi, bl
	mov	eax, edi
	imul	eax, 4336				; 000010f0H
	add	eax, esi
	cmp	DWORD PTR [eax+55558], 1
	pop	ecx
	pop	ecx
	jne	SHORT $LN42@PostPackag
	cmp	DWORD PTR [eax+55562], 0
	je	SHORT $LN28@PostPackag
$LN42@PostPackag:
	cmp	DWORD PTR [eax+55566], 1
	jne	SHORT $LN29@PostPackag
	cmp	DWORD PTR [eax+55570], 0
	jne	SHORT $LN29@PostPackag
$LN28@PostPackag:
; Line 1234
	push	ebx
	push	esi
	call	_SaveRcw
	pop	ecx
	pop	ecx
$LN29@PostPackag:
; Line 1239
	cmp	BYTE PTR [edi+esi+31272], 7
	jne	$LN26@PostPackag
	push	ebx
	push	esi
	call	_RunPpr
	pop	ecx
	pop	ecx
	test	al, al
	je	$LN26@PostPackag
; Line 1246
	push	ebx
	push	0
	push	16594					; 000040d2H
	push	esi
	call	_MmrcExecuteTask
; Line 1250
	push	ebx
	push	0
	push	16668					; 0000411cH
	push	esi
	call	_MmrcExecuteTask
; Line 1251
	push	ebx
	push	esi
	call	_GetRowBankLocation
	add	esp, 40					; 00000028H
; Line 1253
	mov	BYTE PTR _Rank$[ebp], 0
$LL39@PostPackag:
; Line 1256
	mov	edi, DWORD PTR _Rank$[ebp]
	mov	al, BYTE PTR _Rank$[ebp]
	push	0
	push	edi
	shr	al, 1
	push	ebx
	push	esi
	mov	BYTE PTR _Dimm$[ebp], al
	call	_ReadMrsCommand
; Line 1257
	push	2
	push	edi
	push	ebx
	push	esi
	mov	DWORD PTR _Mrs0Command$[ebp], eax
	call	_ReadMrsCommand
; Line 1258
	push	3
	push	edi
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 1259
	push	4
	push	edi
	push	ebx
	push	esi
	call	_ReadMrsCommand
	add	esp, 64					; 00000040H
; Line 1260
	push	5
	push	edi
	push	ebx
	push	esi
	mov	DWORD PTR _Mrs4Command$[ebp], eax
	call	_ReadMrsCommand
; Line 1264
	movzx	edi, BYTE PTR _Rank$[ebp]
	movzx	eax, bl
	lea	ecx, DWORD PTR [edi+eax*4+30688]
	add	esp, 16					; 00000010H
	cmp	BYTE PTR [ecx+esi], 0
	mov	DWORD PTR tv501[ebp], edi
	je	$LN24@PostPackag
	movzx	ecx, BYTE PTR _Dimm$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+28610]
	cmp	BYTE PTR [edx+esi], 0
	je	$LN24@PostPackag
; Line 1268
	lea	edx, DWORD PTR [ecx+eax*2+55128]
	cmp	BYTE PTR [edx+esi], 0
	je	$LN24@PostPackag
	lea	edx, DWORD PTR [ecx+eax*2+55132]
	add	edx, esi
	cmp	BYTE PTR [edx], 0
	mov	DWORD PTR tv525[ebp], edx
	je	$LN24@PostPackag
; Line 1276
	lea	ecx, DWORD PTR [ecx+eax*2+55168]
	cmp	BYTE PTR [ecx+esi], 2
	jb	$LN24@PostPackag
	lea	ecx, DWORD PTR [edi+eax*4]
; Line 1289
	mov	BYTE PTR _BankGroup$[ebp], 0
	mov	DWORD PTR tv538[ebp], ecx
$LL16@PostPackag:
; Line 1291
	movzx	eax, BYTE PTR _BankGroup$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+54904]
	cmp	BYTE PTR [edx+esi], 0
	mov	DWORD PTR tv541[ebp], eax
	je	$LN15@PostPackag
; Line 1310
	push	DWORD PTR _BankGroup$[ebp]
	and	edi, 3
	push	DWORD PTR _Rank$[ebp]
	mov	edx, eax
	shl	edi, 20					; 00000014H
	lea	eax, DWORD PTR [eax+ecx*4+55064]
	movzx	eax, BYTE PTR [eax+esi]
	and	edx, 3
	or	edi, edx
	shl	edi, 2
	and	eax, 3
	or	edi, eax
	push	ebx
	shl	edi, 4
	push	esi
	or	edi, 10					; 0000000aH
	call	_PprSetupAddress
	add	esp, 16					; 00000010H
; Line 1311
	test	eax, eax
	jne	$LN30@PostPackag
; Line 1318
	push	ebx
	push	65535					; 0000ffffH
	push	17229					; 0000434dH
	push	esi
	call	_MmrcExecuteTask
; Line 1320
	xor	eax, eax
	push	eax
	push	eax
	lea	ecx, DWORD PTR _Failures$[ebp]
	push	ecx
	push	eax
	push	ebx
	push	esi
	call	_CpgcExecuteSingleTest
	add	esp, 40					; 00000028H
; Line 1322
	cmp	DWORD PTR _Failures$[ebp], 0
	je	SHORT $LN10@PostPackag
; Line 1324
	test	BYTE PTR [esi+71008], 2
	je	$LN35@PostPackag
$LN10@PostPackag:
; Line 1333
	push	ebx
	push	65535					; 0000ffffH
	push	17199					; 0000432fH
	push	esi
	call	_MmrcExecuteTask
; Line 1334
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_PrechargeAll
; Line 1339
	mov	eax, DWORD PTR tv525[ebp]
	add	esp, 28					; 0000001cH
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN9@PostPackag
; Line 1340
	or	DWORD PTR _Mrs4Command$[ebp], 8192	; 00002000H
; Line 1341
	jmp	SHORT $LN8@PostPackag
$LN9@PostPackag:
; Line 1342
	or	DWORD PTR _Mrs4Command$[ebp], 2097152	; 00200000H
$LN8@PostPackag:
; Line 1344
	push	DWORD PTR _Mrs4Command$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 1350
	movzx	eax, BYTE PTR _Dimm$[ebp]
	movzx	ecx, bl
	lea	eax, DWORD PTR [eax+ecx*2+55136]
	add	eax, esi
	add	esp, 16					; 00000010H
	cmp	BYTE PTR [eax], 0
	mov	DWORD PTR tv575[ebp], eax
	je	SHORT $LN7@PostPackag
; Line 1351
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_SendGuardKeyPattern
	add	esp, 12					; 0000000cH
$LN7@PostPackag:
; Line 1358
	xor	eax, eax
	push	eax
	push	eax
	lea	ecx, DWORD PTR _Failures$[ebp]
	push	ecx
	push	eax
	push	ebx
	push	esi
	call	_CpgcExecuteSingleTest
; Line 1364
	mov	eax, DWORD PTR tv525[ebp]
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN4@PostPackag
; Line 1377
	test	BYTE PTR [esi+71008], 1
	jne	SHORT $LN4@PostPackag
; Line 1378
	push	200					; 000000c8H
	push	0
	call	_MspDelay
	pop	ecx
	pop	ecx
$LN4@PostPackag:
; Line 1385
	push	edi
	mov	edi, DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 1396
	mov	eax, DWORD PTR tv525[ebp]
	add	esp, 16					; 00000010H
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN3@PostPackag
; Line 1397
	and	DWORD PTR _Mrs4Command$[ebp], -8193	; ffffdfffH
; Line 1398
	jmp	SHORT $LN2@PostPackag
$LN3@PostPackag:
; Line 1399
	and	DWORD PTR _Mrs4Command$[ebp], -2097153	; ffdfffffH
$LN2@PostPackag:
; Line 1401
	push	DWORD PTR _Mrs4Command$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 1408
	push	50					; 00000032H
	push	1
	call	_MspDelay
; Line 1410
	mov	ecx, DWORD PTR tv501[ebp]
	movzx	eax, bl
	lea	eax, DWORD PTR [ecx+eax*4+6784]
	mov	ecx, DWORD PTR tv541[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax+esi], 1
; Line 1417
	mov	eax, DWORD PTR tv575[ebp]
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN1@PostPackag
; Line 1418
	push	DWORD PTR _Mrs0Command$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
	add	esp, 16					; 00000010H
$LN1@PostPackag:
; Line 1421
	push	DWORD PTR _BankGroup$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_VerifyPprResult
	mov	ecx, DWORD PTR tv538[ebp]
	mov	edi, DWORD PTR tv501[ebp]
	add	esp, 16					; 00000010H
$LN15@PostPackag:
	inc	BYTE PTR _BankGroup$[ebp]
	cmp	BYTE PTR _BankGroup$[ebp], 4
	jb	$LL16@PostPackag
$LN24@PostPackag:
; Line 1253
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL39@PostPackag
; Line 1426
	push	ebx
	push	65535					; 0000ffffH
	push	16642					; 00004102H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN26@PostPackag:
; Line 1241
	xor	eax, eax
$LN30@PostPackag:
	pop	edi
	pop	esi
	pop	ebx
; Line 1431
	leave
	ret	0
$LN35@PostPackag:
; Line 1325
	or	eax, -1
	jmp	SHORT $LN30@PostPackag
_PostPackageRepairEntry ENDP
_TEXT	ENDS
PUBLIC	_ToggleMprMode
; Function compile flags: /Ogspy
;	COMDAT _ToggleMprMode
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ExecuteMode$ = 11					; size = 1
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Toggle$ = 20						; size = 1
_ToggleMprMode PROC					; COMDAT
; Line 3191
	push	ebp
	mov	ebp, esp
; Line 3202
	cmp	BYTE PTR _Toggle$[ebp], 1
	push	ebx
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55508]
	push	edi
	mov	BYTE PTR _ExecuteMode$[ebp], al
	mov	BYTE PTR [esi+55508], 0
	mov	edi, 65535				; 0000ffffH
	jne	SHORT $LN4@ToggleMprM@2
; Line 3203
	push	ebx
	push	edi
	push	14532					; 000038c4H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN4@ToggleMprM@2:
; Line 3207
	push	3
	push	DWORD PTR _Rank$[ebp]
	movzx	eax, bl
	cmp	BYTE PTR [eax+esi+31272], 7
	push	ebx
	push	esi
	jne	SHORT $LN3@ToggleMprM@2
	call	_ReadMrsCommand
; Line 3208
	movzx	ecx, BYTE PTR _Toggle$[ebp]
	and	ecx, 1
	and	eax, -1025				; fffffbffH
	shl	ecx, 10					; 0000000aH
; Line 3210
	jmp	SHORT $LN7@ToggleMprM@2
$LN3@ToggleMprM@2:
; Line 3211
	call	_ReadMrsCommand
; Line 3212
	movzx	ecx, BYTE PTR _Toggle$[ebp]
	and	ecx, 1
	and	eax, -257				; fffffeffH
	shl	ecx, 8
$LN7@ToggleMprM@2:
	or	eax, ecx
; Line 3213
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
	add	esp, 32					; 00000020H
; Line 3219
	cmp	BYTE PTR _Toggle$[ebp], 0
	jne	SHORT $LN1@ToggleMprM@2
; Line 3220
	push	ebx
	push	edi
	push	14540					; 000038ccH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN1@ToggleMprM@2:
; Line 3223
	push	10					; 0000000aH
	push	1
	call	_MspDelay
; Line 3225
	mov	al, BYTE PTR _ExecuteMode$[ebp]
	pop	ecx
	pop	ecx
	pop	edi
	mov	BYTE PTR [esi+55508], al
	pop	esi
	pop	ebx
; Line 3226
	pop	ebp
	ret	0
_ToggleMprMode ENDP
_TEXT	ENDS
END
