; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectData\DNV\External\Source\DetectDimms.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_CalcDimmConfig
PUBLIC	_FindTrasTrpTrcd
PUBLIC	_FindTclTacTClk
PUBLIC	_CallIdentifyDimms
PUBLIC	_mDdr3RelevantSpdBytes
PUBLIC	_mDdr4RelevantSpdBytes
PUBLIC	_mFrequencyMultiplier
PUBLIC	_mTrfcExpected
PUBLIC	_mTaaMin
PUBLIC	_mErrorMessages
PUBLIC	_mDetectDimmTasks
PUBLIC	_mTrasTrpTrcdDdr3Tbl
PUBLIC	_mTrasTrpTrcdDdr4Tbl
PUBLIC	_mDimmActivateTableDdr4
PUBLIC	_mDimmActivateTableDdr3
PUBLIC	_mTones
_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_mDdr3RelevantSpdBytes DW 02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	020H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	03eH
	DW	03fH
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	080H
	DW	081H
	DW	082H
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	089H
	DW	08aH
	DW	08bH
	DW	08cH
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	091H
	ORG $+6
_mDdr4RelevantSpdBytes DW 01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	075H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	083H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	089H
	DW	08aH
	DW	0140H
	DW	0141H
	DW	0142H
	DW	0143H
	DW	0145H
	DW	0146H
	DW	0147H
	DW	0148H
	DW	0149H
	DW	014aH
	DW	014bH
	DW	014cH
	DW	014dH
	DW	014eH
	DW	014fH
	DW	0150H
	DW	0151H
	DW	0152H
	DW	0153H
	DW	0154H
	DW	0155H
	DW	0156H
	DW	0157H
	DW	0158H
	DW	0159H
	DW	015aH
	DW	015bH
	DW	015cH
	DW	015dH
	DW	015eH
	DW	015fH
	DW	0160H
	DW	017eH
	DW	017fH
	ORG $+2
_mFrequencyMultiplier DW 04e2H
	DW	0430H
	DW	03aaH
	DW	0341H
	DW	02eeH
	ORG $+2
_mTrfcExpected DD 027100H
	DD	0493e0H
	DD	055730H
	DD	06b6c0H
	DD	027100H
	DD	03f7a0H
	DD	055730H
	DD	086470H
_mTaaMin DW	02710H
	DW	030d4H
	DW	029ccH
	DW	03232H
	DW	00H
	DW	0334aH
	DW	00H
	DW	030d4H
	DW	00H
	DW	00H
	ORG $+4
_mErrorMessages DB 'All Right', 00H
	ORG $+40
	DB	'DDR Type Not Supported', 00H
	ORG $+27
	DB	'Module Type Not Supported', 00H
	ORG $+24
	DB	'Device Width Not Supported', 00H
	ORG $+23
	DB	'Dimm 0 MUST be populated on at least 1 channel', 00H
	ORG $+3
	DB	'Number of Banks Not Supported', 00H
	ORG $+20
	DB	'Device Density Not Supported', 00H
	ORG $+21
	DB	'SODIMMS in a channel must have same # of ranks', 00H
	ORG $+3
	DB	'Maximum of 2 Ranks Supported', 00H
	ORG $+21
	DB	'No Dimms Detected', 00H
	ORG $+32
	DB	'CL * TCK > 20ns', 00H
	ORG $+34
	DB	'Null Pointer Error', 00H
	ORG $+31
	DB	'Memory Timing Violation (tWR, tRP, etc)', 00H
	ORG $+10
	DB	'Mixing x8 & x16 DIMMs', 00H
	ORG $+28
	DB	'DIMM does not support selected frequency', 00H
	ORG $+9
	DB	'Non-ECC DIMM detected. Unsupported', 00H
	ORG $+15
	DB	'CAS Latency Not Supported', 00H
	ORG $+24
	DB	'Unknown Failure', 00H
	ORG $+34
	DB	'Non-ECC SODIMM detected. Unsupported', 00H
	ORG $+13
	DB	'Both channels are Disabled', 00H
	ORG $+23
	DB	'Different DDR types and the same channel', 00H
	ORG $+9
	DB	'DDR3 VDD not Supported', 00H
	ORG $+27
	DB	'Quad Rank are not supported', 00H
	ORG $+22
	DB	'Module Type Mixing Not Supported', 00H
	ORG $+17
	DB	'Device width x8 is fused off', 00H
	ORG $+21
	DB	'Device width x4 is fused off', 00H
	ORG $+21
	DB	'DDR3 support is fused off', 00H
	ORG $+24
	DB	'DDR4 support is fused off', 00H
	ORG $+24
_mDetectDimmTasks DD FLAT:_CallIdentifyDimms
	DD	FLAT:_FindTclTacTClk
	DD	FLAT:_FindTrasTrpTrcd
	DD	FLAT:_CalcDimmConfig
	DD	00H
	ORG $+4
_mTrasTrpTrcdDdr3Tbl DB 00H
	DW	02cH
	DB	018H
	DB	016H
	DB	015H
	DB	0fH
	DB	0ffH
	DB	'TRAS', 00H
	ORG $+1
	DB	01H
	DW	014H
	DB	07H
	DB	014H
	DB	00H
	DB	00H
	DB	025H
	DB	'TRP', 00H
	ORG $+2
	DB	02H
	DW	015H
	DB	07H
	DB	012H
	DB	00H
	DB	00H
	DB	024H
	DB	'TRCD', 00H
	ORG $+1
	DB	03H
	DW	032H
	DB	0aH
	DB	011H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWR', 00H
	ORG $+2
	DB	04H
	DW	0295H
	DB	080H
	DB	018H
	DB	019H
	DB	0ffH
	DB	0ffH
	DB	'TRFCL', 00H
	DB	05H
	DW	07H
	DB	02H
	DB	01aH
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWTR', 00H
	ORG $+1
	DB	06H
	DW	0aH
	DB	06H
	DB	013H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TRRD', 00H
	ORG $+1
	DB	08H
	DW	0aH
	DB	06H
	DB	01bH
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TRTP', 00H
	ORG $+1
	DB	09H
	DW	027H
	DB	010H
	DB	01dH
	DB	01cH
	DB	0fH
	DB	0ffH
	DB	'TFAW', 00H
	ORG $+1
	DB	0aH
	DW	04H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TCCD', 00H
	ORG $+1
	DB	0cH
	DW	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWTP', 00H
	ORG $+1
	DB	0dH
	DW	012H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWCL', 00H
	ORG $+1
	DB	0eH
	DW	03H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TCMD', 00H
	ORG $+1
	DB	0fH
	DW	014H
	DB	07H
	DB	0eH
	DB	0fH
	DB	07fH
	DB	0ffH
	DB	'TCL', 00H
	ORG $+2
	DB	0ffH
	DW	0ffffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	ORG $+5
	ORG $+6
_mTrasTrpTrcdDdr4Tbl DB 00H
	DW	02cH
	DB	018H
	DB	01cH
	DB	01bH
	DB	0fH
	DB	0ffH
	DB	'TRAS', 00H
	ORG $+1
	DB	01H
	DW	014H
	DB	07H
	DB	01aH
	DB	00H
	DB	00H
	DB	079H
	DB	'TRP', 00H
	ORG $+2
	DB	02H
	DW	015H
	DB	07H
	DB	019H
	DB	00H
	DB	00H
	DB	07aH
	DB	'TRCD', 00H
	ORG $+1
	DB	03H
	DW	032H
	DB	0aH
	DB	011H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWR', 00H
	ORG $+2
	DB	04H
	DW	0295H
	DB	080H
	DB	01eH
	DB	01fH
	DB	0ffH
	DB	0ffH
	DB	'TRFCL', 00H
	DB	05H
	DW	0aH
	DB	02H
	DB	01aH
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWTR', 00H
	ORG $+1
	DB	06H
	DW	0aH
	DB	06H
	DB	026H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TRRDS', 00H
	DB	08H
	DW	0aH
	DB	06H
	DB	01bH
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TRTP', 00H
	ORG $+1
	DB	09H
	DW	027H
	DB	010H
	DB	025H
	DB	024H
	DB	0fH
	DB	0ffH
	DB	'TFAW', 00H
	ORG $+1
	DB	0aH
	DW	08H
	DB	04H
	DB	028H
	DB	00H
	DB	00H
	DB	075H
	DB	'TCCD', 00H
	ORG $+1
	DB	0cH
	DW	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWTP', 00H
	ORG $+1
	DB	0dH
	DW	012H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TWCL', 00H
	ORG $+1
	DB	0eH
	DW	03H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	'TCMD', 00H
	ORG $+1
	DB	0fH
	DW	014H
	DB	07H
	DB	014H
	DB	015H
	DB	0ffH
	DB	0ffH
	DB	'TCL', 00H
	ORG $+2
	DB	0ffH
	DW	0ffffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	ORG $+5
	ORG $+6
_mDimmActivateTableDdr4 DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	04H
	DD	00H
	DD	00H
	DD	04H
	DD	08H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	04H
	DD	00H
	DD	02H
	DD	01H
	DD	08H
	DD	04H
	DD	01H
	DD	02H
	DD	04H
	DD	08H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	04H
	DD	01H
	DD	00H
	DD	04H
	DD	08H
_mDimmActivateTableDdr3 DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	01H
	DD	00H
	DD	05H
	DD	00H
	DD	05H
	DD	00H
	DD	04H
	DD	04H
	DD	01H
	DD	01H
	DD	05H
	DD	06H
	DD	05H
	DD	09H
	DD	04H
	DD	04H
	DD	01H
	DD	00H
	DD	05H
	DD	06H
	DD	05H
	DD	00H
	DD	04H
	DD	00H
	DD	01H
	DD	01H
	DD	05H
	DD	00H
	DD	05H
	DD	09H
_mTones	DW	011d1H
	DW	0fdfH
	DW	0e24H
	DW	0d59H
	DW	0be4H
	DW	0a98H
	DW	0970H
	DW	08e8H
_DATA	ENDS
PUBLIC	_PrintMemoryError
; Function compile flags: /Ogspy
;	COMDAT _PrintMemoryError
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_IndexError$ = 12					; size = 1
_PrintMemoryError PROC					; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectdata\dnv\external\source\detectdimms.c
; Line 332
	mov	eax, DWORD PTR _MrcData$[esp-4]
	mov	DWORD PTR [eax+65333], 2
; Line 334
	ret	0
_PrintMemoryError ENDP
_TEXT	ENDS
PUBLIC	_BeepOn
; Function compile flags: /Ogspy
;	COMDAT _BeepOn
_TEXT	SEGMENT
_Frequency$ = 8						; size = 2
_note$ = 8						; size = 1
_octave$ = 12						; size = 1
_BeepOn	PROC						; COMDAT
; Line 342
	push	ebp
	mov	ebp, esp
; Line 345
	movzx	eax, BYTE PTR _note$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN5@BeepOn
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN5@BeepOn:
	movzx	eax, WORD PTR _mTones[eax*2]
	mov	DWORD PTR _Frequency$[ebp], eax
; Line 347
	movzx	eax, BYTE PTR _octave$[ebp]
	dec	eax
	js	SHORT $LN2@BeepOn
; Line 348
	mov	cl, BYTE PTR _octave$[ebp]
	dec	cl
	shr	WORD PTR _Frequency$[ebp], cl
; Line 349
	jmp	SHORT $LN1@BeepOn
$LN2@BeepOn:
; Line 350
	mov	cl, 1
	sub	cl, BYTE PTR _octave$[ebp]
	shl	DWORD PTR _Frequency$[ebp], cl
$LN1@BeepOn:
; Line 356
	push	67					; 00000043H
	pop	edx
; Line 357
	push	65					; 00000041H
	mov	al, 84					; 00000054H
	out	dx, al
	pop	edx
	add	al, 190					; 000000beH
	out	dx, al
; Line 361
	push	67					; 00000043H
	pop	edx
	mov	al, 182					; 000000b6H
	out	dx, al
; Line 362
	mov	al, BYTE PTR _Frequency$[ebp]
	push	66					; 00000042H
	pop	edx
	out	dx, al
; Line 363
	mov	eax, DWORD PTR _Frequency$[ebp]
	shr	eax, 8
	out	dx, al
; Line 367
	push	97					; 00000061H
	pop	edx
	in	al, dx
	or	al, 3
	out	dx, al
; Line 368
	pop	ebp
	ret	0
_BeepOn	ENDP
_TEXT	ENDS
PUBLIC	_ReadFuses
EXTRN	_MmrcExecuteTask:PROC
; Function compile flags: /Ogspy
;	COMDAT _ReadFuses
_TEXT	SEGMENT
_Channel$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_ReadFuses PROC						; COMDAT
; Line 390
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 394
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	inc	ebx
	mov	BYTE PTR _Channel$[ebp], bl
	lea	esi, DWORD PTR [edi+60822]
$LL7@ReadFuses:
; Line 399
	movzx	eax, WORD PTR [edi+55490]
	mov	BYTE PTR [edi+55384], bl
	cmp	ax, 8
	je	$LN12@ReadFuses
	cmp	ax, 2
	je	$LN12@ReadFuses
; Line 416
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	11622					; 00002d66H
	push	edi
	call	_MmrcExecuteTask
; Line 422
	mov	eax, DWORD PTR [esi]
	not	eax
	and	eax, ebx
	mov	DWORD PTR [esi], eax
; Line 433
	mov	al, BYTE PTR [esi+1464]
	xor	ecx, ecx
	add	al, 3
	mov	DWORD PTR [esi+4], ecx
	add	esp, 16					; 00000010H
	mov	BYTE PTR [edi+65459], al
; Line 442
	cmp	DWORD PTR [esi+1376], ebx
	jne	SHORT $LN1@ReadFuses
	cmp	DWORD PTR [esi+1380], ecx
	jne	SHORT $LN1@ReadFuses
; Line 443
	mov	BYTE PTR [edi+65523], bl
$LN1@ReadFuses:
; Line 446
	lea	eax, DWORD PTR [esi+1384]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 449
	lea	eax, DWORD PTR [esi+1392]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 452
	lea	eax, DWORD PTR [esi+1400]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 455
	lea	eax, DWORD PTR [esi+1408]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 458
	lea	eax, DWORD PTR [esi+1416]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 461
	lea	eax, DWORD PTR [esi+1424]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 464
	lea	eax, DWORD PTR [esi+1432]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 467
	lea	eax, DWORD PTR [esi+1456]
	mov	edx, DWORD PTR [eax]
	not	edx
	and	edx, ebx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN6@ReadFuses
$LN12@ReadFuses:
; Line 400
	xor	eax, eax
	mov	DWORD PTR [esi+1368], 2
	mov	DWORD PTR [esi+1372], eax
; Line 401
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], eax
; Line 402
	mov	DWORD PTR [esi+1376], eax
	mov	DWORD PTR [esi+1380], eax
; Line 403
	mov	DWORD PTR [esi+1384], ebx
	mov	DWORD PTR [esi+1388], eax
; Line 404
	mov	DWORD PTR [esi+1392], ebx
	mov	DWORD PTR [esi+1396], eax
; Line 405
	mov	DWORD PTR [esi+1400], ebx
	mov	DWORD PTR [esi+1404], eax
; Line 406
	mov	DWORD PTR [esi+1408], ebx
	mov	DWORD PTR [esi+1412], eax
; Line 407
	mov	DWORD PTR [esi+1416], ebx
	mov	DWORD PTR [esi+1420], eax
; Line 408
	mov	DWORD PTR [esi+1424], ebx
	mov	DWORD PTR [esi+1428], eax
; Line 409
	mov	DWORD PTR [esi+1432], ebx
	mov	DWORD PTR [esi+1436], eax
; Line 410
	mov	DWORD PTR [esi+1456], ebx
	mov	DWORD PTR [esi+1460], eax
; Line 411
	mov	DWORD PTR [esi+1440], 3
	mov	DWORD PTR [esi+1444], eax
; Line 412
	mov	DWORD PTR [esi+1448], 7
	mov	DWORD PTR [esi+1452], eax
; Line 413
	mov	DWORD PTR [esi+1464], 4
	mov	DWORD PTR [esi+1468], eax
; Line 414
	mov	BYTE PTR [edi+65459], 7
$LN6@ReadFuses:
	dec	BYTE PTR _Channel$[ebp]
	sub	esi, 4336				; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 0
	jge	$LL7@ReadFuses
	pop	edi
	pop	esi
; Line 474
	xor	eax, eax
	pop	ebx
; Line 475
	leave
	ret	0
_ReadFuses ENDP
_TEXT	ENDS
PUBLIC	_SetMaxDq
; Function compile flags: /Ogspy
;	COMDAT _SetMaxDq
_TEXT	SEGMENT
tv248 = -32						; size = 4
tv140 = -28						; size = 4
tv77 = -24						; size = 4
tv515 = -20						; size = 4
tv525 = -16						; size = 4
tv400 = -12						; size = 4
tv356 = -8						; size = 4
tv476 = -4						; size = 4
_MrcData$ = 8						; size = 4
_SetMaxDq PROC						; COMDAT
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 491
	mov	eax, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	ecx, DWORD PTR [eax+28608]
	push	2
	mov	DWORD PTR tv515[ebp], ecx
	xor	edi, edi
	lea	ecx, DWORD PTR [eax+28610]
	pop	esi
	mov	DWORD PTR tv476[ebp], edi
	mov	DWORD PTR tv525[ebp], ecx
	mov	DWORD PTR tv248[ebp], esi
$LL26@SetMaxDq:
; Line 492
	mov	edx, DWORD PTR tv515[ebp]
	xor	ecx, ecx
	cmp	BYTE PTR [edx], cl
	je	$LN13@SetMaxDq
; Line 495
	mov	edx, DWORD PTR tv525[ebp]
	mov	DWORD PTR tv400[ebp], edx
	mov	DWORD PTR tv140[ebp], esi
$LL25@SetMaxDq:
; Line 496
	mov	ebx, DWORD PTR tv400[ebp]
	xor	edx, edx
	cmp	BYTE PTR [ebx], dl
	je	SHORT $LN9@SetMaxDq
; Line 499
	lea	ebx, DWORD PTR [ecx+edi*2+15344]
	lea	ebx, DWORD PTR [eax+ebx*2]
	mov	DWORD PTR tv356[ebp], ebx
	mov	DWORD PTR tv77[ebp], esi
$LL23@SetMaxDq:
; Line 500
	mov	ebx, DWORD PTR tv356[ebp]
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN5@SetMaxDq
; Line 503
	lea	esi, DWORD PTR [ecx+edi*2+55398]
	cmp	BYTE PTR [esi+eax], 0
; Line 507
	mov	esi, DWORD PTR tv476[ebp]
; Line 509
	push	2
	jne	SHORT $LN2@SetMaxDq
	add	esi, ecx
	lea	ebx, DWORD PTR [edx+esi*2+55454]
	lea	esi, DWORD PTR [edx+esi*2+55462]
	mov	BYTE PTR [ebx+eax], 18			; 00000012H
	mov	BYTE PTR [esi+eax], 4
	jmp	SHORT $LN27@SetMaxDq
$LN2@SetMaxDq:
; Line 513
	add	esi, ecx
	lea	ebx, DWORD PTR [edx+esi*2+55454]
; Line 514
	lea	esi, DWORD PTR [edx+esi*2+55462]
	mov	BYTE PTR [ebx+eax], 9
	mov	BYTE PTR [esi+eax], 8
$LN27@SetMaxDq:
	pop	esi
$LN5@SetMaxDq:
; Line 499
	inc	edx
	inc	DWORD PTR tv356[ebp]
	dec	DWORD PTR tv77[ebp]
	jne	SHORT $LL23@SetMaxDq
$LN9@SetMaxDq:
; Line 495
	inc	ecx
	inc	DWORD PTR tv400[ebp]
	dec	DWORD PTR tv140[ebp]
	jne	SHORT $LL25@SetMaxDq
$LN13@SetMaxDq:
; Line 491
	add	DWORD PTR tv476[ebp], esi
	add	DWORD PTR tv525[ebp], esi
	inc	edi
	inc	DWORD PTR tv515[ebp]
	dec	DWORD PTR tv248[ebp]
	jne	$LL26@SetMaxDq
	pop	edi
	pop	esi
	pop	ebx
; Line 520
	leave
	ret	0
_SetMaxDq ENDP
_TEXT	ENDS
PUBLIC	_BusWidthVariable
; Function compile flags: /Ogspy
;	COMDAT _BusWidthVariable
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_BusWidthVariable PROC					; COMDAT
; Line 533
	mov	ecx, DWORD PTR _MrcData$[esp-4]
	xor	dl, dl
$LL10@BusWidthVa:
; Line 534
	movzx	eax, dl
	cmp	BYTE PTR [eax+ecx+28608], 0
	je	SHORT $LN9@BusWidthVa
; Line 535
	imul	eax, 4336				; 000010f0H
	cmp	DWORD PTR [eax+ecx+56598], 1
	jne	SHORT $LN18@BusWidthVa
	cmp	DWORD PTR [eax+ecx+56602], 0
	je	SHORT $LN15@BusWidthVa
$LN18@BusWidthVa:
	cmp	BYTE PTR [ecx+65550], 1
	je	SHORT $LN15@BusWidthVa
$LN9@BusWidthVa:
; Line 533
	inc	dl
	cmp	dl, 2
	jb	SHORT $LL10@BusWidthVa
; Line 545
	ret	0
$LN15@BusWidthVa:
; Line 541
	push	2
	lea	eax, DWORD PTR [ecx+56598]
	pop	ecx
$LL3@BusWidthVa:
; Line 542
	and	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], 1
	add	eax, 4336				; 000010f0H
	dec	ecx
	jne	SHORT $LL3@BusWidthVa
; Line 545
	ret	0
_BusWidthVariable ENDP
_TEXT	ENDS
PUBLIC	_DualRankInSystem
; Function compile flags: /Ogspy
;	COMDAT _DualRankInSystem
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DualRankInSystem PROC					; COMDAT
; Line 562
	movzx	ecx, BYTE PTR _Channel$[esp-4]
	mov	edx, DWORD PTR _MrcData$[esp-4]
	cmp	BYTE PTR [ecx+edx+28608], 0
	jne	SHORT $LN6@DualRankIn
; Line 563
	xor	al, al
; Line 574
	ret	0
$LN6@DualRankIn:
	push	ebx
; Line 565
	xor	bl, bl
	push	esi
$LL5@DualRankIn:
; Line 566
	movzx	eax, bl
	lea	esi, DWORD PTR [eax+ecx*2+28610]
	cmp	BYTE PTR [esi+edx], 0
	je	SHORT $LN4@DualRankIn
; Line 569
	lea	eax, DWORD PTR [eax+ecx*2+55394]
	cmp	BYTE PTR [eax+edx], 1
	je	SHORT $LN10@DualRankIn
$LN4@DualRankIn:
; Line 565
	inc	bl
	cmp	bl, 2
	jb	SHORT $LL5@DualRankIn
; Line 573
	xor	al, al
$LN13@DualRankIn:
	pop	esi
	pop	ebx
; Line 574
	ret	0
$LN10@DualRankIn:
; Line 570
	mov	al, 1
	jmp	SHORT $LN13@DualRankIn
_DualRankInSystem ENDP
_TEXT	ENDS
PUBLIC	_GetPpinChip
EXTRN	_AsmReadMsr64:PROC
; Function compile flags: /Ogspy
;	COMDAT _GetPpinChip
_TEXT	SEGMENT
_GetPpinChip PROC					; COMDAT
; Line 813
	push	206					; 000000ceH
	call	_AsmReadMsr64
; Line 814
	and	eax, 8388608				; 00800000H
	xor	edx, edx
	or	eax, edx
	pop	ecx
	jne	SHORT $LN2@GetPpinChi
$LN5@GetPpinChi:
	xor	eax, eax
	xor	edx, edx
; Line 828
	ret	0
$LN2@GetPpinChi:
; Line 819
	push	78					; 0000004eH
	call	_AsmReadMsr64
; Line 820
	and	eax, 2
	xor	edx, edx
	or	eax, edx
	pop	ecx
	je	SHORT $LN5@GetPpinChi
; Line 825
	push	79					; 0000004fH
	call	_AsmReadMsr64
	pop	ecx
; Line 828
	ret	0
_GetPpinChip ENDP
_TEXT	ENDS
PUBLIC	_IdentifyDdr3Dimms
EXTRN	_PlatformDetectNvDimm:PROC
; Function compile flags: /Ogspy
;	COMDAT _IdentifyDdr3Dimms
_TEXT	SEGMENT
tv723 = -32						; size = 4
tv713 = -28						; size = 4
tv700 = -24						; size = 4
tv675 = -20						; size = 4
tv676 = -16						; size = 4
tv733 = -12						; size = 4
_CurrentDimm$ = -5					; size = 1
_Ranks$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_IdentifyDdr3Dimms PROC					; COMDAT
; Line 888
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
; Line 897
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR _CurrentDimm$[ebp], 0
$LL28@IdentifyDd:
; Line 898
	movzx	eax, BYTE PTR _CurrentDimm$[ebp]
	lea	ebx, DWORD PTR [eax+edi*2]
	mov	ecx, ebx
	imul	ecx, 514				; 00000202H
; Line 899
	lea	edx, DWORD PTR [eax+edi*2+15344]
	lea	edx, DWORD PTR [esi+edx*2]
	lea	ecx, DWORD PTR [ecx+esi+28630]
	mov	BYTE PTR [edx], 0
; Line 900
	mov	BYTE PTR [esi+ebx*2+30689], 0
; Line 901
	cmp	BYTE PTR [ecx], 0
	mov	DWORD PTR tv675[ebp], eax
	mov	DWORD PTR tv676[ebp], ebx
	je	$LN27@IdentifyDd
; Line 908
	mov	BYTE PTR [edx], 1
; Line 919
	mov	dl, BYTE PTR [ecx+4]
	and	dl, 15					; 0000000fH
	lea	ebx, DWORD PTR [eax+edi*2+55414]
	add	ebx, esi
	mov	DWORD PTR tv700[ebp], ebx
	mov	BYTE PTR [ebx], dl
; Line 922
	cmp	dl, 2
	je	SHORT $LN23@IdentifyDd
	cmp	dl, 8
	je	SHORT $LN23@IdentifyDd
	cmp	dl, 3
	jne	$LN24@IdentifyDd
$LN23@IdentifyDd:
; Line 923
	mov	dl, BYTE PTR [ecx+4]
	and	dl, 15					; 0000000fH
	mov	BYTE PTR [ebx], dl
; Line 928
	mov	bl, BYTE PTR [ecx+8]
	and	bl, 7
	lea	edx, DWORD PTR [eax+edi*2+55398]
	add	edx, esi
	mov	BYTE PTR [edx], bl
; Line 929
	mov	bl, BYTE PTR [ecx+5]
	mov	DWORD PTR tv713[ebp], edx
	shr	bl, 4
	lea	edx, DWORD PTR [eax+edi*2+55402]
	add	edx, esi
	and	bl, 7
	mov	BYTE PTR [edx], bl
; Line 931
	mov	bl, BYTE PTR [ecx+5]
	mov	DWORD PTR tv723[ebp], edx
	mov	dl, BYTE PTR [ecx+5]
	and	dl, 15					; 0000000fH
	cmp	dl, 2
	lea	edx, DWORD PTR [eax+edi*2+55410]
	jne	SHORT $LN21@IdentifyDd
	add	edx, esi
	and	bl, 15					; 0000000fH
	mov	BYTE PTR [edx], bl
; Line 932
	mov	BYTE PTR [edi+esi+55418], 1
; Line 933
	jmp	SHORT $LN46@IdentifyDd
$LN21@IdentifyDd:
; Line 934
	add	edx, esi
	and	bl, 15					; 0000000fH
	sub	bl, 3
	mov	BYTE PTR [edx], bl
$LN46@IdentifyDd:
	mov	DWORD PTR tv733[ebp], edx
; Line 936
	mov	dl, BYTE PTR [ecx+8]
	shr	dl, 3
	and	dl, 7
; Line 942
	test	BYTE PTR [ecx+9], 24			; 00000018H
	mov	BYTE PTR _Ranks$[ebp], dl
	jne	SHORT $LN19@IdentifyDd
; Line 943
	mov	BYTE PTR [edi+esi+30686], 0
$LN19@IdentifyDd:
; Line 945
	mov	dl, BYTE PTR [ecx+9]
	lea	eax, DWORD PTR [eax+edi*2+55406]
	and	dl, 7
	mov	BYTE PTR [eax+esi], dl
; Line 949
	mov	eax, edi
	imul	eax, 4336				; 000010f0H
	lea	ebx, DWORD PTR [eax+esi]
	xor	eax, eax
	cmp	dl, 2
	sete	al
	cdq
	mov	DWORD PTR [ebx+56598], eax
	mov	DWORD PTR [ebx+56602], edx
; Line 950
	cmp	BYTE PTR [esi+65550], 1
	jne	SHORT $LN41@IdentifyDd
; Line 951
	and	DWORD PTR [ebx+56602], 0
	mov	DWORD PTR [ebx+56598], 1
$LN41@IdentifyDd:
; Line 953
	mov	eax, 1744				; 000006d0H
	cmp	WORD PTR [esi+65435], ax
	jne	SHORT $LN42@IdentifyDd
; Line 958
	cmp	BYTE PTR [edi+esi+30686], 0
	jne	SHORT $LN42@IdentifyDd
	mov	eax, DWORD PTR tv700[ebp]
	cmp	BYTE PTR [eax], 3
	je	$LN32@IdentifyDd
$LN42@IdentifyDd:
; Line 966
	mov	eax, DWORD PTR tv713[ebp]
	mov	al, BYTE PTR [eax]
	cmp	al, 1
	je	SHORT $LN43@IdentifyDd
	cmp	al, 2
	jne	$LN33@IdentifyDd
$LN43@IdentifyDd:
; Line 972
	mov	edx, DWORD PTR [ebx+57886]
	or	edx, DWORD PTR [ebx+57890]
	jne	SHORT $LN14@IdentifyDd
	cmp	al, 1
	je	$LN34@IdentifyDd
$LN14@IdentifyDd:
; Line 978
	mov	eax, DWORD PTR tv723[ebp]
	cmp	BYTE PTR [eax], 0
	jne	$LN35@IdentifyDd
; Line 984
	mov	eax, DWORD PTR tv733[ebp]
	mov	al, BYTE PTR [eax]
	cmp	al, 2
	ja	$LN36@IdentifyDd
; Line 988
	movzx	eax, al
	cdq
	cmp	edx, DWORD PTR [ebx+57930]
	jb	SHORT $LN11@IdentifyDd
	ja	SHORT $LN40@IdentifyDd
	cmp	eax, DWORD PTR [ebx+57926]
	jbe	SHORT $LN11@IdentifyDd
$LN40@IdentifyDd:
; Line 990
	mov	al, BYTE PTR [ebx+57926]
	mov	edx, DWORD PTR tv733[ebp]
	mov	BYTE PTR [edx], al
$LN11@IdentifyDd:
; Line 993
	mov	eax, DWORD PTR tv675[ebp]
	lea	edx, DWORD PTR [eax+edi*2+55394]
	mov	al, BYTE PTR _Ranks$[ebp]
	mov	BYTE PTR [edx+esi], al
; Line 994
	test	al, al
	jbe	SHORT $LN44@IdentifyDd
	mov	eax, DWORD PTR [ebx+57910]
	or	eax, DWORD PTR [ebx+57914]
	je	SHORT $LN44@IdentifyDd
; Line 995
	mov	ebx, DWORD PTR tv676[ebp]
	mov	BYTE PTR [esi+ebx*2+30689], 1
	jmp	SHORT $LN10@IdentifyDd
$LN44@IdentifyDd:
	mov	ebx, DWORD PTR tv676[ebp]
$LN10@IdentifyDd:
; Line 1007
	cmp	BYTE PTR [edi+esi+55385], 0
	jbe	SHORT $LN6@IdentifyDd
; Line 1011
	cmp	BYTE PTR [esi+edi*2+55414], 3
	jne	SHORT $LN6@IdentifyDd
	lea	eax, DWORD PTR [esi+edi*2]
	cmp	BYTE PTR [eax+55415], 3
	jne	SHORT $LN6@IdentifyDd
; Line 1012
	mov	dl, BYTE PTR [esi+edi*2+55394]
	cmp	dl, BYTE PTR [eax+55395]
	jne	SHORT $LN37@IdentifyDd
$LN6@IdentifyDd:
; Line 1018
	cmp	BYTE PTR _Ranks$[ebp], 1
	ja	SHORT $LN38@IdentifyDd
; Line 1027
	test	BYTE PTR [ecx+7], 2
	je	SHORT $LN4@IdentifyDd
; Line 1028
	mov	eax, DWORD PTR tv675[ebp]
; Line 1042
	push	DWORD PTR _CurrentDimm$[ebp]
	lea	eax, DWORD PTR [eax+edi*2+55426]
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR [eax+esi], 1
	mov	BYTE PTR [edi+esi+31272], 1
	cmp	BYTE PTR [ecx+150], 206			; 000000ceH
	push	0
	sete	al
	push	esi
	mov	BYTE PTR [ebx+esi+70875], al
	call	_PlatformDetectNvDimm
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+ebx*4+65300], eax
$LN27@IdentifyDd:
	inc	BYTE PTR _CurrentDimm$[ebp]
	cmp	BYTE PTR _CurrentDimm$[ebp], 2
	jb	$LL28@IdentifyDd
; Line 1045
	xor	eax, eax
$LN29@IdentifyDd:
	pop	edi
	pop	esi
	pop	ebx
; Line 1046
	leave
	ret	0
$LN24@IdentifyDd:
; Line 925
	push	2
$LN47@IdentifyDd:
	pop	eax
	jmp	SHORT $LN29@IdentifyDd
$LN32@IdentifyDd:
; Line 959
	push	18					; 00000012H
	jmp	SHORT $LN47@IdentifyDd
$LN33@IdentifyDd:
; Line 967
	push	3
	jmp	SHORT $LN47@IdentifyDd
$LN34@IdentifyDd:
; Line 973
	push	24					; 00000018H
	jmp	SHORT $LN47@IdentifyDd
$LN35@IdentifyDd:
; Line 979
	push	5
	jmp	SHORT $LN47@IdentifyDd
$LN36@IdentifyDd:
; Line 985
	push	6
	jmp	SHORT $LN47@IdentifyDd
$LN37@IdentifyDd:
; Line 1013
	push	7
	jmp	SHORT $LN47@IdentifyDd
$LN38@IdentifyDd:
; Line 1019
	push	8
	jmp	SHORT $LN47@IdentifyDd
$LN4@IdentifyDd:
; Line 1031
	movzx	eax, BYTE PTR _CurrentDimm$[ebp]
	add	eax, esi
	mov	BYTE PTR [eax+edi*2+55426], 0
; Line 1032
	push	21					; 00000015H
	jmp	SHORT $LN47@IdentifyDd
_IdentifyDdr3Dimms ENDP
_TEXT	ENDS
PUBLIC	_IdentifyDdr4Dimms
; Function compile flags: /Ogspy
;	COMDAT _IdentifyDdr4Dimms
_TEXT	SEGMENT
_CurrentSpdData$ = -24					; size = 4
tv755 = -20						; size = 4
tv771 = -16						; size = 4
tv787 = -12						; size = 4
tv804 = -8						; size = 4
_CurrentDimm$ = -4					; size = 1
_MrcData$ = 8						; size = 4
_Ranks$ = 11						; size = 1
_Channel$ = 12						; size = 1
_IdentifyDdr4Dimms PROC					; COMDAT
; Line 1063
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
; Line 1075
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR [edi+esi+55420], 0
; Line 1077
	mov	BYTE PTR _CurrentDimm$[ebp], 0
$LL27@IdentifyDd@2:
; Line 1078
	movzx	ecx, BYTE PTR _CurrentDimm$[ebp]
	lea	ebx, DWORD PTR [ecx+edi*2]
	mov	eax, ebx
	imul	eax, 514				; 00000202H
; Line 1079
	lea	edx, DWORD PTR [ecx+edi*2+15344]
; Line 1080
	lea	ebx, DWORD PTR [esi+ebx*2+30689]
	lea	eax, DWORD PTR [eax+esi+28630]
	lea	edx, DWORD PTR [esi+edx*2]
	mov	BYTE PTR [edx], 0
	mov	BYTE PTR [ebx], 0
; Line 1081
	cmp	BYTE PTR [eax], 0
	mov	DWORD PTR _CurrentSpdData$[ebp], eax
	mov	DWORD PTR tv755[ebp], ebx
	je	$LN26@IdentifyDd@2
; Line 1088
	mov	BYTE PTR [edx], 1
; Line 1099
	cmp	BYTE PTR [edi+esi+55420], 0
	jne	SHORT $LN23@IdentifyDd@2
; Line 1103
	mov	dl, BYTE PTR [eax+4]
	shr	dl, 4
	and	dl, 1
	mov	BYTE PTR [edi+esi+55420], dl
$LN23@IdentifyDd@2:
; Line 1105
	mov	bl, BYTE PTR [eax+4]
	and	bl, 15					; 0000000fH
	lea	edx, DWORD PTR [ecx+edi*2+55414]
	add	edx, esi
	mov	DWORD PTR tv771[ebp], edx
	mov	BYTE PTR [edx], bl
; Line 1111
	cmp	bl, 2
	je	SHORT $LN21@IdentifyDd@2
	cmp	bl, 1
	je	SHORT $LN21@IdentifyDd@2
	cmp	bl, 9
	je	SHORT $LN21@IdentifyDd@2
	cmp	bl, 5
	je	SHORT $LN21@IdentifyDd@2
	cmp	bl, 6
	je	SHORT $LN21@IdentifyDd@2
	cmp	bl, 3
	jne	$LN22@IdentifyDd@2
$LN21@IdentifyDd@2:
; Line 1112
	mov	bl, BYTE PTR [eax+4]
	and	bl, 15					; 0000000fH
	mov	BYTE PTR [edx], bl
; Line 1127
	mov	bl, BYTE PTR [eax+13]
	and	bl, 7
	lea	edx, DWORD PTR [ecx+edi*2+55398]
	add	edx, esi
	mov	BYTE PTR [edx], bl
	mov	DWORD PTR tv787[ebp], edx
; Line 1128
	mov	dl, BYTE PTR [eax+5]
	shr	dl, 4
	and	dl, 7
	lea	ebx, DWORD PTR [ecx+edi*2+55402]
	mov	BYTE PTR [ebx+esi], dl
; Line 1129
	mov	bl, BYTE PTR [eax+5]
	and	bl, 15					; 0000000fH
	lea	edx, DWORD PTR [ecx+edi*2+55410]
	add	edx, esi
	sub	bl, 3
	mov	BYTE PTR [edx], bl
	mov	DWORD PTR tv804[ebp], edx
; Line 1130
	mov	dl, BYTE PTR [eax+13]
	shr	dl, 3
	and	dl, 7
; Line 1136
	test	BYTE PTR [eax+14], 24			; 00000018H
	mov	BYTE PTR _Ranks$[ebp], dl
	jne	SHORT $LN16@IdentifyDd@2
; Line 1137
	mov	BYTE PTR [edi+esi+30686], 0
$LN16@IdentifyDd@2:
; Line 1139
	mov	al, BYTE PTR [eax+14]
	and	al, 7
	lea	edx, DWORD PTR [ecx+edi*2+55406]
	mov	BYTE PTR [edx+esi], al
; Line 1143
	mov	edx, edi
	imul	edx, 4336				; 000010f0H
	lea	ebx, DWORD PTR [edx+esi]
	xor	edx, edx
	cmp	al, 2
	sete	dl
	mov	eax, edx
	cdq
	mov	DWORD PTR [ebx+56598], eax
	mov	DWORD PTR [ebx+56602], edx
; Line 1144
	cmp	BYTE PTR [esi+65550], 1
	jne	SHORT $LN38@IdentifyDd@2
; Line 1145
	and	DWORD PTR [ebx+56602], 0
	mov	DWORD PTR [ebx+56598], 1
$LN38@IdentifyDd@2:
; Line 1150
	mov	eax, DWORD PTR tv787[ebp]
	mov	al, BYTE PTR [eax]
	test	al, al
	jne	SHORT $LN14@IdentifyDd@2
	mov	edx, DWORD PTR tv771[ebp]
	cmp	BYTE PTR [edx], 1
	jne	$LN31@IdentifyDd@2
$LN14@IdentifyDd@2:
; Line 1157
	mov	edx, DWORD PTR [ebx+57878]
	or	edx, DWORD PTR [ebx+57882]
	jne	SHORT $LN13@IdentifyDd@2
	test	al, al
	je	$LN32@IdentifyDd@2
$LN13@IdentifyDd@2:
; Line 1160
	mov	edx, DWORD PTR [ebx+57886]
	or	edx, DWORD PTR [ebx+57890]
	jne	SHORT $LN12@IdentifyDd@2
	cmp	al, 1
	je	$LN33@IdentifyDd@2
$LN12@IdentifyDd@2:
; Line 1167
	mov	eax, DWORD PTR tv804[ebp]
	mov	al, BYTE PTR [eax]
	cmp	al, 3
	ja	$LN34@IdentifyDd@2
; Line 1170
	movzx	eax, al
	cdq
	cmp	edx, DWORD PTR [ebx+57930]
	jb	SHORT $LN10@IdentifyDd@2
	ja	SHORT $LN37@IdentifyDd@2
	cmp	eax, DWORD PTR [ebx+57926]
	jbe	SHORT $LN10@IdentifyDd@2
$LN37@IdentifyDd@2:
; Line 1172
	mov	al, BYTE PTR [ebx+57926]
	mov	edx, DWORD PTR tv804[ebp]
	mov	BYTE PTR [edx], al
$LN10@IdentifyDd@2:
; Line 1176
	mov	al, BYTE PTR _Ranks$[ebp]
	lea	edx, DWORD PTR [ecx+edi*2+55394]
	mov	BYTE PTR [edx+esi], al
; Line 1177
	test	al, al
	jbe	SHORT $LN9@IdentifyDd@2
	mov	edx, DWORD PTR [ebx+57910]
	or	edx, DWORD PTR [ebx+57914]
	je	SHORT $LN9@IdentifyDd@2
; Line 1178
	mov	edx, DWORD PTR tv755[ebp]
	mov	BYTE PTR [edx], 1
$LN9@IdentifyDd@2:
; Line 1185
	cmp	al, 3
	je	$LN35@IdentifyDd@2
; Line 1192
	mov	edx, DWORD PTR _CurrentSpdData$[ebp]
	cmp	BYTE PTR [edx+322], 206			; 000000ceH
	lea	ebx, DWORD PTR [ecx+edi*2]
	sete	al
	mov	BYTE PTR [ebx+esi+70875], al
; Line 1203
	lea	eax, DWORD PTR [ecx+edi*2+55132]
	add	eax, esi
	test	BYTE PTR [edx+10], 32			; 00000020H
	je	SHORT $LN4@IdentifyDd@2
	mov	BYTE PTR [eax], 1
; Line 1204
	jmp	SHORT $LN3@IdentifyDd@2
$LN4@IdentifyDd@2:
; Line 1205
	mov	BYTE PTR [eax], 0
$LN3@IdentifyDd@2:
; Line 1207
	test	BYTE PTR [edx+10], 192			; 000000c0H
	je	SHORT $LN2@IdentifyDd@2
; Line 1208
	lea	eax, DWORD PTR [ecx+edi*2+55128]
	mov	BYTE PTR [eax+esi], 1
; Line 1209
	jmp	SHORT $LN1@IdentifyDd@2
$LN2@IdentifyDd@2:
; Line 1210
	lea	edx, DWORD PTR [ecx+edi*2+55128]
	mov	BYTE PTR [edx+esi], 0
; Line 1211
	mov	BYTE PTR [eax], 0
$LN1@IdentifyDd@2:
; Line 1214
	mov	edx, DWORD PTR tv787[ebp]
; Line 1218
	push	DWORD PTR _CurrentDimm$[ebp]
	mov	dl, BYTE PTR [edx]
	push	DWORD PTR _Channel$[ebp]
	lea	eax, DWORD PTR [ecx+edi*2+55164]
	mov	BYTE PTR [eax+esi], dl
	lea	eax, DWORD PTR [ecx+edi*2+55168]
	mov	ecx, DWORD PTR tv804[ebp]
	mov	cl, BYTE PTR [ecx]
	push	0
	push	esi
	mov	BYTE PTR [eax+esi], cl
	call	_PlatformDetectNvDimm
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+ebx*4+65300], eax
$LN26@IdentifyDd@2:
	inc	BYTE PTR _CurrentDimm$[ebp]
	cmp	BYTE PTR _CurrentDimm$[ebp], 2
	jb	$LL27@IdentifyDd@2
; Line 1220
	xor	eax, eax
$LN28@IdentifyDd@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 1221
	leave
	ret	0
$LN22@IdentifyDd@2:
; Line 1124
	push	2
$LN40@IdentifyDd@2:
	pop	eax
	jmp	SHORT $LN28@IdentifyDd@2
$LN31@IdentifyDd@2:
; Line 1151
	push	3
	jmp	SHORT $LN40@IdentifyDd@2
$LN32@IdentifyDd@2:
; Line 1158
	push	25					; 00000019H
	jmp	SHORT $LN40@IdentifyDd@2
$LN33@IdentifyDd@2:
; Line 1161
	push	24					; 00000018H
	jmp	SHORT $LN40@IdentifyDd@2
$LN34@IdentifyDd@2:
; Line 1168
	push	6
	jmp	SHORT $LN40@IdentifyDd@2
$LN35@IdentifyDd@2:
; Line 1186
	push	22					; 00000016H
	jmp	SHORT $LN40@IdentifyDd@2
_IdentifyDdr4Dimms ENDP
_TEXT	ENDS
PUBLIC	_IsAnySlotEmpty
; Function compile flags: /Ogspy
;	COMDAT _IsAnySlotEmpty
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_IsAnySlotEmpty PROC					; COMDAT
; Line 1240
	movzx	eax, BYTE PTR _Channel$[esp-4]
	xor	cl, cl
	lea	eax, DWORD PTR [eax+eax+28610]
	push	esi
$LL4@IsAnySlotE:
; Line 1241
	mov	esi, DWORD PTR _MrcData$[esp]
	movzx	edx, cl
	add	edx, eax
	cmp	BYTE PTR [edx+esi], 0
	je	SHORT $LN8@IsAnySlotE
	inc	cl
	cmp	cl, 2
	jb	SHORT $LL4@IsAnySlotE
; Line 1245
	xor	al, al
	pop	esi
; Line 1246
	ret	0
$LN8@IsAnySlotE:
; Line 1242
	mov	al, 1
	pop	esi
; Line 1246
	ret	0
_IsAnySlotEmpty ENDP
_TEXT	ENDS
PUBLIC	_EnforceCommonFreq
EXTRN	_VerifyResetRequests:PROC
; Function compile flags: /Ogspy
;	COMDAT _EnforceCommonFreq
_TEXT	SEGMENT
_tck$ = -32						; size = 2
tv1339 = -28						; size = 4
tv1316 = -24						; size = 4
tv139 = -20						; size = 4
_tckminall$ = -20					; size = 2
tv1463 = -16						; size = 4
tv815 = -16						; size = 4
tv1465 = -12						; size = 4
tv919 = -8						; size = 4
tv855 = -8						; size = 4
tv996 = -4						; size = 4
tv857 = -4						; size = 4
tv1507 = 8						; size = 4
tv618 = 8						; size = 4
_Channel$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_EnforceCommonFreq PROC					; COMDAT
; Line 1261
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
; Line 1279
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	lea	eax, DWORD PTR [esi+55385]
	mov	edi, eax
	lea	eax, DWORD PTR [esi+28652]
	push	2
	mov	DWORD PTR tv855[ebp], eax
	lea	eax, DWORD PTR [esi+28610]
	pop	edx
	mov	DWORD PTR [esi+65544], 32760		; 00007ff8H
	mov	DWORD PTR tv857[ebp], eax
	mov	DWORD PTR tv815[ebp], edx
$LL55@EnforceCom:
; Line 1286
	cmp	BYTE PTR [edi-26777], 0
	je	SHORT $LN54@EnforceCom
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN54@EnforceCom
; Line 1289
	mov	eax, DWORD PTR tv857[ebp]
	mov	DWORD PTR tv618[ebp], eax
	mov	eax, DWORD PTR tv855[ebp]
	mov	DWORD PTR tv139[ebp], edx
$LL50@EnforceCom:
; Line 1291
	mov	ecx, DWORD PTR tv618[ebp]
	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN49@EnforceCom
; Line 1292
	mov	cl, BYTE PTR [edi-24113]
	cmp	cl, 3
	jbe	SHORT $LN44@EnforceCom
	cmp	cl, 7
	jne	SHORT $LN42@EnforceCom
; Line 1302
	mov	dl, BYTE PTR [eax-1]
; Line 1303
	mov	cl, BYTE PTR [eax]
; Line 1304
	mov	bl, BYTE PTR [eax+1]
; Line 1305
	jmp	SHORT $LN45@EnforceCom
$LN44@EnforceCom:
; Line 1297
	mov	dl, BYTE PTR [eax-7]
; Line 1298
	mov	cl, BYTE PTR [eax-6]
; Line 1299
	xor	bl, bl
; Line 1300
	jmp	SHORT $LN45@EnforceCom
$LN42@EnforceCom:
; Line 1307
	xor	bl, bl
	xor	cl, cl
	xor	dl, dl
$LN45@EnforceCom:
; Line 1310
	movzx	ebx, bl
	shl	ebx, 8
	movzx	ecx, cl
	or	ebx, ecx
	movzx	ecx, dl
	shl	ebx, 8
	or	ebx, ecx
	and	DWORD PTR [esi+65544], ebx
	push	2
	pop	edx
$LN49@EnforceCom:
	add	eax, 514				; 00000202H
	inc	DWORD PTR tv618[ebp]
	dec	DWORD PTR tv139[ebp]
	jne	SHORT $LL50@EnforceCom
$LN54@EnforceCom:
; Line 1285
	add	DWORD PTR tv857[ebp], edx
	add	DWORD PTR tv855[ebp], 1028		; 00000404H
	inc	edi
	dec	DWORD PTR tv815[ebp]
	jne	$LL55@EnforceCom
; Line 1314
	cmp	DWORD PTR [esi+65544], 0
	jne	SHORT $LN41@EnforceCom
; Line 1315
	push	16					; 00000010H
	pop	eax
	jmp	$LN56@EnforceCom
$LN41@EnforceCom:
; Line 1320
	and	DWORD PTR _tckminall$[ebp], 0
	lea	eax, DWORD PTR [esi+28756]
	mov	DWORD PTR tv1463[ebp], eax
	lea	eax, DWORD PTR [esi+28610]
	mov	DWORD PTR tv1507[ebp], -55385		; ffff27a7H
	sub	DWORD PTR tv1507[ebp], esi
	lea	ebx, DWORD PTR [esi+55385]
	mov	DWORD PTR tv1465[ebp], eax
	mov	DWORD PTR tv1339[ebp], edx
$LL77@EnforceCom:
; Line 1322
	cmp	BYTE PTR [ebx-26777], 0
	je	$LN39@EnforceCom
	cmp	BYTE PTR [ebx], 0
	je	$LN39@EnforceCom
; Line 1326
	mov	eax, DWORD PTR tv1465[ebp]
	and	DWORD PTR tv919[ebp], 0
	mov	ecx, DWORD PTR tv1463[ebp]
	mov	DWORD PTR tv996[ebp], eax
	mov	DWORD PTR tv1316[ebp], edx
$LL35@EnforceCom:
; Line 1328
	mov	eax, DWORD PTR tv996[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN34@EnforceCom
; Line 1329
	mov	al, BYTE PTR [ebx-24113]
	cmp	al, 3
	jbe	SHORT $LN29@EnforceCom
	cmp	al, 7
	jne	SHORT $LN27@EnforceCom
; Line 1343
	mov	dl, BYTE PTR [ecx-107]
; Line 1344
	mov	al, BYTE PTR [ecx]
	push	125					; 0000007dH
	pop	edi
; Line 1345
	jmp	SHORT $LN30@EnforceCom
$LN29@EnforceCom:
; Line 1334
	movzx	eax, BYTE PTR [ecx-115]
	movzx	edi, BYTE PTR [ecx-114]
	imul	eax, 1000				; 000003e8H
	cdq
	idiv	edi
; Line 1335
	mov	dl, BYTE PTR [ecx-113]
	movzx	edi, ax
; Line 1336
	mov	al, BYTE PTR [ecx-91]
; Line 1337
	jmp	SHORT $LN30@EnforceCom
$LN27@EnforceCom:
; Line 1347
	or	al, -1
	or	dl, 255					; 000000ffH
; Line 1348
	mov	edi, 255				; 000000ffH
$LN30@EnforceCom:
; Line 1351
	movzx	dx, dl
	imul	dx, di
	cbw
	add	dx, ax
	movzx	eax, dx
	mov	DWORD PTR _tck$[ebp], eax
; Line 1352
	mov	dl, 7
$LL26@EnforceCom:
; Line 1353
	movzx	edi, dl
	cmp	ax, WORD PTR _mFrequencyMultiplier[edi*2-6]
	jbe	SHORT $LN67@EnforceCom
	dec	dl
	cmp	dl, 3
	jge	SHORT $LL26@EnforceCom
$LN67@EnforceCom:
; Line 1357
	mov	eax, DWORD PTR tv1507[ebp]
	mov	edi, DWORD PTR tv919[ebp]
	add	eax, ebx
	lea	eax, DWORD PTR [edi+eax*2+55434]
	mov	BYTE PTR [eax+esi], dl
; Line 1358
	mov	eax, DWORD PTR _tck$[ebp]
; Line 1359
	push	2
	pop	edx
	cmp	ax, WORD PTR _tckminall$[ebp]
	jbe	SHORT $LN34@EnforceCom
	movzx	eax, ax
	mov	DWORD PTR _tckminall$[ebp], eax
$LN34@EnforceCom:
	inc	DWORD PTR tv919[ebp]
	add	ecx, 514				; 00000202H
	inc	DWORD PTR tv996[ebp]
	dec	DWORD PTR tv1316[ebp]
	jne	$LL35@EnforceCom
$LN39@EnforceCom:
; Line 1321
	add	DWORD PTR tv1465[ebp], edx
	add	DWORD PTR tv1463[ebp], 1028		; 00000404H
	inc	ebx
	dec	DWORD PTR tv1339[ebp]
	jne	$LL77@EnforceCom
; Line 1367
	mov	dl, 7
$LL21@EnforceCom:
; Line 1368
	mov	cx, WORD PTR _tckminall$[ebp]
	movzx	eax, dl
	cmp	cx, WORD PTR _mFrequencyMultiplier[eax*2-6]
	jbe	SHORT $LN68@EnforceCom
	dec	dl
	cmp	dl, 3
	jge	SHORT $LL21@EnforceCom
$LN68@EnforceCom:
; Line 1378
	mov	al, BYTE PTR [esi+31275]
	mov	cl, BYTE PTR [esi+65459]
	cmp	al, cl
	jb	SHORT $LN59@EnforceCom
	mov	al, cl
$LN59@EnforceCom:
; Line 1383
	mov	BYTE PTR [esi+31275], dl
; Line 1387
	cmp	al, dl
	jae	SHORT $LN17@EnforceCom
; Line 1388
	mov	BYTE PTR [esi+31275], al
$LN17@EnforceCom:
; Line 1393
	cmp	BYTE PTR [esi+31275], 7
	jbe	SHORT $LN16@EnforceCom
; Line 1394
	mov	BYTE PTR [esi+31275], 7
$LN16@EnforceCom:
; Line 1396
	cmp	BYTE PTR [esi+31275], 3
	jae	SHORT $LN15@EnforceCom
; Line 1397
	mov	BYTE PTR [esi+31275], 3
$LN15@EnforceCom:
; Line 1405
	lea	eax, DWORD PTR [esi+55385]
	mov	BYTE PTR _Channel$[ebp], 0
	mov	edi, eax
$LL14@EnforceCom:
; Line 1406
	cmp	BYTE PTR [edi-26777], 0
	je	SHORT $LN13@EnforceCom
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN13@EnforceCom
; Line 1409
	cmp	BYTE PTR [esi+31275], 7
	jne	SHORT $LN13@EnforceCom
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsAnySlotEmpty
	pop	ecx
	pop	ecx
	test	al, al
	je	SHORT $LN13@EnforceCom
; Line 1411
	mov	BYTE PTR [esi+31275], 6
$LN13@EnforceCom:
; Line 1405
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL14@EnforceCom
; Line 1418
	push	esi
	call	_VerifyResetRequests
	pop	ecx
; Line 1441
	xor	eax, eax
$LN56@EnforceCom:
	pop	edi
	pop	esi
	pop	ebx
; Line 1442
	leave
	ret	0
_EnforceCommonFreq ENDP
_TEXT	ENDS
EXTRN	_BitScanReverse32:PROC
; Function compile flags: /Ogspy
;	COMDAT _FindTclTacTClk
_TEXT	SEGMENT
tv636 = -12						; size = 4
tv327 = -12						; size = 4
_taaminall$ = -8					; size = 2
_MyCasLat$ = -8						; size = 4
_CasLatLowBound$ = -1					; size = 1
tv425 = 8						; size = 4
_MrcData$ = 8						; size = 4
_CLdesired$ = 11					; size = 1
_Channel$ = 12						; size = 1
_FindTclTacTClk PROC					; COMDAT
; Line 1458
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1475
	and	DWORD PTR _taaminall$[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
; Line 1516
	movzx	edi, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [esi+edi*2+28610]
	mov	DWORD PTR tv425[ebp], eax
	mov	eax, edi
	imul	eax, 1028				; 00000404H
	mov	BYTE PTR _CasLatLowBound$[ebp], 0
	lea	ecx, DWORD PTR [eax+esi+28754]
	mov	DWORD PTR tv636[ebp], 2
$LL27@FindTclTac:
	mov	eax, DWORD PTR tv425[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN15@FindTclTac
	mov	al, BYTE PTR [edi+esi+31272]
	cmp	al, 3
	jbe	SHORT $LN10@FindTclTac
; Line 1480
	cmp	al, 7
	jne	SHORT $LN8@FindTclTac
; Line 1495
	mov	dl, BYTE PTR [ecx-99]
; Line 1496
	mov	al, BYTE PTR [ecx]
	push	125					; 0000007dH
	pop	ebx
; Line 1497
	mov	BYTE PTR _CasLatLowBound$[ebp], 7
; Line 1498
	jmp	SHORT $LN11@FindTclTac
$LN10@FindTclTac:
; Line 1485
	movzx	eax, BYTE PTR [ecx-113]
	movzx	ebx, BYTE PTR [ecx-112]
	imul	eax, 1000				; 000003e8H
	cdq
	idiv	ebx
; Line 1486
	mov	dl, BYTE PTR [ecx-107]
; Line 1488
	mov	BYTE PTR _CasLatLowBound$[ebp], 4
	movzx	ebx, ax
	mov	al, BYTE PTR [ecx-88]
; Line 1489
	jmp	SHORT $LN11@FindTclTac
$LN8@FindTclTac:
; Line 1500
	or	al, 255					; 000000ffH
	or	dl, 255					; 000000ffH
; Line 1501
	mov	ebx, 255				; 000000ffH
$LN11@FindTclTac:
; Line 1505
	movzx	dx, dl
	imul	dx, bx
	cbw
	add	dx, ax
	movzx	eax, dx
; Line 1506
	cmp	ax, WORD PTR _taaminall$[ebp]
	jbe	SHORT $LN15@FindTclTac
; Line 1507
	movzx	eax, ax
	mov	DWORD PTR _taaminall$[ebp], eax
$LN15@FindTclTac:
	add	ecx, 514				; 00000202H
	inc	DWORD PTR tv425[ebp]
	dec	DWORD PTR tv636[ebp]
	jne	SHORT $LL27@FindTclTac
; Line 1514
	movzx	eax, BYTE PTR [esi+31275]
	movzx	eax, WORD PTR _mFrequencyMultiplier[eax*2-6]
; Line 1515
	movzx	ecx, ax
	movzx	eax, WORD PTR _taaminall$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _CLdesired$[ebp], al
; Line 1516
	test	edx, edx
	je	SHORT $LN6@FindTclTac
; Line 1517
	inc	BYTE PTR _CLdesired$[ebp]
$LN6@FindTclTac:
; Line 1525
	mov	eax, DWORD PTR [esi+65544]
	xor	bl, bl
	mov	DWORD PTR _MyCasLat$[ebp], eax
; Line 1526
	test	eax, eax
	je	SHORT $LN22@FindTclTac
	movzx	eax, BYTE PTR _CasLatLowBound$[ebp]
	mov	DWORD PTR tv327[ebp], eax
$LL5@FindTclTac:
; Line 1527
	push	DWORD PTR _MyCasLat$[ebp]
	call	_BitScanReverse32
	mov	bl, al
	add	bl, BYTE PTR _CasLatLowBound$[ebp]
	pop	ecx
; Line 1528
	movsx	eax, bl
	cmp	eax, DWORD PTR tv327[ebp]
	jl	SHORT $LN21@FindTclTac
; Line 1532
	cmp	bl, BYTE PTR _CLdesired$[ebp]
	je	SHORT $LN22@FindTclTac
; Line 1538
	push	DWORD PTR _MyCasLat$[ebp]
	call	_BitScanReverse32
	xor	edx, edx
	inc	edx
	pop	ecx
	mov	ecx, eax
	shl	edx, cl
	not	edx
	and	DWORD PTR _MyCasLat$[ebp], edx
	jne	SHORT $LL5@FindTclTac
$LN22@FindTclTac:
; Line 1543
	imul	edi, 288				; 00000120H
	add	esi, edi
	movzx	cx, bl
	lea	eax, DWORD PTR [esi+30756]
	mov	WORD PTR [eax], cx
; Line 1544
	movzx	ecx, WORD PTR [esi+64266]
	mov	edx, 255				; 000000ffH
	cmp	cx, dx
	je	SHORT $LN1@FindTclTac
; Line 1545
	mov	WORD PTR [eax], cx
$LN1@FindTclTac:
; Line 1549
	xor	eax, eax
$LN17@FindTclTac:
	pop	edi
	pop	esi
	pop	ebx
; Line 1550
	leave
	ret	0
$LN21@FindTclTac:
; Line 1530
	push	16					; 00000010H
	pop	eax
	jmp	SHORT $LN17@FindTclTac
_FindTclTacTClk ENDP
_TEXT	ENDS
EXTRN	_MrcDeadLoop:PROC
EXTRN	_MmrcMemset:PROC
; Function compile flags: /Ogspy
;	COMDAT _FindTrasTrpTrcd
_TEXT	SEGMENT
_MinSPDVal$ = -304					; size = 288
tv396 = -16						; size = 4
tv389 = -12						; size = 4
_MtbInPs$ = -8						; size = 2
_DdrFreqInx$ = -4					; size = 1
_DdrType$ = -3						; size = 1
_j$ = -2						; size = 1
_CurrentDimm$ = -1					; size = 1
tv513 = 8						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_FindTrasTrpTrcd PROC					; COMDAT
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
; Line 1583
	and	DWORD PTR _MtbInPs$[ebp], 0
	push	ebx
	mov	ebx, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [ebx+31275]
	push	edi
	sub	al, 3
; Line 1586
	push	288					; 00000120H
	mov	BYTE PTR _DdrFreqInx$[ebp], al
	lea	eax, DWORD PTR _MinSPDVal$[ebp]
	push	0
	push	eax
	mov	edi, OFFSET _mTrasTrpTrcdDdr4Tbl
	mov	BYTE PTR _DdrType$[ebp], 0
	call	_MmrcMemset
; Line 1591
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	edx, DWORD PTR [eax+ebx]
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [edx+55385], 0
	mov	DWORD PTR tv389[ebp], edx
	jne	SHORT $LN38@FindTrasTr
; Line 1592
	xor	eax, eax
	jmp	$LN39@FindTrasTr
$LN38@FindTrasTr:
; Line 1595
	lea	eax, DWORD PTR [eax+eax+28610]
	push	esi
	mov	BYTE PTR _CurrentDimm$[ebp], 0
	mov	DWORD PTR tv396[ebp], eax
	jmp	SHORT $LN37@FindTrasTr
$LL58@FindTrasTr:
	mov	edx, DWORD PTR tv389[ebp]
$LN37@FindTrasTr:
; Line 1596
	movzx	eax, BYTE PTR _CurrentDimm$[ebp]
	mov	ecx, DWORD PTR tv396[ebp]
	add	ecx, eax
	cmp	BYTE PTR [ecx+ebx], 0
	je	$LN36@FindTrasTr
; Line 1602
	movzx	ecx, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
; Line 1604
	mov	cl, BYTE PTR [edx+31272]
	imul	eax, 514				; 00000202H
	lea	esi, DWORD PTR [eax+ebx+28630]
	cmp	cl, 3
	jbe	SHORT $LN31@FindTrasTr
	cmp	cl, 7
	jne	$LN48@FindTrasTr
; Line 1614
	test	BYTE PTR [esi+18], 12			; 0000000cH
	jne	SHORT $LN29@FindTrasTr
; Line 1615
	mov	DWORD PTR _MtbInPs$[ebp], 125		; 0000007dH
$LN29@FindTrasTr:
; Line 1617
	mov	edi, OFFSET _mTrasTrpTrcdDdr4Tbl
; Line 1619
	jmp	SHORT $LN32@FindTrasTr
$LN31@FindTrasTr:
; Line 1609
	movzx	eax, BYTE PTR [esi+11]
	movzx	edi, BYTE PTR [esi+12]
	imul	eax, 1000				; 000003e8H
	cdq
	idiv	edi
; Line 1610
	mov	edi, OFFSET _mTrasTrpTrcdDdr3Tbl
	movzx	eax, ax
	mov	DWORD PTR _MtbInPs$[ebp], eax
$LN32@FindTrasTr:
; Line 1627
	mov	BYTE PTR _DdrType$[ebp], cl
; Line 1629
	mov	cl, BYTE PTR [edi]
	mov	BYTE PTR _j$[ebp], 0
	cmp	cl, 255					; 000000ffH
	je	$LN36@FindTrasTr
	mov	eax, edi
	mov	dl, cl
$LL27@FindTrasTr:
; Line 1631
	movzx	ecx, BYTE PTR [eax+5]
	movzx	ecx, BYTE PTR [ecx+esi+1]
	movzx	ebx, BYTE PTR [eax+6]
	and	ecx, ebx
	movzx	ebx, BYTE PTR [eax+4]
	movzx	ebx, BYTE PTR [ebx+esi+1]
	shl	ecx, 8
	add	ecx, ebx
	movzx	ebx, WORD PTR _MtbInPs$[ebp]
	imul	ecx, ebx
; Line 1635
	cmp	BYTE PTR _DdrType$[ebp], 7
	jne	SHORT $LN56@FindTrasTr
; Line 1636
	movzx	ebx, dl
	sub	ebx, 3
	je	SHORT $LN22@FindTrasTr
	dec	ebx
	dec	ebx
	je	SHORT $LN21@FindTrasTr
	sub	ebx, 3
	jne	SHORT $LN56@FindTrasTr
$LN21@FindTrasTr:
; Line 1642
	mov	ecx, 7497				; 00001d49H
; Line 1643
	jmp	SHORT $LN56@FindTrasTr
$LN22@FindTrasTr:
; Line 1638
	mov	ecx, 14994				; 00003a92H
$LN56@FindTrasTr:
; Line 1651
	mov	al, BYTE PTR [eax+7]
	cmp	al, 255					; 000000ffH
	je	SHORT $LN19@FindTrasTr
; Line 1652
	movzx	eax, al
	movsx	eax, BYTE PTR [eax+esi+1]
	add	ecx, eax
$LN19@FindTrasTr:
; Line 1654
	movzx	eax, dl
	lea	eax, DWORD PTR _MinSPDVal$[ebp+eax*4]
	mov	edx, DWORD PTR [eax]
	cmp	edx, ecx
	jbe	SHORT $LN41@FindTrasTr
	mov	ecx, edx
$LN41@FindTrasTr:
; Line 1667
	inc	BYTE PTR _j$[ebp]
	mov	DWORD PTR [eax], ecx
	movzx	eax, BYTE PTR _j$[ebp]
	imul	eax, 14					; 0000000eH
	add	eax, edi
	mov	dl, BYTE PTR [eax]
	cmp	dl, 255					; 000000ffH
	jne	SHORT $LL27@FindTrasTr
; Line 1629
	mov	ebx, DWORD PTR _MrcData$[ebp]
$LN36@FindTrasTr:
; Line 1595
	inc	BYTE PTR _CurrentDimm$[ebp]
	cmp	BYTE PTR _CurrentDimm$[ebp], 2
	jb	$LL58@FindTrasTr
; Line 1688
	test	edi, edi
	jne	$LN60@FindTrasTr
; Line 1689
	push	11					; 0000000bH
	jmp	SHORT $LN61@FindTrasTr
$LN48@FindTrasTr:
; Line 1625
	or	eax, -1
	jmp	$LN59@FindTrasTr
$LL15@FindTrasTr:
; Line 1693
	mov	al, BYTE PTR [edi]
; Line 1694
	cmp	al, 10					; 0000000aH
	jne	SHORT $LN11@FindTrasTr
	cmp	BYTE PTR _DdrType$[ebp], 3
	jbe	SHORT $LN12@FindTrasTr
$LN11@FindTrasTr:
	cmp	al, 12					; 0000000cH
	je	SHORT $LN12@FindTrasTr
	cmp	al, 13					; 0000000dH
	je	SHORT $LN12@FindTrasTr
	cmp	al, 14					; 0000000eH
	je	SHORT $LN12@FindTrasTr
	cmp	al, 15					; 0000000fH
	je	SHORT $LN12@FindTrasTr
; Line 1707
	cmp	al, 72					; 00000048H
	jae	SHORT $LN10@FindTrasTr
; Line 1708
	movzx	esi, al
	cmp	DWORD PTR _MinSPDVal$[ebp+esi*4], 0
	je	SHORT $LN4@FindTrasTr
; Line 1709
	movzx	ax, BYTE PTR [edi+3]
	movzx	ecx, WORD PTR [edi+1]
	movzx	eax, ax
	cmp	ax, cx
	ja	SHORT $LN4@FindTrasTr
	movzx	ecx, BYTE PTR _DdrFreqInx$[ebp]
	movzx	ecx, WORD PTR _mFrequencyMultiplier[ecx*2]
	mov	DWORD PTR tv513[ebp], ecx
$LL8@FindTrasTr:
; Line 1711
	movzx	ecx, ax
	imul	ecx, DWORD PTR tv513[ebp]
	cmp	ecx, DWORD PTR _MinSPDVal$[ebp+esi*4]
	jae	SHORT $LN49@FindTrasTr
	movzx	ecx, WORD PTR [edi+1]
	inc	eax
	cmp	ax, cx
	jbe	SHORT $LL8@FindTrasTr
$LN4@FindTrasTr:
; Line 1728
	push	12					; 0000000cH
$LN61@FindTrasTr:
	pop	eax
	jmp	SHORT $LN59@FindTrasTr
$LN49@FindTrasTr:
; Line 1719
	cmp	BYTE PTR [edi], 4
	jne	SHORT $LN3@FindTrasTr
; Line 1723
	inc	eax
	and	eax, 65534				; 0000fffeH
$LN3@FindTrasTr:
; Line 1725
	movzx	ecx, BYTE PTR _Channel$[ebp]
	imul	ecx, 72					; 00000048H
	add	ecx, esi
	mov	WORD PTR [ebx+ecx*4+30696], ax
$LN12@FindTrasTr:
; Line 1699
	add	edi, 14					; 0000000eH
$LN60@FindTrasTr:
; Line 1692
	cmp	BYTE PTR [edi], 255			; 000000ffH
	jne	$LL15@FindTrasTr
; Line 1737
	xor	eax, eax
$LN59@FindTrasTr:
	pop	esi
$LN39@FindTrasTr:
	pop	edi
	pop	ebx
; Line 1738
	leave
	ret	0
$LN10@FindTrasTr:
; Line 1733
	call	_MrcDeadLoop
; Line 1735
	jmp	SHORT $LN60@FindTrasTr
_FindTrasTrpTrcd ENDP
_TEXT	ENDS
EXTRN	_mDimmActivate:BYTE
EXTRN	_mDimmConfigs:BYTE
; Function compile flags: /Ogspy
;	COMDAT _CalcDimmConfig
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ActivationTable$ = 12					; size = 4
_Channel$ = 12						; size = 1
_CalcDimmConfig PROC					; COMDAT
; Line 1753
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1760
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	movzx	esi, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [esi+ebx+55385], 0
	jne	SHORT $LN25@CalcDimmCo
; Line 1761
	xor	eax, eax
	jmp	$LN26@CalcDimmCo
$LN25@CalcDimmCo:
; Line 1767
	cmp	BYTE PTR [ebx+esi*2+28610], 0
	jne	SHORT $LN24@CalcDimmCo
	cmp	BYTE PTR [esi+ebx+31272], 3
	ja	SHORT $LN24@CalcDimmCo
; Line 1768
	push	4
	pop	eax
	jmp	$LN26@CalcDimmCo
$LN24@CalcDimmCo:
; Line 1779
	mov	al, BYTE PTR [esi+ebx+31272]
	push	edi
	cmp	al, 3
	jbe	SHORT $LN21@CalcDimmCo
	cmp	al, 7
	jne	$LN19@CalcDimmCo
; Line 1791
	movzx	edi, BYTE PTR [esi+ebx+55420]
	movzx	eax, BYTE PTR [ebx+71011]
	and	edi, 1
	shl	edi, 27					; 0000001bH
	and	eax, 3
	or	edi, eax
; Line 1793
	push	2
	lea	eax, DWORD PTR [ebx+55418]
	push	0
	shl	edi, 2
	push	eax
	or	edi, 2
	mov	DWORD PTR _ActivationTable$[ebp], OFFSET _mDimmActivateTableDdr4
	call	_MmrcMemset
	add	esp, 12					; 0000000cH
; Line 1794
	jmp	SHORT $LN22@CalcDimmCo
$LN21@CalcDimmCo:
; Line 1785
	xor	edi, edi
	inc	edi
; Line 1786
	mov	DWORD PTR _ActivationTable$[ebp], OFFSET _mDimmActivateTableDdr3
$LN22@CalcDimmCo:
; Line 1800
	cmp	BYTE PTR [ebx+esi*2+28610], 0
	je	SHORT $LN34@CalcDimmCo
; Line 1801
	movzx	eax, BYTE PTR [ebx+esi*2+55394]
	inc	eax
	shl	eax, 12					; 0000000cH
	xor	eax, edi
	and	eax, 61440				; 0000f000H
	xor	edi, eax
; Line 1802
	cmp	BYTE PTR [esi+ebx+55418], 1
	jne	SHORT $LN17@CalcDimmCo
; Line 1803
	and	edi, -241				; ffffff0fH
; Line 1804
	or	edi, 1073741824				; 40000000H
; Line 1805
	jmp	SHORT $LN16@CalcDimmCo
$LN17@CalcDimmCo:
; Line 1806
	mov	cl, BYTE PTR [ebx+esi*2+55410]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	shl	eax, 4
	xor	eax, edi
	and	eax, 240				; 000000f0H
	xor	edi, eax
$LN16@CalcDimmCo:
; Line 1808
	movzx	eax, BYTE PTR [ebx+esi*2+55398]
	inc	eax
	shl	eax, 8
	xor	eax, edi
	and	eax, 3840				; 00000f00H
	xor	edi, eax
$LN34@CalcDimmCo:
; Line 1811
	lea	eax, DWORD PTR [ebx+esi*2]
	cmp	BYTE PTR [eax+28611], 0
	je	SHORT $LN15@CalcDimmCo
; Line 1812
	movzx	ecx, BYTE PTR [eax+55395]
	inc	ecx
	shl	ecx, 24					; 00000018H
	xor	ecx, edi
	and	ecx, 251658240				; 0f000000H
	xor	edi, ecx
; Line 1813
	cmp	BYTE PTR [esi+ebx+55418], 1
	jne	SHORT $LN14@CalcDimmCo
; Line 1814
	and	edi, -983041				; fff0ffffH
; Line 1815
	jmp	SHORT $LN13@CalcDimmCo
$LN14@CalcDimmCo:
; Line 1816
	mov	cl, BYTE PTR [eax+55411]
	xor	edx, edx
	inc	edx
	shl	edx, cl
	shl	edx, 16					; 00000010H
	xor	edx, edi
	and	edx, 983040				; 000f0000H
	xor	edi, edx
$LN13@CalcDimmCo:
; Line 1818
	movzx	ecx, BYTE PTR [eax+55399]
	inc	ecx
	shl	ecx, 20					; 00000014H
	xor	ecx, edi
	and	ecx, 15728640				; 00f00000H
	xor	edi, ecx
$LN15@CalcDimmCo:
; Line 1820
	imul	esi, 4336				; 000010f0H
	add	esi, ebx
	mov	ecx, DWORD PTR [esi+56598]
	shl	ecx, 28					; 0000001cH
	xor	ecx, edi
	and	ecx, 268435456				; 10000000H
	xor	edi, ecx
; Line 1824
	test	edi, 536870912				; 20000000H
	je	SHORT $LN12@CalcDimmCo
	test	edi, 61440				; 0000f000H
	je	SHORT $LN11@CalcDimmCo
	test	edi, 251658240				; 0f000000H
	jne	SHORT $LN12@CalcDimmCo
$LN11@CalcDimmCo:
; Line 1825
	and	edi, -536870913				; dfffffffH
$LN12@CalcDimmCo:
; Line 1831
	xor	ecx, ecx
$LL35@CalcDimmCo:
; Line 1832
	movzx	edx, cx
	cmp	DWORD PTR _mDimmConfigs[edx*4], edi
	je	SHORT $LN30@CalcDimmCo
	inc	ecx
	mov	edx, 994				; 000003e2H
	cmp	cx, dx
	jb	SHORT $LL35@CalcDimmCo
; Line 1847
	jmp	SHORT $LN8@CalcDimmCo
$LN30@CalcDimmCo:
; Line 1833
	mov	WORD PTR [eax+65525], cx
$LN8@CalcDimmCo:
; Line 1838
	mov	eax, 994				; 000003e2H
	cmp	cx, ax
	jne	SHORT $LN6@CalcDimmCo
$LN38@CalcDimmCo:
; Line 1840
	push	17					; 00000011H
	jmp	$LN37@CalcDimmCo
$LN6@CalcDimmCo:
; Line 1842
	push	ebx
	call	_SetMaxDq
; Line 1846
	mov	eax, edi
	shr	eax, 10					; 0000000aH
	and	eax, 49152				; 0000c000H
	and	edi, 12288				; 00003000H
	pop	ecx
	or	eax, edi
	xor	ecx, ecx
	xor	edx, edx
	shr	eax, 12					; 0000000cH
$LL5@CalcDimmCo:
; Line 1847
	movzx	edi, dx
	cmp	DWORD PTR _mDimmActivate[edi*4], eax
	je	SHORT $LN31@CalcDimmCo
	inc	edx
	cmp	dx, 8
	jb	SHORT $LL5@CalcDimmCo
	jmp	$LN3@CalcDimmCo
$LN31@CalcDimmCo:
; Line 1851
	mov	edi, DWORD PTR _ActivationTable$[ebp]
	movzx	eax, dx
	shl	eax, 5
	add	eax, edi
	mov	edi, DWORD PTR [eax+28]
	mov	DWORD PTR [esi+56014], edi
	mov	DWORD PTR [esi+56018], ecx
; Line 1852
	mov	edi, DWORD PTR [eax+24]
	mov	DWORD PTR [esi+56022], edi
	mov	DWORD PTR [esi+56026], ecx
; Line 1853
	mov	edi, DWORD PTR [eax+20]
	mov	DWORD PTR [esi+56030], edi
	mov	DWORD PTR [esi+56034], ecx
; Line 1854
	mov	edi, DWORD PTR [eax+16]
	mov	DWORD PTR [esi+56038], edi
	mov	DWORD PTR [esi+56042], ecx
; Line 1855
	mov	edi, DWORD PTR [eax+12]
	mov	DWORD PTR [esi+56046], edi
	mov	DWORD PTR [esi+56050], ecx
; Line 1856
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+56054], edi
	mov	DWORD PTR [esi+56058], ecx
; Line 1857
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+56062], edi
	mov	DWORD PTR [esi+56066], ecx
; Line 1858
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi+56070], eax
	mov	DWORD PTR [esi+56074], ecx
$LN3@CalcDimmCo:
; Line 1863
	cmp	dx, 8
; Line 1865
	je	$LN38@CalcDimmCo
; Line 1868
	xor	eax, eax
	jmp	SHORT $LN36@CalcDimmCo
$LN19@CalcDimmCo:
; Line 1797
	push	11					; 0000000bH
$LN37@CalcDimmCo:
	pop	eax
$LN36@CalcDimmCo:
	pop	edi
$LN26@CalcDimmCo:
	pop	esi
	pop	ebx
; Line 1869
	pop	ebp
	ret	0
_CalcDimmConfig ENDP
_TEXT	ENDS
PUBLIC	_CalcRaplBandWidthScale
EXTRN	_RaplBandWidthScaleValues:BYTE
EXTRN	_RaplDimmConfigs:BYTE
; Function compile flags: /Ogspy
;	COMDAT _CalcRaplBandWidthScale
_TEXT	SEGMENT
_CurrentSpdData$ = -40					; size = 4
tv161 = -36						; size = 4
tv187 = -32						; size = 4
_AcumulatedBandWidthScale$ = -28			; size = 4
tv705 = -24						; size = 4
tv643 = -20						; size = 4
tv595 = -16						; size = 4
_AcumulatedCapacity$ = -12				; size = 4
tv639 = -8						; size = 4
tv641 = -4						; size = 4
_MrcData$ = 8						; size = 4
_CalcRaplBandWidthScale PROC				; COMDAT
; Line 1885
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
; Line 1895
	mov	esi, DWORD PTR _MrcData$[ebp]
	lea	ecx, DWORD PTR [esi+28610]
	push	2
	xor	edx, edx
	mov	DWORD PTR tv705[ebp], ecx
	pop	ecx
	push	ebx
	mov	DWORD PTR _AcumulatedCapacity$[ebp], edx
; Line 1896
	mov	DWORD PTR _AcumulatedBandWidthScale$[ebp], edx
	xor	eax, eax
	mov	DWORD PTR tv639[ebp], esi
	mov	DWORD PTR tv641[ebp], edx
	mov	DWORD PTR tv643[ebp], edx
	mov	DWORD PTR tv161[ebp], ecx
	push	edi
$LL22@CalcRaplBa:
; Line 1899
	mov	edi, DWORD PTR tv639[ebp]
	cmp	BYTE PTR [edi+28608], dl
	je	$LN21@CalcRaplBa
; Line 1900
	mov	ebx, DWORD PTR tv705[ebp]
	xor	edi, edi
	mov	DWORD PTR tv595[ebp], ebx
	mov	DWORD PTR tv187[ebp], ecx
$LL32@CalcRaplBa:
; Line 1901
	mov	ecx, DWORD PTR tv595[ebp]
	cmp	BYTE PTR [ecx], dl
	je	$LN17@CalcRaplBa
; Line 1902
	mov	ecx, DWORD PTR tv641[ebp]
	add	ecx, edi
	imul	ecx, 514				; 00000202H
	lea	ecx, DWORD PTR [ecx+esi+28630]
; Line 1910
	xor	edx, edx
	mov	DWORD PTR _CurrentSpdData$[ebp], ecx
	mov	ecx, DWORD PTR tv639[ebp]
	inc	edx
	cmp	BYTE PTR [ecx+55418], dl
; Line 1912
	je	SHORT $LN13@CalcRaplBa
; Line 1913
	lea	ecx, DWORD PTR [edi+eax*2+55410]
	mov	cl, BYTE PTR [ecx+esi]
	shl	edx, cl
	and	edx, 15					; 0000000fH
$LN13@CalcRaplBa:
	lea	ecx, DWORD PTR [edi+eax*2+55394]
; Line 1918
	movzx	ecx, BYTE PTR [ecx+esi]
	inc	ecx
	shl	ecx, 8
	and	ecx, 3840				; 00000f00H
	lea	ebx, DWORD PTR [edi+eax*2+55398]
	movzx	ebx, BYTE PTR [ebx+esi]
	inc	ebx
	shl	ebx, 4
	and	ebx, 240				; 000000f0H
	or	ecx, ebx
	movzx	ebx, BYTE PTR [esi+31275]
	sub	ebx, 3
	and	ebx, 15					; 0000000fH
	shl	ebx, 16					; 00000010H
	or	ecx, ebx
	mov	ebx, DWORD PTR tv643[ebp]
	add	ebx, 4096				; 00001000H
	and	ebx, 61440				; 0000f000H
	and	edx, -1048561				; fff0000fH
	or	ecx, ebx
	or	ecx, edx
; Line 1919
	lea	edx, DWORD PTR [edi+eax*2+55414]
	movzx	edx, BYTE PTR [edx+esi]
	dec	edx
	je	SHORT $LN10@CalcRaplBa
; Line 1930
	and	ecx, -14680065				; ff1fffffH
	or	ecx, 1048576				; 00100000H
	dec	edx
; Line 1931
	jne	SHORT $LN11@CalcRaplBa
	mov	edx, DWORD PTR _CurrentSpdData$[ebp]
	mov	dl, BYTE PTR [edx+14]
	and	dl, 24					; 00000018H
	cmp	dl, 1
	jne	SHORT $LN11@CalcRaplBa
	and	ecx, -12582913				; ff3fffffH
	or	ecx, 3145728				; 00300000H
	jmp	SHORT $LN11@CalcRaplBa
$LN10@CalcRaplBa:
; Line 1921
	and	ecx, -13631489				; ff2fffffH
	or	ecx, 2097152				; 00200000H
$LN11@CalcRaplBa:
; Line 1936
	xor	dl, dl
$LL6@CalcRaplBa:
; Line 1937
	movzx	ebx, dl
	cmp	DWORD PTR _RaplDimmConfigs[ebx*4], ecx
	je	SHORT $LN28@CalcRaplBa
	inc	dl
	cmp	dl, 176					; 000000b0H
	jb	SHORT $LL6@CalcRaplBa
	jmp	SHORT $LN33@CalcRaplBa
$LN28@CalcRaplBa:
; Line 1941
	movzx	ecx, dl
; Line 1942
	mov	edx, DWORD PTR tv641[ebp]
	shl	ecx, 3
	mov	ebx, DWORD PTR _RaplBandWidthScaleValues[ecx+4]
	mov	ecx, DWORD PTR _RaplBandWidthScaleValues[ecx]
	shr	ebx, 1
	add	edx, edi
	mov	edx, DWORD PTR [esi+edx*4+28614]
	shr	ecx, 1
	add	ebx, ecx
	imul	ebx, edx
; Line 1943
	add	DWORD PTR _AcumulatedBandWidthScale$[ebp], ebx
; Line 1944
	add	DWORD PTR _AcumulatedCapacity$[ebp], edx
$LN33@CalcRaplBa:
	xor	edx, edx
$LN17@CalcRaplBa:
; Line 1900
	inc	edi
	inc	DWORD PTR tv595[ebp]
	dec	DWORD PTR tv187[ebp]
	jne	$LL32@CalcRaplBa
	push	2
	pop	ecx
$LN21@CalcRaplBa:
	add	DWORD PTR tv643[ebp], 4096		; 00001000H
	add	DWORD PTR tv641[ebp], ecx
	add	DWORD PTR tv705[ebp], ecx
	inc	eax
	inc	DWORD PTR tv639[ebp]
	dec	DWORD PTR tv161[ebp]
	jne	$LL22@CalcRaplBa
	pop	edi
	pop	ebx
; Line 1950
	cmp	DWORD PTR _AcumulatedCapacity$[ebp], edx
	jne	SHORT $LN2@CalcRaplBa
; Line 1951
	mov	DWORD PTR [esi+70985], edx
; Line 1952
	jmp	SHORT $LN1@CalcRaplBa
$LN2@CalcRaplBa:
; Line 1953
	mov	eax, DWORD PTR _AcumulatedBandWidthScale$[ebp]
	xor	edx, edx
	div	DWORD PTR _AcumulatedCapacity$[ebp]
	mov	DWORD PTR [esi+70985], eax
$LN1@CalcRaplBa:
; Line 1955
	xor	eax, eax
	pop	esi
; Line 1956
	leave
	ret	0
_CalcRaplBandWidthScale ENDP
_TEXT	ENDS
PUBLIC	_GetSpdData
EXTRN	_MrcSmbusExec:PROC
EXTRN	_OemI2cMux:PROC
; Function compile flags: /Ogspy
;	COMDAT _GetSpdData
_TEXT	SEGMENT
tv368 = -36						; size = 4
tv364 = -32						; size = 4
tv369 = -28						; size = 4
_Status$ = -24						; size = 4
tv508 = -20						; size = 4
_SpdTable$ = -20					; size = 4
tv391 = -16						; size = 4
_SpdData$ = -12						; size = 4
_CurrentDimm$ = -7					; size = 1
_Length$ = -3						; size = 1
_Dimmtypebackup$ = -2					; size = 1
_Dimmtype$ = -1						; size = 1
tv306 = 8						; size = 4
_MrcData$ = 8						; size = 4
_TableLen$ = 11						; size = 1
_Channel$ = 12						; size = 1
_GetSpdData PROC					; COMDAT
; Line 1971
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
; Line 1983
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	mov	eax, edi
	imul	eax, 1028				; 00000404H
	lea	eax, DWORD PTR [eax+esi+28630]
	mov	DWORD PTR _SpdData$[ebp], eax
; Line 1984
	mov	BYTE PTR [edi+esi+55385], 0
; Line 1985
	mov	BYTE PTR _Length$[ebp], 1
; Line 1987
	mov	BYTE PTR _Dimmtypebackup$[ebp], 0
; Line 1992
	mov	BYTE PTR _CurrentDimm$[ebp], 0
$LL22@GetSpdData:
; Line 1998
	push	DWORD PTR _CurrentDimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	call	_OemI2cMux
; Line 1999
	movzx	ebx, BYTE PTR _CurrentDimm$[ebp]
	pop	ecx
	pop	ecx
	lea	ecx, DWORD PTR [ebx+edi*2+65384]
	add	ecx, esi
	cmp	BYTE PTR [ecx], 0
	mov	DWORD PTR tv364[ebp], ecx
	jne	SHORT $LN19@GetSpdData
; Line 2007
	mov	ecx, DWORD PTR _SpdData$[ebp]
	mov	eax, ebx
	imul	eax, 514				; 00000202H
	lea	eax, DWORD PTR [eax+ecx+3]
	push	eax
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	push	2
	lea	eax, DWORD PTR [ebx+edi*2+65380]
	movzx	eax, BYTE PTR [eax+esi]
	push	0
	push	eax
	movzx	eax, WORD PTR [esi+65350]
	push	eax
	call	_MrcSmbusExec
	add	esp, 24					; 00000018H
$LN19@GetSpdData:
; Line 2010
	test	eax, eax
	je	SHORT $LN18@GetSpdData
; Line 2011
	mov	ecx, DWORD PTR _SpdData$[ebp]
	mov	eax, ebx
	imul	eax, 514				; 00000202H
	mov	BYTE PTR [eax+ecx], 0
; Line 2013
	jmp	$LN41@GetSpdData
$LN18@GetSpdData:
; Line 2016
	mov	eax, DWORD PTR _SpdData$[ebp]
	mov	ecx, ebx
	imul	ecx, 514				; 00000202H
	add	eax, ecx
	mov	DWORD PTR tv369[ebp], eax
	mov	al, BYTE PTR [eax+3]
	mov	BYTE PTR _Dimmtype$[ebp], al
; Line 2020
	movzx	eax, al
	sub	eax, 11					; 0000000bH
	mov	DWORD PTR tv368[ebp], ecx
	je	SHORT $LN15@GetSpdData
	dec	eax
	jne	$LN11@GetSpdData
; Line 2031
	mov	eax, edi
	imul	eax, 4336				; 000010f0H
	lea	edx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [edx+57894]
	or	eax, DWORD PTR [edx+57898]
	mov	DWORD PTR tv391[ebp], edx
	je	$LN27@GetSpdData
; Line 2035
	mov	DWORD PTR _SpdTable$[ebp], OFFSET _mDdr4RelevantSpdBytes
	mov	BYTE PTR _TableLen$[ebp], 81		; 00000051H
; Line 2037
	mov	BYTE PTR [edi+esi+31272], 7
; Line 2038
	jmp	SHORT $LN16@GetSpdData
$LN15@GetSpdData:
; Line 2022
	mov	eax, edi
	imul	eax, 4336				; 000010f0H
	add	eax, esi
	mov	edx, DWORD PTR [eax+57902]
	or	edx, DWORD PTR [eax+57906]
	mov	DWORD PTR tv391[ebp], eax
	je	$LN28@GetSpdData
; Line 2026
	mov	DWORD PTR _SpdTable$[ebp], OFFSET _mDdr3RelevantSpdBytes
	mov	BYTE PTR _TableLen$[ebp], 65		; 00000041H
; Line 2028
	mov	BYTE PTR [edi+esi+31272], 0
	mov	edx, eax
$LN16@GetSpdData:
; Line 2052
	cmp	BYTE PTR [edi+esi+55385], 1
	jbe	SHORT $LN37@GetSpdData
; Line 2053
	mov	al, BYTE PTR _Dimmtypebackup$[ebp]
	cmp	al, BYTE PTR _Dimmtype$[ebp]
	jne	$LN29@GetSpdData
$LN37@GetSpdData:
; Line 2062
	cmp	BYTE PTR _TableLen$[ebp], 0
	mov	al, BYTE PTR _Dimmtype$[ebp]
	mov	BYTE PTR _Dimmtypebackup$[ebp], al
	jbe	SHORT $LN38@GetSpdData
	mov	eax, DWORD PTR _SpdTable$[ebp]
	mov	DWORD PTR tv508[ebp], eax
	movzx	eax, BYTE PTR _TableLen$[ebp]
	mov	DWORD PTR tv306[ebp], eax
$LL8@GetSpdData:
; Line 2064
	mov	eax, DWORD PTR tv364[ebp]
	and	DWORD PTR _Status$[ebp], 0
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN7@GetSpdData
; Line 2072
	mov	eax, DWORD PTR tv508[ebp]
	movzx	eax, WORD PTR [eax]
	movzx	edx, ax
	add	edx, ecx
	mov	ecx, DWORD PTR _SpdData$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+1]
	push	ecx
	lea	ecx, DWORD PTR _Length$[ebp]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx+edi*2+65380]
	movzx	eax, BYTE PTR [eax+esi]
	push	0
	push	eax
	movzx	eax, WORD PTR [esi+65350]
	push	eax
	call	_MrcSmbusExec
	mov	ecx, DWORD PTR tv368[ebp]
	mov	edx, DWORD PTR tv391[ebp]
	add	esp, 24					; 00000018H
	mov	DWORD PTR _Status$[ebp], eax
$LN7@GetSpdData:
	add	DWORD PTR tv508[ebp], 2
	dec	DWORD PTR tv306[ebp]
	jne	SHORT $LL8@GetSpdData
; Line 2078
	cmp	DWORD PTR _Status$[ebp], 0
	jne	SHORT $LN36@GetSpdData
$LN38@GetSpdData:
	cmp	BYTE PTR _CurrentDimm$[ebp], 1
	jne	SHORT $LN4@GetSpdData
	mov	eax, DWORD PTR [edx+57918]
	or	eax, DWORD PTR [edx+57922]
	je	SHORT $LN36@GetSpdData
$LN4@GetSpdData:
; Line 2086
	mov	eax, DWORD PTR tv369[ebp]
	mov	BYTE PTR [eax], 1
; Line 2087
	lea	eax, DWORD PTR [ebx+edi*2+28610]
	mov	BYTE PTR [eax+esi], 1
; Line 2088
	inc	BYTE PTR [edi+esi+55385]
; Line 2089
	inc	BYTE PTR [esi+55387]
	jmp	SHORT $LN21@GetSpdData
$LN36@GetSpdData:
; Line 2083
	mov	eax, DWORD PTR tv369[ebp]
	mov	BYTE PTR [eax], 0
$LN41@GetSpdData:
; Line 2084
	lea	eax, DWORD PTR [ebx+edi*2+28610]
	mov	BYTE PTR [eax+esi], 0
$LN21@GetSpdData:
	inc	BYTE PTR _CurrentDimm$[ebp]
	cmp	BYTE PTR _CurrentDimm$[ebp], 2
	jb	$LL22@GetSpdData
; Line 2093
	xor	eax, eax
$LN23@GetSpdData:
	pop	edi
	pop	esi
	pop	ebx
; Line 2094
	leave
	ret	0
$LN11@GetSpdData:
; Line 2046
	xor	eax, eax
	inc	eax
	jmp	SHORT $LN23@GetSpdData
$LN27@GetSpdData:
; Line 2032
	push	27					; 0000001bH
	jmp	SHORT $LN42@GetSpdData
$LN28@GetSpdData:
; Line 2023
	push	26					; 0000001aH
$LN42@GetSpdData:
	pop	eax
	jmp	SHORT $LN23@GetSpdData
$LN29@GetSpdData:
; Line 2055
	push	20					; 00000014H
	jmp	SHORT $LN42@GetSpdData
_GetSpdData ENDP
_TEXT	ENDS
PUBLIC	_GetRelevantSpdBytes
; Function compile flags: /Ogspy
;	COMDAT _GetRelevantSpdBytes
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_RelevantSpdBytes$ = 16					; size = 4
_SpdElements$ = 20					; size = 4
_GetRelevantSpdBytes PROC				; COMDAT
; Line 2117
	mov	ecx, DWORD PTR _RelevantSpdBytes$[esp-4]
	test	ecx, ecx
	je	SHORT $LN5@GetRelevan
	mov	eax, DWORD PTR _SpdElements$[esp-4]
	test	eax, eax
	je	SHORT $LN5@GetRelevan
; Line 2121
	movzx	edx, BYTE PTR _Channel$[esp-4]
	push	esi
	mov	esi, DWORD PTR _MrcData$[esp]
	mov	dl, BYTE PTR [edx+esi+31272]
	pop	esi
	cmp	dl, 3
	ja	SHORT $LN4@GetRelevan
; Line 2122
	mov	DWORD PTR [ecx], OFFSET _mDdr3RelevantSpdBytes
; Line 2123
	mov	DWORD PTR [eax], 65			; 00000041H
; Line 2133
	ret	0
$LN4@GetRelevan:
; Line 2124
	cmp	dl, 7
	jne	SHORT $LN2@GetRelevan
; Line 2125
	mov	DWORD PTR [ecx], OFFSET _mDdr4RelevantSpdBytes
; Line 2126
	mov	DWORD PTR [eax], 81			; 00000051H
; Line 2133
	ret	0
$LN2@GetRelevan:
; Line 2129
	and	DWORD PTR [ecx], 0
; Line 2130
	and	DWORD PTR [eax], 0
$LN5@GetRelevan:
; Line 2133
	ret	0
_GetRelevantSpdBytes ENDP
_TEXT	ENDS
PUBLIC	_ProcPpinChangedCheck
; Function compile flags: /Ogspy
;	COMDAT _ProcPpinChangedCheck
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ProcPpinChangedCheck PROC				; COMDAT
; Line 780
	call	_GetPpinChip
; Line 782
	mov	ecx, eax
	or	ecx, edx
	jne	SHORT $LN2@ProcPpinCh
$LN5@ProcPpinCh:
; Line 784
	xor	eax, eax
; Line 792
	ret	0
$LN2@ProcPpinCh:
; Line 787
	mov	ecx, DWORD PTR _MrcData$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx+71494]
	cmp	esi, eax
	pop	esi
	jne	SHORT $LN1@ProcPpinCh
	mov	eax, DWORD PTR [ecx+71498]
	cmp	eax, edx
; Line 788
	je	SHORT $LN5@ProcPpinCh
$LN1@ProcPpinCh:
; Line 791
	xor	eax, eax
	inc	eax
; Line 792
	ret	0
_ProcPpinChangedCheck ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _CallIdentifyDimms
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_CallIdentifyDimms PROC					; COMDAT
; Line 853
	movzx	edx, BYTE PTR _Channel$[esp-4]
	mov	ecx, DWORD PTR _MrcData$[esp-4]
	mov	dl, BYTE PTR [edx+ecx+31272]
	xor	eax, eax
	cmp	dl, 3
	jbe	SHORT $LN3@CallIdenti
	cmp	dl, 7
	jne	SHORT $LN1@CallIdenti
; Line 861
	push	DWORD PTR _Channel$[esp-4]
	push	ecx
	call	_IdentifyDdr4Dimms
; Line 862
	jmp	SHORT $LN8@CallIdenti
$LN3@CallIdenti:
; Line 858
	push	DWORD PTR _Channel$[esp-4]
	push	ecx
	call	_IdentifyDdr3Dimms
$LN8@CallIdenti:
	pop	ecx
	pop	ecx
$LN1@CallIdenti:
; Line 871
	ret	0
_CallIdentifyDimms ENDP
_TEXT	ENDS
PUBLIC	_DetectDimms
EXTRN	_CheckColdBootRequired:PROC
EXTRN	_FillFastBootDataStructure:PROC
EXTRN	_VSafe:PROC
; Function compile flags: /Ogspy
;	COMDAT _DetectDimms
_TEXT	SEGMENT
_Status$ = -8						; size = 4
_Channel$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_DetectDimms PROC					; COMDAT
; Line 589
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 596
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	esi
	call	_ReadFuses
; Line 597
	xor	ebx, ebx
	pop	ecx
	cmp	eax, ebx
; Line 598
	jne	$LN41@DetectDimm
	push	edi
; Line 601
	mov	BYTE PTR _Channel$[ebp], bl
	lea	edi, DWORD PTR [esi+28608]
$LL39@DetectDimm:
; Line 602
	cmp	BYTE PTR [edi], bl
	je	SHORT $LN38@DetectDimm
; Line 606
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSpdData
	pop	ecx
	pop	ecx
; Line 608
	test	eax, eax
	je	SHORT $LN35@DetectDimm
; Line 610
	mov	DWORD PTR [esi+65333], 10		; 0000000aH
; Line 611
	call	_MrcDeadLoop
$LN35@DetectDimm:
; Line 613
	cmp	BYTE PTR [edi+26777], bl
	jne	SHORT $LN38@DetectDimm
; Line 614
	mov	BYTE PTR [edi], bl
$LN38@DetectDimm:
; Line 601
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL39@DetectDimm
; Line 621
	cmp	BYTE PTR [esi+65523], 1
	jne	SHORT $LN33@DetectDimm
	cmp	BYTE PTR [esi+28608], bl
	je	SHORT $LN33@DetectDimm
	lea	eax, DWORD PTR [esi+28609]
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN33@DetectDimm
; Line 622
	mov	BYTE PTR [eax], bl
; Line 623
	mov	al, BYTE PTR [esi+55385]
	mov	BYTE PTR [esi+55387], al
; Line 624
	mov	BYTE PTR [esi+55386], bl
$LN33@DetectDimm:
; Line 633
	mov	al, BYTE PTR [esi+55385]
	cmp	al, 1
	jne	SHORT $LN30@DetectDimm
	cmp	BYTE PTR [esi+55386], 2
	jb	SHORT $LN31@DetectDimm
$LN30@DetectDimm:
	cmp	al, 2
	jae	SHORT $LN32@DetectDimm
	cmp	BYTE PTR [esi+55386], 1
	jne	SHORT $LN32@DetectDimm
$LN31@DetectDimm:
; Line 634
	push	38					; 00000026H
	pop	edi
	mov	DWORD PTR [esi+58094], edi
; Line 635
	mov	DWORD PTR [esi+62430], edi
	jmp	SHORT $LN60@DetectDimm
$LN32@DetectDimm:
; Line 636
	cmp	al, 1
	jne	SHORT $LN26@DetectDimm
	cmp	BYTE PTR [esi+55386], 2
	je	SHORT $LN27@DetectDimm
$LN26@DetectDimm:
	cmp	al, 2
	jne	SHORT $LN28@DetectDimm
	cmp	BYTE PTR [esi+55386], 1
	jne	SHORT $LN28@DetectDimm
$LN27@DetectDimm:
; Line 637
	push	41					; 00000029H
; Line 639
	jmp	SHORT $LN61@DetectDimm
$LN28@DetectDimm:
; Line 640
	push	45					; 0000002dH
$LN61@DetectDimm:
	pop	eax
; Line 641
	push	38					; 00000026H
	pop	edi
	mov	DWORD PTR [esi+62430], eax
	mov	DWORD PTR [esi+58094], eax
$LN60@DetectDimm:
	mov	DWORD PTR [esi+58098], ebx
	mov	DWORD PTR [esi+62434], ebx
; Line 644
	cmp	BYTE PTR [esi+55387], bl
; Line 647
	je	$LN52@DetectDimm
; Line 652
	push	esi
	call	_EnforceCommonFreq
	pop	ecx
	mov	DWORD PTR _Status$[ebp], eax
; Line 653
	cmp	eax, ebx
	je	SHORT $LN57@DetectDimm
; Line 654
	mov	DWORD PTR [esi+65333], 2
; Line 655
	call	_MrcDeadLoop
$LN57@DetectDimm:
; Line 664
	cmp	WORD PTR [esi+55490], 8
	je	SHORT $LN58@DetectDimm
; Line 665
	push	esi
	call	_VSafe
	pop	ecx
	mov	DWORD PTR _Status$[ebp], eax
; Line 666
	cmp	eax, ebx
	je	SHORT $LN58@DetectDimm
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN58@DetectDimm
	mov	eax, 128				; 00000080H
	cmp	WORD PTR [esi+55490], ax
	je	SHORT $LN58@DetectDimm
; Line 667
	mov	DWORD PTR [esi+65333], 7
; Line 668
	call	_MrcDeadLoop
$LN58@DetectDimm:
; Line 673
	cmp	DWORD PTR _mDetectDimmTasks, ebx
	je	SHORT $LN18@DetectDimm
	mov	edi, OFFSET _mDetectDimmTasks
$LL20@DetectDimm:
; Line 674
	mov	BYTE PTR _Channel$[ebp], bl
$LL17@DetectDimm:
; Line 675
	movzx	eax, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [eax+esi+28608], bl
	je	SHORT $LN16@DetectDimm
; Line 679
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	DWORD PTR [edi]
	pop	ecx
	pop	ecx
	mov	DWORD PTR _Status$[ebp], eax
; Line 680
	cmp	eax, ebx
	jne	$LN52@DetectDimm
$LN16@DetectDimm:
; Line 674
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL17@DetectDimm
; Line 689
	push	esi
	call	_BusWidthVariable
	add	edi, 4
	pop	ecx
	cmp	DWORD PTR [edi], ebx
	jne	SHORT $LL20@DetectDimm
	push	38					; 00000026H
	pop	edi
$LN18@DetectDimm:
; Line 694
	push	35					; 00000023H
	pop	eax
; Line 699
	push	ebx
	push	esi
	mov	DWORD PTR [esi+58102], eax
	mov	DWORD PTR [esi+58106], ebx
	mov	DWORD PTR [esi+62438], eax
	mov	DWORD PTR [esi+62442], ebx
	mov	DWORD PTR [esi+58110], eax
	mov	DWORD PTR [esi+58114], ebx
	mov	DWORD PTR [esi+62446], eax
	mov	DWORD PTR [esi+62450], ebx
	call	_DualRankInSystem
	pop	ecx
	pop	ecx
	test	al, al
	jne	SHORT $LN12@DetectDimm
	push	1
	push	esi
	call	_DualRankInSystem
	pop	ecx
	pop	ecx
	test	al, al
	jne	SHORT $LN12@DetectDimm
; Line 701
	mov	DWORD PTR [esi+58102], edi
	mov	DWORD PTR [esi+58106], ebx
; Line 702
	mov	DWORD PTR [esi+62438], edi
	mov	DWORD PTR [esi+62442], ebx
; Line 703
	mov	DWORD PTR [esi+58110], edi
	mov	DWORD PTR [esi+58114], ebx
; Line 704
	mov	DWORD PTR [esi+62446], edi
	mov	DWORD PTR [esi+62450], ebx
$LN12@DetectDimm:
; Line 706
	cmp	BYTE PTR [esi+65384], bl
	jne	SHORT $LN10@DetectDimm
	cmp	BYTE PTR [esi+65385], bl
	jne	SHORT $LN10@DetectDimm
	cmp	BYTE PTR [esi+65386], bl
	jne	SHORT $LN10@DetectDimm
	cmp	BYTE PTR [esi+65387], bl
	je	SHORT $LN11@DetectDimm
$LN10@DetectDimm:
; Line 707
	push	48					; 00000030H
	pop	eax
	mov	DWORD PTR [esi+58102], eax
	mov	DWORD PTR [esi+58106], ebx
; Line 708
	mov	DWORD PTR [esi+62438], eax
	mov	DWORD PTR [esi+62442], ebx
; Line 709
	mov	DWORD PTR [esi+58110], eax
	mov	DWORD PTR [esi+58114], ebx
; Line 710
	mov	DWORD PTR [esi+62446], eax
	mov	DWORD PTR [esi+62450], ebx
$LN11@DetectDimm:
; Line 723
	push	esi
	call	_FillFastBootDataStructure
; Line 724
	cmp	BYTE PTR [esi+31274], 4
	pop	ecx
	jne	SHORT $LN4@DetectDimm
; Line 725
	cmp	BYTE PTR [esi+65463], bl
	je	SHORT $LN8@DetectDimm
	cmp	BYTE PTR [esi+26980], bl
	je	SHORT $LN8@DetectDimm
; Line 728
	push	esi
	call	_CheckColdBootRequired
	pop	ecx
	test	al, al
	jne	SHORT $LN8@DetectDimm
	push	esi
	call	_ProcPpinChangedCheck
	pop	ecx
	test	eax, eax
	jne	SHORT $LN8@DetectDimm
; Line 733
	mov	BYTE PTR [esi+31274], 8
	jmp	SHORT $LN4@DetectDimm
$LN52@DetectDimm:
; Line 681
	mov	DWORD PTR [esi+65333], 2
; Line 682
	call	_MrcDeadLoop
; Line 683
	or	eax, -1
	jmp	SHORT $LN59@DetectDimm
$LN8@DetectDimm:
; Line 739
	mov	BYTE PTR [esi+31274], 4
$LN4@DetectDimm:
; Line 747
	mov	al, BYTE PTR [esi+65463]
	cmp	al, bl
	je	SHORT $LN3@DetectDimm
	cmp	BYTE PTR [esi+31274], 8
	je	SHORT $LN2@DetectDimm
	cmp	al, bl
	je	SHORT $LN3@DetectDimm
	cmp	BYTE PTR [esi+31274], 1
	jne	SHORT $LN3@DetectDimm
$LN2@DetectDimm:
; Line 749
	mov	BYTE PTR [esi+55506], bl
$LN3@DetectDimm:
; Line 752
	mov	eax, DWORD PTR _Status$[ebp]
$LN59@DetectDimm:
	pop	edi
$LN41@DetectDimm:
	pop	esi
	pop	ebx
; Line 753
	leave
	ret	0
_DetectDimms ENDP
_TEXT	ENDS
END
