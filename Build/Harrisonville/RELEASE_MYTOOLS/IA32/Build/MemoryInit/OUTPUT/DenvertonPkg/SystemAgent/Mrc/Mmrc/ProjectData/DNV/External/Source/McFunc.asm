; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectData\DNV\External\Source\McFunc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_DATA	ENDS
PUBLIC	_SimSetDunitConfigValid
; Function compile flags: /Ogspy
;	COMDAT _SimSetDunitConfigValid
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_SimSetDunitConfigValid PROC				; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectdata\dnv\external\source\mcfunc.c
; Line 45
	xor	eax, eax
; Line 46
	ret	0
_SimSetDunitConfigValid ENDP
_TEXT	ENDS
PUBLIC	_GetSocStepping
; Function compile flags: /Ogspy
;	COMDAT _GetSocStepping
_TEXT	SEGMENT
_GetSocStepping PROC					; COMDAT
; Line 56
	mov	edx, 3320				; 00000cf8H
	mov	eax, -2147420152			; 8000f808H
	out	dx, eax
	add	edx, 4
	in	eax, dx
; Line 64
	ret	0
_GetSocStepping ENDP
_TEXT	ENDS
PUBLIC	_GetCpuType
; Function compile flags: /Ogspy
;	COMDAT _GetCpuType
_TEXT	SEGMENT
_Data16$ = -4						; size = 2
_GetCpuType PROC					; COMDAT
; Line 68
	push	ecx
	push	ebx
; Line 73
	push	eax
; Line 74
	push	ebx
; Line 75
	push	ecx
; Line 76
	push	edx
; Line 78
	mov	eax, 1
; Line 79
	cpuid
; Line 81
	and	eax, 4080				; 00000ff0H
; Line 83
	mov	WORD PTR _Data16$[esp+24], ax
; Line 84
	pop	edx
; Line 85
	pop	ecx
; Line 86
	pop	ebx
; Line 87
	pop	eax
; Line 95
	mov	ax, WORD PTR _Data16$[esp+8]
; Line 96
	pop	ebx
	pop	ecx
	ret	0
_GetCpuType ENDP
_TEXT	ENDS
PUBLIC	_TimingParams
EXTRN	_mDdr4Freq2WLTable:BYTE
EXTRN	_mDdr3Freq2WLTable:BYTE
EXTRN	_mFawTableDdr3:TBYTE
EXTRN	_mFawTableDdr4:BYTE
; Function compile flags: /Ogspy
;	COMDAT _TimingParams
_TEXT	SEGMENT
tv316 = 8						; size = 4
_MrcData$ = 8						; size = 4
_TimingParams PROC					; COMDAT
; Line 600
	push	ebp
	mov	ebp, esp
; Line 614
	mov	ecx, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	lea	esi, DWORD PTR [ecx+31272]
	lea	eax, DWORD PTR [ecx+30728]
	mov	DWORD PTR tv316[ebp], 2
$LL30@TimingPara:
; Line 615
	cmp	BYTE PTR [esi-2664], 0
	je	$LN22@TimingPara
; Line 620
	movzx	edx, WORD PTR [eax]
	cmp	dx, 4
	jbe	SHORT $LN26@TimingPara
	movzx	edx, dx
	jmp	SHORT $LN27@TimingPara
$LN26@TimingPara:
	push	4
	pop	edx
$LN27@TimingPara:
	mov	WORD PTR [eax], dx
; Line 624
	mov	dl, BYTE PTR [esi]
	cmp	dl, 7
	jne	SHORT $LN19@TimingPara
; Line 625
	movzx	edx, BYTE PTR [ecx+31275]
	sub	edx, 3
	imul	edx, 3
	movzx	dx, BYTE PTR _mFawTableDdr4[edx]
	jmp	SHORT $LN31@TimingPara
$LN19@TimingPara:
; Line 626
	cmp	dl, 3
	ja	SHORT $LN15@TimingPara
; Line 627
	movzx	edx, BYTE PTR [ecx+31275]
	movzx	dx, BYTE PTR _mFawTableDdr3[edx*2-6]
$LN31@TimingPara:
	mov	WORD PTR [eax+4], dx
; Line 630
	mov	dl, BYTE PTR [esi]
	cmp	dl, 3
	ja	SHORT $LN15@TimingPara
; Line 634
	push	4
	pop	edx
	mov	WORD PTR [eax+8], dx
; Line 641
	mov	dl, BYTE PTR [esi]
	cmp	dl, 3
	ja	SHORT $LN15@TimingPara
; Line 642
	movzx	edx, BYTE PTR [ecx+31275]
	movzx	dx, BYTE PTR _mDdr3Freq2WLTable[edx-3]
	add	dx, WORD PTR [eax-20]
	add	dx, 4
	mov	WORD PTR [eax+16], dx
; Line 643
	movzx	edx, BYTE PTR [ecx+31275]
	movzx	dx, BYTE PTR _mDdr3Freq2WLTable[edx-3]
	jmp	SHORT $LN32@TimingPara
$LN15@TimingPara:
; Line 644
	cmp	dl, 7
	jne	SHORT $LN13@TimingPara
; Line 645
	lea	edx, DWORD PTR [ecx+31275]
	movzx	ebx, BYTE PTR [edx]
	movzx	bx, BYTE PTR _mDdr4Freq2WLTable[ebx-3]
	add	bx, WORD PTR [eax-20]
	add	bx, 4
	mov	WORD PTR [eax+16], bx
; Line 646
	movzx	edx, BYTE PTR [edx]
	movzx	dx, BYTE PTR _mDdr4Freq2WLTable[edx-3]
$LN32@TimingPara:
	mov	WORD PTR [eax+20], dx
$LN13@TimingPara:
; Line 651
	push	3
	pop	edx
	mov	WORD PTR [eax+24], dx
$LN22@TimingPara:
	inc	esi
	add	eax, 288				; 00000120H
	dec	DWORD PTR tv316[ebp]
	jne	$LL30@TimingPara
; Line 664
	movzx	edx, WORD PTR [ecx+30752]
	pop	esi
	pop	ebx
	cmp	dx, 2
	je	SHORT $LN11@TimingPara
	movzx	eax, WORD PTR [ecx+31040]
	cmp	ax, 2
	je	SHORT $LN11@TimingPara
; Line 676
	cmp	dx, 1
	je	SHORT $LN6@TimingPara
	cmp	ax, 1
	je	SHORT $LN6@TimingPara
; Line 689
	xor	edx, edx
	mov	eax, 4224				; 00001080H
	cmp	WORD PTR [ecx+55490], ax
	setne	dl
	dec	edx
	and	edx, 64					; 00000040H
	add	edx, 148				; 00000094H
; Line 692
	jmp	SHORT $LN33@TimingPara
$LN6@TimingPara:
; Line 680
	xor	edx, edx
	mov	eax, 4224				; 00001080H
	cmp	WORD PTR [ecx+55490], ax
	setne	dl
	dec	edx
	and	edx, 64					; 00000040H
	add	edx, 28					; 0000001cH
; Line 685
	jmp	SHORT $LN33@TimingPara
$LN11@TimingPara:
; Line 669
	xor	edx, edx
	mov	eax, 4224				; 00001080H
	cmp	WORD PTR [ecx+55490], ax
	setne	dl
	dec	edx
	and	edx, 64					; 00000040H
	add	edx, 88					; 00000058H
$LN33@TimingPara:
	mov	DWORD PTR [ecx+55172], edx
; Line 697
	xor	eax, eax
; Line 698
	pop	ebp
	ret	0
_TimingParams ENDP
_TEXT	ENDS
PUBLIC	_OverrideTimingParams
; Function compile flags: /Ogspy
;	COMDAT _OverrideTimingParams
_TEXT	SEGMENT
tv406 = -4						; size = 4
_MrcData$ = 8						; size = 4
_OverrideTimingParams PROC				; COMDAT
; Line 710
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 714
	mov	eax, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	esi, DWORD PTR [eax+28608]
	lea	edx, DWORD PTR [eax+64206]
	mov	DWORD PTR tv406[ebp], 2
$LL8@OverrideTi:
; Line 715
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN7@OverrideTi
; Line 719
	push	72					; 00000048H
	mov	eax, edx
	pop	edi
$LL4@OverrideTi:
; Line 720
	movzx	ecx, WORD PTR [eax]
	mov	ebx, 255				; 000000ffH
	cmp	cx, bx
	je	SHORT $LN3@OverrideTi
; Line 721
	mov	WORD PTR [eax-33510], cx
$LN3@OverrideTi:
; Line 719
	add	eax, 4
	dec	edi
	jne	SHORT $LL4@OverrideTi
$LN7@OverrideTi:
; Line 714
	inc	esi
	add	edx, 288				; 00000120H
	dec	DWORD PTR tv406[ebp]
	jne	SHORT $LL8@OverrideTi
	pop	edi
	pop	esi
; Line 727
	xor	eax, eax
	pop	ebx
; Line 728
	leave
	ret	0
_OverrideTimingParams ENDP
_TEXT	ENDS
PUBLIC	_FillModMrcDataStructure
; Function compile flags: /Ogspy
;	COMDAT _FillModMrcDataStructure
_TEXT	SEGMENT
tv487 = -8						; size = 4
tv526 = -4						; size = 4
_MrcData$ = 8						; size = 4
_FillModMrcDataStructure PROC				; COMDAT
; Line 743
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 747
	mov	edx, DWORD PTR _MrcData$[ebp]
	push	ebx
	lea	eax, DWORD PTR [edx+31272]
	push	esi
	mov	DWORD PTR tv526[ebp], eax
	push	edi
	lea	ebx, DWORD PTR [edx+55438]
	lea	eax, DWORD PTR [edx+55498]
	mov	DWORD PTR tv487[ebp], 2
$LL24@FillModMrc:
; Line 748
	movzx	ecx, BYTE PTR [edx+65434]
	sub	ecx, 0
	je	SHORT $LN12@FillModMrc
	dec	ecx
	je	SHORT $LN11@FillModMrc
	sub	ecx, 15					; 0000000fH
; Line 760
	jne	SHORT $LN12@FillModMrc
; Line 756
	push	4
$LN26@FillModMrc:
	pop	ecx
; Line 757
	jmp	SHORT $LN25@FillModMrc
$LN11@FillModMrc:
; Line 753
	push	2
; Line 754
	jmp	SHORT $LN26@FillModMrc
$LN12@FillModMrc:
; Line 750
	xor	ecx, ecx
	inc	ecx
$LN25@FillModMrc:
	mov	WORD PTR [eax], cx
; Line 762
	movzx	ecx, BYTE PTR [edx+31275]
	xor	esi, esi
	sub	ecx, 3
	inc	esi
	shl	esi, cl
; Line 766
	mov	ecx, DWORD PTR tv526[ebp]
	mov	WORD PTR [eax-4], si
	movzx	ecx, BYTE PTR [ecx]
	dec	ecx
	je	SHORT $LN6@FillModMrc
	sub	ecx, 6
; Line 775
	jne	SHORT $LN6@FillModMrc
	push	2
	pop	ecx
	jmp	SHORT $LN27@FillModMrc
$LN6@FillModMrc:
; Line 768
	xor	ecx, ecx
	inc	ecx
$LN27@FillModMrc:
	mov	WORD PTR [eax+4], cx
; Line 791
	lea	esi, DWORD PTR [ebx-24750]
	mov	edi, ebx
	movsb
	movsb
	inc	eax
	movsb
	inc	eax
	inc	DWORD PTR tv526[ebp]
	add	ebx, 4
	dec	DWORD PTR tv487[ebp]
	movsb
	jne	SHORT $LL24@FillModMrc
	pop	edi
	pop	esi
; Line 794
	xor	eax, eax
	pop	ebx
; Line 795
	leave
	ret	0
_FillModMrcDataStructure ENDP
_TEXT	ENDS
PUBLIC	_GetPlatformSettings
EXTRN	_Mmio32Write:PROC
EXTRN	_Mmio16Write:PROC
EXTRN	_Mmio8Write:PROC
EXTRN	_Mmio8Read:PROC
EXTRN	_Mmio16Read:PROC
EXTRN	_Mmio32Read:PROC
; Function compile flags: /Ogspy
;	COMDAT _GetPlatformSettings
_TEXT	SEGMENT
_Data8$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_GetPlatformSettings PROC				; COMDAT
; Line 807
	push	ebx
	push	esi
; Line 816
	mov	esi, DWORD PTR _MrcData$[esp+4]
	push	edi
	mov	edi, 3320				; 00000cf8H
	mov	edx, edi
	mov	eax, -2147483552			; 80000060H
	out	dx, eax
	lea	ecx, DWORD PTR [edi+4]
	mov	edx, ecx
	in	eax, dx
	and	eax, -2					; fffffffeH
	mov	DWORD PTR [esi+65441], eax
; Line 822
	jne	SHORT $LN11@GetPlatfor
; Line 823
	mov	DWORD PTR [esi+65441], -536870912	; e0000000H
; Line 826
	mov	edx, edi
	mov	eax, -2147483436			; 800000d4H
	out	dx, eax
	mov	eax, DWORD PTR [esi+65441]
	or	eax, 1
	mov	edx, ecx
	out	dx, eax
; Line 827
	mov	edx, edi
	mov	eax, -2147483432			; 800000d8H
	out	dx, eax
	xor	eax, eax
	mov	edx, ecx
	out	dx, eax
; Line 828
	mov	edx, edi
	mov	eax, -2147483440			; 800000d0H
	out	dx, eax
	mov	edx, ecx
	mov	eax, 285419504				; 110327f0H
	out	dx, eax
$LN11@GetPlatfor:
; Line 836
	xor	ebx, ebx
	cmp	DWORD PTR [esi+65445], ebx
	jne	SHORT $LN7@GetPlatfor
; Line 837
	mov	eax, DWORD PTR [esi+65441]
	add	eax, 72					; 00000048H
	push	eax
	call	_Mmio32Read
	and	eax, -2					; fffffffeH
	pop	ecx
	mov	DWORD PTR [esi+65445], eax
$LN7@GetPlatfor:
; Line 845
	lea	edi, DWORD PTR [esi+65352]
	cmp	DWORD PTR [edi], ebx
	jne	SHORT $LN6@GetPlatfor
; Line 846
	mov	eax, DWORD PTR [esi+65441]
	add	eax, 1019920				; 000f9010H
	push	eax
	call	_Mmio32Read
	and	eax, -5					; fffffffbH
	pop	ecx
	mov	DWORD PTR [edi], eax
$LN6@GetPlatfor:
	push	ebp
; Line 852
	mov	ebp, 65532				; 0000fffcH
	cmp	WORD PTR [esi+65350], bx
	jne	SHORT $LN5@GetPlatfor
; Line 853
	mov	eax, DWORD PTR [esi+65441]
	add	eax, 1032224				; 000fc020H
	push	eax
	call	_Mmio16Read
	pop	ecx
	mov	ecx, ebp
	and	ax, cx
	mov	WORD PTR [esi+65350], ax
$LN5@GetPlatfor:
; Line 858
	mov	eax, DWORD PTR [esi+65441]
	mov	edi, 1032256				; 000fc040H
	add	eax, edi
	push	eax
	call	_Mmio8Read
; Line 859
	or	al, 1
	mov	BYTE PTR _Data8$[esp+16], al
; Line 860
	mov	eax, DWORD PTR [esi+65441]
	push	DWORD PTR _Data8$[esp+16]
	add	eax, edi
	push	eax
	call	_Mmio8Write
; Line 862
	mov	eax, DWORD PTR [esi+65441]
	add	edi, -60				; ffffffc4H
	add	eax, edi
	push	eax
	call	_Mmio16Read
; Line 863
	or	ax, 1
	movzx	eax, ax
; Line 864
	push	eax
	mov	eax, DWORD PTR [esi+65441]
	add	eax, edi
	push	eax
	call	_Mmio16Write
	add	esp, 24					; 00000018H
; Line 870
	cmp	WORD PTR [esi+65449], bx
	jne	SHORT $LN4@GetPlatfor
; Line 871
	mov	eax, DWORD PTR [esi+65441]
	add	eax, 1015880				; 000f8048H
	push	eax
	call	_Mmio16Read
	and	ax, bp
	pop	ecx
	mov	WORD PTR [esi+65449], ax
$LN4@GetPlatfor:
	pop	ebp
; Line 877
	cmp	DWORD PTR [esi+65451], ebx
	jne	SHORT $LN3@GetPlatfor
; Line 878
	mov	eax, DWORD PTR [esi+65441]
	add	eax, 1024072				; 000fa048H
	push	eax
	call	_Mmio32Read
	pop	ecx
	mov	DWORD PTR [esi+65451], eax
$LN3@GetPlatfor:
; Line 884
	mov	eax, DWORD PTR [esi+65441]
	mov	edi, 1024160				; 000fa0a0H
	add	eax, edi
	push	eax
	call	_Mmio32Read
; Line 885
	or	eax, 8388608				; 00800000H
; Line 886
	push	eax
	mov	eax, DWORD PTR [esi+65441]
	add	eax, edi
	push	eax
	call	_Mmio32Write
	add	esp, 12					; 0000000cH
; Line 889
	cmp	DWORD PTR [esi+65441], ebx
	je	SHORT $LN1@GetPlatfor
	cmp	DWORD PTR [esi+65451], ebx
	je	SHORT $LN1@GetPlatfor
	cmp	WORD PTR [esi+65350], bx
	je	SHORT $LN1@GetPlatfor
; Line 893
	xor	eax, eax
	jmp	SHORT $LN9@GetPlatfor
$LN1@GetPlatfor:
; Line 890
	or	eax, -1
$LN9@GetPlatfor:
	pop	edi
	pop	esi
	pop	ebx
; Line 894
	ret	0
_GetPlatformSettings ENDP
_TEXT	ENDS
PUBLIC	_SetSMBusLegacySpdWriteDisable
; Function compile flags: /Ogspy
;	COMDAT _SetSMBusLegacySpdWriteDisable
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_SetSMBusLegacySpdWriteDisable PROC			; COMDAT
; Line 933
	push	esi
; Line 937
	mov	esi, DWORD PTR _MrcData$[esp]
	mov	eax, DWORD PTR [esi+65441]
	test	eax, eax
	jne	SHORT $LN2@SetSMBusLe
; Line 938
	or	eax, -1
	pop	esi
; Line 955
	ret	0
$LN2@SetSMBusLe:
; Line 940
	add	eax, 1032256				; 000fc040H
	push	eax
	call	_Mmio32Read
	pop	ecx
; Line 941
	test	al, 16					; 00000010H
; Line 943
	jne	SHORT $LN5@SetSMBusLe
; Line 949
	or	eax, 16					; 00000010H
; Line 950
	push	eax
	mov	eax, DWORD PTR [esi+65441]
	add	eax, 1032256				; 000fc040H
	push	eax
	call	_Mmio32Write
	pop	ecx
	pop	ecx
$LN5@SetSMBusLe:
; Line 954
	xor	eax, eax
	pop	esi
; Line 955
	ret	0
_SetSMBusLegacySpdWriteDisable ENDP
_TEXT	ENDS
PUBLIC	_SetSMBusHostSpdWriteDisable
; Function compile flags: /Ogspy
;	COMDAT _SetSMBusHostSpdWriteDisable
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_SetSMBusHostSpdWriteDisable PROC			; COMDAT
; Line 967
	push	ebx
	push	esi
; Line 974
	mov	esi, DWORD PTR _MrcData$[esp+4]
	mov	eax, DWORD PTR [esi+65441]
	xor	bl, bl
	test	eax, eax
	jne	SHORT $LN3@SetSMBusHo
; Line 975
	or	eax, -1
	jmp	$LN4@SetSMBusHo
$LN3@SetSMBusHo:
	push	ebp
; Line 980
	add	eax, 589840				; 00090010H
	push	edi
	push	eax
	call	_Mmio32Read
	mov	ebp, eax
; Line 981
	and	ebp, -1024				; fffffc00H
	pop	ecx
; Line 982
	jne	SHORT $LN2@SetSMBusHo
; Line 985
	mov	eax, DWORD PTR [esi+65441]
	mov	ebp, -1588109312			; a1576000H
	add	eax, 589840				; 00090010H
	push	ebp
	push	eax
	mov	bl, 1
	call	_Mmio32Write
	pop	ecx
	pop	ecx
$LN2@SetSMBusHo:
; Line 991
	mov	eax, DWORD PTR [esi+65441]
	mov	edi, 589828				; 00090004H
	add	eax, edi
	push	eax
	call	_Mmio16Read
; Line 992
	or	ax, 2
	movzx	eax, ax
; Line 993
	push	eax
	mov	eax, DWORD PTR [esi+65441]
	add	eax, edi
	push	eax
	call	_Mmio16Write
; Line 999
	or	DWORD PTR [ebp+264], 8
; Line 1004
	mov	eax, DWORD PTR [esi+65441]
	add	eax, edi
	push	eax
	call	_Mmio16Read
; Line 1005
	mov	ecx, 65533				; 0000fffdH
	and	ax, cx
	movzx	eax, ax
; Line 1006
	push	eax
	mov	eax, DWORD PTR [esi+65441]
	add	eax, edi
	push	eax
	call	_Mmio16Write
	add	esp, 24					; 00000018H
	pop	edi
	pop	ebp
; Line 1011
	test	bl, bl
	je	SHORT $LN1@SetSMBusHo
; Line 1013
	mov	eax, DWORD PTR [esi+65441]
	add	eax, 589840				; 00090010H
	push	0
	push	eax
	call	_Mmio32Write
	pop	ecx
	pop	ecx
$LN1@SetSMBusHo:
; Line 1018
	xor	eax, eax
$LN4@SetSMBusHo:
	pop	esi
	pop	ebx
; Line 1019
	ret	0
_SetSMBusHostSpdWriteDisable ENDP
_TEXT	ENDS
PUBLIC	_DetermineBootMode
EXTRN	_MmrcExecuteTask:PROC
; Function compile flags: /Ogspy
;	COMDAT _DetermineBootMode
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_DetermineBootMode PROC					; COMDAT
; Line 1031
	push	ebx
	push	esi
; Line 1047
	mov	esi, DWORD PTR _MrcData$[esp+4]
	mov	bl, BYTE PTR [esi+55509]
; Line 1056
	push	0
	push	65535					; 0000ffffH
	push	14866					; 00003a12H
	push	esi
	mov	BYTE PTR [esi+55509], 1
	call	_MmrcExecuteTask
; Line 1066
	mov	al, BYTE PTR [esi+31274]
	mov	dl, BYTE PTR [esi+58630]
	mov	cl, BYTE PTR [esi+58606]
	add	esp, 16					; 00000010H
	mov	BYTE PTR [esi+55509], bl
	cmp	al, 2
	je	SHORT $LN1@DetermineB
; Line 1071
	cmp	BYTE PTR [esi+65486], 0
	je	SHORT $LN11@DetermineB
; Line 1076
	mov	BYTE PTR [esi+31274], 16		; 00000010H
	jmp	SHORT $LN1@DetermineB
$LN11@DetermineB:
; Line 1077
	cmp	dl, 1
	jne	SHORT $LN9@DetermineB
; Line 1078
	cmp	cl, 2
	jne	SHORT $LN17@DetermineB
; Line 1085
	mov	BYTE PTR [esi+31274], dl
	jmp	SHORT $LN1@DetermineB
$LN17@DetermineB:
; Line 1086
	test	cl, cl
; Line 1091
	je	SHORT $LN16@DetermineB
; Line 1105
	mov	ecx, 3321				; 00000cf9H
	mov	edx, ecx
	xor	al, al
	out	dx, al
; Line 1106
	add	al, 14					; 0000000eH
	out	dx, al
; Line 1108
	hlt
; Line 1111
	jmp	SHORT $LN1@DetermineB
$LN9@DetermineB:
; Line 1112
	cmp	al, 8
	je	SHORT $LN1@DetermineB
$LN16@DetermineB:
; Line 1114
	mov	BYTE PTR [esi+31274], 4
$LN1@DetermineB:
	pop	esi
; Line 1117
	xor	eax, eax
	pop	ebx
; Line 1118
	ret	0
_DetermineBootMode ENDP
_TEXT	ENDS
PUBLIC	_CheckColdBootRequired
; Function compile flags: /Ogspy
;	COMDAT _CheckColdBootRequired
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CheckColdBootRequired PROC				; COMDAT
; Line 1137
	mov	ecx, DWORD PTR _MrcData$[esp-4]
; Line 1140
	xor	dl, dl
	push	ebx
$LL4@CheckColdB:
; Line 1141
	movzx	eax, dl
	mov	bl, BYTE PTR [eax+ecx+55192]
	cmp	bl, BYTE PTR [eax+ecx]
	jne	SHORT $LN8@CheckColdB
	inc	dl
	cmp	dl, 192					; 000000c0H
	jb	SHORT $LL4@CheckColdB
; Line 1147
	xor	al, al
	pop	ebx
; Line 1148
	ret	0
$LN8@CheckColdB:
; Line 1143
	mov	al, 1
	pop	ebx
; Line 1148
	ret	0
_CheckColdBootRequired ENDP
_TEXT	ENDS
PUBLIC	_Lfsr16
; Function compile flags: /Ogspy
;	COMDAT _Lfsr16
_TEXT	SEGMENT
_LfsrWordPtr$ = 8					; size = 4
_Lfsr16	PROC						; COMDAT
; Line 1165
	mov	ecx, DWORD PTR _LfsrWordPtr$[esp-4]
	movzx	eax, WORD PTR [ecx]
	push	16					; 00000010H
	pop	edx
	push	esi
$LL3@Lfsr16:
; Line 1168
	mov	esi, eax
	not	esi
; Line 1172
	add	esi, esi
	xor	esi, eax
	add	esi, esi
	xor	esi, eax
	shl	esi, 4
	xor	esi, eax
	and	esi, 65472				; 0000ffc0H
	shr	ax, 1
	shl	esi, 9
	or	si, ax
	dec	edx
	movzx	eax, si
	jne	SHORT $LL3@Lfsr16
; Line 1174
	mov	WORD PTR [ecx], ax
	pop	esi
; Line 1177
	ret	0
_Lfsr16	ENDP
_TEXT	ENDS
PUBLIC	_SetSlowFastExit
; Function compile flags: /Ogspy
;	COMDAT _SetSlowFastExit
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SetSlowFastExit PROC					; COMDAT
; Line 1190
	movzx	edx, BYTE PTR _Channel$[esp-4]
	mov	ecx, DWORD PTR _MrcData$[esp-4]
	mov	eax, edx
	imul	eax, 4336				; 000010f0H
	add	eax, ecx
	push	esi
	xor	esi, esi
	mov	DWORD PTR [eax+56134], esi
	mov	DWORD PTR [eax+56138], esi
; Line 1191
	mov	DWORD PTR [eax+56118], esi
	mov	DWORD PTR [eax+56122], esi
; Line 1193
	cmp	BYTE PTR [ecx+65477], 1
	jne	SHORT $LN1@SetSlowFas
	add	ecx, edx
	cmp	BYTE PTR [ecx+31272], 3
	ja	SHORT $LN1@SetSlowFas
; Line 1200
	cmp	BYTE PTR [ecx+55385], 1
	jne	SHORT $LN1@SetSlowFas
; Line 1201
	mov	DWORD PTR [eax+56134], 1
	mov	DWORD PTR [eax+56138], esi
$LN1@SetSlowFas:
; Line 1205
	xor	eax, eax
	pop	esi
; Line 1206
	ret	0
_SetSlowFastExit ENDP
_TEXT	ENDS
PUBLIC	_get_initial_seed
; Function compile flags: /Ogspy
;	COMDAT _get_initial_seed
_TEXT	SEGMENT
_Data32$ = -4						; size = 4
_get_initial_seed PROC					; COMDAT
; Line 1276
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 1281
	push	eax
; Line 1282
	push	ebx
; Line 1283
	push	ecx
; Line 1284
	push	edx
; Line 1291
	mov	eax, 1
; Line 1292
	cpuid
; Line 1293
	bt	ecx, 30					; 0000001eH
; Line 1294
	jae	SHORT $rdrand_not_supported$33312
; Line 1296
	DB	15					; 0000000fH
	DB	-57					; ffffffc7H
	DB	-16					; fffffff0H
; Line 1297
	jb	SHORT $rdrand_done$33313
$rdrand_not_supported$33312:
; Line 1306
	rdtsc
$rdrand_done$33313:
; Line 1309
	mov	DWORD PTR _Data32$[ebp], eax
; Line 1311
	pop	edx
; Line 1312
	pop	ecx
; Line 1313
	pop	ebx
; Line 1314
	pop	eax
; Line 1319
	mov	eax, DWORD PTR _Data32$[ebp]
; Line 1320
	pop	ebx
	leave
	ret	0
_get_initial_seed ENDP
_TEXT	ENDS
PUBLIC	_GetPowerOfTwo
; Function compile flags: /Ogspy
;	COMDAT _GetPowerOfTwo
_TEXT	SEGMENT
_Operand$ = 8						; size = 4
_GetPowerOfTwo PROC					; COMDAT
; Line 1338
	mov	eax, DWORD PTR _Operand$[esp-4]
	xor	cl, cl
	test	eax, eax
	jne	SHORT $LL4@GetPowerOf
; Line 1355
	ret	0
$LL4@GetPowerOf:
; Line 1343
	shr	eax, 1
; Line 1344
	inc	cl
	test	eax, eax
	jne	SHORT $LL4@GetPowerOf
; Line 1347
	inc	eax
	jmp	SHORT $LN17@GetPowerOf
$LL2@GetPowerOf:
; Line 1350
	add	eax, eax
$LN17@GetPowerOf:
; Line 1351
	dec	cl
; Line 1349
	jne	SHORT $LL2@GetPowerOf
; Line 1355
	ret	0
_GetPowerOfTwo ENDP
_TEXT	ENDS
PUBLIC	_FindActiveChannel
; Function compile flags: /Ogspy
;	COMDAT _FindActiveChannel
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_FindActiveChannel PROC					; COMDAT
; Line 1373
	xor	al, al
$LL4@FindActive:
; Line 1374
	mov	edx, DWORD PTR _MrcData$[esp-4]
	movzx	ecx, al
	cmp	BYTE PTR [ecx+edx+28608], 0
	jne	SHORT $LN5@FindActive
	inc	al
	cmp	al, 2
	jb	SHORT $LL4@FindActive
; Line 1378
	or	al, 255					; 000000ffH
$LN5@FindActive:
; Line 1379
	ret	0
_FindActiveChannel ENDP
_TEXT	ENDS
PUBLIC	_MrcInitializeParameters
EXTRN	_OemSetMrcData:PROC
EXTRN	_OemGetPlatformType:PROC
EXTRN	_ExternalSiliconInit:PROC
EXTRN	_MspInit:PROC
EXTRN	_SetMspData:PROC
EXTRN	_SaveMrcHostStructureAddress:PROC
EXTRN	_MmrcMemset:PROC
; Function compile flags: /Ogspy
;	COMDAT _MrcInitializeParameters
_TEXT	SEGMENT
tv510 = -4						; size = 4
tv223 = -4						; size = 4
tv1735 = 8						; size = 4
tv1637 = 8						; size = 4
tv355 = 8						; size = 4
tv175 = 8						; size = 4
_MrcData$ = 8						; size = 4
_MrcInitializeParameters PROC				; COMDAT
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 117
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	71502					; 0001174eH
	xor	ebx, ebx
	push	ebx
	push	esi
	call	_MmrcMemset
; Line 126
	push	esi
	call	_SaveMrcHostStructureAddress
; Line 134
	push	OFFSET _SetMspData
	lea	eax, DWORD PTR [esi+55486]
	push	esi
	push	eax
	mov	BYTE PTR [esi+55506], 15		; 0000000fH
	call	_MspInit
; Line 138
	mov	edx, 3320				; 00000cf8H
	mov	eax, -2147420152			; 8000f808H
	out	dx, eax
	add	edx, 4
	in	eax, dx
	add	esp, 28					; 0000001cH
	mov	BYTE PTR [esi+65434], al
; Line 139
	cmp	al, 16					; 00000010H
	jbe	SHORT $LN50@MrcInitial
; Line 140
	mov	BYTE PTR [esi+65434], 16		; 00000010H
$LN50@MrcInitial:
; Line 143
	call	_GetCpuType
	mov	WORD PTR [esi+65435], ax
; Line 147
	mov	BYTE PTR [esi+65463], bl
; Line 153
	mov	BYTE PTR [esi+65461], bl
; Line 162
	mov	BYTE PTR [esi+65462], bl
	lea	eax, DWORD PTR [esi+30686]
	lea	edx, DWORD PTR [esi+64208]
	lea	ecx, DWORD PTR [esi+55446]
	mov	DWORD PTR tv223[ebp], 2
	push	edi
$LL77@MrcInitial:
; Line 165
	mov	BYTE PTR [eax-2078], 1
; Line 166
	inc	BYTE PTR [esi+65523]
; Line 173
	mov	BYTE PTR [eax], 1
; Line 180
	mov	DWORD PTR [ecx], 131328			; 00020100H
	mov	DWORD PTR tv355[ebp], 72		; 00000048H
$LL78@MrcInitial:
; Line 185
	mov	edi, 255				; 000000ffH
	mov	WORD PTR [edx-2], di
; Line 186
	mov	WORD PTR [edx], di
	add	edx, 4
	dec	DWORD PTR tv355[ebp]
	jne	SHORT $LL78@MrcInitial
	inc	eax
	add	ecx, 4
	dec	DWORD PTR tv223[ebp]
	jne	SHORT $LL77@MrcInitial
; Line 207
	xor	edx, edx
	inc	edx
	push	2
	mov	BYTE PTR [esi+65346], 10		; 0000000aH
	mov	BYTE PTR [esi+65347], 8
	mov	BYTE PTR [esi+65344], 8
	mov	BYTE PTR [esi+65345], 6
	mov	BYTE PTR [esi+65493], bl
	mov	DWORD PTR [esi+65494], edx
; Line 211
	mov	BYTE PTR [esi+70805], dl
; Line 215
	mov	BYTE PTR [esi+65498], dl
; Line 219
	mov	BYTE PTR [esi+65499], bl
; Line 223
	mov	BYTE PTR [esi+65500], dl
; Line 227
	mov	BYTE PTR [esi+65505], 65		; 00000041H
; Line 228
	mov	BYTE PTR [esi+65504], bl
; Line 232
	mov	BYTE PTR [esi+26981], 100		; 00000064H
; Line 237
	mov	BYTE PTR [esi+65506], bl
; Line 238
	mov	DWORD PTR [esi+65507], ebx
; Line 243
	mov	BYTE PTR [esi+65522], dl
	lea	eax, DWORD PTR [esi+65296]
	pop	ecx
$LL39@MrcInitial:
; Line 248
	mov	BYTE PTR [eax-2], bl
; Line 249
	mov	BYTE PTR [eax], bl
; Line 250
	mov	BYTE PTR [eax+2], bl
	inc	eax
	dec	ecx
	jne	SHORT $LL39@MrcInitial
; Line 252
	cmp	BYTE PTR [esi+65461], bl
; Line 257
	mov	BYTE PTR [esi+65502], bl
	sete	al
	dec	al
	and	al, 233					; 000000e9H
	add	al, 31					; 0000001fH
	mov	BYTE PTR [esi+65501], al
; Line 258
	mov	BYTE PTR [esi+65503], bl
; Line 264
	mov	eax, 16843009				; 01010101H
	lea	edi, DWORD PTR [esi+71000]
	stosw
; Line 303
	cmp	BYTE PTR [esi+65461], bl
	mov	WORD PTR [esi+65473], cx
	push	30					; 0000001eH
	pop	ecx
	mov	WORD PTR [esi+26982], cx
	sete	cl
	mov	BYTE PTR [esi+65464], cl
; Line 342
	xor	ecx, ecx
	mov	WORD PTR [esi+65348], cx
; Line 351
	mov	ecx, 600000				; 000927c0H
; Line 353
	mov	DWORD PTR [esi+70814], edx
	mov	BYTE PTR [esi+65476], bl
	mov	BYTE PTR [esi+65477], bl
	mov	BYTE PTR [esi+65475], bl
	mov	BYTE PTR [esi+31275], 3
	mov	BYTE PTR [esi+65466], bl
	mov	BYTE PTR [esi+65467], bl
	mov	BYTE PTR [esi+65472], bl
	mov	BYTE PTR [esi+65465], bl
	mov	BYTE PTR [esi+65519], 1
	mov	BYTE PTR [esi+65517], 1
	mov	BYTE PTR [esi+65524], bl
	mov	BYTE PTR [esi+65541], bl
	mov	BYTE PTR [esi+65542], 1
	mov	BYTE PTR [esi+65543], 1
	mov	BYTE PTR [esi+65568], bl
	mov	BYTE PTR [esi+65521], 3
	mov	BYTE PTR [esi+70807], bl
	mov	BYTE PTR [esi+70808], bl
	mov	BYTE PTR [esi+70809], bl
	mov	DWORD PTR [esi+70810], ecx
; Line 354
	mov	BYTE PTR [esi+70818], bl
; Line 355
	mov	BYTE PTR [esi+70819], bl
; Line 356
	mov	BYTE PTR [esi+70820], 1
; Line 357
	mov	BYTE PTR [esi+70840], 8
; Line 359
	mov	BYTE PTR [esi+70821], 1
; Line 360
	mov	DWORD PTR [esi+70822], 65536		; 00010000H
; Line 361
	mov	DWORD PTR [esi+70826], 65544		; 00010008H
; Line 363
	mov	BYTE PTR [esi+70830], bl
; Line 364
	mov	BYTE PTR [esi+70831], 1
; Line 365
	mov	DWORD PTR [esi+70832], ecx
; Line 366
	mov	DWORD PTR [esi+70836], 1000		; 000003e8H
	lea	edi, DWORD PTR [esi+70841]
; Line 370
	stosd
; Line 377
	push	2
	pop	edx
	stosd
	mov	eax, 55136				; 0000d760H
	mov	DWORD PTR tv510[ebp], edx
$LL23@MrcInitial:
; Line 378
	xor	ecx, ecx
	mov	DWORD PTR tv175[ebp], 4
$LL20@MrcInitial:
; Line 382
	mov	edi, ecx
	shr	edi, 1
	add	edi, eax
	inc	ecx
	dec	DWORD PTR tv175[ebp]
	mov	BYTE PTR [edi+esi], 1
	jne	SHORT $LL20@MrcInitial
	add	eax, edx
	dec	DWORD PTR tv510[ebp]
	jne	SHORT $LL23@MrcInitial
; Line 388
	lea	eax, DWORD PTR [esi+70891]
	lea	ecx, DWORD PTR [esi+70955]
	mov	DWORD PTR tv1637[ebp], edx
$LL79@MrcInitial:
; Line 389
	push	4
	pop	edx
$LL14@MrcInitial:
; Line 393
	mov	DWORD PTR [esi+70883], ebx
	mov	DWORD PTR [esi+70887], ebx
; Line 395
	xor	edi, edi
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	WORD PTR [ecx], di
	add	eax, 8
	inc	ecx
	inc	ecx
	dec	edx
	jne	SHORT $LL14@MrcInitial
; Line 388
	dec	DWORD PTR tv1637[ebp]
	jne	SHORT $LL79@MrcInitial
; Line 465
	mov	al, 1
	cmp	al, BYTE PTR [esi+65434]
; Line 482
	push	esi
	sbb	al, al
	inc	al
	mov	DWORD PTR [esi+70971], ebx
	mov	DWORD PTR [esi+70975], ebx
	mov	DWORD PTR [esi+70979], ebx
	mov	BYTE PTR [esi+70983], bl
	mov	BYTE PTR [esi+65552], bl
	mov	BYTE PTR [esi+65339], 1
	mov	DWORD PTR [esi+65340], 122		; 0000007aH
	mov	BYTE PTR [esi+65478], bl
	mov	BYTE PTR [esi+65338], bl
	mov	BYTE PTR [esi+55392], bl
	mov	BYTE PTR [esi+70990], bl
	mov	BYTE PTR [esi+70992], bl
	mov	BYTE PTR [esi+70991], bl
	mov	BYTE PTR [esi+70993], 105		; 00000069H
	mov	BYTE PTR [esi+70994], 85		; 00000055H
	mov	BYTE PTR [esi+70995], 82		; 00000052H
	mov	BYTE PTR [esi+70996], 3
	mov	BYTE PTR [esi+70997], 10		; 0000000aH
	mov	BYTE PTR [esi+70998], 100		; 00000064H
	mov	BYTE PTR [esi+70999], 90		; 0000005aH
	mov	BYTE PTR [esi+71002], 3
	mov	BYTE PTR [esi+71003], bl
	mov	BYTE PTR [esi+71004], 105		; 00000069H
	mov	BYTE PTR [esi+71013], al
	mov	BYTE PTR [esi+71014], bl
	mov	BYTE PTR [esi+71015], bl
	mov	BYTE PTR [esi+71016], bl
	mov	BYTE PTR [esi+71017], bl
	mov	BYTE PTR [esi+71018], bl
	mov	BYTE PTR [esi+71019], bl
	mov	BYTE PTR [esi+71020], bl
	mov	BYTE PTR [esi+71021], bl
	call	_ExternalSiliconInit
; Line 492
	push	esi
	call	_OemGetPlatformType
; Line 497
	push	esi
	call	_OemSetMrcData
; Line 508
	push	esi
	call	_DetermineBootMode
	lea	ecx, DWORD PTR [esi+55490]
; Line 515
	mov	BYTE PTR [esi+64200], bl
; Line 516
	mov	BYTE PTR [esi+64199], bl
	add	esp, 16					; 00000010H
; Line 521
	mov	BYTE PTR [esi+71008], bl
	lea	eax, DWORD PTR [esi+71456]
	mov	edx, ecx
	mov	DWORD PTR tv1735[ebp], 2
$LL8@MrcInitial:
; Line 526
	mov	BYTE PTR [eax], 3
; Line 527
	cmp	WORD PTR [edx], 8
	jne	SHORT $LN5@MrcInitial
; Line 528
	or	BYTE PTR [esi+71008], 3
$LN5@MrcInitial:
; Line 533
	movzx	edi, WORD PTR [edx]
	cmp	di, 2
	je	SHORT $LN3@MrcInitial
	cmp	di, 4
	jne	SHORT $LN7@MrcInitial
$LN3@MrcInitial:
; Line 534
	or	BYTE PTR [esi+71008], 4
$LN7@MrcInitial:
; Line 522
	inc	edx
	inc	edx
	inc	eax
	dec	DWORD PTR tv1735[ebp]
	jne	SHORT $LL8@MrcInitial
; Line 540
	mov	BYTE PTR [esi+71009], bl
; Line 541
	mov	BYTE PTR [esi+71010], bl
; Line 549
	mov	BYTE PTR [esi+71011], 1
; Line 555
	mov	eax, 4224				; 00001080H
	mov	DWORD PTR [esi+55172], ebx
	pop	edi
	cmp	WORD PTR [ecx], ax
	jne	SHORT $LN2@MrcInitial
; Line 556
	push	64					; 00000040H
	pop	eax
	mov	DWORD PTR [esi+55176], eax
; Line 557
	mov	DWORD PTR [esi+55180], eax
; Line 558
	mov	DWORD PTR [esi+55184], eax
; Line 559
	mov	DWORD PTR [esi+55188], eax
; Line 560
	jmp	SHORT $LN1@MrcInitial
$LN2@MrcInitial:
; Line 561
	mov	DWORD PTR [esi+55176], ebx
; Line 562
	mov	DWORD PTR [esi+55180], ebx
; Line 563
	mov	DWORD PTR [esi+55184], ebx
; Line 564
	mov	DWORD PTR [esi+55188], ebx
$LN1@MrcInitial:
; Line 570
	mov	BYTE PTR [esi+71005], 1
; Line 571
	mov	BYTE PTR [esi+71006], 1
; Line 572
	mov	BYTE PTR [esi+71455], 1
; Line 576
	mov	BYTE PTR [esi+71458], 5
; Line 580
	mov	eax, 16384				; 00004000H
	mov	WORD PTR [esi+71459], ax
; Line 585
	mov	BYTE PTR [esi+71493], 1
	pop	esi
; Line 586
	xor	eax, eax
	pop	ebx
; Line 587
	leave
	ret	0
_MrcInitializeParameters ENDP
_TEXT	ENDS
PUBLIC	_ConfigureSMBusSpdWriteDisable
; Function compile flags: /Ogspy
;	COMDAT _ConfigureSMBusSpdWriteDisable
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ConfigureSMBusSpdWriteDisable PROC			; COMDAT
; Line 909
	push	esi
; Line 912
	mov	esi, DWORD PTR _MrcData$[esp]
	cmp	BYTE PTR [esi+71493], 0
	jne	SHORT $LN1@ConfigureS
; Line 913
	push	esi
	call	_SetSMBusLegacySpdWriteDisable
	pop	ecx
; Line 914
	test	eax, eax
; Line 915
	jne	SHORT $LN3@ConfigureS
$LN1@ConfigureS:
; Line 918
	push	esi
	call	_SetSMBusHostSpdWriteDisable
	pop	ecx
$LN3@ConfigureS:
	pop	esi
; Line 921
	ret	0
_ConfigureSMBusSpdWriteDisable ENDP
_TEXT	ENDS
PUBLIC	_SetScrambler
; Function compile flags: /Ogspy
;	COMDAT _SetScrambler
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_lfsr$ = 12						; size = 2
_Channel$ = 12						; size = 1
_SetScrambler PROC					; COMDAT
; Line 1219
	push	ebp
	mov	ebp, esp
; Line 1225
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	DWORD PTR [esi+eax*8+65300], 0
	push	edi
	jne	SHORT $LN11@SetScrambl
	cmp	DWORD PTR [esi+eax*8+65304], 0
	jne	SHORT $LN11@SetScrambl
	xor	cl, cl
	jmp	SHORT $LN12@SetScrambl
$LN11@SetScrambl:
	mov	cl, 1
$LN12@SetScrambl:
; Line 1227
	mov	edx, eax
	imul	edx, 4336				; 000010f0H
	lea	edi, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR [edi+56486]
	or	edx, DWORD PTR [edi+56490]
	je	$LN2@SetScrambl
; Line 1236
	cmp	BYTE PTR [esi+26980], 0
	push	ebx
	lea	ebx, DWORD PTR [esi+eax*2+26976]
	movzx	eax, WORD PTR [ebx]
	mov	DWORD PTR _lfsr$[ebp], eax
	je	SHORT $LN6@SetScrambl
	cmp	BYTE PTR [esi+31274], 4
	jne	SHORT $LN7@SetScrambl
	test	cl, cl
	jne	SHORT $LN7@SetScrambl
$LN6@SetScrambl:
; Line 1240
	test	ax, ax
	jne	SHORT $LN5@SetScrambl
; Line 1241
	call	_get_initial_seed
	movzx	eax, ax
	mov	DWORD PTR _lfsr$[ebp], eax
; Line 1247
	jmp	SHORT $LN4@SetScrambl
$LN5@SetScrambl:
; Line 1248
	lea	eax, DWORD PTR _lfsr$[ebp]
	push	eax
	call	_Lfsr16
	pop	ecx
$LN4@SetScrambl:
; Line 1250
	mov	ax, WORD PTR _lfsr$[ebp]
	mov	WORD PTR [ebx], ax
$LN7@SetScrambl:
; Line 1257
	lea	eax, DWORD PTR _lfsr$[ebp]
	push	eax
	call	_Lfsr16
	pop	ecx
; Line 1260
	lea	ecx, DWORD PTR [esi+65476]
	movzx	eax, BYTE PTR [ecx]
	cdq
	mov	DWORD PTR [edi+56494], eax
	mov	DWORD PTR [edi+56498], edx
; Line 1261
	cmp	BYTE PTR [ecx], 1
	pop	ebx
	jne	SHORT $LN3@SetScrambl
; Line 1262
	movzx	eax, WORD PTR _lfsr$[ebp]
	cdq
	mov	DWORD PTR [edi+56502], eax
	mov	DWORD PTR [edi+56506], edx
; Line 1263
	jmp	SHORT $LN2@SetScrambl
$LN3@SetScrambl:
; Line 1264
	and	DWORD PTR [edi+56502], 0
	and	DWORD PTR [edi+56506], 0
$LN2@SetScrambl:
	pop	edi
; Line 1271
	xor	eax, eax
	pop	esi
; Line 1272
	pop	ebp
	ret	0
_SetScrambler ENDP
_TEXT	ENDS
END
