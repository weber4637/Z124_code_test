; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\MspLibrary\MSysProg.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_mTimerLibLocalApicFrequencies
PUBLIC	_mTimerLibLocalApicDivisor
_DATA	SEGMENT
_mTimerLibLocalApicFrequencies DW 064H
	DW	085H
	DW	0c8H
	DW	0a7H
	DW	053H
	DW	0190H
	DW	010bH
	DW	014dH
_mTimerLibLocalApicDivisor DB 02H
	DB	04H
	DB	08H
	DB	010H
	DB	02H
	DB	04H
	DB	08H
	DB	010H
	DB	020H
	DB	040H
	DB	080H
	DB	01H
	DB	020H
	DB	040H
	DB	080H
	DB	01H
_DATA	ENDS
PUBLIC	_McStall
EXTRN	_Mmio32Read:PROC
; Function compile flags: /Ogspy
;	COMDAT _McStall
_TEXT	SEGMENT
_DelayUs$ = 8						; size = 4
_McStall PROC						; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\msplibrary\msysprog.c
; Line 41
	push	ebx
	push	ebp
	push	esi
; Line 53
	mov	esi, DWORD PTR _DelayUs$[esp+8]
	mov	eax, 286331152				; 11111110H
	push	edi
	cmp	esi, eax
	jbe	SHORT $LN10@McStall
; Line 54
	mov	esi, eax
	jmp	SHORT $LN8@McStall
$LN10@McStall:
; Line 55
	cmp	esi, 10					; 0000000aH
	jae	SHORT $LN8@McStall
; Line 56
	push	10					; 0000000aH
	pop	esi
$LN8@McStall:
; Line 62
	mov	edi, -19922704				; fed000f0H
	push	edi
	xor	bl, bl
	call	_Mmio32Read
	imul	esi, 24					; 00000018H
	mov	ebp, eax
	pop	ecx
; Line 63
	add	esi, ebp
$LL7@McStall:
; Line 66
	push	edi
	call	_Mmio32Read
	pop	ecx
; Line 67
	cmp	esi, ebp
; Line 71
	ja	SHORT $LN14@McStall
; Line 72
	cmp	eax, ebp
	jae	SHORT $LN6@McStall
$LN14@McStall:
	cmp	eax, esi
	jb	SHORT $LN6@McStall
; Line 73
	mov	bl, 1
$LN6@McStall:
; Line 76
	test	bl, bl
	je	SHORT $LL7@McStall
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 80
	ret	0
_McStall ENDP
_TEXT	ENDS
PUBLIC	_AsmReadApicBase
; Function compile flags: /Ogspy
;	COMDAT _AsmReadApicBase
_TEXT	SEGMENT
_Data32$ = -4						; size = 4
_AsmReadApicBase PROC					; COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 107
	and	DWORD PTR _Data32$[ebp], 0
	push	ebx
; Line 112
	push	eax
; Line 113
	push	ebx
; Line 114
	push	ecx
; Line 115
	push	edx
; Line 117
	mov	ecx, 27					; 0000001bH
; Line 118
	rdmsr
; Line 119
	mov	DWORD PTR _Data32$[ebp], eax
; Line 121
	pop	edx
; Line 122
	pop	ecx
; Line 123
	pop	ebx
; Line 124
	pop	eax
; Line 127
	mov	eax, DWORD PTR _Data32$[ebp]
; Line 129
	pop	ebx
	leave
	ret	0
_AsmReadApicBase ENDP
_TEXT	ENDS
PUBLIC	_AsmReadApicFreq
; Function compile flags: /Ogspy
;	COMDAT _AsmReadApicFreq
_TEXT	SEGMENT
_Data32$ = -4						; size = 4
_AsmReadApicFreq PROC					; COMDAT
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 138
	and	DWORD PTR _Data32$[ebp], 0
	push	ebx
; Line 142
	push	eax
; Line 143
	push	ebx
; Line 144
	push	ecx
; Line 145
	push	edx
; Line 147
	mov	ecx, 205				; 000000cdH
; Line 148
	rdmsr
; Line 149
	mov	DWORD PTR _Data32$[ebp], eax
; Line 151
	pop	edx
; Line 152
	pop	ecx
; Line 153
	pop	ebx
; Line 154
	pop	eax
; Line 157
	mov	eax, DWORD PTR _Data32$[ebp]
; Line 159
	pop	ebx
	leave
	ret	0
_AsmReadApicFreq ENDP
_TEXT	ENDS
PUBLIC	_ReadApicFreqOffset
; Function compile flags: /Ogspy
;	COMDAT _ReadApicFreqOffset
_TEXT	SEGMENT
_ReadApicFreqOffset PROC				; COMDAT
; Line 167
	call	_AsmReadApicFreq
; Line 168
	shr	eax, 16					; 00000010H
	and	al, 7
; Line 171
	ret	0
_ReadApicFreqOffset ENDP
_TEXT	ENDS
PUBLIC	_InternalX86GetTimerTick
; Function compile flags: /Ogspy
;	COMDAT _InternalX86GetTimerTick
_TEXT	SEGMENT
_ApicBase$ = 8						; size = 4
_InternalX86GetTimerTick PROC				; COMDAT
; Line 178
	mov	eax, DWORD PTR _ApicBase$[esp-4]
	add	eax, 912				; 00000390H
	push	eax
	call	_Mmio32Read
	pop	ecx
; Line 179
	ret	0
_InternalX86GetTimerTick ENDP
_TEXT	ENDS
PUBLIC	_McStallNanoSecond
; Function compile flags: /Ogspy
;	COMDAT _McStallNanoSecond
_TEXT	SEGMENT
_Temp$ = -4						; size = 4
_DelayNs$ = 8						; size = 4
_McStallNanoSecond PROC					; COMDAT
; Line 193
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 230
	mov	DWORD PTR _Temp$[ebp], 0
	jmp	SHORT $LN9@McStallNan
$LL3@McStallNan:
	inc	DWORD PTR _Temp$[ebp]
$LN9@McStallNan:
	mov	eax, DWORD PTR _Temp$[ebp]
	cmp	eax, DWORD PTR _DelayNs$[ebp]
	jb	SHORT $LL3@McStallNan
; Line 233
	leave
	ret	0
_McStallNanoSecond ENDP
_TEXT	ENDS
PUBLIC	_MspDelay
; Function compile flags: /Ogspy
;	COMDAT _MspDelay
_TEXT	SEGMENT
_Type$ = 8						; size = 1
_Delay$ = 12						; size = 4
_MspDelay PROC						; COMDAT
; Line 240
	push	ebp
	mov	ebp, esp
; Line 244
	movzx	eax, BYTE PTR _Type$[ebp]
	sub	eax, 0
	je	SHORT $LN7@MspDelay
	dec	eax
	je	SHORT $LN3@MspDelay
	dec	eax
; Line 258
	jne	SHORT $LN3@MspDelay
	mov	eax, DWORD PTR _Delay$[ebp]
	shr	eax, 3
	push	eax
	call	_McStallNanoSecond
	add	esp, 4
	jmp	SHORT $LN4@MspDelay
$LN3@MspDelay:
; Line 251
	push	DWORD PTR _Delay$[ebp]
	call	_McStall
	pop	ecx
; Line 252
	jmp	SHORT $LN4@MspDelay
$LN7@MspDelay:
	push	esi
; Line 246
	mov	esi, DWORD PTR _Delay$[ebp]
	test	esi, esi
	jbe	SHORT $LN14@MspDelay
$LL6@MspDelay:
; Line 247
	push	1000					; 000003e8H
	call	_McStall
	dec	esi
	pop	ecx
	jne	SHORT $LL6@MspDelay
$LN14@MspDelay:
	pop	esi
$LN4@MspDelay:
; Line 261
	xor	eax, eax
; Line 262
	pop	ebp
	ret	0
_MspDelay ENDP
_TEXT	ENDS
PUBLIC	_McEnableHpet
EXTRN	_Mmio32Write:PROC
; Function compile flags: /Ogspy
;	COMDAT _McEnableHpet
_TEXT	SEGMENT
_MspData$ = 8						; size = 4
_McEnableHpet PROC					; COMDAT
; Line 282
	mov	eax, DWORD PTR _MspData$[esp-4]
	cmp	DWORD PTR [eax+32], 0
; Line 283
	jne	SHORT $LN4@McEnableHp
	push	esi
; Line 312
	mov	esi, -19922928				; fed00010H
	push	esi
	mov	DWORD PTR [eax+32], -19922944		; fed00000H
	call	_Mmio32Read
	or	eax, 1
	push	eax
	push	esi
	call	_Mmio32Write
	add	esp, 12					; 0000000cH
	pop	esi
$LN4@McEnableHp:
; Line 314
	xor	eax, eax
; Line 315
	ret	0
_McEnableHpet ENDP
_TEXT	ENDS
PUBLIC	_McDisableHpet
; Function compile flags: /Ogspy
;	COMDAT _McDisableHpet
_TEXT	SEGMENT
_Data32$ = -4						; size = 4
_MrcData$ = 8						; size = 4
_McDisableHpet PROC					; COMDAT
; Line 328
	push	ecx
	push	esi
; Line 348
	mov	esi, -19922928				; fed00010H
	push	esi
	call	_Mmio32Read
	and	eax, -4					; fffffffcH
	push	eax
	push	esi
	call	_Mmio32Write
; Line 349
	push	esi
	call	_Mmio32Read
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Data32$[esp+8], eax
; Line 358
	xor	eax, eax
	pop	esi
; Line 359
	pop	ecx
	ret	0
_McDisableHpet ENDP
_TEXT	ENDS
PUBLIC	_SaveMspHostStructureAddress
; Function compile flags: /Ogspy
;	COMDAT _SaveMspHostStructureAddress
_TEXT	SEGMENT
_MspDataAddress$ = 8					; size = 4
_SaveMspHostStructureAddress PROC			; COMDAT
; Line 387
	movd	mm2, DWORD PTR _MspDataAddress$[esp-4]
; Line 391
	ret	0
_SaveMspHostStructureAddress ENDP
_TEXT	ENDS
PUBLIC	_GetMspHostStructureAddress
; Function compile flags: /Ogspy
;	COMDAT _GetMspHostStructureAddress
_TEXT	SEGMENT
_MspData$ = -4						; size = 4
_GetMspHostStructureAddress PROC			; COMDAT
; Line 401
	push	ecx
; Line 415
	movd	DWORD PTR _MspData$[esp+4], mm2
; Line 418
	mov	eax, DWORD PTR _MspData$[esp+4]
; Line 420
	pop	ecx
	ret	0
_GetMspHostStructureAddress ENDP
_TEXT	ENDS
PUBLIC	_ByteEnableToUintX
EXTRN	__allshl:PROC
; Function compile flags: /Ogspy
;	COMDAT _ByteEnableToUintX
_TEXT	SEGMENT
_FinalValue$ = -8					; size = 8
_Be$ = 8						; size = 1
_Value$ = 12						; size = 8
tv200 = 20						; size = 4
_ValueLength$ = 20					; size = 4
_ByteEnableToUintX PROC					; COMDAT
; Line 428
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 439
	mov	esi, DWORD PTR _ValueLength$[ebp]
	push	edi
; Line 441
	xor	edi, edi
	mov	BYTE PTR [esi], 0
	xor	ebx, ebx
	mov	DWORD PTR _FinalValue$[ebp+4], edi
	mov	DWORD PTR tv200[ebp], 8
$LL5@ByteEnable:
; Line 443
	test	BYTE PTR _Be$[ebp], 1
	je	SHORT $LN2@ByteEnable
; Line 445
	movzx	eax, BYTE PTR _Value$[ebp]
	inc	BYTE PTR [esi]
	xor	edx, edx
	mov	ecx, edi
	call	__allshl
; Line 446
	mov	ecx, DWORD PTR _Value$[ebp+4]
	add	ebx, eax
	mov	eax, DWORD PTR _Value$[ebp]
	adc	DWORD PTR _FinalValue$[ebp+4], edx
	shrd	eax, ecx, 8
	shr	ecx, 8
	mov	DWORD PTR _Value$[ebp], eax
	mov	DWORD PTR _Value$[ebp+4], ecx
$LN2@ByteEnable:
; Line 448
	shr	BYTE PTR _Be$[ebp], 1
	add	edi, 8
	dec	DWORD PTR tv200[ebp]
	jne	SHORT $LL5@ByteEnable
; Line 453
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LN1@ByteEnable
; Line 455
	mov	BYTE PTR [esi], 1
$LN1@ByteEnable:
; Line 457
	mov	edx, DWORD PTR _FinalValue$[ebp+4]
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 458
	leave
	ret	0
_ByteEnableToUintX ENDP
_TEXT	ENDS
PUBLIC	_CreatePFCTSel
; Function compile flags: /Ogspy
;	COMDAT _CreatePFCTSel
_TEXT	SEGMENT
_CurrentPlatform$ = -4					; size = 2
_CurrentFrequency$ = 8					; size = 2
_MspData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_CurrentConfiguration$ = 16				; size = 2
_Channel$ = 16						; size = 1
_PFCTSelect$ = 20					; size = 4
_CreatePFCTSel PROC					; COMDAT
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 475
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR _MspData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+4]
	mov	DWORD PTR _CurrentPlatform$[ebp], edx
; Line 476
	movzx	edx, WORD PTR [ecx+eax*2+8]
	mov	DWORD PTR _CurrentFrequency$[ebp], edx
; Line 477
	movzx	edx, WORD PTR [ecx+eax*2+12]
; Line 478
	movzx	ecx, WORD PTR [ecx+eax*2+16]
; Line 480
	mov	eax, DWORD PTR _PFCTSelect$[ebp]
	mov	DWORD PTR _CurrentConfiguration$[ebp], edx
; Line 481
	xor	edx, edx
	inc	edx
	push	ebx
	push	esi
	mov	esi, edx
	shl	esi, cl
; Line 482
	mov	cl, BYTE PTR _CurrentConfiguration$[ebp]
	mov	ebx, edx
	shl	ebx, cl
	push	edi
; Line 484
	mov	edi, edx
	and	DWORD PTR [eax], 0
	mov	ecx, ebx
	shl	ecx, 2
	or	ecx, esi
	mov	DWORD PTR [eax+24], ecx
	mov	cl, BYTE PTR _CurrentFrequency$[ebp]
	shl	edi, cl
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+16], ebx
; Line 497
	mov	BYTE PTR [eax+4], 0
	mov	ecx, edi
	shl	ecx, 2
	or	ecx, esi
	mov	DWORD PTR [eax+40], ecx
	mov	ecx, edi
	shl	ecx, 3
	or	ecx, ebx
	mov	DWORD PTR [eax+48], ecx
	shl	ecx, 2
	or	ecx, esi
	mov	DWORD PTR [eax+56], ecx
	mov	cl, BYTE PTR _CurrentPlatform$[ebp]
	shl	edx, cl
	mov	DWORD PTR [eax+32], edi
; Line 498
	mov	BYTE PTR [eax+12], 1
; Line 499
	mov	BYTE PTR [eax+20], 1
	mov	ecx, edx
	shl	ecx, 2
	or	ecx, esi
	mov	DWORD PTR [eax+72], ecx
	mov	ecx, edx
	shl	ecx, 3
	or	ecx, ebx
	mov	DWORD PTR [eax+80], ecx
	shl	ecx, 2
	or	ecx, esi
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+64], edx
	shl	edx, 5
	or	edx, edi
	mov	ecx, edx
	shl	ecx, 2
	or	ecx, esi
	mov	DWORD PTR [eax+104], ecx
	mov	ecx, edx
	shl	ecx, 3
	or	ecx, ebx
	mov	DWORD PTR [eax+112], ecx
	shl	ecx, 2
	or	ecx, esi
	mov	DWORD PTR [eax+96], edx
	mov	DWORD PTR [eax+120], ecx
; Line 500
	mov	BYTE PTR [eax+28], 1
; Line 501
	mov	BYTE PTR [eax+36], 1
; Line 502
	mov	BYTE PTR [eax+44], 1
; Line 503
	mov	BYTE PTR [eax+52], 1
; Line 504
	mov	BYTE PTR [eax+60], 2
; Line 505
	mov	BYTE PTR [eax+68], 1
; Line 506
	mov	BYTE PTR [eax+76], 2
; Line 507
	mov	BYTE PTR [eax+84], 2
	pop	edi
	pop	esi
; Line 508
	mov	BYTE PTR [eax+92], 2
; Line 509
	mov	BYTE PTR [eax+100], 2
; Line 510
	mov	BYTE PTR [eax+108], 2
; Line 511
	mov	BYTE PTR [eax+116], 2
; Line 512
	mov	BYTE PTR [eax+124], 3
; Line 514
	xor	eax, eax
	pop	ebx
; Line 515
	leave
	ret	0
_CreatePFCTSel ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JLAJNNBH@DUnitAftTrain?$AA@		; `string'
PUBLIC	??_C@_0N@CPJPDPBI@MmapForTrain?$AA@		; `string'
PUBLIC	??_C@_0P@HIBBKCBL@EnableChannels?$AA@		; `string'
PUBLIC	_MspExecuteTask
EXTRN	_MemRegWrite:PROC
EXTRN	_MemFieldRead:PROC
EXTRN	_DynamicAssignmentGenerated:PROC
EXTRN	_MemRegRead:PROC
EXTRN	_GetRegisterAccessInfo:PROC
EXTRN	_StrobeToRegisterGenerated:BYTE
EXTRN	_FloorPlanGenerated:BYTE
EXTRN	_RankToRegisterGenerated:BYTE
EXTRN	_InstancePortMapGenerated:BYTE
EXTRN	_SubtaskOffsetIndex:BYTE
EXTRN	_InitData:BYTE
EXTRN	_MmrcStringCompare:PROC
EXTRN	_CapsuleStrings:BYTE
;	COMDAT ??_C@_0O@JLAJNNBH@DUnitAftTrain?$AA@
CONST	SEGMENT
??_C@_0O@JLAJNNBH@DUnitAftTrain?$AA@ DB 'DUnitAftTrain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPJPDPBI@MmapForTrain?$AA@
CONST	SEGMENT
??_C@_0N@CPJPDPBI@MmapForTrain?$AA@ DB 'MmapForTrain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIBBKCBL@EnableChannels?$AA@
CONST	SEGMENT
??_C@_0P@HIBBKCBL@EnableChannels?$AA@ DB 'EnableChannels', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _MspExecuteTask
_TEXT	SEGMENT
_PFCTVariations$ = -172					; size = 128
_readValue$ = -44					; size = 8
_DynamicIndex$ = -36					; size = 2
_BaseOffset$ = -32					; size = 4
_NewValue$ = -28					; size = 8
_Register$ = -20					; size = 24
tv514 = 4						; size = 4
tv458 = 8						; size = 4
tv1278 = 12						; size = 4
_Delay$ = 16						; size = 4
_RegisterOffset$ = 20					; size = 2
tv1028 = 24						; size = 4
tv1557 = 28						; size = 4
_Mask$ = 32						; size = 8
_RegisterAttributes2$ = 40				; size = 4
_ByteEnable$ = 46					; size = 1
_Bus$ = 50						; size = 1
tv1084 = 51						; size = 1
tv1666 = 52						; size = 4
_ConditionalExecution$ = 52				; size = 2
_Func$ = 58						; size = 1
_MsgLevel$ = 59						; size = 1
_Device$ = 60						; size = 1
_Port$ = 61						; size = 1
_BoxType$ = 62						; size = 1
_ThisInstance$ = 66					; size = 1
_ThisChannel$ = 70					; size = 1
tv1079 = 74						; size = 1
_NumStrings$ = 75					; size = 1
_PfctValue$ = 76					; size = 8
_Zero$ = 85						; size = 1
_InstanceToWrite$ = 86					; size = 1
_ChannelToWrite$ = 87					; size = 1
_ExecuteThisRoutineInParallel$ = 88			; size = 1
_PfctDynamic$ = 88					; size = 1
_ChannelBasedOffsetDetected$ = 89			; size = 1
_MaxRank$ = 90						; size = 1
_NumberConditionalValues$ = 90				; size = 1
_MaskValueLength$ = 91					; size = 1
_MaxStrobe$ = 92					; size = 1
_PfctStatus$ = 92					; size = 1
_Action$ = 93						; size = 1
_Instance$ = 94						; size = 1
_ConditionalFlag$ = 94					; size = 1
_NumberInstances$ = 95					; size = 1
_Counter$ = 95						; size = 1
_CurrentPtr$ = 96					; size = 2
_MspData$ = 108						; size = 4
_Socket$ = 112						; size = 1
_CapsuleStartIndex$ = 116				; size = 2
_StringIndex$ = 120					; size = 2
_Channel$ = 124						; size = 1
_MspExecuteTask PROC					; COMDAT
; Line 543
	push	ebp
	lea	ebp, DWORD PTR [esp-100]
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
; Line 621
	mov	edi, DWORD PTR _MspData$[ebp]
	mov	al, BYTE PTR [edi+20]
	mov	BYTE PTR _MsgLevel$[ebp], al
	jmp	$LN209@MspExecute
$LL202@MspExecute:
; Line 623
	movzx	eax, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [eax+edi+23], 0
	mov	DWORD PTR tv1028[ebp], eax
	je	$LN135@MspExecute
; Line 631
	xor	eax, eax
	mov	DWORD PTR _PfctValue$[ebp], eax
	mov	DWORD PTR _PfctValue$[ebp+4], eax
; Line 638
	mov	DWORD PTR _Delay$[ebp], eax
; Line 641
	mov	BYTE PTR _Bus$[ebp], al
; Line 642
	mov	BYTE PTR _Device$[ebp], al
; Line 643
	mov	BYTE PTR _Func$[ebp], al
; Line 644
	mov	DWORD PTR _BaseOffset$[ebp], eax
; Line 645
	mov	BYTE PTR _Port$[ebp], al
; Line 646
	mov	BYTE PTR _ThisChannel$[ebp], al
; Line 647
	mov	BYTE PTR _ThisInstance$[ebp], al
; Line 654
	mov	eax, 65535				; 0000ffffH
	cmp	WORD PTR _StringIndex$[ebp], ax
	je	SHORT $LN175@MspExecute
; Line 658
	movzx	esi, WORD PTR _StringIndex$[ebp]
	push	12					; 0000000cH
	lea	esi, DWORD PTR _CapsuleStrings[esi*4]
	push	OFFSET ??_C@_0P@HIBBKCBL@EnableChannels?$AA@
	push	DWORD PTR [esi]
	call	_MmrcStringCompare
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN130@MspExecute
	push	11					; 0000000bH
	push	OFFSET ??_C@_0N@CPJPDPBI@MmapForTrain?$AA@
	push	DWORD PTR [esi]
	call	_MmrcStringCompare
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN130@MspExecute
	push	12					; 0000000cH
	push	OFFSET ??_C@_0O@JLAJNNBH@DUnitAftTrain?$AA@
	push	DWORD PTR [esi]
	call	_MmrcStringCompare
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN128@MspExecute
$LN130@MspExecute:
; Line 659
	mov	al, BYTE PTR [edi+20]
	test	al, al
	je	SHORT $LN128@MspExecute
; Line 660
	or	al, 8
	mov	BYTE PTR [edi+20], al
; Line 664
	jmp	SHORT $LN128@MspExecute
$LN175@MspExecute:
; Line 665
	and	BYTE PTR [edi+20], 247			; 000000f7H
$LN128@MspExecute:
; Line 698
	lea	eax, DWORD PTR _PFCTVariations$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	edi
	call	_CreatePFCTSel
; Line 702
	movzx	ebx, WORD PTR _CapsuleStartIndex$[ebp]
	add	esp, 16					; 00000010H
	add	ebx, OFFSET _InitData
; Line 715
	jmp	$LN211@MspExecute
$LL121@MspExecute:
; Line 725
	mov	dl, BYTE PTR [ebx]
	test	dl, 32					; 00000020H
	je	SHORT $LN205@MspExecute
; Line 726
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _RegisterAttributes2$[ebp], eax
; Line 727
	mov	DWORD PTR _CurrentPtr$[ebp], 2
$LN205@MspExecute:
; Line 732
	test	dl, 8
	je	SHORT $LN206@MspExecute
; Line 733
	mov	esi, DWORD PTR tv1028[ebp]
	movzx	ecx, WORD PTR _CurrentPtr$[ebp]
	imul	esi, 542				; 0000021eH
	movzx	ecx, WORD PTR [ecx+ebx]
	add	ecx, esi
	movzx	ecx, WORD PTR [edi+ecx*8+40]
; Line 734
	add	DWORD PTR _CurrentPtr$[ebp], 2
	mov	DWORD PTR _ConditionalExecution$[ebp], ecx
$LN206@MspExecute:
; Line 740
	mov	cl, BYTE PTR [eax]
	mov	al, cl
	shr	al, 2
	and	al, 1
	mov	BYTE PTR tv1079[ebp], al
	je	SHORT $LN116@MspExecute
; Line 741
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	mov	al, BYTE PTR [eax+ebx]
	inc	DWORD PTR _CurrentPtr$[ebp]
	mov	BYTE PTR _ChannelToWrite$[ebp], al
$LN116@MspExecute:
; Line 743
	mov	al, cl
	shr	al, 1
	and	al, 1
	mov	BYTE PTR tv1084[ebp], al
	je	SHORT $LN115@MspExecute
; Line 744
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	mov	al, BYTE PTR [eax+ebx]
	inc	DWORD PTR _CurrentPtr$[ebp]
	mov	BYTE PTR _InstanceToWrite$[ebp], al
$LN115@MspExecute:
; Line 751
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	test	dl, 4
	je	SHORT $LN114@MspExecute
	movzx	eax, WORD PTR [eax+ebx]
; Line 752
	add	DWORD PTR _CurrentPtr$[ebp], 2
; Line 753
	jmp	SHORT $LN212@MspExecute
$LN114@MspExecute:
; Line 754
	movzx	ax, BYTE PTR [eax+ebx]
; Line 755
	inc	DWORD PTR _CurrentPtr$[ebp]
	movzx	eax, ax
$LN212@MspExecute:
	mov	DWORD PTR _RegisterOffset$[ebp], eax
; Line 765
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	test	dl, 64					; 00000040H
	je	SHORT $LN112@MspExecute
	add	eax, ebx
	mov	cl, BYTE PTR [eax]
; Line 766
	mov	al, BYTE PTR [eax+1]
; Line 767
	add	DWORD PTR _CurrentPtr$[ebp], 2
; Line 768
	jmp	SHORT $LN213@MspExecute
$LN112@MspExecute:
; Line 772
	mov	al, BYTE PTR [eax+ebx]
	mov	cl, al
	shr	cl, 4
; Line 773
	and	al, 15					; 0000000fH
; Line 774
	inc	DWORD PTR _CurrentPtr$[ebp]
$LN213@MspExecute:
	mov	BYTE PTR _ByteEnable$[ebp], al
; Line 781
	lea	eax, DWORD PTR _MaskValueLength$[ebp]
	mov	BYTE PTR _BoxType$[ebp], cl
	push	eax
	test	dl, 16					; 00000010H
	je	SHORT $LN110@MspExecute
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	push	DWORD PTR [eax+ebx+4]
	push	DWORD PTR [eax+ebx]
	push	DWORD PTR _ByteEnable$[ebp]
	call	_ByteEnableToUintX
	mov	DWORD PTR _Mask$[ebp], eax
; Line 782
	movzx	ax, BYTE PTR _MaskValueLength$[ebp]
	add	esp, 16					; 00000010H
	add	WORD PTR _CurrentPtr$[ebp], ax
; Line 783
	jmp	SHORT $LN214@MspExecute
$LN110@MspExecute:
; Line 785
	push	-1
	push	-1
	push	DWORD PTR _ByteEnable$[ebp]
	call	_ByteEnableToUintX
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Mask$[ebp], eax
$LN214@MspExecute:
; Line 793
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	mov	al, BYTE PTR [eax+ebx]
; Line 794
	mov	cl, al
	mov	DWORD PTR _Mask$[ebp+4], edx
	shr	cl, 4
	mov	dl, al
	shr	dl, 5
	and	cl, 1
; Line 795
	and	al, 15					; 0000000fH
; Line 796
	inc	DWORD PTR _CurrentPtr$[ebp]
	mov	BYTE PTR _Action$[ebp], dl
	mov	BYTE PTR _PfctDynamic$[ebp], cl
; Line 800
	cmp	dl, 2
	jne	SHORT $LN108@MspExecute
; Line 801
	movzx	edx, WORD PTR _CurrentPtr$[ebp]
	mov	edx, DWORD PTR [edx+ebx]
; Line 802
	add	DWORD PTR _CurrentPtr$[ebp], 4
	mov	DWORD PTR _Delay$[ebp], edx
$LN108@MspExecute:
; Line 823
	mov	BYTE PTR _PfctStatus$[ebp], 0
; Line 829
	test	al, al
	jne	SHORT $LN107@MspExecute
; Line 830
	mov	BYTE PTR _PfctStatus$[ebp], 1
; Line 831
	cmp	cl, 1
	jne	SHORT $LN106@MspExecute
; Line 832
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	movzx	eax, WORD PTR [eax+ebx]
; Line 833
	add	DWORD PTR _CurrentPtr$[ebp], 2
	cdq
	mov	DWORD PTR _PfctValue$[ebp], eax
	mov	DWORD PTR _PfctValue$[ebp+4], edx
; Line 834
	jmp	$LN185@MspExecute
$LN106@MspExecute:
; Line 835
	lea	eax, DWORD PTR _MaskValueLength$[ebp]
	push	eax
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	push	DWORD PTR [eax+ebx+4]
	push	DWORD PTR [eax+ebx]
	push	DWORD PTR _ByteEnable$[ebp]
	call	_ByteEnableToUintX
	mov	DWORD PTR _PfctValue$[ebp], eax
; Line 836
	movzx	ax, BYTE PTR _MaskValueLength$[ebp]
	add	esp, 16					; 00000010H
	add	WORD PTR _CurrentPtr$[ebp], ax
	mov	DWORD PTR _PfctValue$[ebp+4], edx
; Line 838
	jmp	$LN185@MspExecute
$LN107@MspExecute:
; Line 843
	movzx	ecx, WORD PTR _CurrentPtr$[ebp]
	mov	cl, BYTE PTR [ecx+ebx]
; Line 844
	inc	DWORD PTR _CurrentPtr$[ebp]
	mov	BYTE PTR _NumberConditionalValues$[ebp], cl
; Line 848
	mov	BYTE PTR _Counter$[ebp], 0
	test	cl, cl
	jbe	$LN185@MspExecute
	movzx	edi, al
	shl	edi, 3
$LL184@MspExecute:
; Line 855
	mov	dl, BYTE PTR _PFCTVariations$[ebp+edi+4]
; Line 856
	mov	BYTE PTR _ConditionalFlag$[ebp], 1
; Line 857
	test	dl, dl
	jbe	SHORT $LN199@MspExecute
$LL100@MspExecute:
	cmp	BYTE PTR _ConditionalFlag$[ebp], 1
	jne	SHORT $LN199@MspExecute
; Line 858
	mov	eax, DWORD PTR _PFCTVariations$[ebp+edi]
	movzx	esi, dl
	lea	ecx, DWORD PTR [esi*8-8]
	shr	eax, cl
; Line 859
	movzx	ecx, WORD PTR _CurrentPtr$[ebp]
	add	ecx, esi
	mov	cl, BYTE PTR [ecx+ebx-1]
	and	cl, al
	cmp	cl, al
	je	SHORT $LN98@MspExecute
; Line 860
	mov	BYTE PTR _ConditionalFlag$[ebp], 0
$LN98@MspExecute:
; Line 862
	dec	dl
; Line 857
	jne	SHORT $LL100@MspExecute
$LN199@MspExecute:
; Line 864
	movzx	si, BYTE PTR _PFCTVariations$[ebp+edi+4]
	add	DWORD PTR _CurrentPtr$[ebp], esi
; Line 868
	cmp	BYTE PTR _PfctDynamic$[ebp], 1
	jne	SHORT $LN97@MspExecute
; Line 869
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	movzx	eax, WORD PTR [eax+ebx]
	cdq
	mov	DWORD PTR _PfctValue$[ebp], eax
; Line 870
	mov	al, 2
; Line 871
	jmp	SHORT $LN215@MspExecute
$LN97@MspExecute:
; Line 872
	lea	eax, DWORD PTR _MaskValueLength$[ebp]
	push	eax
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	push	DWORD PTR [eax+ebx+4]
	push	DWORD PTR [eax+ebx]
	push	DWORD PTR _ByteEnable$[ebp]
	call	_ByteEnableToUintX
	mov	DWORD PTR _PfctValue$[ebp], eax
; Line 873
	mov	al, BYTE PTR _MaskValueLength$[ebp]
	add	esp, 16					; 00000010H
$LN215@MspExecute:
; Line 875
	movzx	cx, al
	add	WORD PTR _CurrentPtr$[ebp], cx
; Line 879
	cmp	BYTE PTR _ConditionalFlag$[ebp], 1
	mov	DWORD PTR _PfctValue$[ebp+4], edx
	je	SHORT $LN156@MspExecute
	inc	BYTE PTR _Counter$[ebp]
	mov	al, BYTE PTR _Counter$[ebp]
	cmp	al, BYTE PTR _NumberConditionalValues$[ebp]
	jb	$LL184@MspExecute
; Line 1269
	jmp	SHORT $LN216@MspExecute
$LN156@MspExecute:
; Line 881
	movzx	cx, BYTE PTR _NumberConditionalValues$[ebp]
	movzx	dx, BYTE PTR _Counter$[ebp]
	sub	cx, dx
	movzx	ax, al
	dec	cx
	add	ax, si
	imul	cx, ax
	add	WORD PTR _CurrentPtr$[ebp], cx
	mov	BYTE PTR _PfctStatus$[ebp], 1
$LN216@MspExecute:
	mov	edi, DWORD PTR _MspData$[ebp]
$LN185@MspExecute:
; Line 890
	movzx	eax, WORD PTR _PfctValue$[ebp]
	mov	DWORD PTR _DynamicIndex$[ebp], eax
; Line 891
	mov	eax, DWORD PTR _RegisterAttributes2$[ebp]
	test	BYTE PTR [eax], 1
	je	SHORT $LN94@MspExecute
; Line 892
	movzx	eax, WORD PTR _CurrentPtr$[ebp]
	mov	al, BYTE PTR [eax+ebx]
	inc	DWORD PTR _CurrentPtr$[ebp]
	mov	BYTE PTR _NumStrings$[ebp], al
; Line 893
	jmp	SHORT $LN93@MspExecute
$LN94@MspExecute:
; Line 894
	mov	BYTE PTR _NumStrings$[ebp], 0
$LN93@MspExecute:
; Line 900
	cmp	BYTE PTR _PfctStatus$[ebp], 1
	jne	$LN192@MspExecute
	cmp	WORD PTR _ConditionalExecution$[ebp], 1
	jne	$LN192@MspExecute
; Line 901
	cmp	BYTE PTR _Action$[ebp], 6
	jne	SHORT $LN91@MspExecute
; Line 922
	mov	ecx, 65535				; 0000ffffH
; Line 923
	xor	dl, dl
$LL197@MspExecute:
; Line 924
	movzx	eax, dl
	mov	eax, DWORD PTR _SubtaskOffsetIndex[eax*8+4]
	xor	esi, esi
	cmp	DWORD PTR _PfctValue$[ebp], eax
	jne	SHORT $LN198@MspExecute
	cmp	DWORD PTR _PfctValue$[ebp+4], esi
	je	SHORT $LN157@MspExecute
$LN198@MspExecute:
; Line 923
	inc	dl
	cmp	dl, 38					; 00000026H
	jb	SHORT $LL197@MspExecute
; Line 1269
	jmp	SHORT $LN85@MspExecute
$LN157@MspExecute:
; Line 925
	movzx	eax, dl
	movzx	ecx, WORD PTR _SubtaskOffsetIndex[eax*8]
$LN85@MspExecute:
; Line 946
	mov	al, BYTE PTR [edi+22]
; Line 949
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR _ExecuteThisRoutineInParallel$[ebp], al
	movzx	eax, cx
	mov	BYTE PTR [edi+22], 0
	cmp	eax, -1
	je	SHORT $LN76@MspExecute
	push	ecx
; Line 950
	jmp	SHORT $LN217@MspExecute
$LN76@MspExecute:
; Line 951
	push	0
$LN217@MspExecute:
	push	DWORD PTR _PfctValue$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	edi
	call	_MspExecuteTask
; Line 953
	mov	al, BYTE PTR _ExecuteThisRoutineInParallel$[ebp]
	add	esp, 20					; 00000014H
	mov	BYTE PTR [edi+22], al
; Line 957
	jmp	$LN192@MspExecute
$LN91@MspExecute:
; Line 958
	mov	cl, BYTE PTR [ebx]
	mov	al, cl
	shr	al, 1
	and	al, 1
	cmp	al, 1
	setne	dl
	dec	dl
	and	dl, 17					; 00000011H
	inc	dl
; Line 967
	and	cl, 1
	cmp	cl, 1
	mov	BYTE PTR _MaxStrobe$[ebp], dl
	setne	dl
	dec	dl
	and	dl, 3
	inc	dl
; Line 980
	cmp	BYTE PTR tv1079[ebp], 0
	mov	BYTE PTR _MaxRank$[ebp], dl
	je	SHORT $LN186@MspExecute
	cmp	BYTE PTR tv1079[ebp], 1
	jne	$LN192@MspExecute
	mov	dl, BYTE PTR _Channel$[ebp]
	cmp	dl, BYTE PTR _ChannelToWrite$[ebp]
	jne	$LN192@MspExecute
$LN186@MspExecute:
; Line 988
	cmp	BYTE PTR tv1084[ebp], 0
	jne	SHORT $LN191@MspExecute
	cmp	BYTE PTR _Action$[ebp], 1
	je	SHORT $LN191@MspExecute
	test	al, al
	jne	SHORT $LN191@MspExecute
	test	cl, cl
	jne	SHORT $LN191@MspExecute
; Line 989
	movzx	eax, BYTE PTR _BoxType$[ebp]
	shl	eax, 4
	mov	cl, BYTE PTR _InstancePortMapGenerated[eax+1]
	mov	BYTE PTR _NumberInstances$[ebp], cl
; Line 990
	test	cl, cl
	jne	SHORT $LN187@MspExecute
; Line 995
	mov	al, BYTE PTR _InstancePortMapGenerated[eax]
	mov	BYTE PTR _NumberInstances$[ebp], al
; Line 996
	mov	BYTE PTR _ChannelBasedOffsetDetected$[ebp], cl
; Line 998
	jmp	SHORT $LN187@MspExecute
$LN191@MspExecute:
; Line 999
	mov	BYTE PTR _NumberInstances$[ebp], 1
$LN187@MspExecute:
; Line 1006
	cmp	BYTE PTR _NumberInstances$[ebp], 255	; 000000ffH
	jne	SHORT $LN64@MspExecute
; Line 1007
	mov	BYTE PTR _NumberInstances$[ebp], 0
$LN64@MspExecute:
; Line 1012
	cmp	BYTE PTR _NumberInstances$[ebp], 0
	mov	BYTE PTR _Instance$[ebp], 0
	jbe	$LN192@MspExecute
$LL63@MspExecute:
; Line 1013
	cmp	BYTE PTR _MaxRank$[ebp], 0
	jbe	$LN62@MspExecute
	movzx	eax, BYTE PTR _MaxRank$[ebp]
	mov	DWORD PTR tv1666[ebp], OFFSET _RankToRegisterGenerated
	mov	DWORD PTR tv458[ebp], eax
$LL60@MspExecute:
; Line 1014
	cmp	BYTE PTR _MaxStrobe$[ebp], 0
	jbe	$LN59@MspExecute
	movzx	eax, BYTE PTR _MaxStrobe$[ebp]
	and	DWORD PTR tv1557[ebp], 0
	mov	DWORD PTR tv514[ebp], eax
$LL203@MspExecute:
; Line 1019
	mov	eax, DWORD PTR _RegisterAttributes2$[ebp]
	test	BYTE PTR [eax], 2
	je	SHORT $LN194@MspExecute
; Line 1020
	mov	al, BYTE PTR _InstanceToWrite$[ebp]
	mov	BYTE PTR _Instance$[ebp], al
$LN194@MspExecute:
; Line 1036
	movzx	eax, WORD PTR _RegisterOffset$[ebp]
; Line 1044
	mov	dl, BYTE PTR [ebx]
	mov	DWORD PTR _Register$[ebp], eax
	mov	eax, DWORD PTR _Mask$[ebp]
	mov	DWORD PTR _Register$[ebp+8], eax
	mov	eax, DWORD PTR _Mask$[ebp+4]
	mov	DWORD PTR _Register$[ebp+12], eax
	mov	al, dl
	shr	al, 1
	and	al, 1
	mov	BYTE PTR _Register$[ebp+16], 0
	jne	SHORT $LN51@MspExecute
	test	dl, 1
	jne	SHORT $LN51@MspExecute
; Line 1045
	mov	al, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR _ThisChannel$[ebp], al
; Line 1046
	mov	al, BYTE PTR _Instance$[ebp]
	mov	BYTE PTR _ThisInstance$[ebp], al
; Line 1047
	jmp	$LN204@MspExecute
$LN51@MspExecute:
; Line 1049
	cmp	al, 1
	jne	SHORT $LN196@MspExecute
; Line 1050
	mov	eax, DWORD PTR tv1028[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv1557[ebp]
; Line 1052
	mov	edi, DWORD PTR _MspData$[ebp]
	add	eax, eax
	movzx	ecx, BYTE PTR _FloorPlanGenerated[eax+1]
	mov	al, BYTE PTR _FloorPlanGenerated[eax]
	shl	ecx, 2
	movsx	esi, WORD PTR _StrobeToRegisterGenerated[ecx+2]
	add	DWORD PTR _Register$[ebp], esi
	mov	BYTE PTR _ThisChannel$[ebp], al
	mov	al, BYTE PTR _StrobeToRegisterGenerated[ecx]
	add	al, BYTE PTR _Instance$[ebp]
	mov	BYTE PTR _ThisInstance$[ebp], al
	jmp	SHORT $LN49@MspExecute
$LN196@MspExecute:
	mov	al, BYTE PTR _ThisInstance$[ebp]
$LN49@MspExecute:
; Line 1054
	test	dl, 1
	je	SHORT $LN48@MspExecute
; Line 1055
	mov	esi, DWORD PTR tv1666[ebp]
	movsx	ecx, WORD PTR [esi+2]
	add	DWORD PTR _Register$[ebp], ecx
; Line 1056
	mov	cl, BYTE PTR [esi]
	add	cl, BYTE PTR _Instance$[ebp]
	add	al, cl
	mov	BYTE PTR _ThisInstance$[ebp], al
$LN48@MspExecute:
; Line 1065
	movzx	edx, BYTE PTR _BoxType$[ebp]
	shl	edx, 4
	movzx	edx, BYTE PTR _InstancePortMapGenerated[edx+2]
	movzx	eax, al
	xor	cl, cl
	add	eax, edx
$LL47@MspExecute:
; Line 1066
	movzx	edx, cl
	shl	edx, 4
	movzx	edx, BYTE PTR _InstancePortMapGenerated[edx+2]
	cmp	edx, eax
	jg	SHORT $LN204@MspExecute
	inc	cl
	cmp	cl, 24					; 00000018H
	jb	SHORT $LL47@MspExecute
$LN204@MspExecute:
; Line 1076
	cmp	BYTE PTR _ChannelBasedOffsetDetected$[ebp], 0
	jne	SHORT $LN42@MspExecute
; Line 1077
	mov	BYTE PTR _ThisChannel$[ebp], 0
$LN42@MspExecute:
; Line 1082
	mov	al, BYTE PTR _Action$[ebp]
	cmp	al, 1
	je	SHORT $LN40@MspExecute
; Line 1084
	push	0
	lea	eax, DWORD PTR _Func$[ebp]
	push	eax
	lea	eax, DWORD PTR _Device$[ebp]
	push	eax
	lea	eax, DWORD PTR _Bus$[ebp]
	push	eax
	lea	eax, DWORD PTR _BaseOffset$[ebp]
	push	eax
	lea	eax, DWORD PTR _Port$[ebp]
	push	eax
	lea	eax, DWORD PTR _readValue$[ebp]
	push	eax
	push	DWORD PTR _ThisInstance$[ebp]
	push	DWORD PTR _ThisChannel$[ebp]
	push	DWORD PTR _BoxType$[ebp]
	call	_GetRegisterAccessInfo
	add	esp, 40					; 00000028H
	test	eax, eax
	jne	$LN56@MspExecute
	mov	al, BYTE PTR _Action$[ebp]
$LN40@MspExecute:
; Line 1102
	cmp	al, 5
	je	SHORT $LN36@MspExecute
	test	al, al
	je	SHORT $LN36@MspExecute
	cmp	al, 2
	je	SHORT $LN36@MspExecute
	cmp	al, 4
	jne	SHORT $LN35@MspExecute
$LN36@MspExecute:
; Line 1106
	cmp	BYTE PTR _PfctDynamic$[ebp], 1
	jne	SHORT $LN35@MspExecute
	cmp	al, 5
	je	SHORT $LL182@MspExecute
; Line 1107
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _ThisInstance$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	DWORD PTR _ThisChannel$[ebp]
	rep movsd
	push	DWORD PTR _BoxType$[ebp]
	call	_MemRegRead
	mov	DWORD PTR _NewValue$[ebp], eax
; Line 1108
	lea	eax, DWORD PTR _NewValue$[ebp]
	push	eax
	push	DWORD PTR _DynamicIndex$[ebp]
	mov	eax, DWORD PTR _MspData$[ebp]
	push	DWORD PTR _ThisChannel$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	DWORD PTR _NewValue$[ebp+4], edx
	call	_DynamicAssignmentGenerated
; Line 1109
	mov	eax, DWORD PTR _NewValue$[ebp]
	mov	edi, DWORD PTR _MspData$[ebp]
	mov	DWORD PTR _PfctValue$[ebp], eax
	mov	eax, DWORD PTR _NewValue$[ebp+4]
	mov	DWORD PTR _PfctValue$[ebp+4], eax
	mov	al, BYTE PTR _Action$[ebp]
	add	esp, 52					; 00000034H
$LN35@MspExecute:
; Line 1150
	cmp	al, 5
	jne	$LN29@MspExecute
$LL182@MspExecute:
; Line 1155
	mov	cl, BYTE PTR _Register$[ebp+16]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	cdq
	and	eax, DWORD PTR _Mask$[ebp]
	and	edx, DWORD PTR _Mask$[ebp+4]
	or	eax, edx
	jne	SHORT $LN158@MspExecute
; Line 1159
	inc	BYTE PTR _Register$[ebp+16]
	cmp	BYTE PTR _Register$[ebp+16], 64		; 00000040H
	jb	SHORT $LL182@MspExecute
$LN158@MspExecute:
; Line 1161
	movzx	eax, BYTE PTR _ChannelToWrite$[ebp]
	mov	ecx, DWORD PTR _MspData$[ebp]
	imul	eax, 542				; 0000021eH
	add	eax, DWORD PTR _PfctValue$[ebp]
	sub	esp, 24					; 00000018H
	push	6
	lea	eax, DWORD PTR [ecx+eax*8+40]
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _ThisInstance$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	DWORD PTR _ThisChannel$[ebp]
	mov	DWORD PTR tv1278[ebp], eax
	push	DWORD PTR _BoxType$[ebp]
	rep movsd
	call	_MemFieldRead
	mov	ecx, DWORD PTR tv1278[ebp]
	add	esp, 36					; 00000024H
; Line 1163
	cmp	BYTE PTR _ChannelBasedOffsetDetected$[ebp], 0
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	jne	$LN189@MspExecute
; Line 1170
	movzx	edx, BYTE PTR _ThisChannel$[ebp]
	imul	edx, 542				; 0000021eH
	add	edx, DWORD PTR _PfctValue$[ebp]
	mov	eax, ecx
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _MspData$[ebp]
	mov	DWORD PTR [ecx+edx*8+40], esi
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*8+44], eax
; Line 1171
	mov	edi, ecx
	jmp	$LN56@MspExecute
$LN29@MspExecute:
; Line 1183
	test	al, al
	je	SHORT $LN21@MspExecute
	cmp	al, 2
	je	SHORT $LN21@MspExecute
; Line 1211
	cmp	al, 4
	jne	SHORT $LN14@MspExecute
$LL13@MspExecute:
; Line 1224
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _ThisInstance$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	DWORD PTR _ThisChannel$[ebp]
	rep movsd
	push	DWORD PTR _BoxType$[ebp]
	call	_MemRegRead
	add	esp, 36					; 00000024H
	mov	DWORD PTR _readValue$[ebp], eax
	mov	DWORD PTR _readValue$[ebp+4], edx
; Line 1232
	cmp	eax, DWORD PTR _PfctValue$[ebp]
	jne	SHORT $LL13@MspExecute
	cmp	edx, DWORD PTR _PfctValue$[ebp+4]
	jne	SHORT $LL13@MspExecute
; Line 1233
	jmp	$LN189@MspExecute
$LN14@MspExecute:
	cmp	al, 1
	jne	$LN56@MspExecute
; Line 1238
	cmp	DWORD PTR _PfctValue$[ebp+4], 0
	ja	SHORT $LN200@MspExecute
	cmp	DWORD PTR _PfctValue$[ebp], 3000	; 00000bb8H
	jb	SHORT $LN8@MspExecute
$LN200@MspExecute:
; Line 1239
	mov	eax, DWORD PTR _PfctValue$[ebp]
	add	eax, 500				; 000001f4H
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	push	eax
	push	1
; Line 1240
	jmp	SHORT $LN218@MspExecute
$LN8@MspExecute:
; Line 1241
	push	DWORD PTR _PfctValue$[ebp]
	push	2
$LN218@MspExecute:
	call	_MspDelay
	pop	ecx
	pop	ecx
	jmp	SHORT $LN56@MspExecute
$LN21@MspExecute:
; Line 1196
	push	DWORD PTR _ByteEnable$[ebp]
	lea	esi, DWORD PTR _Register$[ebp]
	push	DWORD PTR _PfctValue$[ebp+4]
	push	DWORD PTR _PfctValue$[ebp]
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _ThisInstance$[ebp]
	rep movsd
	push	DWORD PTR _ThisChannel$[ebp]
	push	DWORD PTR _BoxType$[ebp]
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 1200
	cmp	BYTE PTR _Action$[ebp], 2
	jne	SHORT $LN189@MspExecute
; Line 1204
	mov	eax, DWORD PTR _Delay$[ebp]
	cmp	eax, 3000				; 00000bb8H
	jb	SHORT $LN17@MspExecute
; Line 1205
	add	eax, 500				; 000001f4H
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	push	eax
	push	1
; Line 1206
	jmp	SHORT $LN219@MspExecute
$LN17@MspExecute:
; Line 1207
	push	eax
	push	2
$LN219@MspExecute:
	call	_MspDelay
	pop	ecx
	pop	ecx
$LN189@MspExecute:
; Line 1206
	mov	edi, DWORD PTR _MspData$[ebp]
$LN56@MspExecute:
; Line 1014
	inc	DWORD PTR tv1557[ebp]
	dec	DWORD PTR tv514[ebp]
	jne	$LL203@MspExecute
$LN59@MspExecute:
; Line 1013
	add	DWORD PTR tv1666[ebp], 4
	dec	DWORD PTR tv458[ebp]
	jne	$LL60@MspExecute
$LN62@MspExecute:
; Line 1012
	inc	BYTE PTR _Instance$[ebp]
	mov	al, BYTE PTR _Instance$[ebp]
	cmp	al, BYTE PTR _NumberInstances$[ebp]
	jb	$LL63@MspExecute
$LN192@MspExecute:
; Line 1266
	movzx	ecx, WORD PTR _CurrentPtr$[ebp]
	movzx	eax, BYTE PTR _NumStrings$[ebp]
	add	ecx, ebx
	lea	ebx, DWORD PTR [ecx+eax]
$LN211@MspExecute:
	mov	al, BYTE PTR _Channel$[ebp]
	xor	ecx, ecx
	inc	ecx
	test	BYTE PTR [ebx], 128			; 00000080H
	mov	BYTE PTR _ChannelToWrite$[ebp], al
	lea	eax, DWORD PTR _Zero$[ebp]
	mov	DWORD PTR _CurrentPtr$[ebp], ecx
	mov	DWORD PTR _RegisterAttributes2$[ebp], eax
	mov	BYTE PTR _Zero$[ebp], 0
	mov	DWORD PTR _ConditionalExecution$[ebp], ecx
	mov	BYTE PTR _InstanceToWrite$[ebp], 0
	mov	BYTE PTR _ChannelBasedOffsetDetected$[ebp], 1
	je	$LL121@MspExecute
; Line 1269
	cmp	BYTE PTR [edi+22], 0
	je	SHORT $LN160@MspExecute
$LN135@MspExecute:
; Line 622
	inc	BYTE PTR _Channel$[ebp]
$LN209@MspExecute:
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL202@MspExecute
$LN160@MspExecute:
; Line 1278
	mov	al, BYTE PTR _MsgLevel$[ebp]
	mov	BYTE PTR [edi+20], al
; Line 1281
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	add	ebp, 100				; 00000064H
	leave
	ret	0
_MspExecuteTask ENDP
_TEXT	ENDS
PUBLIC	_MspInit
; Function compile flags: /Ogspy
;	COMDAT _MspInit
_TEXT	SEGMENT
_MspData$ = 8						; size = 4
_InputStructure$ = 12					; size = 4
_FunctionPtr$ = 16					; size = 4
_MspInit PROC						; COMDAT
; Line 1289
	push	esi
; Line 1290
	mov	esi, DWORD PTR _MspData$[esp]
	cmp	BYTE PTR [esi+8712], 0
; Line 1292
	jne	SHORT $LN6@MspInit
; Line 1294
	push	esi
	call	_McEnableHpet
; Line 1295
	push	DWORD PTR _InputStructure$[esp+4]
	push	esi
	call	DWORD PTR _FunctionPtr$[esp+12]
	add	esp, 12					; 0000000cH
; Line 1296
	movd	mm2, DWORD PTR _MspData$[esp]
$LN6@MspInit:
; Line 1298
	xor	eax, eax
	pop	esi
; Line 1299
	ret	0
_MspInit ENDP
_TEXT	ENDS
PUBLIC	_FillUpMspDataStructure
; Function compile flags: /Ogspy
;	COMDAT _FillUpMspDataStructure
_TEXT	SEGMENT
_MspData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Enabled$ = 16						; size = 1
_CurrentPlatform$ = 20					; size = 2
_CurrentFrequency$ = 24					; size = 2
_CurrentTechnology$ = 28				; size = 2
_DebugMsgLevel$ = 32					; size = 1
_ExecuteThisRoutineInParallel$ = 36			; size = 1
_CurrentBlueprint$ = 40					; size = 1
_EcBase$ = 44						; size = 4
_FillUpMspDataStructure PROC				; COMDAT
; Line 1314
	push	ebp
	mov	ebp, esp
; Line 1315
	movzx	ecx, BYTE PTR _Channel$[ebp]
	mov	eax, DWORD PTR _MspData$[ebp]
	mov	dl, BYTE PTR _Enabled$[ebp]
	mov	BYTE PTR [ecx+eax+23], dl
; Line 1316
	mov	dx, WORD PTR _CurrentPlatform$[ebp]
	mov	WORD PTR [eax+ecx*2+4], dx
; Line 1317
	mov	dx, WORD PTR _CurrentFrequency$[ebp]
	mov	WORD PTR [eax+ecx*2+8], dx
; Line 1318
	mov	dx, WORD PTR _CurrentTechnology$[ebp]
	mov	WORD PTR [eax+ecx*2+16], dx
; Line 1319
	mov	cl, BYTE PTR _DebugMsgLevel$[ebp]
	mov	BYTE PTR [eax+20], cl
; Line 1320
	mov	cl, BYTE PTR _ExecuteThisRoutineInParallel$[ebp]
	mov	BYTE PTR [eax+22], cl
; Line 1321
	mov	cl, BYTE PTR _CurrentBlueprint$[ebp]
	mov	BYTE PTR [eax+27], cl
; Line 1322
	mov	ecx, DWORD PTR _EcBase$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1323
	pop	ebp
	ret	0
_FillUpMspDataStructure ENDP
_TEXT	ENDS
PUBLIC	_LockMspDataStructure
; Function compile flags: /Ogspy
;	COMDAT _LockMspDataStructure
_TEXT	SEGMENT
_MspData$30201 = -4					; size = 4
_LockMspDataStructure PROC				; COMDAT
; Line 1327
	push	ecx
; Line 1332
	movd	DWORD PTR _MspData$30201[esp+4], mm2
; Line 1339
	mov	eax, DWORD PTR _MspData$30201[esp+4]
	mov	BYTE PTR [eax+8712], 1
; Line 1359
	pop	ecx
	ret	0
_LockMspDataStructure ENDP
_TEXT	ENDS
END
