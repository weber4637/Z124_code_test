; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectIndependent\Source\PassGate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_DATA	ENDS
PUBLIC	_AntiLogBase2
; Function compile flags: /Ogspy
;	COMDAT _AntiLogBase2
_TEXT	SEGMENT
_num$ = 8						; size = 4
_AntiLogBase2 PROC					; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectindependent\source\passgate.c
; Line 29
	mov	ecx, DWORD PTR _num$[esp-4]
	xor	al, al
	test	ecx, ecx
	jne	SHORT $LN8@AntiLogBas
; Line 30
	or	al, 255					; 000000ffH
; Line 38
	ret	0
$LL2@AntiLogBas:
; Line 34
	inc	al
$LN8@AntiLogBas:
; Line 33
	shr	ecx, 1
	jne	SHORT $LL2@AntiLogBas
; Line 38
	ret	0
_AntiLogBase2 ENDP
_TEXT	ENDS
PUBLIC	_InitInternalCommonVariables
EXTRN	_GetDimmGeometry:PROC
; Function compile flags: /Ogspy
;	COMDAT _InitInternalCommonVariables
_TEXT	SEGMENT
tv360 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_InitInternalCommonVariables PROC			; COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 51
	push	DWORD PTR _Channel$[ebp]
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	esi
	call	_GetDimmGeometry
	pop	ecx
	pop	ecx
; Line 52
	test	eax, eax
; Line 53
	jne	$LN1@InitIntern
; Line 58
	mov	WORD PTR [esi+70873], ax
; Line 62
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	al, BYTE PTR [eax+esi+31272]
	cmp	al, 3
	jbe	SHORT $LN27@InitIntern
	cmp	al, 7
	jne	SHORT $LN1@InitIntern
; Line 131
	mov	eax, 128				; 00000080H
	mov	WORD PTR [esi+70871], ax
; Line 135
	movzx	eax, BYTE PTR [esi+70850]
	dec	eax
	mov	BYTE PTR [esi+70863], 10		; 0000000aH
	mov	BYTE PTR [esi+70864], 2
	mov	BYTE PTR [esi+70865], 2
	je	SHORT $LN11@InitIntern
	dec	eax
	je	SHORT $LN10@InitIntern
	dec	eax
	je	SHORT $LN9@InitIntern
	dec	eax
	jne	SHORT $LN12@InitIntern
; Line 158
	mov	BYTE PTR [esi+70866], 17		; 00000011H
; Line 159
	jmp	SHORT $LN12@InitIntern
$LN9@InitIntern:
; Line 152
	mov	BYTE PTR [esi+70866], 16		; 00000010H
; Line 153
	jmp	SHORT $LN12@InitIntern
$LN10@InitIntern:
; Line 146
	mov	BYTE PTR [esi+70866], 15		; 0000000fH
; Line 147
	jmp	SHORT $LN12@InitIntern
$LN11@InitIntern:
; Line 140
	mov	BYTE PTR [esi+70866], 14		; 0000000eH
$LN12@InitIntern:
; Line 166
	movzx	eax, BYTE PTR [esi+70849]
	sub	eax, 0
	je	SHORT $LN4@InitIntern
$LN33@InitIntern:
	dec	eax
	je	$LN18@InitIntern
$LN1@InitIntern:
; Line 186
	push	29					; 0000001dH
	pop	eax
$LN31@InitIntern:
	pop	esi
; Line 206
	leave
	ret	0
$LN4@InitIntern:
; Line 171
	inc	BYTE PTR [esi+70866]
; Line 183
	jmp	$LN18@InitIntern
$LN27@InitIntern:
; Line 70
	mov	eax, 128				; 00000080H
	mov	WORD PTR [esi+70871], ax
; Line 74
	movzx	eax, BYTE PTR [esi+70850]
	xor	ecx, ecx
	sub	eax, ecx
	mov	BYTE PTR [esi+70863], 10		; 0000000aH
	mov	BYTE PTR [esi+70864], 3
	mov	BYTE PTR [esi+70865], cl
	je	SHORT $LN24@InitIntern
	dec	eax
	je	SHORT $LN23@InitIntern
	dec	eax
	je	SHORT $LN22@InitIntern
	dec	eax
	jne	SHORT $LN25@InitIntern
; Line 99
	mov	eax, 256				; 00000100H
	mov	BYTE PTR [esi+70863], 11		; 0000000bH
	mov	BYTE PTR [esi+70866], 16		; 00000010H
	mov	WORD PTR [esi+70871], ax
; Line 100
	jmp	SHORT $LN25@InitIntern
$LN22@InitIntern:
; Line 91
	mov	BYTE PTR [esi+70866], 16		; 00000010H
; Line 92
	jmp	SHORT $LN25@InitIntern
$LN23@InitIntern:
; Line 85
	mov	BYTE PTR [esi+70866], 15		; 0000000fH
; Line 86
	jmp	SHORT $LN25@InitIntern
$LN24@InitIntern:
; Line 79
	mov	BYTE PTR [esi+70866], 14		; 0000000eH
$LN25@InitIntern:
; Line 107
	movzx	eax, BYTE PTR [esi+70849]
	sub	eax, ecx
; Line 122
	jne	$LN33@InitIntern
	inc	BYTE PTR [esi+70863]
	shl	WORD PTR [esi+70871], 2
$LN18@InitIntern:
; Line 190
	xor	eax, eax
	inc	eax
; Line 192
	movzx	edx, BYTE PTR [esi+70840]
	push	ebx
	mov	bl, BYTE PTR [esi+70866]
	push	edi
	movzx	edi, bl
	mov	ecx, edi
	shl	eax, cl
	mov	cl, BYTE PTR [esi+70865]
	movzx	ecx, cl
	dec	eax
	mov	DWORD PTR [esi+70855], eax
	mov	al, BYTE PTR [esi+70864]
	mov	DWORD PTR tv360[ebp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv360[ebp]
	add	eax, edi
	add	ecx, eax
	xor	eax, eax
	inc	eax
	shl	eax, cl
	lea	ecx, DWORD PTR [edx-1]
	not	ecx
; Line 199
	push	edx
	dec	eax
	and	eax, ecx
	mov	DWORD PTR [esi+70859], eax
	mov	al, BYTE PTR [esi+70863]
	add	al, 3
	mov	BYTE PTR [esi+70868], al
	add	al, BYTE PTR [esi+70865]
	mov	BYTE PTR [esi+70867], al
	add	al, BYTE PTR [esi+70864]
	mov	BYTE PTR [esi+70869], al
	add	al, bl
	mov	BYTE PTR [esi+70870], al
	call	_AntiLogBase2
	pop	ecx
	pop	edi
	pop	ebx
	mov	ecx, eax
	shl	WORD PTR [esi+70871], cl
; Line 205
	xor	eax, eax
	jmp	$LN31@InitIntern
_InitInternalCommonVariables ENDP
_TEXT	ENDS
PUBLIC	_GetRowBankMapping
; Function compile flags: /Ogspy
;	COMDAT _GetRowBankMapping
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_RowBankTracker$ = 16					; size = 4
_Row$ = 20						; size = 4
_Bank$ = 24						; size = 4
_BankGroup$ = 28					; size = 4
_GetRowBankMapping PROC					; COMDAT
; Line 228
	push	ebp
	mov	ebp, esp
; Line 230
	mov	edx, DWORD PTR _MrcData$[ebp]
	push	esi
	mov	esi, DWORD PTR _BankGroup$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN3@GetRowBank
	mov	cl, BYTE PTR [edx+70865]
	test	cl, cl
	je	SHORT $LN3@GetRowBank
; Line 231
	mov	al, 1
	shl	al, cl
	dec	al
	and	al, BYTE PTR _RowBankTracker$[ebp]
	mov	BYTE PTR [esi], al
$LN3@GetRowBank:
; Line 233
	mov	esi, DWORD PTR _Bank$[ebp]
	test	esi, esi
	je	SHORT $LN2@GetRowBank
; Line 234
	movzx	eax, BYTE PTR [edx+70865]
	movzx	ecx, BYTE PTR [edx+70864]
	add	ecx, eax
	mov	al, 1
	shl	al, cl
	dec	al
	and	al, BYTE PTR _RowBankTracker$[ebp]
	mov	BYTE PTR [esi], al
; Line 235
	mov	cl, BYTE PTR [edx+70865]
	shr	al, cl
	mov	BYTE PTR [esi], al
$LN2@GetRowBank:
; Line 237
	mov	edi, DWORD PTR _Row$[ebp]
	test	edi, edi
	je	SHORT $LN1@GetRowBank
; Line 238
	movzx	eax, BYTE PTR [edx+70865]
	movzx	ecx, BYTE PTR [edx+70864]
	mov	esi, DWORD PTR [edx+70859]
	and	esi, DWORD PTR _RowBankTracker$[ebp]
	add	ecx, eax
	shr	esi, cl
	mov	DWORD PTR [edi], esi
; Line 239
	mov	eax, DWORD PTR [edx+70855]
	and	eax, esi
	mov	DWORD PTR [edi], eax
$LN1@GetRowBank:
	pop	edi
; Line 242
	xor	eax, eax
	pop	esi
; Line 243
	pop	ebp
	ret	0
_GetRowBankMapping ENDP
_TEXT	ENDS
PUBLIC	_ToggleDramDimmAddress
; Function compile flags: /Ogspy
;	COMDAT _ToggleDramDimmAddress
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Address$ = 12						; size = 4
_Dimm$ = 16						; size = 1
_ToggleDramDimmAddress PROC				; COMDAT
; Line 267
	mov	ecx, DWORD PTR _Address$[esp-4]
	mov	eax, ecx
; Line 268
	test	cl, 8
	je	SHORT $LN1@ToggleDram
	movzx	edx, BYTE PTR _Dimm$[esp-4]
	push	esi
	mov	esi, DWORD PTR _MrcData$[esp]
	cmp	BYTE PTR [edx+esi+70851], 0
	pop	esi
	je	SHORT $LN1@ToggleDram
; Line 270
	not	eax
	xor	eax, ecx
	and	eax, 6
	xor	eax, ecx
$LN1@ToggleDram:
; Line 274
	ret	0
_ToggleDramDimmAddress ENDP
_TEXT	ENDS
PUBLIC	_GetCompositeAddress
; Function compile flags: /Ogspy
;	COMDAT _GetCompositeAddress
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Dimm$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Row$ = 20						; size = 4
_Bank$ = 24						; size = 1
_BankGroup$ = 28					; size = 1
_GetCompositeAddress PROC				; COMDAT
; Line 285
	push	ebp
	mov	ebp, esp
; Line 288
	mov	edx, DWORD PTR _MrcData$[ebp]
	mov	cl, BYTE PTR [edx+70867]
	push	esi
	movzx	esi, BYTE PTR _Bank$[ebp]
	shl	esi, cl
; Line 289
	cmp	BYTE PTR [edx+70865], 0
	push	edi
	je	SHORT $LN1@GetComposi
; Line 290
	movzx	eax, BYTE PTR _BankGroup$[ebp]
	mov	cl, BYTE PTR [edx+70868]
	shl	eax, cl
	or	esi, eax
$LN1@GetComposi:
; Line 295
	movzx	eax, BYTE PTR _Dimm$[ebp]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	mov	edi, DWORD PTR _Row$[ebp]
	add	eax, eax
	or	eax, ecx
	mov	cl, BYTE PTR [edx+70870]
	shl	eax, cl
	mov	cl, BYTE PTR [edx+70869]
	shl	edi, cl
	or	eax, edi
	pop	edi
	or	eax, esi
	pop	esi
; Line 296
	pop	ebp
	ret	0
_GetCompositeAddress ENDP
_TEXT	ENDS
PUBLIC	_AddressSetup
EXTRN	_MirrorAddrBitsPassGate:PROC
; Function compile flags: /Ogspy
;	COMDAT _AddressSetup
_TEXT	SEGMENT
_CpgcVictimAddress$ = -16				; size = 8
_RowDimmPlus1$ = -12					; size = 4
_Row$ = -8						; size = 4
_Bank$ = -4						; size = 1
_BankGroup$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Dimm$ = 16						; size = 1
_Rank$ = 20						; size = 1
_RowBankTracker$ = 24					; size = 4
_AddressSetup PROC					; COMDAT
; Line 321
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 345
	mov	edi, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR _BankGroup$[ebp]
	push	eax
	lea	eax, DWORD PTR _Bank$[ebp]
	push	eax
	lea	eax, DWORD PTR _Row$[ebp]
	push	eax
	push	DWORD PTR _RowBankTracker$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_GetRowBankMapping
; Line 347
	movzx	eax, BYTE PTR _Dimm$[ebp]
	lea	ebx, DWORD PTR [eax+edi+70853]
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [ebx], 1
	jne	SHORT $LN4@AddressSet
	movzx	eax, BYTE PTR _Rank$[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN8@AddressSet
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN8@AddressSet:
	je	SHORT $LN4@AddressSet
; Line 348
	push	DWORD PTR _Row$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_MirrorAddrBitsPassGate
	add	esp, 12					; 0000000cH
; Line 349
	jmp	SHORT $LN3@AddressSet
$LN4@AddressSet:
; Line 350
	mov	eax, DWORD PTR _Row$[ebp]
$LN3@AddressSet:
; Line 355
	push	DWORD PTR _Dimm$[ebp]
	push	eax
	push	edi
	call	_ToggleDramDimmAddress
; Line 364
	push	DWORD PTR _Dimm$[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR [edi+70855]
	lea	ecx, DWORD PTR [esi+1]
	and	ecx, eax
	push	ecx
	push	edi
	call	_ToggleDramDimmAddress
; Line 365
	push	DWORD PTR _Dimm$[ebp]
	dec	esi
	and	esi, DWORD PTR [edi+70855]
	mov	DWORD PTR _RowDimmPlus1$[ebp], eax
	push	esi
	push	edi
	call	_ToggleDramDimmAddress
	add	esp, 36					; 00000024H
; Line 369
	cmp	BYTE PTR [ebx], 1
	mov	esi, eax
	jne	SHORT $LN7@AddressSet
	movzx	eax, BYTE PTR _Rank$[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN9@AddressSet
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN9@AddressSet:
	je	SHORT $LN7@AddressSet
; Line 370
	push	DWORD PTR _RowDimmPlus1$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_MirrorAddrBitsPassGate
; Line 371
	push	esi
	push	DWORD PTR _Channel$[ebp]
	mov	ebx, eax
	push	edi
	call	_MirrorAddrBitsPassGate
	add	esp, 24					; 00000018H
	mov	esi, eax
; Line 372
	jmp	SHORT $LN1@AddressSet
$LN7@AddressSet:
; Line 373
	mov	ebx, DWORD PTR _RowDimmPlus1$[ebp]
$LN1@AddressSet:
; Line 378
	push	DWORD PTR _BankGroup$[ebp]
	push	DWORD PTR _Bank$[ebp]
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	edi
	call	_GetCompositeAddress
; Line 379
	push	DWORD PTR _BankGroup$[ebp]
	mov	ebx, eax
	push	DWORD PTR _Bank$[ebp]
	push	esi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	edi
	call	_GetCompositeAddress
	push	DWORD PTR _BankGroup$[ebp]
	mov	DWORD PTR _CpgcVictimAddress$[ebp+4], eax
	push	DWORD PTR _Bank$[ebp]
; Line 381
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	DWORD PTR _Row$[ebp]
	imul	eax, 4336				; 000010f0H
	push	DWORD PTR _Rank$[ebp]
	lea	esi, DWORD PTR [eax+edi]
	push	DWORD PTR _Dimm$[ebp]
	push	edi
	call	_GetCompositeAddress
; Line 383
	mov	ecx, DWORD PTR _CpgcVictimAddress$[ebp+4]
	add	esp, 72					; 00000048H
	mov	DWORD PTR [esi+59086], eax
	xor	eax, eax
	pop	edi
	mov	DWORD PTR [esi+59038], ebx
	mov	DWORD PTR [esi+59090], eax
	mov	DWORD PTR [esi+59042], eax
	mov	DWORD PTR [esi+59046], ecx
	mov	DWORD PTR [esi+59050], eax
	pop	esi
	pop	ebx
; Line 394
	leave
	ret	0
_AddressSetup ENDP
_TEXT	ENDS
PUBLIC	_AgressorVictimWrites
EXTRN	_CpgcExecuteSingleTest:PROC
EXTRN	_MmrcExecuteTask:PROC
; Function compile flags: /Ogspy
;	COMDAT _AgressorVictimWrites
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_CpgcErrorsDetected$ = 12				; size = 4
_AgressorVictimWrites PROC				; COMDAT
; Line 408
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 419
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	movzx	eax, bl
	push	edi
	imul	eax, 4336				; 000010f0H
	mov	edi, DWORD PTR _MrcData$[ebp]
	and	DWORD PTR [eax+edi+59010], 0
; Line 423
	push	ebx
	mov	esi, 65535				; 0000ffffH
	push	esi
	push	16335					; 00003fcfH
	push	edi
	mov	DWORD PTR [eax+edi+59006], 1
	call	_MmrcExecuteTask
; Line 427
	xor	eax, eax
	push	eax
	push	eax
	lea	ecx, DWORD PTR _CpgcErrorsDetected$[ebp]
	push	ecx
	push	eax
	push	ebx
	push	edi
	call	_CpgcExecuteSingleTest
; Line 433
	push	ebx
	push	esi
	push	16499					; 00004073H
	push	edi
	call	_MmrcExecuteTask
; Line 453
	push	ebx
	push	esi
	push	16411					; 0000401bH
	push	edi
	call	_MmrcExecuteTask
	add	esp, 72					; 00000048H
; Line 454
	push	ebx
	push	esi
	push	16449					; 00004041H
	push	edi
	call	_MmrcExecuteTask
; Line 458
	xor	eax, eax
	push	eax
	push	eax
	lea	ecx, DWORD PTR _CpgcErrorsDetected$[ebp]
	push	ecx
	push	eax
	push	ebx
	push	edi
	call	_CpgcExecuteSingleTest
; Line 464
	push	ebx
	push	esi
	push	16499					; 00004073H
	push	edi
	call	_MmrcExecuteTask
	add	esp, 56					; 00000038H
	pop	edi
	pop	esi
; Line 481
	xor	eax, eax
	pop	ebx
; Line 482
	pop	ebp
	ret	0
_AgressorVictimWrites ENDP
_TEXT	ENDS
PUBLIC	_CharacterizationReads
EXTRN	_DelayForXActivates:PROC
; Function compile flags: /Ogspy
;	COMDAT _CharacterizationReads
_TEXT	SEGMENT
_ReadCounter$ = -12					; size = 4
_WriteCounter$ = -8					; size = 4
_ActivateCounter$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_ActivationsCount$ = 16					; size = 4
_RaplCounter$ = 20					; size = 4
_CharacterizationReads PROC				; COMDAT
; Line 500
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 512
	movzx	ecx, BYTE PTR _Channel$[ebp]
	push	ebx
	imul	ecx, 4336				; 000010f0H
	push	esi
	push	edi
; Line 514
	push	DWORD PTR _Channel$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	xor	eax, eax
	mov	esi, 65535				; 0000ffffH
	push	esi
	lea	ebx, DWORD PTR [ecx+edi]
	push	16430					; 0000402eH
	push	edi
	mov	DWORD PTR _ActivateCounter$[ebp], eax
	mov	DWORD PTR _ReadCounter$[ebp], eax
	mov	DWORD PTR _WriteCounter$[ebp], eax
	mov	DWORD PTR [ebx+59006], eax
	mov	DWORD PTR [ebx+59010], eax
	call	_MmrcExecuteTask
; Line 515
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	16449					; 00004041H
	push	edi
	call	_MmrcExecuteTask
; Line 521
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	16518					; 00004086H
	push	edi
	call	_MmrcExecuteTask
	add	esp, 48					; 00000030H
; Line 525
	test	BYTE PTR [edi+71008], 1
	jne	SHORT $LN7@Characteri
; Line 526
	lea	eax, DWORD PTR _ActivateCounter$[ebp]
	push	eax
	lea	eax, DWORD PTR _WriteCounter$[ebp]
	push	eax
	lea	eax, DWORD PTR _ReadCounter$[ebp]
	push	eax
	push	DWORD PTR _ActivationsCount$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_DelayForXActivates
	add	esp, 24					; 00000018H
$LN7@Characteri:
; Line 531
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	16532					; 00004094H
	push	edi
	call	_MmrcExecuteTask
; Line 542
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	16558					; 000040aeH
	push	edi
	call	_MmrcExecuteTask
; Line 544
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	16499					; 00004073H
	push	edi
	call	_MmrcExecuteTask
; Line 545
	mov	eax, DWORD PTR [ebx+58966]
; Line 552
	movzx	ecx, BYTE PTR [edi+70840]
	add	eax, DWORD PTR _ActivateCounter$[ebp]
	xor	edx, edx
	div	ecx
	mov	ecx, DWORD PTR _RaplCounter$[ebp]
	add	esp, 48					; 00000030H
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR [ecx], eax
; Line 563
	xor	eax, eax
; Line 564
	leave
	ret	0
_CharacterizationReads ENDP
_TEXT	ENDS
PUBLIC	_VictimReads
; Function compile flags: /Ogspy
;	COMDAT _VictimReads
_TEXT	SEGMENT
_CpgcErrorsDetected$ = 8				; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_ErrorPassGateCorruption$ = 16				; size = 4
_VictimReads PROC					; COMDAT
; Line 580
	push	ebp
	mov	ebp, esp
; Line 591
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	ebx
	imul	eax, 4336				; 000010f0H
	push	esi
	push	edi
; Line 595
	push	DWORD PTR _Channel$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	ebx, 65535				; 0000ffffH
	push	ebx
	lea	esi, DWORD PTR [eax+edi]
	and	DWORD PTR [esi+59006], 0
	and	DWORD PTR [esi+59010], 0
	push	16335					; 00003fcfH
	push	edi
	call	_MmrcExecuteTask
; Line 599
	xor	eax, eax
	push	eax
	push	eax
	lea	ecx, DWORD PTR _CpgcErrorsDetected$[ebp]
	push	ecx
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_CpgcExecuteSingleTest
	add	esp, 40					; 00000028H
; Line 601
	cmp	DWORD PTR _CpgcErrorsDetected$[ebp], 0
	je	SHORT $LN4@VictimRead
; Line 603
	mov	eax, DWORD PTR _ErrorPassGateCorruption$[ebp]
	mov	BYTE PTR [eax], 1
$LN4@VictimRead:
; Line 606
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	16499					; 00004073H
	push	edi
	call	_MmrcExecuteTask
; Line 611
	movzx	eax, BYTE PTR [edi+70840]
	add	eax, eax
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [esi+58966], eax
	je	SHORT $LN3@VictimRead
	cmp	BYTE PTR [edi+70808], 0
	jne	SHORT $LN3@VictimRead
; Line 613
	mov	eax, DWORD PTR _ErrorPassGateCorruption$[ebp]
	mov	BYTE PTR [eax], 1
$LN3@VictimRead:
	pop	edi
	pop	esi
; Line 622
	xor	eax, eax
	pop	ebx
; Line 623
	pop	ebp
	ret	0
_VictimReads ENDP
_TEXT	ENDS
PUBLIC	_PassGateTest
EXTRN	_PassGateTestExitHooks:PROC
EXTRN	_MmrcMemset:PROC
EXTRN	_PassGateTestEntryHooks:PROC
; Function compile flags: /Ogspy
;	COMDAT _PassGateTest
_TEXT	SEGMENT
_PreviousErrorList$ = -488				; size = 200
_CurrentErrorList$ = -288				; size = 200
_FinalActivationNumber$ = -88				; size = 16
_ActivationNumberAtFailure$ = -72			; size = 4
_Row$ = -68						; size = 4
tv930 = -64						; size = 4
tv772 = -60						; size = 4
_Dimm$ = -56						; size = 1
_MaxRowBank$ = -52					; size = 4
tv824 = -48						; size = 4
tv462 = -44						; size = 4
_Rank$ = -40						; size = 1
_MontecarloDecrementValue$ = -36			; size = 4
_MinRowBank$ = -32					; size = 4
tv838 = -28						; size = 4
_Bank$ = -21						; size = 1
_CurrentNumberOfActivations$ = -20			; size = 4
_ErrorPassGateCorruption$ = -13				; size = 1
_RowBankTracker$ = -12					; size = 4
_SavedOneValuePerIteration$ = -6			; size = 1
_BankGroup$ = -6					; size = 1
_MonteCarloDone$ = -5					; size = 1
_PreviousErrorListPtr$ = -4				; size = 1
_PreviousErrorListFull$ = -3				; size = 1
_AllMemorySwept$ = -2					; size = 1
_CurrentErrorListPtr$ = -1				; size = 1
_MrcData$ = 8						; size = 4
_CurrentMaxFailures$ = 11				; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_PassGateTest PROC					; COMDAT
; Line 645
	push	ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
; Line 683
	and	DWORD PTR _Row$[ebp], 0
	push	ebx
; Line 685
	mov	ebx, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [ebx+70807], 0
	mov	BYTE PTR _Bank$[ebp], 0
	jne	SHORT $LN71@PassGateTe
; Line 687
	xor	eax, eax
	jmp	$LN72@PassGateTe
$LN71@PassGateTe:
	push	esi
; Line 689
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_InitInternalCommonVariables
; Line 690
	push	DWORD PTR _Channel$[ebp]
	mov	esi, eax
	push	ebx
	call	_PassGateTestEntryHooks
	add	esp, 16					; 00000010H
	or	esi, eax
; Line 691
	je	SHORT $LN70@PassGateTe
; Line 692
	mov	eax, esi
	jmp	$LN103@PassGateTe
$LN70@PassGateTe:
	push	edi
; Line 696
	movzx	edi, BYTE PTR _Channel$[ebp]
	shl	edi, 2
	mov	BYTE PTR _Dimm$[ebp], 0
	lea	esi, DWORD PTR _FinalActivationNumber$[ebp]
	mov	DWORD PTR tv930[ebp], edi
	lea	eax, DWORD PTR [ebx+edi+55438]
$LL69@PassGateTe:
; Line 697
	and	DWORD PTR tv772[ebp], 0
	mov	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR tv824[ebp], eax
	mov	DWORD PTR tv838[ebp], esi
$LL102@PassGateTe:
; Line 698
	mov	eax, DWORD PTR tv838[ebp]
	and	DWORD PTR [eax], 0
; Line 702
	mov	eax, DWORD PTR tv824[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN65@PassGateTe
; Line 705
	mov	eax, DWORD PTR tv772[ebp]
	add	eax, edi
	cmp	BYTE PTR [eax+ebx+70841], 0
	je	$LN65@PassGateTe
; Line 723
	cmp	BYTE PTR [ebx+70808], 0
	mov	al, BYTE PTR [ebx+70831]
	mov	BYTE PTR _CurrentMaxFailures$[ebp], al
	je	SHORT $LN61@PassGateTe
	lea	eax, DWORD PTR [ebx+70814]
	cmp	DWORD PTR [eax], 2
	ja	SHORT $LN61@PassGateTe
; Line 729
	mov	DWORD PTR [eax], 3
$LN61@PassGateTe:
; Line 766
	mov	edx, DWORD PTR [ebx+70859]
	mov	eax, DWORD PTR [ebx+70826]
; Line 767
	mov	ecx, DWORD PTR [ebx+70822]
	and	eax, edx
	and	ecx, edx
; Line 772
	cmp	BYTE PTR [ebx+70821], 0
	mov	DWORD PTR tv462[ebp], edx
	mov	DWORD PTR _MaxRowBank$[ebp], eax
	mov	DWORD PTR _MinRowBank$[ebp], ecx
	je	SHORT $LN58@PassGateTe
	cmp	eax, ecx
	ja	SHORT $LN101@PassGateTe
$LN58@PassGateTe:
; Line 774
	and	DWORD PTR _MinRowBank$[ebp], 0
	mov	DWORD PTR _MaxRowBank$[ebp], edx
$LN101@PassGateTe:
; Line 779
	cmp	BYTE PTR [ebx+70809], 1
; Line 783
	mov	eax, DWORD PTR _MaxRowBank$[ebp]
	je	SHORT $LN104@PassGateTe
; Line 788
	mov	eax, DWORD PTR _MinRowBank$[ebp]
$LN104@PassGateTe:
; Line 791
	cmp	BYTE PTR [ebx+70830], 0
	mov	DWORD PTR _RowBankTracker$[ebp], eax
	je	SHORT $LN55@PassGateTe
; Line 792
	mov	eax, DWORD PTR [ebx+70832]
	mov	DWORD PTR _CurrentNumberOfActivations$[ebp], eax
; Line 793
	mov	eax, DWORD PTR [ebx+70836]
	mov	DWORD PTR _MontecarloDecrementValue$[ebp], eax
; Line 794
	jmp	SHORT $LN54@PassGateTe
$LN55@PassGateTe:
; Line 795
	mov	eax, DWORD PTR [ebx+70810]
; Line 796
	and	DWORD PTR _MontecarloDecrementValue$[ebp], 0
	mov	DWORD PTR _CurrentNumberOfActivations$[ebp], eax
$LN54@PassGateTe:
; Line 801
	push	200					; 000000c8H
	lea	eax, DWORD PTR _PreviousErrorList$[ebp]
	push	-1
	push	eax
	mov	BYTE PTR _PreviousErrorListFull$[ebp], 0
	mov	BYTE PTR _AllMemorySwept$[ebp], 0
	call	_MmrcMemset
	mov	edi, DWORD PTR _CurrentNumberOfActivations$[ebp]
	add	esp, 12					; 0000000cH
$LL53@PassGateTe:
; Line 804
	cmp	BYTE PTR [ebx+70830], 0
	je	SHORT $LN48@PassGateTe
	cmp	BYTE PTR [ebx+70821], 0
	je	SHORT $LN48@PassGateTe
; Line 810
	cmp	BYTE PTR [ebx+70809], 1
; Line 811
	mov	eax, DWORD PTR [ebx+70859]
	jne	SHORT $LN49@PassGateTe
	and	eax, DWORD PTR _MaxRowBank$[ebp]
; Line 812
	jmp	SHORT $LN105@PassGateTe
$LN49@PassGateTe:
; Line 813
	and	eax, DWORD PTR _MinRowBank$[ebp]
$LN105@PassGateTe:
	mov	DWORD PTR _RowBankTracker$[ebp], eax
$LN48@PassGateTe:
; Line 818
	mov	eax, DWORD PTR tv838[ebp]
; Line 822
	push	200					; 000000c8H
	mov	DWORD PTR [eax], edi
	lea	eax, DWORD PTR _CurrentErrorList$[ebp]
	push	-1
	push	eax
	mov	BYTE PTR _MonteCarloDone$[ebp], 0
	mov	BYTE PTR _PreviousErrorListPtr$[ebp], 0
	mov	BYTE PTR _CurrentErrorListPtr$[ebp], 0
	call	_MmrcMemset
	add	esp, 12					; 0000000cH
$LL47@PassGateTe:
; Line 825
	cmp	BYTE PTR [ebx+70830], 0
	je	SHORT $LN44@PassGateTe
	cmp	BYTE PTR _PreviousErrorListFull$[ebp], 0
	je	SHORT $LN44@PassGateTe
	mov	al, BYTE PTR _PreviousErrorListPtr$[ebp]
	cmp	al, BYTE PTR _CurrentMaxFailures$[ebp]
	jae	SHORT $LN44@PassGateTe
; Line 826
	movzx	ecx, al
	mov	ecx, DWORD PTR _PreviousErrorList$[ebp+ecx*4]
; Line 828
	inc	al
	mov	DWORD PTR _RowBankTracker$[ebp], ecx
	mov	BYTE PTR _PreviousErrorListPtr$[ebp], al
$LN44@PassGateTe:
; Line 830
	lea	eax, DWORD PTR _BankGroup$[ebp]
	push	eax
	lea	eax, DWORD PTR _Bank$[ebp]
	push	eax
	lea	eax, DWORD PTR _Row$[ebp]
	push	eax
	push	DWORD PTR _RowBankTracker$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetRowBankMapping
; Line 831
	push	DWORD PTR _RowBankTracker$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_AddressSetup
; Line 834
	xor	esi, esi
	add	esp, 44					; 0000002cH
	mov	BYTE PTR _SavedOneValuePerIteration$[ebp], 0
	cmp	DWORD PTR [ebx+70814], esi
	jbe	$LN41@PassGateTe
$LL43@PassGateTe:
; Line 839
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR _ErrorPassGateCorruption$[ebp], 0
	push	65535					; 0000ffffH
	push	16499					; 00004073H
	push	ebx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 841
	test	esi, esi
	je	SHORT $LN39@PassGateTe
	cmp	BYTE PTR [ebx+70808], 0
	je	SHORT $LN40@PassGateTe
$LN39@PassGateTe:
; Line 850
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_AgressorVictimWrites
	pop	ecx
	pop	ecx
$LN40@PassGateTe:
; Line 852
	lea	eax, DWORD PTR _ActivationNumberAtFailure$[ebp]
	push	eax
	push	edi
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_CharacterizationReads
; Line 853
	lea	eax, DWORD PTR _ErrorPassGateCorruption$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_VictimReads
	add	esp, 28					; 0000001cH
; Line 855
	cmp	BYTE PTR _ErrorPassGateCorruption$[ebp], 0
	je	SHORT $LN42@PassGateTe
; Line 860
	cmp	BYTE PTR [ebx+70830], 0
	je	SHORT $LN42@PassGateTe
	cmp	BYTE PTR _SavedOneValuePerIteration$[ebp], 0
	jne	SHORT $LN42@PassGateTe
; Line 866
	movzx	eax, BYTE PTR _CurrentErrorListPtr$[ebp]
	mov	ecx, DWORD PTR _RowBankTracker$[ebp]
; Line 867
	inc	BYTE PTR _CurrentErrorListPtr$[ebp]
	mov	BYTE PTR _SavedOneValuePerIteration$[ebp], 1
	mov	DWORD PTR _CurrentErrorList$[ebp+eax*4], ecx
$LN42@PassGateTe:
	inc	esi
	cmp	esi, DWORD PTR [ebx+70814]
	jb	$LL43@PassGateTe
$LN41@PassGateTe:
; Line 873
	mov	al, BYTE PTR [ebx+70809]
	mov	dl, 1
	test	al, al
	jne	SHORT $LN36@PassGateTe
; Line 874
	movzx	eax, BYTE PTR [ebx+70840]
	add	DWORD PTR _RowBankTracker$[ebp], eax
; Line 875
	mov	ecx, DWORD PTR _MaxRowBank$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _RowBankTracker$[ebp]
	and	eax, DWORD PTR tv462[ebp]
	and	ecx, DWORD PTR tv462[ebp]
	cmp	ecx, eax
; Line 877
	jmp	SHORT $LN106@PassGateTe
$LN36@PassGateTe:
; Line 878
	cmp	al, 1
	jne	SHORT $LN32@PassGateTe
; Line 879
	movzx	eax, BYTE PTR [ebx+70840]
	sub	DWORD PTR _RowBankTracker$[ebp], eax
; Line 880
	mov	ecx, DWORD PTR _MinRowBank$[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _RowBankTracker$[ebp]
	and	ecx, DWORD PTR tv462[ebp]
	and	eax, DWORD PTR tv462[ebp]
	cmp	eax, ecx
$LN106@PassGateTe:
	jne	SHORT $LN32@PassGateTe
; Line 881
	xor	dl, dl
$LN32@PassGateTe:
; Line 884
	cmp	BYTE PTR [ebx+70830], 0
	je	SHORT $LN46@PassGateTe
; Line 885
	mov	al, BYTE PTR _CurrentErrorListPtr$[ebp]
	test	al, al
	jne	SHORT $LN107@PassGateTe
	test	dl, dl
	je	SHORT $LN94@PassGateTe
; Line 894
	mov	cl, BYTE PTR _PreviousErrorListPtr$[ebp]
	cmp	cl, BYTE PTR _CurrentMaxFailures$[ebp]
	jne	SHORT $LN98@PassGateTe
	cmp	BYTE PTR _AllMemorySwept$[ebp], al
	je	SHORT $LN98@PassGateTe
$LN94@PassGateTe:
; Line 890
	mov	BYTE PTR _MonteCarloDone$[ebp], 1
; Line 891
	mov	BYTE PTR _AllMemorySwept$[ebp], 1
; Line 892
	jmp	SHORT $LN99@PassGateTe
$LN107@PassGateTe:
; Line 903
	jbe	SHORT $LN98@PassGateTe
	mov	cl, BYTE PTR _CurrentMaxFailures$[ebp]
	cmp	BYTE PTR _PreviousErrorListPtr$[ebp], cl
	jne	SHORT $LN26@PassGateTe
	cmp	BYTE PTR _AllMemorySwept$[ebp], 0
	jne	SHORT $LN96@PassGateTe
$LN26@PassGateTe:
; Line 921
	test	dl, dl
	jne	SHORT $LN98@PassGateTe
	cmp	BYTE PTR _AllMemorySwept$[ebp], dl
	je	SHORT $LN97@PassGateTe
$LN98@PassGateTe:
; Line 936
	cmp	al, BYTE PTR _CurrentMaxFailures$[ebp]
	jne	SHORT $LN46@PassGateTe
; Line 940
	xor	dl, dl
; Line 945
	mov	BYTE PTR _CurrentErrorListPtr$[ebp], dl
	cmp	BYTE PTR _CurrentMaxFailures$[ebp], dl
	jbe	SHORT $LN15@PassGateTe
	movzx	eax, BYTE PTR _CurrentMaxFailures$[ebp]
	mov	ecx, eax
	lea	esi, DWORD PTR _CurrentErrorList$[ebp]
	lea	edi, DWORD PTR _PreviousErrorList$[ebp]
	rep movsd
	mov	BYTE PTR _CurrentErrorListPtr$[ebp], al
$LN15@PassGateTe:
; Line 949
	mov	edi, DWORD PTR _CurrentNumberOfActivations$[ebp]
	sub	edi, DWORD PTR _MontecarloDecrementValue$[ebp]
	mov	BYTE PTR _PreviousErrorListFull$[ebp], 1
	mov	DWORD PTR _CurrentNumberOfActivations$[ebp], edi
$LN46@PassGateTe:
; Line 952
	test	dl, dl
	jne	$LL47@PassGateTe
	jmp	SHORT $LN99@PassGateTe
$LN97@PassGateTe:
; Line 922
	mov	BYTE PTR _AllMemorySwept$[ebp], 1
$LN96@PassGateTe:
; Line 930
	test	al, al
	jbe	SHORT $LN20@PassGateTe
	movzx	ecx, al
	lea	edi, DWORD PTR _PreviousErrorList$[ebp]
	lea	esi, DWORD PTR _CurrentErrorList$[ebp]
	rep movsd
$LN20@PassGateTe:
; Line 935
	mov	edi, DWORD PTR _CurrentNumberOfActivations$[ebp]
	sub	edi, DWORD PTR _MontecarloDecrementValue$[ebp]
	mov	BYTE PTR _PreviousErrorListFull$[ebp], 1
	mov	DWORD PTR _CurrentNumberOfActivations$[ebp], edi
	mov	BYTE PTR _CurrentMaxFailures$[ebp], al
$LN99@PassGateTe:
; Line 953
	cmp	BYTE PTR [ebx+70830], 0
	je	SHORT $LN12@PassGateTe
	cmp	BYTE PTR _MonteCarloDone$[ebp], 0
	je	$LL53@PassGateTe
$LN12@PassGateTe:
	mov	edi, DWORD PTR tv930[ebp]
$LN65@PassGateTe:
; Line 697
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv772[ebp]
	add	DWORD PTR tv838[ebp], 4
	inc	DWORD PTR tv824[ebp]
	cmp	BYTE PTR _Rank$[ebp], 2
	jb	$LL102@PassGateTe
	inc	BYTE PTR _Dimm$[ebp]
	mov	eax, DWORD PTR tv824[ebp]
	mov	esi, DWORD PTR tv838[ebp]
	inc	edi
	inc	edi
	cmp	BYTE PTR _Dimm$[ebp], 2
	mov	DWORD PTR tv930[ebp], edi
	jb	$LL69@PassGateTe
; Line 957
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_PassGateTestExitHooks
	pop	ecx
	pop	ecx
; Line 981
	xor	eax, eax
	pop	edi
$LN103@PassGateTe:
	pop	esi
$LN72@PassGateTe:
	pop	ebx
; Line 982
	leave
	ret	0
_PassGateTest ENDP
_TEXT	ENDS
END
