; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectIndependent\Source\MmrcLibraries.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07KDCFBPGD@Quimoda?$AA@			; `string'
PUBLIC	??_C@_05DKDJAHFD@Smart?$AA@			; `string'
PUBLIC	??_C@_08PLDEMPOA@Infineon?$AA@			; `string'
PUBLIC	??_C@_05CCONNHIC@Hynix?$AA@			; `string'
PUBLIC	??_C@_06IHFCNECC@Elpida?$AA@			; `string'
PUBLIC	??_C@_08KGDHKCKB@Kingston?$AA@			; `string'
PUBLIC	??_C@_09KJBDPADP@Transcend?$AA@			; `string'
PUBLIC	??_C@_07FCLJFOJN@Samsung?$AA@			; `string'
PUBLIC	??_C@_06MPOFMFBE@Micron?$AA@			; `string'
PUBLIC	_CacheTypePrefix
PUBLIC	_ManufacturerId
PUBLIC	_ManufacturerStringId
PUBLIC	_ResultsString
PUBLIC	_Samples
_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_DATA	ENDS
CONST	SEGMENT
_Samples DD	00H
	DD	0fffffff0H
	DD	0ffffffe0H
	DD	0ffffffd0H
	DD	0ffffffc0H
	DD	0ffffffb0H
	DD	0ffffffa0H
	DD	0ffffff90H
	DD	0ffffff80H
	DD	0ffffff70H
	DD	0ffffff60H
	DD	010H
	DD	020H
	DD	030H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	090H
	DD	0a0H
CONST	ENDS
;	COMDAT ??_C@_07KDCFBPGD@Quimoda?$AA@
CONST	SEGMENT
??_C@_07KDCFBPGD@Quimoda?$AA@ DB 'Quimoda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DKDJAHFD@Smart?$AA@
CONST	SEGMENT
??_C@_05DKDJAHFD@Smart?$AA@ DB 'Smart', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLDEMPOA@Infineon?$AA@
CONST	SEGMENT
??_C@_08PLDEMPOA@Infineon?$AA@ DB 'Infineon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCONNHIC@Hynix?$AA@
CONST	SEGMENT
??_C@_05CCONNHIC@Hynix?$AA@ DB 'Hynix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IHFCNECC@Elpida?$AA@
CONST	SEGMENT
??_C@_06IHFCNECC@Elpida?$AA@ DB 'Elpida', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KGDHKCKB@Kingston?$AA@
CONST	SEGMENT
??_C@_08KGDHKCKB@Kingston?$AA@ DB 'Kingston', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJBDPADP@Transcend?$AA@
CONST	SEGMENT
??_C@_09KJBDPADP@Transcend?$AA@ DB 'Transcend', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCLJFOJN@Samsung?$AA@
CONST	SEGMENT
??_C@_07FCLJFOJN@Samsung?$AA@ DB 'Samsung', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPOFMFBE@Micron?$AA@
CONST	SEGMENT
??_C@_06MPOFMFBE@Micron?$AA@ DB 'Micron', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_CacheTypePrefix DB 00H
	DB	040H
	DB	080H
	DB	0c0H
_ManufacturerId DB 02cH
	DB	0ceH
	DB	04fH
	DB	098H
	DB	0feH
	DB	0adH
	DB	0c1H
	DB	057H
	DB	051H
	ORG $+3
_ManufacturerStringId DD FLAT:??_C@_06MPOFMFBE@Micron?$AA@
	DD	FLAT:??_C@_07FCLJFOJN@Samsung?$AA@
	DD	FLAT:??_C@_09KJBDPADP@Transcend?$AA@
	DD	FLAT:??_C@_08KGDHKCKB@Kingston?$AA@
	DD	FLAT:??_C@_06IHFCNECC@Elpida?$AA@
	DD	FLAT:??_C@_05CCONNHIC@Hynix?$AA@
	DD	FLAT:??_C@_08PLDEMPOA@Infineon?$AA@
	DD	FLAT:??_C@_05DKDJAHFD@Smart?$AA@
	DD	FLAT:??_C@_07KDCFBPGD@Quimoda?$AA@
_ResultsString DB 'P', 00H, 00H
	DB	'-', 00H, 00H
	DB	'*', 00H, 00H
_DATA	ENDS
PUBLIC	_ReadSkpd7
EXTRN	_MemRegRead:PROC
; Function compile flags: /Ogspy
;	COMDAT _ReadSkpd7
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_ReadSkpd7 PROC						; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectindependent\source\mmrclibraries.c
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 113
	or	DWORD PTR _Register$[ebp+8], -1
	push	esi
	push	edi
; Line 117
	sub	esp, 24					; 00000018H
	push	6
	xor	eax, eax
	pop	ecx
	mov	edi, esp
	push	eax
	push	eax
	mov	DWORD PTR _Register$[ebp+12], eax
	mov	BYTE PTR _Register$[ebp+16], al
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 284		; 0000011cH
	push	eax
	rep movsd
	call	_MemRegRead
	add	esp, 36					; 00000024H
; Line 118
	pop	edi
	pop	esi
	leave
	ret	0
_ReadSkpd7 ENDP
_TEXT	ENDS
PUBLIC	_EnableMrcBreakpoint
EXTRN	_MemRegWrite:PROC
; Function compile flags: /Ogspy
;	COMDAT _EnableMrcBreakpoint
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_EnableMrcBreakpoint PROC				; COMDAT
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
; Line 124
	or	DWORD PTR _Register$[ebp+8], -1
	push	edi
; Line 128
	push	15					; 0000000fH
	xor	eax, eax
	push	eax
	push	1
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	eax
	push	eax
	mov	DWORD PTR _Register$[ebp+12], eax
	mov	BYTE PTR _Register$[ebp+16], al
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 268		; 0000010cH
	push	eax
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 129
	pop	edi
	pop	esi
	leave
	ret	0
_EnableMrcBreakpoint ENDP
_TEXT	ENDS
PUBLIC	_DisableMrcBreakpoint
; Function compile flags: /Ogspy
;	COMDAT _DisableMrcBreakpoint
_TEXT	SEGMENT
_Register$ = -24					; size = 24
_DisableMrcBreakpoint PROC				; COMDAT
; Line 133
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
; Line 135
	or	DWORD PTR _Register$[ebp+8], -1
	push	edi
	xor	eax, eax
; Line 139
	push	15					; 0000000fH
	push	eax
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	eax
	push	eax
	mov	DWORD PTR _Register$[ebp+12], eax
	mov	BYTE PTR _Register$[ebp+16], al
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 268		; 0000010cH
	push	eax
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 140
	pop	edi
	pop	esi
	leave
	ret	0
_DisableMrcBreakpoint ENDP
_TEXT	ENDS
PUBLIC	_GetHalfClk
EXTRN	_HalfClkGenerated:TBYTE
EXTRN	_ADdllGenerated:WORD
; Function compile flags: /Ogspy
;	COMDAT _GetHalfClk
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_GetHalfClk PROC					; COMDAT
; Line 238
	mov	eax, DWORD PTR _MrcData$[esp-4]
	movzx	ecx, BYTE PTR [eax+65338]
	movzx	ecx, BYTE PTR _ADdllGenerated[ecx]
	movzx	edx, BYTE PTR _Channel$[esp-4]
	imul	ecx, 5
	movzx	eax, WORD PTR [eax+edx*2+55494]
	add	ecx, eax
	mov	ax, WORD PTR _HalfClkGenerated[ecx*2]
; Line 239
	ret	0
_GetHalfClk ENDP
_TEXT	ENDS
PUBLIC	_GetQtrClk
; Function compile flags: /Ogspy
;	COMDAT _GetQtrClk
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_GetQtrClk PROC						; COMDAT
; Line 270
	push	DWORD PTR _Channel$[esp-4]
	push	DWORD PTR _MrcData$[esp]
	call	_GetHalfClk
	movzx	eax, ax
	pop	ecx
	pop	ecx
	shr	eax, 1
; Line 271
	ret	0
_GetQtrClk ENDP
_TEXT	ENDS
PUBLIC	_GetOneClk
; Function compile flags: /Ogspy
;	COMDAT _GetOneClk
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_GetOneClk PROC						; COMDAT
; Line 279
	push	DWORD PTR _Channel$[esp-4]
	push	DWORD PTR _MrcData$[esp]
	call	_GetHalfClk
	pop	ecx
	pop	ecx
	add	eax, eax
; Line 280
	ret	0
_GetOneClk ENDP
_TEXT	ENDS
PUBLIC	_ConvertPfctFromBitXToX
; Function compile flags: /Ogspy
;	COMDAT _ConvertPfctFromBitXToX
_TEXT	SEGMENT
tv197 = -16						; size = 4
tv591 = -12						; size = 4
tv314 = -8						; size = 4
_i$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_ConvertPfctFromBitXToX PROC				; COMDAT
; Line 295
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 302
	mov	eax, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	add	eax, 55494				; 0000d8c6H
	mov	DWORD PTR tv197[ebp], 2
	push	edi
$LL17@ConvertPfc:
; Line 303
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR [eax-4]
	movzx	edi, WORD PTR [eax+4]
	movzx	esi, WORD PTR [eax+8]
	and	DWORD PTR tv314[ebp], 0
	mov	BYTE PTR _i$[ebp], 0
	mov	DWORD PTR tv591[ebp], ecx
$LL7@ConvertPfc:
; Line 304
	mov	ecx, DWORD PTR tv314[ebp]
	xor	ebx, ebx
	inc	ebx
	shl	ebx, cl
	movzx	ecx, dx
	test	ecx, ebx
	je	SHORT $LN4@ConvertPfc
; Line 305
	movzx	cx, BYTE PTR _i$[ebp]
	movzx	edx, cx
$LN4@ConvertPfc:
; Line 307
	movzx	ecx, WORD PTR tv591[ebp]
	test	ecx, ebx
	je	SHORT $LN3@ConvertPfc
; Line 308
	movzx	cx, BYTE PTR _i$[ebp]
	movzx	ecx, cx
	mov	DWORD PTR tv591[ebp], ecx
$LN3@ConvertPfc:
; Line 310
	movzx	ecx, di
	test	ecx, ebx
	je	SHORT $LN2@ConvertPfc
; Line 311
	movzx	cx, BYTE PTR _i$[ebp]
	movzx	edi, cx
$LN2@ConvertPfc:
; Line 313
	movzx	ecx, si
	test	ecx, ebx
	je	SHORT $LN6@ConvertPfc
; Line 314
	movzx	cx, BYTE PTR _i$[ebp]
	movzx	esi, cx
$LN6@ConvertPfc:
	inc	BYTE PTR _i$[ebp]
	inc	DWORD PTR tv314[ebp]
	cmp	BYTE PTR _i$[ebp], 16			; 00000010H
	jb	SHORT $LL7@ConvertPfc
	mov	cx, WORD PTR tv591[ebp]
	mov	WORD PTR [eax-4], dx
	mov	WORD PTR [eax], cx
	mov	WORD PTR [eax+4], di
	mov	WORD PTR [eax+8], si
	inc	eax
	inc	eax
	dec	DWORD PTR tv197[ebp]
	jne	$LL17@ConvertPfc
	pop	edi
	pop	esi
	pop	ebx
; Line 318
	leave
	ret	0
_ConvertPfctFromBitXToX ENDP
_TEXT	ENDS
PUBLIC	_CreateChannelMask
; Function compile flags: /Ogspy
;	COMDAT _CreateChannelMask
_TEXT	SEGMENT
tv171 = -4						; size = 4
_MrcData$ = 8						; size = 4
_j$ = 12						; size = 4
_CreateChannelMask PROC					; COMDAT
; Line 334
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 337
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	push	ebx
	push	esi
	lea	esi, DWORD PTR [eax+55511]
	push	edi
	add	eax, 55494				; 0000d8c6H
	mov	DWORD PTR tv171[ebp], 2
$LL12@CreateChan:
; Line 342
	mov	cl, BYTE PTR [eax-4]
	xor	edi, edi
	inc	edi
	shl	edi, cl
	movzx	ecx, WORD PTR [edx+14]
	test	edi, ecx
	je	SHORT $LN10@CreateChan
	mov	cl, BYTE PTR [eax]
	movzx	edi, WORD PTR [edx+16]
	xor	ebx, ebx
	inc	ebx
	shl	ebx, cl
	test	edi, ebx
	je	SHORT $LN10@CreateChan
	mov	cl, BYTE PTR [eax+4]
	xor	edi, edi
	inc	edi
	shl	edi, cl
	movzx	ecx, WORD PTR [edx+18]
	test	edi, ecx
	je	SHORT $LN10@CreateChan
	mov	cl, BYTE PTR [eax+8]
	xor	edi, edi
	inc	edi
	shl	edi, cl
	movzx	ecx, WORD PTR [edx+20]
	test	edi, ecx
	je	SHORT $LN10@CreateChan
; Line 344
	mov	BYTE PTR [esi], 1
; Line 345
	jmp	SHORT $LN4@CreateChan
$LN10@CreateChan:
; Line 346
	mov	BYTE PTR [esi], 0
$LN4@CreateChan:
; Line 337
	inc	eax
	inc	eax
	inc	esi
	dec	DWORD PTR tv171[ebp]
	jne	SHORT $LL12@CreateChan
	pop	edi
	pop	esi
	pop	ebx
; Line 349
	leave
	ret	0
_CreateChannelMask ENDP
_TEXT	ENDS
PUBLIC	_MmrcMemset
EXTRN	_memset:PROC
; Function compile flags: /Ogspy
;	COMDAT _MmrcMemset
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_value$ = 12						; size = 1
_cnt$ = 16						; size = 4
_MmrcMemset PROC					; COMDAT
; Line 578
	push	ebp
	mov	ebp, esp
; Line 580
	cmp	DWORD PTR _cnt$[ebp], 0
	je	SHORT $LN2@MmrcMemset
	push	DWORD PTR _cnt$[ebp]
	push	DWORD PTR _value$[ebp]
	push	DWORD PTR _dst$[ebp]
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@MmrcMemset:
; Line 584
	mov	eax, DWORD PTR _dst$[ebp]
; Line 585
	pop	ebp
	ret	0
_MmrcMemset ENDP
_TEXT	ENDS
PUBLIC	_MmrcMemCopy
; Function compile flags: /Ogspy
;	COMDAT _MmrcMemCopy
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_cnt$ = 16						; size = 4
_MmrcMemCopy PROC					; COMDAT
; Line 593
	push	ebp
	mov	ebp, esp
; Line 596
	cmp	DWORD PTR _cnt$[ebp], 0
	mov	eax, DWORD PTR _dst$[ebp]
	je	SHORT $LN6@MmrcMemCop
	mov	ecx, DWORD PTR _src$[ebp]
	sub	ecx, eax
$LL2@MmrcMemCop:
; Line 597
	mov	dl, BYTE PTR [ecx+eax]
	dec	DWORD PTR _cnt$[ebp]
	mov	BYTE PTR [eax], dl
; Line 598
	inc	eax
	cmp	DWORD PTR _cnt$[ebp], 0
	jne	SHORT $LL2@MmrcMemCop
$LN6@MmrcMemCop:
; Line 601
	mov	eax, DWORD PTR _dst$[ebp]
; Line 602
	pop	ebp
	ret	0
_MmrcMemCopy ENDP
_TEXT	ENDS
PUBLIC	_MmrcStringCompare
; Function compile flags: /Ogspy
;	COMDAT _MmrcStringCompare
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
_cnt$ = 16						; size = 4
_MmrcStringCompare PROC					; COMDAT
; Line 619
	push	esi
; Line 628
	xor	esi, esi
	cmp	DWORD PTR _cnt$[esp], esi
	jbe	SHORT $LN2@MmrcString
	mov	eax, DWORD PTR _str1$[esp]
	mov	ecx, DWORD PTR _str2$[esp]
	sub	ecx, eax
$LL4@MmrcString:
; Line 629
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx+eax]
	jne	SHORT $LN8@MmrcString
	inc	esi
	inc	eax
	cmp	esi, DWORD PTR _cnt$[esp]
	jb	SHORT $LL4@MmrcString
$LN2@MmrcString:
; Line 633
	mov	al, 1
	pop	esi
; Line 634
	ret	0
$LN8@MmrcString:
; Line 630
	xor	al, al
	pop	esi
; Line 634
	ret	0
_MmrcStringCompare ENDP
_TEXT	ENDS
PUBLIC	_StringLength
; Function compile flags: /Ogspy
;	COMDAT _StringLength
_TEXT	SEGMENT
_String$ = 8						; size = 4
_StringLength PROC					; COMDAT
; Line 642
	xor	eax, eax
$LL2@StringLeng:
; Line 643
	mov	ecx, DWORD PTR _String$[esp-4]
	mov	cl, BYTE PTR [eax+ecx]
	inc	eax
	test	cl, cl
	jne	SHORT $LL2@StringLeng
; Line 645
	ret	0
_StringLength ENDP
_TEXT	ENDS
PUBLIC	_DumpAllRegisters
; Function compile flags: /Ogspy
;	COMDAT _DumpAllRegisters
_TEXT	SEGMENT
_DumpAllRegisters PROC					; COMDAT
; Line 903
	xor	eax, eax
; Line 904
	ret	0
_DumpAllRegisters ENDP
_TEXT	ENDS
PUBLIC	_GetMaxDq
; Function compile flags: /Ogspy
;	COMDAT _GetMaxDq
_TEXT	SEGMENT
tv250 = -32						; size = 4
tv137 = -28						; size = 4
tv77 = -24						; size = 4
tv521 = -20						; size = 4
tv531 = -16						; size = 4
tv406 = -12						; size = 4
tv362 = -8						; size = 4
tv482 = -4						; size = 4
_MrcData$ = 8						; size = 4
_GetMaxDq PROC						; COMDAT
; Line 1380
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1385
	mov	eax, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	ecx, DWORD PTR [eax+28608]
	push	2
	mov	DWORD PTR tv521[ebp], ecx
	xor	edi, edi
	lea	ecx, DWORD PTR [eax+28610]
	pop	esi
	mov	DWORD PTR tv482[ebp], edi
	mov	DWORD PTR tv531[ebp], ecx
	mov	DWORD PTR tv250[ebp], esi
$LL28@GetMaxDq:
; Line 1386
	mov	edx, DWORD PTR tv521[ebp]
	xor	ecx, ecx
	cmp	BYTE PTR [edx], cl
	je	$LN15@GetMaxDq
; Line 1389
	mov	edx, DWORD PTR tv531[ebp]
	mov	DWORD PTR tv406[ebp], edx
	mov	DWORD PTR tv137[ebp], esi
$LL27@GetMaxDq:
; Line 1390
	mov	ebx, DWORD PTR tv406[ebp]
	xor	edx, edx
	cmp	BYTE PTR [ebx], dl
	je	SHORT $LN11@GetMaxDq
; Line 1393
	lea	ebx, DWORD PTR [ecx+edi*2+15344]
	lea	ebx, DWORD PTR [eax+ebx*2]
	mov	DWORD PTR tv362[ebp], ebx
	mov	DWORD PTR tv77[ebp], esi
$LL25@GetMaxDq:
; Line 1394
	mov	ebx, DWORD PTR tv362[ebp]
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN7@GetMaxDq
; Line 1397
	lea	esi, DWORD PTR [ecx+edi*2+55398]
	cmp	BYTE PTR [esi+eax], 0
; Line 1403
	mov	esi, DWORD PTR tv482[ebp]
; Line 1405
	push	2
	je	SHORT $LN2@GetMaxDq
	add	esi, ecx
	lea	ebx, DWORD PTR [edx+esi*2+55454]
	lea	esi, DWORD PTR [edx+esi*2+55462]
	mov	BYTE PTR [ebx+eax], 9
	mov	BYTE PTR [esi+eax], 8
	jmp	SHORT $LN29@GetMaxDq
$LN2@GetMaxDq:
; Line 1399
	add	esi, ecx
	lea	ebx, DWORD PTR [edx+esi*2+55454]
; Line 1400
	lea	esi, DWORD PTR [edx+esi*2+55462]
	mov	BYTE PTR [ebx+eax], 18			; 00000012H
	mov	BYTE PTR [esi+eax], 4
$LN29@GetMaxDq:
	pop	esi
$LN7@GetMaxDq:
; Line 1393
	inc	edx
	inc	DWORD PTR tv362[ebp]
	dec	DWORD PTR tv77[ebp]
	jne	SHORT $LL25@GetMaxDq
$LN11@GetMaxDq:
; Line 1389
	inc	ecx
	inc	DWORD PTR tv406[ebp]
	dec	DWORD PTR tv137[ebp]
	jne	SHORT $LL27@GetMaxDq
$LN15@GetMaxDq:
; Line 1385
	add	DWORD PTR tv482[ebp], esi
	add	DWORD PTR tv531[ebp], esi
	inc	edi
	inc	DWORD PTR tv521[ebp]
	dec	DWORD PTR tv250[ebp]
	jne	$LL28@GetMaxDq
	pop	edi
	pop	esi
	pop	ebx
; Line 1411
	leave
	ret	0
_GetMaxDq ENDP
_TEXT	ENDS
PUBLIC	_ForceMaxBit
; Function compile flags: /Ogspy
;	COMDAT _ForceMaxBit
_TEXT	SEGMENT
tv431 = -32						; size = 4
tv325 = -28						; size = 4
tv75 = -24						; size = 4
tv458 = -20						; size = 4
tv468 = -16						; size = 4
tv399 = -12						; size = 4
tv361 = -8						; size = 4
tv311 = -4						; size = 4
_MrcData$ = 8						; size = 4
_MaxBit$ = 12						; size = 1
_ForceMaxBit PROC					; COMDAT
; Line 1419
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1424
	mov	eax, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	ecx, DWORD PTR [eax+28608]
	push	2
	xor	ebx, ebx
	mov	DWORD PTR tv458[ebp], ecx
	lea	ecx, DWORD PTR [eax+28610]
	pop	edx
	mov	DWORD PTR tv361[ebp], ebx
	mov	DWORD PTR tv399[ebp], ebx
	mov	DWORD PTR tv468[ebp], ecx
	mov	DWORD PTR tv431[ebp], edx
$LL12@ForceMaxBi:
; Line 1425
	mov	ecx, DWORD PTR tv458[ebp]
	cmp	BYTE PTR [ecx], bl
	je	SHORT $LN11@ForceMaxBi
; Line 1428
	mov	esi, DWORD PTR tv468[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv311[ebp], esi
	mov	DWORD PTR tv325[ebp], edx
$LL22@ForceMaxBi:
; Line 1429
	mov	esi, DWORD PTR tv311[ebp]
	cmp	BYTE PTR [esi], bl
	je	SHORT $LN7@ForceMaxBi
; Line 1432
	mov	esi, DWORD PTR tv361[ebp]
	lea	esi, DWORD PTR [ecx+esi*2+15344]
	xor	edi, edi
	lea	esi, DWORD PTR [eax+esi*2]
	mov	DWORD PTR tv75[ebp], edx
$LL21@ForceMaxBi:
; Line 1433
	cmp	BYTE PTR [esi], bl
	je	SHORT $LN3@ForceMaxBi
; Line 1436
	mov	edx, DWORD PTR tv399[ebp]
	mov	bl, BYTE PTR _MaxBit$[ebp]
	add	edx, ecx
	lea	edx, DWORD PTR [edi+edx*2+55462]
	mov	BYTE PTR [edx+eax], bl
	push	2
	xor	ebx, ebx
	pop	edx
$LN3@ForceMaxBi:
	inc	edi
	inc	esi
	dec	DWORD PTR tv75[ebp]
	jne	SHORT $LL21@ForceMaxBi
$LN7@ForceMaxBi:
; Line 1428
	inc	ecx
	inc	DWORD PTR tv311[ebp]
	dec	DWORD PTR tv325[ebp]
	jne	SHORT $LL22@ForceMaxBi
$LN11@ForceMaxBi:
; Line 1424
	inc	DWORD PTR tv361[ebp]
	add	DWORD PTR tv399[ebp], edx
	add	DWORD PTR tv468[ebp], edx
	inc	DWORD PTR tv458[ebp]
	dec	DWORD PTR tv431[ebp]
	jne	SHORT $LL12@ForceMaxBi
	pop	edi
	pop	esi
	pop	ebx
; Line 1440
	leave
	ret	0
_ForceMaxBit ENDP
_TEXT	ENDS
PUBLIC	_SearchSubtaskName
EXTRN	_SubtaskOffsetIndex:BYTE
; Function compile flags: /Ogspy
;	COMDAT _SearchSubtaskName
_TEXT	SEGMENT
_CurrentTaskOffset$ = 8					; size = 2
_SearchSubtaskName PROC					; COMDAT
; Line 1595
	movzx	ecx, WORD PTR _CurrentTaskOffset$[esp-4]
	xor	eax, eax
$LL5@SearchSubt:
; Line 1596
	movzx	edx, ax
	cmp	ecx, DWORD PTR _SubtaskOffsetIndex[edx*8+4]
	je	SHORT $LN9@SearchSubt
	inc	eax
	cmp	ax, 38					; 00000026H
	jb	SHORT $LL5@SearchSubt
	jmp	SHORT $LN1@SearchSubt
$LN9@SearchSubt:
; Line 1597
	movzx	eax, ax
	movzx	eax, WORD PTR _SubtaskOffsetIndex[eax*8]
; Line 1601
	mov	ecx, 65535				; 0000ffffH
	cmp	ax, cx
; Line 1602
	jne	SHORT $LN6@SearchSubt
$LN1@SearchSubt:
; Line 1606
	xor	eax, eax
$LN6@SearchSubt:
; Line 1608
	ret	0
_SearchSubtaskName ENDP
_TEXT	ENDS
PUBLIC	_SetRdimmRegCkeLow
EXTRN	_MrcSmbusExec:PROC
EXTRN	_MrsCommandIndex:BYTE
; Function compile flags: /Ogspy
;	COMDAT _SetRdimmRegCkeLow
_TEXT	SEGMENT
tv279 = -20						; size = 4
tv379 = -16						; size = 4
tv260 = -12						; size = 4
tv331 = -8						; size = 4
_Length$ = -3						; size = 1
_Buffer$ = -2						; size = 1
tv333 = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SetRdimmRegCkeLow PROC					; COMDAT
; Line 1698
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
; Line 1757
	movzx	ebx, BYTE PTR _Channel$[ebp]
	mov	eax, ebx
	imul	eax, 4336				; 000010f0H
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	lea	edi, DWORD PTR [eax+esi+55966]
	xor	eax, eax
	mov	BYTE PTR _Length$[ebp], 1
	mov	DWORD PTR tv260[ebp], edi
	mov	DWORD PTR tv331[ebp], eax
	mov	BYTE PTR tv333[ebp], al
	jmp	SHORT $LN7@SetRdimmRe
$LL14@SetRdimmRe:
; Line 1705
	mov	edi, DWORD PTR tv260[ebp]
$LN7@SetRdimmRe:
; Line 1711
	cmp	DWORD PTR [edi], 1
	jne	$LN6@SetRdimmRe
	cmp	DWORD PTR [edi+4], 0
	jne	$LN6@SetRdimmRe
	lea	ecx, DWORD PTR [eax+ebx*2+28610]
	cmp	BYTE PTR [ecx+esi], 0
	je	$LN6@SetRdimmRe
; Line 1719
	movzx	edi, BYTE PTR tv333[ebp]
	imul	edi, 70					; 00000046H
; Line 1723
	movzx	edx, WORD PTR _MrsCommandIndex[edi+52]
	mov	ecx, ebx
	imul	ecx, 542				; 0000021eH
	add	edx, ecx
; Line 1725
	mov	DWORD PTR tv279[ebp], ecx
	mov	ecx, DWORD PTR [esi+edx*8+55526]
	mov	edx, DWORD PTR [esi+edx*8+55530]
	shrd	ecx, edx, 8
	and	cl, 15					; 0000000fH
	or	cl, 128					; 00000080H
	mov	BYTE PTR _Buffer$[ebp], cl
	lea	ecx, DWORD PTR [eax+ebx*2+65384]
	add	ecx, esi
	shr	edx, 8
	cmp	BYTE PTR [ecx], 0
	mov	DWORD PTR tv379[ebp], ecx
	jne	SHORT $LN12@SetRdimmRe
; Line 1733
	lea	eax, DWORD PTR [eax+ebx*2+65380]
	mov	al, BYTE PTR [eax+esi]
	lea	ecx, DWORD PTR _Buffer$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _Length$[ebp]
	push	ecx
	add	al, 16					; 00000010H
	push	13					; 0000000dH
	movzx	eax, al
	push	1
	push	eax
	movzx	eax, WORD PTR [esi+65350]
	push	eax
	call	_MrcSmbusExec
	mov	eax, DWORD PTR tv331[ebp]
	mov	ecx, DWORD PTR tv379[ebp]
	add	esp, 24					; 00000018H
$LN12@SetRdimmRe:
; Line 1740
	movzx	edx, WORD PTR _MrsCommandIndex[edi+66]
	add	edx, DWORD PTR tv279[ebp]
; Line 1742
	cmp	BYTE PTR [ecx], 0
	mov	dl, BYTE PTR [esi+edx*8+55527]
	mov	BYTE PTR _Buffer$[ebp], dl
	jne	SHORT $LN6@SetRdimmRe
; Line 1750
	lea	eax, DWORD PTR [eax+ebx*2+65380]
	mov	al, BYTE PTR [eax+esi]
	lea	ecx, DWORD PTR _Buffer$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _Length$[ebp]
	push	ecx
	add	al, 16					; 00000010H
	push	18					; 00000012H
	movzx	eax, al
	push	1
	push	eax
	movzx	eax, WORD PTR [esi+65350]
	push	eax
	call	_MrcSmbusExec
	mov	eax, DWORD PTR tv331[ebp]
	add	esp, 24					; 00000018H
$LN6@SetRdimmRe:
	add	BYTE PTR tv333[ebp], 2
	inc	eax
	cmp	BYTE PTR tv333[ebp], 4
	mov	DWORD PTR tv331[ebp], eax
	jb	$LL14@SetRdimmRe
	pop	edi
	pop	esi
; Line 1757
	xor	eax, eax
	pop	ebx
; Line 1758
	leave
	ret	0
_SetRdimmRegCkeLow ENDP
_TEXT	ENDS
PUBLIC	_GetSetDdrioGroup
PUBLIC	_SetRegsToLinear
EXTRN	_ClockCrossingsGenerated:BYTE
EXTRN	_NumberOfCCRangesGenerated:BYTE
EXTRN	_NumberOfCCElementsGenerated:BYTE
EXTRN	_NumberOfDependantElementsGenerated:BYTE
EXTRN	_GranularityGenerated:BYTE
EXTRN	_NumberOfDelayElementsPerAlgoGenerated:BYTE
EXTRN	_NumberOfElementsPerAlgoGenerated:BYTE
; Function compile flags: /Ogspy
;	COMDAT _SetRegsToLinear
_TEXT	SEGMENT
tv376 = -24						; size = 4
_CCValue$ = -20						; size = 2
_CCRange$ = -16						; size = 2
_ElementValue$ = -12					; size = 4
_AlgoElementsStart$ = -8				; size = 2
_TempValue$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Type$ = 44						; size = 2
_ElementIndex$ = 47					; size = 1
_Cmd$ = 48						; size = 1
tv361 = 52						; size = 4
_Value$ = 52						; size = 4
_ThisCcRange$ = 55					; size = 1
_SetRegsToLinear PROC					; COMDAT
; Line 3298
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 3316
	movzx	cx, BYTE PTR _NumberOfElementsPerAlgoGenerated
	xor	eax, eax
	mov	DWORD PTR _ElementValue$[ebp], eax
	mov	DWORD PTR _CCValue$[ebp], eax
	mov	DWORD PTR _CCRange$[ebp], eax
	mov	eax, DWORD PTR _Type$[ebp]
	add	eax, -4096				; fffff000H
	imul	ax, cx
; Line 3323
	cmp	BYTE PTR _NumberOfDelayElementsPerAlgoGenerated, 0
	movzx	eax, ax
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _AlgoElementsStart$[ebp], eax
	mov	eax, DWORD PTR _Value$[ebp]
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	BYTE PTR _ElementIndex$[ebp], 0
	jbe	$LN13@SetRegsToL
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [esi+eax*2+55494]
	mov	DWORD PTR tv361[ebp], eax
$LL26@SetRegsToL:
; Line 3330
	movzx	ecx, BYTE PTR [esi+65338]
	movzx	ecx, BYTE PTR _ADdllGenerated[ecx]
	mov	edx, DWORD PTR tv361[ebp]
	imul	ecx, 5
	movzx	edx, WORD PTR [edx]
	movzx	eax, BYTE PTR _ElementIndex$[ebp]
	add	ecx, edx
	imul	ecx, 3
	add	ecx, eax
	movzx	ebx, WORD PTR _GranularityGenerated[ecx*2]
	mov	DWORD PTR tv376[ebp], eax
	movzx	ecx, bx
	xor	edx, edx
	mov	eax, edi
	div	ecx
; Line 3335
	push	DWORD PTR _Channel$[ebp]
	push	esi
	imul	ecx, eax
	mov	DWORD PTR _ElementValue$[ebp], eax
	mov	DWORD PTR _TempValue$[ebp], ecx
	call	_GetHalfClk
	pop	ecx
	pop	ecx
	cmp	bx, ax
	ja	SHORT $LN14@SetRegsToL
; Line 3343
	lea	eax, DWORD PTR _ElementValue$[ebp]
	push	eax
	mov	al, BYTE PTR _AlgoElementsStart$[ebp]
	add	al, BYTE PTR _ElementIndex$[ebp]
	push	DWORD PTR _Cmd$[ebp]
	movzx	ax, al
	movzx	eax, ax
	push	eax
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN14@SetRegsToL
; Line 3344
	movzx	eax, BYTE PTR _NumberOfDependantElementsGenerated
	movzx	ecx, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	sub	ecx, eax
	cmp	DWORD PTR tv376[ebp], ecx
	jne	SHORT $LN10@SetRegsToL
; Line 3346
	push	DWORD PTR _Channel$[ebp]
	movzx	eax, di
	push	esi
	mov	DWORD PTR _CCValue$[ebp], eax
	call	_GetHalfClk
	movzx	eax, ax
	pop	ecx
	pop	ecx
	mov	DWORD PTR _CCRange$[ebp], eax
$LN10@SetRegsToL:
; Line 3348
	sub	edi, DWORD PTR _TempValue$[ebp]
$LN14@SetRegsToL:
; Line 3323
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	jb	$LL26@SetRegsToL
$LN13@SetRegsToL:
; Line 3355
	movzx	ax, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	add	WORD PTR _AlgoElementsStart$[ebp], ax
; Line 3357
	cmp	BYTE PTR _NumberOfCCElementsGenerated, 0
	mov	BYTE PTR _ElementIndex$[ebp], 0
	jbe	$LN7@SetRegsToL
$LL9@SetRegsToL:
; Line 3358
	and	DWORD PTR _TempValue$[ebp], 0
; Line 3363
	cmp	BYTE PTR _NumberOfCCRangesGenerated, 0
	mov	BYTE PTR _ThisCcRange$[ebp], 0
	jbe	SHORT $LN4@SetRegsToL
$LL29@SetRegsToL:
; Line 3366
	movzx	ecx, BYTE PTR _ThisCcRange$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	imul	ecx, 10					; 0000000aH
	cmp	al, BYTE PTR _ClockCrossingsGenerated[ecx]
	jne	SHORT $LN5@SetRegsToL
	movzx	edi, WORD PTR _CCRange$[ebp]
	movzx	eax, WORD PTR _ClockCrossingsGenerated[ecx+4]
	imul	eax, edi
	push	100					; 00000064H
	cdq
	pop	ebx
	idiv	ebx
	movzx	ebx, WORD PTR _CCValue$[ebp]
	cmp	ebx, eax
	jae	SHORT $LN5@SetRegsToL
	movzx	eax, WORD PTR _ClockCrossingsGenerated[ecx+2]
	imul	eax, edi
	push	100					; 00000064H
	cdq
	pop	ecx
	idiv	ecx
	cmp	ebx, eax
	jae	SHORT $LN21@SetRegsToL
$LN5@SetRegsToL:
; Line 3363
	inc	BYTE PTR _ThisCcRange$[ebp]
	mov	al, BYTE PTR _ThisCcRange$[ebp]
	cmp	al, BYTE PTR _NumberOfCCRangesGenerated
	jb	SHORT $LL29@SetRegsToL
; Line 3366
	jmp	SHORT $LN4@SetRegsToL
$LN21@SetRegsToL:
; Line 3367
	movzx	eax, BYTE PTR _ThisCcRange$[ebp]
	imul	eax, 10					; 0000000aH
	movsx	eax, WORD PTR _ClockCrossingsGenerated[eax+6]
	mov	DWORD PTR _TempValue$[ebp], eax
$LN4@SetRegsToL:
; Line 3374
	movzx	eax, BYTE PTR _ThisCcRange$[ebp]
	imul	eax, 10					; 0000000aH
	cmp	BYTE PTR _ClockCrossingsGenerated[eax+8], 0
; Line 3375
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	je	SHORT $LN2@SetRegsToL
	push	DWORD PTR _Cmd$[ebp]
; Line 3376
	jmp	SHORT $LN30@SetRegsToL
$LN2@SetRegsToL:
; Line 3380
	mov	al, BYTE PTR _Cmd$[ebp]
	or	al, 4
	movzx	eax, al
	push	eax
$LN30@SetRegsToL:
	mov	al, BYTE PTR _AlgoElementsStart$[ebp]
	add	al, BYTE PTR _ElementIndex$[ebp]
	movzx	ax, al
	movzx	eax, ax
	push	eax
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfCCElementsGenerated
	jb	$LL9@SetRegsToL
$LN7@SetRegsToL:
	pop	edi
	pop	esi
; Line 3384
	xor	eax, eax
	pop	ebx
; Line 3385
	leave
	ret	0
_SetRegsToLinear ENDP
_TEXT	ENDS
PUBLIC	_GetLinearFromRegs
EXTRN	_ElementsGenerated:BYTE
; Function compile flags: /Ogspy
;	COMDAT _GetLinearFromRegs
_TEXT	SEGMENT
_CCValue$ = -24						; size = 2
tv432 = -20						; size = 4
tv392 = -20						; size = 4
_AlgoElementsStart$ = -16				; size = 2
tv407 = -12						; size = 4
_CCRange$ = -12						; size = 2
_TempValue$ = -8					; size = 4
tv437 = -2						; size = 1
_ThisCcRange$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Type$ = 44						; size = 2
_ElementIndex$ = 47					; size = 1
_Cmd$ = 48						; size = 1
_Value$ = 52						; size = 4
_GetLinearFromRegs PROC					; COMDAT
; Line 3422
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
; Line 3434
	xor	eax, eax
	push	esi
; Line 3442
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	mov	edi, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [edi], eax
	movzx	cx, BYTE PTR _NumberOfElementsPerAlgoGenerated
	mov	bl, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	mov	DWORD PTR _CCValue$[ebp], eax
	mov	DWORD PTR _TempValue$[ebp], eax
	mov	eax, DWORD PTR _Type$[ebp]
	add	eax, -4096				; fffff000H
	imul	ax, cx
	movzx	eax, ax
	mov	DWORD PTR _AlgoElementsStart$[ebp], eax
	mov	BYTE PTR _ElementIndex$[ebp], 0
	test	bl, bl
	jbe	$LN24@GetLinearF
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [esi+eax*2+55494]
; Line 3468
	mov	DWORD PTR tv392[ebp], eax
$LL25@GetLinearF:
	movzx	eax, BYTE PTR _ElementIndex$[ebp]
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR tv407[ebp], eax
	push	esi
	call	_GetHalfClk
	mov	edx, DWORD PTR tv392[ebp]
	movzx	edx, WORD PTR [edx]
	pop	ecx
	pop	ecx
	movzx	ecx, BYTE PTR [esi+65338]
	movzx	ecx, BYTE PTR _ADdllGenerated[ecx]
	imul	ecx, 5
	add	ecx, edx
	imul	ecx, 3
	add	ecx, DWORD PTR tv407[ebp]
	cmp	WORD PTR _GranularityGenerated[ecx*2], ax
	ja	$LN13@GetLinearF
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	DWORD PTR _Cmd$[ebp]
	movzx	ax, BYTE PTR _ElementIndex$[ebp]
	add	ax, WORD PTR _AlgoElementsStart$[ebp]
	movzx	eax, ax
	push	eax
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN28@GetLinearF
	movzx	eax, BYTE PTR [esi+65338]
	movzx	eax, BYTE PTR _ADdllGenerated[eax]
	mov	ecx, DWORD PTR tv392[ebp]
	imul	eax, 5
	movzx	ecx, WORD PTR [ecx]
	add	eax, ecx
	imul	eax, 3
	add	eax, DWORD PTR tv407[ebp]
	movzx	eax, WORD PTR _GranularityGenerated[eax*2]
	imul	eax, DWORD PTR _TempValue$[ebp]
	add	DWORD PTR [edi], eax
$LN28@GetLinearF:
	mov	bl, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	movzx	eax, BYTE PTR _NumberOfDependantElementsGenerated
	movzx	ecx, bl
	sub	ecx, eax
	cmp	DWORD PTR tv407[ebp], ecx
	jl	SHORT $LN13@GetLinearF
	movzx	eax, BYTE PTR [esi+65338]
	movzx	eax, BYTE PTR _ADdllGenerated[eax]
	mov	ecx, DWORD PTR tv392[ebp]
	imul	eax, 5
	movzx	ecx, WORD PTR [ecx]
	add	eax, ecx
	imul	eax, 3
	add	eax, DWORD PTR tv407[ebp]
	mov	ax, WORD PTR _GranularityGenerated[eax*2]
	imul	ax, WORD PTR _TempValue$[ebp]
	add	WORD PTR _CCValue$[ebp], ax
$LN13@GetLinearF:
	inc	BYTE PTR _ElementIndex$[ebp]
	cmp	BYTE PTR _ElementIndex$[ebp], bl
	jb	$LL25@GetLinearF
$LN24@GetLinearF:
; Line 3462
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetHalfClk
	movzx	eax, ax
	mov	DWORD PTR _CCRange$[ebp], eax
; Line 3466
	movzx	ax, bl
	add	WORD PTR _AlgoElementsStart$[ebp], ax
; Line 3468
	cmp	BYTE PTR _NumberOfCCElementsGenerated, 0
	pop	ecx
	pop	ecx
	mov	BYTE PTR _ElementIndex$[ebp], 0
	jbe	$LN6@GetLinearF
	movzx	eax, WORD PTR _AlgoElementsStart$[ebp]
	mov	DWORD PTR tv432[ebp], eax
$LL30@GetLinearF:
; Line 3475
	movzx	eax, BYTE PTR _ElementIndex$[ebp]
	add	eax, DWORD PTR tv432[ebp]
	imul	eax, 44					; 0000002cH
	mov	al, BYTE PTR _ElementsGenerated[eax+19]
	mov	BYTE PTR tv437[ebp], al
	test	al, 32					; 00000020H
	je	$LN7@GetLinearF
; Line 3480
	cmp	BYTE PTR _NumberOfCCRangesGenerated, 0
	mov	BYTE PTR _ThisCcRange$[ebp], 0
	jbe	SHORT $LN2@GetLinearF
$LL29@GetLinearF:
; Line 3483
	movzx	ecx, BYTE PTR _ThisCcRange$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	imul	ecx, 10					; 0000000aH
	cmp	al, BYTE PTR _ClockCrossingsGenerated[ecx]
	jne	SHORT $LN3@GetLinearF
	movzx	edi, WORD PTR _CCRange$[ebp]
	movzx	eax, WORD PTR _ClockCrossingsGenerated[ecx+4]
	imul	eax, edi
	push	100					; 00000064H
	cdq
	pop	ebx
	idiv	ebx
	movzx	ebx, WORD PTR _CCValue$[ebp]
	cmp	ebx, eax
	jae	SHORT $LN27@GetLinearF
	movzx	eax, WORD PTR _ClockCrossingsGenerated[ecx+2]
	imul	eax, edi
	push	100					; 00000064H
	cdq
	pop	ecx
	idiv	ecx
	cmp	ebx, eax
	jae	SHORT $LN20@GetLinearF
$LN27@GetLinearF:
	mov	edi, DWORD PTR _Value$[ebp]
$LN3@GetLinearF:
; Line 3480
	inc	BYTE PTR _ThisCcRange$[ebp]
	mov	al, BYTE PTR _ThisCcRange$[ebp]
	cmp	al, BYTE PTR _NumberOfCCRangesGenerated
	jb	SHORT $LL29@GetLinearF
; Line 3483
	jmp	SHORT $LN2@GetLinearF
$LN20@GetLinearF:
; Line 3484
	movzx	eax, BYTE PTR _ThisCcRange$[ebp]
	mov	edi, DWORD PTR _Value$[ebp]
	imul	eax, 10					; 0000000aH
	movsx	eax, WORD PTR _ClockCrossingsGenerated[eax+6]
	mov	DWORD PTR _TempValue$[ebp], eax
$LN2@GetLinearF:
; Line 3488
	movzx	ecx, BYTE PTR [esi+65338]
	movzx	ecx, BYTE PTR _ADdllGenerated[ecx]
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	ecx, 5
	movzx	eax, WORD PTR [esi+eax*2+55494]
	add	eax, ecx
	movzx	ecx, BYTE PTR tv437[ebp]
	imul	eax, 3
	and	ecx, 15					; 0000000fH
	add	eax, ecx
	movzx	eax, WORD PTR _GranularityGenerated[eax*2]
	imul	eax, DWORD PTR _TempValue$[ebp]
	sub	DWORD PTR [edi], eax
$LN7@GetLinearF:
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfCCElementsGenerated
	jb	$LL30@GetLinearF
$LN6@GetLinearF:
	pop	edi
	pop	esi
; Line 3492
	xor	eax, eax
	pop	ebx
; Line 3493
	leave
	ret	0
_GetLinearFromRegs ENDP
_TEXT	ENDS
PUBLIC	_GetDdrioGroupLimits
; Function compile flags: /Ogspy
;	COMDAT _GetDdrioGroupLimits
_TEXT	SEGMENT
tv244 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Level$ = 24						; size = 1
_Type$ = 28						; size = 2
_ElementIndex$ = 31					; size = 1
_MaxLimit$ = 32						; size = 4
_WaitTime$ = 36						; size = 4
_GetDdrioGroupLimits PROC				; COMDAT
; Line 3522
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 3528
	mov	eax, DWORD PTR _Type$[ebp]
	mov	ecx, 176				; 000000b0H
	cmp	ax, cx
	jae	SHORT $LN8@GetDdrioGr
; Line 3529
	movzx	eax, ax
	imul	eax, 44					; 0000002cH
	cmp	BYTE PTR _ElementsGenerated[eax+18], 255 ; 000000ffH
	je	SHORT $LN7@GetDdrioGr
; Line 3530
	mov	ecx, DWORD PTR _ElementsGenerated[eax+40]
	mov	edx, DWORD PTR _WaitTime$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3531
	mov	eax, DWORD PTR _ElementsGenerated[eax+36]
	mov	ecx, DWORD PTR _MaxLimit$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3532
	jmp	$LN2@GetDdrioGr
$LN7@GetDdrioGr:
; Line 3533
	mov	eax, DWORD PTR _WaitTime$[ebp]
	or	DWORD PTR [eax], -1
; Line 3534
	mov	eax, DWORD PTR _MaxLimit$[ebp]
	or	DWORD PTR [eax], -1
; Line 3536
	jmp	$LN2@GetDdrioGr
$LN8@GetDdrioGr:
; Line 3540
	mov	ecx, DWORD PTR _WaitTime$[ebp]
	xor	edx, edx
	push	esi
; Line 3541
	mov	esi, DWORD PTR _MaxLimit$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [esi], edx
	push	edi
; Line 3546
	movzx	di, BYTE PTR _NumberOfElementsPerAlgoGenerated
	add	eax, -4096				; fffff000H
	imul	ax, di
	movzx	eax, ax
; Line 3548
	mov	BYTE PTR _ElementIndex$[ebp], dl
	cmp	BYTE PTR _NumberOfDelayElementsPerAlgoGenerated, dl
	jbe	SHORT $LN14@GetDdrioGr
	movzx	eax, ax
	mov	DWORD PTR tv244[ebp], eax
	push	ebx
$LL13@GetDdrioGr:
; Line 3554
	movzx	edx, BYTE PTR _ElementIndex$[ebp]
	mov	eax, DWORD PTR tv244[ebp]
	add	eax, edx
	imul	eax, 44					; 0000002cH
	cmp	BYTE PTR _ElementsGenerated[eax+18], 255 ; 000000ffH
	je	SHORT $LN3@GetDdrioGr
; Line 3555
	mov	edi, DWORD PTR _ElementsGenerated[eax+40]
	add	DWORD PTR [ecx], edi
; Line 3557
	movzx	ebx, BYTE PTR _Channel$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	movzx	ebx, WORD PTR [edi+ebx*2+55494]
	movzx	edi, BYTE PTR [edi+65338]
	movzx	edi, BYTE PTR _ADdllGenerated[edi]
	imul	edi, 5
	add	ebx, edi
	imul	ebx, 3
	add	ebx, edx
	movzx	edx, WORD PTR _GranularityGenerated[ebx*2]
	imul	edx, DWORD PTR _ElementsGenerated[eax+36]
	add	DWORD PTR [esi], edx
$LN3@GetDdrioGr:
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	jb	SHORT $LL13@GetDdrioGr
	pop	ebx
$LN14@GetDdrioGr:
	pop	edi
	pop	esi
$LN2@GetDdrioGr:
; Line 3562
	xor	eax, eax
; Line 3563
	leave
	ret	0
_GetDdrioGroupLimits ENDP
_TEXT	ENDS
PUBLIC	_GetLocation
EXTRN	_RankToRegisterGenerated:BYTE
EXTRN	_StrobeToRegisterGenerated:BYTE
EXTRN	_InstancePortMapGenerated:BYTE
EXTRN	_GetMspHostStructureAddress:PROC
; Function compile flags: /Ogspy
;	COMDAT _GetLocation
_TEXT	SEGMENT
tv359 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Element$ = 12						; size = 44
_Channel$ = 56						; size = 1
_Rank$ = 60						; size = 1
_Strobe$ = 64						; size = 1
_Bit$ = 68						; size = 1
_Instance$ = 72						; size = 4
_ByteOffset$ = 76					; size = 4
_StartingBit$ = 80					; size = 4
_EndingBit$ = 84					; size = 4
_GetLocation PROC					; COMDAT
; Line 3593
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 3596
	call	_GetMspHostStructureAddress
; Line 3600
	mov	bl, BYTE PTR _Element$[ebp+19]
	shr	bl, 6
	and	bl, 1
	jne	SHORT $LN18@GetLocatio
	test	BYTE PTR _Element$[ebp+19], 128		; 00000080H
	jne	SHORT $LN18@GetLocatio
; Line 3605
	movzx	eax, BYTE PTR _Rank$[ebp]
	mov	ecx, DWORD PTR _ByteOffset$[ebp]
; Line 3606
	mov	esi, DWORD PTR _StartingBit$[ebp]
; Line 3607
	mov	edi, DWORD PTR _EndingBit$[ebp]
	shl	eax, 2
	movzx	edx, WORD PTR _Element$[ebp+eax+2]
	add	DWORD PTR [ecx], edx
	mov	dl, BYTE PTR _Element$[ebp+eax+4]
	mov	al, BYTE PTR _Element$[ebp+eax+5]
	mov	BYTE PTR [esi], dl
; Line 3612
	mov	dl, BYTE PTR _Strobe$[ebp]
	mov	BYTE PTR [edi], al
	cmp	dl, 9
	jb	$LN13@GetLocatio
; Line 3616
	movsx	eax, WORD PTR _Element$[ebp+26]
	add	DWORD PTR [ecx], eax
; Line 3617
	mov	al, BYTE PTR _Element$[ebp+28]
	add	BYTE PTR [esi], al
; Line 3618
	add	BYTE PTR [edi], al
; Line 3622
	movzx	eax, BYTE PTR _Element$[ebp]
	shl	eax, 4
	cmp	BYTE PTR _InstancePortMapGenerated[eax+1], 1
	jbe	SHORT $LN13@GetLocatio
; Line 3626
	mov	ebx, DWORD PTR _Instance$[ebp]
	mov	al, dl
	sub	al, 9
	mov	BYTE PTR [ebx], al
; Line 3629
	jmp	SHORT $LN13@GetLocatio
$LN18@GetLocatio:
; Line 3633
	movzx	eax, BYTE PTR _Rank$[ebp]
	mov	ecx, DWORD PTR _ByteOffset$[ebp]
; Line 3634
	mov	esi, DWORD PTR _StartingBit$[ebp]
; Line 3635
	mov	edi, DWORD PTR _EndingBit$[ebp]
	shl	eax, 2
	movzx	edx, WORD PTR _Element$[ebp+eax+2]
	add	DWORD PTR [ecx], edx
	mov	dl, BYTE PTR _Element$[ebp+eax+4]
	mov	BYTE PTR [esi], dl
	mov	dl, BYTE PTR _Element$[ebp+eax+5]
	mov	BYTE PTR [edi], dl
; Line 3636
	mov	edx, DWORD PTR _Instance$[ebp]
	mov	BYTE PTR [edx], 0
; Line 3638
	cmp	bl, 1
	jne	SHORT $LN22@GetLocatio
; Line 3639
	movzx	ebx, BYTE PTR _Strobe$[ebp]
	shl	ebx, 2
	mov	DWORD PTR tv359[ebp], ebx
	mov	bl, BYTE PTR _StrobeToRegisterGenerated[ebx]
	mov	BYTE PTR [edx], bl
; Line 3640
	mov	ebx, DWORD PTR tv359[ebp]
	movsx	ebx, WORD PTR _StrobeToRegisterGenerated[ebx+2]
	add	DWORD PTR [ecx], ebx
$LN22@GetLocatio:
; Line 3642
	test	BYTE PTR _Element$[ebp+19], 128		; 00000080H
	je	SHORT $LN23@GetLocatio
; Line 3643
	mov	bl, BYTE PTR _RankToRegisterGenerated[eax]
	add	BYTE PTR [edx], bl
; Line 3644
	movsx	eax, WORD PTR _RankToRegisterGenerated[eax+2]
	add	DWORD PTR [ecx], eax
$LN23@GetLocatio:
	mov	dl, BYTE PTR _Strobe$[ebp]
$LN13@GetLocatio:
; Line 3650
	test	BYTE PTR _Element$[ebp+19], 16		; 00000010H
	je	SHORT $LN1@GetLocatio
; Line 3651
	mov	bl, 3
	cmp	dl, 4
	jb	SHORT $LN9@GetLocatio
	cmp	dl, 7
	jbe	SHORT $LN10@GetLocatio
$LN9@GetLocatio:
	sub	dl, 13					; 0000000dH
	cmp	dl, bl
	ja	SHORT $LN21@GetLocatio
$LN10@GetLocatio:
; Line 3660
	movzx	eax, BYTE PTR _Bit$[ebp]
	sub	eax, 0
	je	SHORT $LN6@GetLocatio
	dec	eax
	je	SHORT $LN7@GetLocatio
	dec	eax
	je	SHORT $LN4@GetLocatio
	dec	eax
; Line 3675
	jne	SHORT $LN4@GetLocatio
; Line 3671
	mov	bl, 1
; Line 3672
	jmp	SHORT $LN7@GetLocatio
$LN4@GetLocatio:
; Line 3668
	xor	bl, bl
; Line 3669
	jmp	SHORT $LN7@GetLocatio
$LN6@GetLocatio:
; Line 3662
	mov	bl, 2
	jmp	SHORT $LN7@GetLocatio
$LN21@GetLocatio:
	mov	bl, BYTE PTR _Bit$[ebp]
$LN7@GetLocatio:
; Line 3678
	movsx	eax, WORD PTR _Element$[ebp+30]
	movzx	edx, bl
	imul	eax, edx
	add	DWORD PTR [ecx], eax
; Line 3679
	mov	al, BYTE PTR _Element$[ebp+32]
	imul	bl
	add	BYTE PTR [esi], al
; Line 3680
	add	BYTE PTR [edi], al
; Line 3684
	movsx	eax, BYTE PTR _Element$[ebp+32]
	imul	eax, edx
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN1@GetLocatio
; Line 3685
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	shl	eax, 2
	add	DWORD PTR [ecx], eax
$LN1@GetLocatio:
	pop	edi
	pop	esi
; Line 3689
	xor	eax, eax
	pop	ebx
; Line 3690
	leave
	ret	0
_GetLocation ENDP
_TEXT	ENDS
PUBLIC	_BytelaneMask
; Function compile flags: /Ogspy
;	COMDAT _BytelaneMask
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Mask$ = 12						; size = 4
_BytelaneMask PROC					; COMDAT
; Line 3703
	mov	eax, DWORD PTR _Mask$[esp-4]
	mov	DWORD PTR [eax], 1
; Line 3713
	xor	eax, eax
; Line 3714
	ret	0
_BytelaneMask ENDP
_TEXT	ENDS
PUBLIC	_CountOnes
; Function compile flags: /Ogspy
;	COMDAT _CountOnes
_TEXT	SEGMENT
_ErrorPerStrobe$ = 8					; size = 4
_CountOnes PROC						; COMDAT
; Line 4804
	mov	ecx, DWORD PTR _ErrorPerStrobe$[esp-4]
; Line 4805
	xor	al, al
	test	ecx, ecx
	je	SHORT $LN6@CountOnes
; Line 4814
	movzx	edx, BYTE PTR [ecx]
	push	esi
	push	edi
	push	4
	xor	ecx, ecx
	pop	esi
$LL4@CountOnes:
	xor	edi, edi
	inc	edi
	shl	edi, cl
	test	edi, edx
	je	SHORT $LN3@CountOnes
; Line 4810
	inc	al
$LN3@CountOnes:
; Line 4808
	inc	ecx
	dec	esi
	jne	SHORT $LL4@CountOnes
	pop	edi
	pop	esi
$LN6@CountOnes:
; Line 4815
	ret	0
_CountOnes ENDP
_TEXT	ENDS
PUBLIC	_ConfigureCwlStressTest
; Function compile flags: /Ogspy
;	COMDAT _ConfigureCwlStressTest
_TEXT	SEGMENT
_RankDynamicOffsets$ = -8				; size = 8
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_ConfigureCwlStressTest PROC				; COMDAT
; Line 4898
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 4902
	movzx	edx, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR _MrcData$[ebp]
	imul	edx, 542				; 0000021eH
	mov	eax, 212				; 000000d4H
	mov	WORD PTR _RankDynamicOffsets$[ebp], ax
	add	eax, 49					; 00000031H
	mov	WORD PTR _RankDynamicOffsets$[ebp+2], ax
	mov	eax, 230				; 000000e6H
	mov	WORD PTR _RankDynamicOffsets$[ebp+4], ax
	add	eax, 50					; 00000032H
	mov	WORD PTR _RankDynamicOffsets$[ebp+6], ax
	movzx	eax, BYTE PTR _Rank$[ebp]
	movzx	eax, WORD PTR _RankDynamicOffsets$[ebp+eax*2]
	add	eax, edx
	mov	BYTE PTR [ecx+65583], 1
	cmp	DWORD PTR [ecx+eax*8+55526], 1
	jne	SHORT $LN2@ConfigureC
	cmp	DWORD PTR [ecx+eax*8+55530], 0
	jne	SHORT $LN2@ConfigureC
; Line 4903
	mov	BYTE PTR [ecx+65582], 3
; Line 4907
	leave
	ret	0
$LN2@ConfigureC:
; Line 4905
	mov	BYTE PTR [ecx+65582], 1
; Line 4907
	leave
	ret	0
_ConfigureCwlStressTest ENDP
_TEXT	ENDS
PUBLIC	_IsPairStrobeHealthy
; Function compile flags: /Ogspy
;	COMDAT _IsPairStrobeHealthy
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Strobe$ = 20						; size = 1
_FailingStrobes$ = 24					; size = 4
_ErrBitsPerStrobe$ = 28					; size = 4
_IsPairStrobeHealthy PROC				; COMDAT
; Line 4952
	mov	al, BYTE PTR _Strobe$[esp-4]
	cmp	al, 9
	jb	SHORT $LN5@IsPairStro
; Line 4953
	sub	al, 9
; Line 4954
	jmp	SHORT $LN4@IsPairStro
$LN5@IsPairStro:
; Line 4955
	add	al, 9
$LN4@IsPairStro:
; Line 4958
	movzx	ecx, al
	xor	eax, eax
	inc	eax
	mov	edx, eax
	shl	edx, cl
	test	DWORD PTR _FailingStrobes$[esp-4], edx
; Line 4959
	je	SHORT $LN1@IsPairStro
; Line 4961
	mov	eax, DWORD PTR _ErrBitsPerStrobe$[esp-4]
	add	ecx, eax
	push	ecx
	call	_CountOnes
	cmp	al, 3
	pop	ecx
	setb	al
$LN1@IsPairStro:
; Line 4967
	ret	0
_IsPairStrobeHealthy ENDP
_TEXT	ENDS
PUBLIC	_IsEccStrobe
; Function compile flags: /Ogspy
;	COMDAT _IsEccStrobe
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Strobe$ = 16						; size = 1
_IsEccStrobe PROC					; COMDAT
; Line 5417
	mov	cl, BYTE PTR _Strobe$[esp-4]
	mov	edx, DWORD PTR _MrcData$[esp-4]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	movzx	ecx, BYTE PTR _Channel$[esp-4]
	test	eax, DWORD PTR [edx+ecx*4+55446]
	setne	al
; Line 5421
	ret	0
_IsEccStrobe ENDP
_TEXT	ENDS
PUBLIC	_IsStrobeValid
; Function compile flags: /Ogspy
;	COMDAT _IsStrobeValid
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Strobe$ = 20						; size = 1
_BitLevel$ = 24						; size = 1
_MaxBit$ = 28						; size = 4
_IsStrobeValid PROC					; COMDAT
; Line 5446
	push	ebp
	mov	ebp, esp
; Line 5452
	movzx	eax, BYTE PTR _Rank$[ebp]
	mov	ecx, DWORD PTR _Strobe$[ebp]
	push	ebx
	push	esi
	movzx	esi, BYTE PTR _Channel$[ebp]
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	add	eax, edi
	lea	ebx, DWORD PTR [eax+esi*4]
	cmp	cl, BYTE PTR [ebx+55454]
	jae	SHORT $LN9@IsStrobeVa
	cmp	BYTE PTR [esi+edi+30686], 0
	jne	SHORT $LN10@IsStrobeVa
	push	ecx
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_IsEccStrobe
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN9@IsStrobeVa
	mov	ecx, DWORD PTR _Strobe$[ebp]
$LN10@IsStrobeVa:
; Line 5455
	mov	eax, DWORD PTR _MaxBit$[ebp]
	test	eax, eax
	je	SHORT $LN5@IsStrobeVa
; Line 5460
	cmp	BYTE PTR _BitLevel$[ebp], 0
	jne	SHORT $LN6@IsStrobeVa
; Line 5461
	mov	BYTE PTR [eax], 1
; Line 5462
	jmp	SHORT $LN5@IsStrobeVa
$LN6@IsStrobeVa:
; Line 5463
	mov	dl, BYTE PTR [ebx+55462]
	mov	BYTE PTR [eax], dl
$LN5@IsStrobeVa:
; Line 5466
	imul	esi, 4336				; 000010f0H
	cmp	DWORD PTR [esi+edi+56598], 1
	jne	SHORT $LN3@IsStrobeVa
	cmp	DWORD PTR [esi+edi+56602], 0
	jne	SHORT $LN3@IsStrobeVa
; Line 5467
	cmp	cl, 4
	jb	SHORT $LN1@IsStrobeVa
	cmp	cl, 7
	jbe	SHORT $LN9@IsStrobeVa
$LN1@IsStrobeVa:
	sub	cl, 13					; 0000000dH
	cmp	cl, 3
; Line 5468
	jbe	SHORT $LN9@IsStrobeVa
$LN3@IsStrobeVa:
; Line 5471
	mov	al, 1
	jmp	SHORT $LN8@IsStrobeVa
$LN9@IsStrobeVa:
; Line 5453
	xor	al, al
$LN8@IsStrobeVa:
	pop	edi
	pop	esi
	pop	ebx
; Line 5473
	pop	ebp
	ret	0
_IsStrobeValid ENDP
_TEXT	ENDS
PUBLIC	_SocOdtTraining
; Function compile flags: /Ogspy
;	COMDAT _SocOdtTraining
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_SocOdtTraining PROC					; COMDAT
; Line 6270
	xor	eax, eax
; Line 6271
	ret	0
_SocOdtTraining ENDP
_TEXT	ENDS
PUBLIC	_DimmOdtTraining
; Function compile flags: /Ogspy
;	COMDAT _DimmOdtTraining
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_DimmOdtTraining PROC					; COMDAT
; Line 6705
	xor	eax, eax
; Line 6706
	ret	0
_DimmOdtTraining ENDP
_TEXT	ENDS
PUBLIC	_GetLowHighMarginPerStrobe
EXTRN	_BreakStrobeLoop:PROC
; Function compile flags: /Ogspy
;	COMDAT _GetLowHighMarginPerStrobe
_TEXT	SEGMENT
_RmtMinLeftMargin$ = -12				; size = 2
_RmtMinRightMargin$ = -8				; size = 2
_Strobe$ = -4						; size = 1
tv302 = 8						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Results$ = 20						; size = 4
_CurrentValue$ = 24					; size = 4
_DelaySignal$ = 28					; size = 2
_RmtLowDataOffset$ = 32					; size = 1
_RmtHighDataOffset$ = 36				; size = 1
_GetLowHighMarginPerStrobe PROC				; COMDAT
; Line 7131
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 7154
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _RmtMinLeftMargin$[ebp], -32767 ; ffff8001H
	mov	DWORD PTR _RmtMinRightMargin$[ebp], 32767 ; 00007fffH
	mov	BYTE PTR _Strobe$[ebp], 0
$LL15@GetLowHigh:
; Line 7155
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN7@GetLowHigh
; Line 7159
	movzx	ecx, BYTE PTR _Channel$[ebp]
	movzx	esi, BYTE PTR _Strobe$[ebp]
	mov	edx, DWORD PTR _Results$[ebp]
	mov	eax, ecx
	imul	eax, 18					; 00000012H
	add	eax, esi
	shl	eax, 5
	add	eax, edx
	mov	edx, DWORD PTR _CurrentValue$[ebp]
	movzx	edx, WORD PTR [edx+esi*4]
	mov	bx, WORD PTR [eax]
	sub	bx, dx
	mov	DWORD PTR tv302[ebp], edx
	movzx	edx, bx
; Line 7160
	cmp	dx, WORD PTR _RmtMinLeftMargin$[ebp]
	jle	SHORT $LN4@GetLowHigh
; Line 7161
	movzx	ebx, dx
	mov	DWORD PTR _RmtMinLeftMargin$[ebp], ebx
$LN4@GetLowHigh:
; Line 7164
	mov	ax, WORD PTR [eax+2]
	sub	ax, WORD PTR tv302[ebp]
	movzx	eax, ax
; Line 7165
	cmp	ax, WORD PTR _RmtMinRightMargin$[ebp]
	jge	SHORT $LN3@GetLowHigh
; Line 7166
	movzx	ebx, ax
	mov	DWORD PTR _RmtMinRightMargin$[ebp], ebx
$LN3@GetLowHigh:
; Line 7168
	sub	eax, edx
	movzx	edx, BYTE PTR _Rank$[ebp]
	lea	edx, DWORD PTR [edx+ecx*4]
	imul	edx, 18					; 00000012H
	add	edx, esi
	mov	WORD PTR [edi+edx*2+65006], ax
; Line 7173
	cmp	BYTE PTR [ecx+edi+31272], 7
	jne	SHORT $LN13@GetLowHigh
	mov	eax, 57360				; 0000e010H
	cmp	WORD PTR _DelaySignal$[ebp], ax
	je	SHORT $LN7@GetLowHigh
$LN13@GetLowHigh:
; Line 7178
	lea	eax, DWORD PTR _Strobe$[ebp]
	push	eax
	push	DWORD PTR _DelaySignal$[ebp]
	push	edi
	call	_BreakStrobeLoop
	add	esp, 12					; 0000000cH
$LN7@GetLowHigh:
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL15@GetLowHigh
; Line 7185
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	dx, WORD PTR _RmtMinRightMargin$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _RmtHighDataOffset$[ebp]
	imul	eax, 14					; 0000000eH
	add	ecx, eax
	mov	WORD PTR [edi+ecx*2+64782], dx
; Line 7186
	movzx	ecx, BYTE PTR _RmtLowDataOffset$[ebp]
	add	ecx, eax
	mov	ax, WORD PTR _RmtMinLeftMargin$[ebp]
	mov	WORD PTR [edi+ecx*2+64782], ax
	pop	edi
	pop	esi
; Line 7188
	xor	eax, eax
	pop	ebx
; Line 7189
	leave
	ret	0
_GetLowHighMarginPerStrobe ENDP
_TEXT	ENDS
PUBLIC	_GetIndexBasedOnFastBootParameter
; Function compile flags: /Ogspy
;	COMDAT _GetIndexBasedOnFastBootParameter
_TEXT	SEGMENT
_inputParameter$ = 8					; size = 1
_GetIndexBasedOnFastBootParameter PROC			; COMDAT
; Line 7196
	movzx	eax, BYTE PTR _inputParameter$[esp-4]
	sub	eax, 0
	je	SHORT $LN6@GetIndexBa
	dec	eax
	je	SHORT $LN5@GetIndexBa
	dec	eax
	je	SHORT $LN4@GetIndexBa
	dec	eax
	je	SHORT $LN3@GetIndexBa
	dec	eax
	je	SHORT $LN2@GetIndexBa
; Line 7213
	mov	eax, 255				; 000000ffH
; Line 7215
	ret	0
$LN2@GetIndexBa:
; Line 7210
	mov	eax, 57360				; 0000e010H
; Line 7215
	ret	0
$LN3@GetIndexBa:
; Line 7207
	mov	eax, 16387				; 00004003H
; Line 7215
	ret	0
$LN4@GetIndexBa:
; Line 7204
	mov	eax, 57349				; 0000e005H
; Line 7215
	ret	0
$LN5@GetIndexBa:
; Line 7201
	mov	eax, 57347				; 0000e003H
; Line 7215
	ret	0
$LN6@GetIndexBa:
; Line 7198
	mov	eax, 57348				; 0000e004H
; Line 7215
	ret	0
_GetIndexBasedOnFastBootParameter ENDP
_TEXT	ENDS
PUBLIC	_PrintCommandLowHigh
; Function compile flags: /Ogspy
;	COMDAT _PrintCommandLowHigh
_TEXT	SEGMENT
_Command$ = 8						; size = 1
_LowValue$ = 12						; size = 4
_HighValue$ = 16					; size = 4
_DefaultValue$ = 20					; size = 4
_PrintCommandLowHigh PROC				; COMDAT
; Line 8428
	xor	eax, eax
; Line 8429
	ret	0
_PrintCommandLowHigh ENDP
_TEXT	ENDS
PUBLIC	_PhyViewTable
; Function compile flags: /Ogspy
;	COMDAT _PhyViewTable
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_PhyViewTable PROC					; COMDAT
; Line 9373
	xor	eax, eax
; Line 9374
	ret	0
_PhyViewTable ENDP
_TEXT	ENDS
PUBLIC	_PerformanceSetting
; Function compile flags: /Ogspy
;	COMDAT _PerformanceSetting
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_PerformanceSetting PROC				; COMDAT
; Line 9572
	xor	eax, eax
; Line 9573
	ret	0
_PerformanceSetting ENDP
_TEXT	ENDS
PUBLIC	_DisplayTrainingResultsHeader
; Function compile flags: /Ogspy
;	COMDAT _DisplayTrainingResultsHeader
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_SignalNameLength$ = 16					; size = 1
_DisplayTrainingResultsHeader PROC			; COMDAT
; Line 9747
	xor	eax, eax
; Line 9748
	ret	0
_DisplayTrainingResultsHeader ENDP
_TEXT	ENDS
PUBLIC	_MmrcExecuteTask
EXTRN	_MspExecuteTask:PROC
; Function compile flags: /Ogspy
;	COMDAT _MmrcExecuteTask
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_MmrcExecuteTask PROC					; COMDAT
; Line 10124
	push	DWORD PTR _Channel$[esp-4]
	mov	eax, DWORD PTR _MrcData$[esp]
	push	DWORD PTR _StringIndex$[esp]
	add	eax, 55486				; 0000d8beH
	push	DWORD PTR _CapsuleStartIndex$[esp+4]
	push	0
	push	eax
	call	_MspExecuteTask
	add	esp, 20					; 00000014H
; Line 10125
	ret	0
_MmrcExecuteTask ENDP
_TEXT	ENDS
PUBLIC	_SpreadBitResults
; Function compile flags: /Ogspy
;	COMDAT _SpreadBitResults
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_MaximumBits$ = 12					; size = 1
_PerBitSweep$ = 16					; size = 1
_Bit0Result$ = 20					; size = 4
_LowHighFlag$ = 20					; size = 1
_PassFailPerBit$ = 24					; size = 4
_Results$ = 28						; size = 4
_ResultsB0Backup$ = 32					; size = 4
_SpreadBitResults PROC					; COMDAT
; Line 10468
	push	ebp
	mov	ebp, esp
; Line 10472
	movzx	eax, BYTE PTR _LowHighFlag$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [eax+eax]
	mov	cx, WORD PTR [edx+edi]
	lea	esi, DWORD PTR _Bit0Result$[ebp+edx]
	mov	WORD PTR [esi], cx
; Line 10474
	mov	cl, BYTE PTR _MaximumBits$[ebp]
	cmp	cl, 1
	jbe	SHORT $LN5@SpreadBitR
	push	ebx
	mov	ebx, DWORD PTR _PassFailPerBit$[ebp]
	add	ebx, 3
	dec	cl
	lea	eax, DWORD PTR [edi+eax*2+4]
	movzx	ecx, cl
$LL7@SpreadBitR:
; Line 10475
	cmp	BYTE PTR _PerBitSweep$[ebp], 0
	je	SHORT $LN4@SpreadBitR
; Line 10476
	cmp	BYTE PTR [ebx], 0
	jne	SHORT $LN6@SpreadBitR
$LN4@SpreadBitR:
; Line 10480
	mov	di, WORD PTR [esi]
	mov	WORD PTR [eax], di
$LN6@SpreadBitR:
	add	ebx, 3
	add	eax, 4
	dec	ecx
	jne	SHORT $LL7@SpreadBitR
	pop	ebx
$LN5@SpreadBitR:
; Line 10483
	mov	eax, DWORD PTR _PassFailPerBit$[ebp]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN1@SpreadBitR
; Line 10484
	mov	ax, WORD PTR [esi]
	mov	ecx, DWORD PTR _ResultsB0Backup$[ebp]
	mov	WORD PTR [edx+ecx], ax
$LN1@SpreadBitR:
	pop	edi
	pop	esi
; Line 10486
	pop	ebp
	ret	0
_SpreadBitResults ENDP
_TEXT	ENDS
PUBLIC	_DeterminePassFailPerStrobe
; Function compile flags: /Ogspy
;	COMDAT _DeterminePassFailPerStrobe
_TEXT	SEGMENT
_PassFailPerStrobe$ = -1				; size = 1
_MrcData$ = 8						; size = 4
_MaximumBits$ = 12					; size = 1
_PerBitSweep$ = 16					; size = 1
_PassFailPerBit$ = 20					; size = 4
_SampleIndex$ = 24					; size = 1
_DeterminePassFailPerStrobe PROC			; COMDAT
; Line 10513
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 10517
	cmp	BYTE PTR _PerBitSweep$[ebp], 0
	setne	BYTE PTR _PassFailPerStrobe$[ebp]
; Line 10522
	cmp	BYTE PTR _SampleIndex$[ebp], 2
	jne	SHORT $LN16@DetermineP
; Line 10523
	mov	BYTE PTR _PassFailPerStrobe$[ebp], 255	; 000000ffH
$LN16@DetermineP:
	push	ebx
; Line 10526
	xor	bl, bl
	cmp	BYTE PTR _MaximumBits$[ebp], bl
	jbe	SHORT $LN13@DetermineP
	mov	edx, DWORD PTR _PassFailPerBit$[ebp]
$LL28@DetermineP:
; Line 10527
	mov	al, BYTE PTR _SampleIndex$[ebp]
	test	al, al
	je	SHORT $LN11@DetermineP
	cmp	al, 1
	je	SHORT $LN11@DetermineP
; Line 10544
	cmp	al, 2
	jne	SHORT $LN14@DetermineP
; Line 10545
	movzx	eax, bl
	imul	eax, 3
	mov	cl, BYTE PTR [eax+edx+2]
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN25@DetermineP
; Line 10547
	cmp	cl, BYTE PTR _PassFailPerStrobe$[ebp]
	jae	SHORT $LN14@DetermineP
; Line 10548
	mov	BYTE PTR _PassFailPerStrobe$[ebp], cl
	jmp	SHORT $LN14@DetermineP
$LN11@DetermineP:
; Line 10528
	movzx	ecx, bl
	imul	ecx, 3
	movzx	eax, al
	add	ecx, edx
	mov	cl, BYTE PTR [eax+ecx]
	test	cl, cl
	jne	SHORT $LN30@DetermineP
	cmp	BYTE PTR _PerBitSweep$[ebp], cl
	jne	SHORT $LN23@DetermineP
$LN30@DetermineP:
; Line 10534
	cmp	cl, 1
	jne	SHORT $LN8@DetermineP
	cmp	BYTE PTR _PerBitSweep$[ebp], 0
	je	SHORT $LN24@DetermineP
$LN8@DetermineP:
; Line 10540
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN25@DetermineP
$LN14@DetermineP:
; Line 10526
	inc	bl
	cmp	bl, BYTE PTR _MaximumBits$[ebp]
	jb	SHORT $LL28@DetermineP
$LN13@DetermineP:
; Line 10552
	mov	al, BYTE PTR _PassFailPerStrobe$[ebp]
$LN19@DetermineP:
	pop	ebx
; Line 10553
	leave
	ret	0
$LN23@DetermineP:
; Line 10532
	mov	BYTE PTR _PassFailPerStrobe$[ebp], 0
	jmp	SHORT $LN13@DetermineP
$LN24@DetermineP:
; Line 10538
	mov	BYTE PTR _PassFailPerStrobe$[ebp], 1
	jmp	SHORT $LN13@DetermineP
$LN25@DetermineP:
; Line 10541
	or	al, 255					; 000000ffH
	jmp	SHORT $LN19@DetermineP
_DeterminePassFailPerStrobe ENDP
_TEXT	ENDS
PUBLIC	_FoundEdge
; Function compile flags: /Ogspy
;	COMDAT _FoundEdge
_TEXT	SEGMENT
tv534 = -8						; size = 4
_FoundAllEdges$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_MaximumBits$ = 12					; size = 1
_PerBitSweep$ = 16					; size = 1
_PassFail$ = 20						; size = 4
_DitherVal$ = 24					; size = 1
_FoundEdge PROC						; COMDAT
; Line 11160
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 11170
	mov	ebx, DWORD PTR _MaximumBits$[ebp]
	push	edi
	mov	edi, DWORD PTR _PassFail$[ebp]
	push	2
	push	edi
	push	DWORD PTR _PerBitSweep$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassFailPerStrobe
	add	esp, 20					; 00000014H
	cmp	al, 255					; 000000ffH
	jne	SHORT $LN15@FoundEdge
; Line 11171
	test	bl, bl
	jbe	SHORT $LN12@FoundEdge
	lea	eax, DWORD PTR [edi+1]
	movzx	ecx, bl
$LL14@FoundEdge:
; Line 11176
	mov	dl, BYTE PTR [eax-1]
	mov	BYTE PTR [eax+1], 0
	mov	BYTE PTR [eax], dl
	add	eax, 3
	dec	ecx
	jne	SHORT $LL14@FoundEdge
$LN12@FoundEdge:
; Line 11178
	xor	al, al
	jmp	SHORT $LN16@FoundEdge
$LN15@FoundEdge:
	push	esi
; Line 11184
	mov	cl, 1
; Line 11185
	test	bl, bl
	jbe	SHORT $LN7@FoundEdge
	lea	eax, DWORD PTR [edi+2]
	movzx	esi, bl
$LL11@FoundEdge:
; Line 11186
	mov	dl, BYTE PTR [eax-1]
	cmp	dl, BYTE PTR [eax-2]
	jne	SHORT $LN10@FoundEdge
; Line 11187
	xor	cl, cl
	mov	BYTE PTR [eax], cl
$LN10@FoundEdge:
	add	eax, 3
	dec	esi
	jne	SHORT $LL11@FoundEdge
; Line 11191
	test	cl, cl
	jne	SHORT $LN7@FoundEdge
; Line 11192
	xor	al, al
	jmp	SHORT $LN26@FoundEdge
$LN7@FoundEdge:
; Line 11200
	mov	BYTE PTR _FoundAllEdges$[ebp], 0
; Line 11201
	test	bl, bl
	jbe	SHORT $LN4@FoundEdge
	movzx	eax, bl
	lea	esi, DWORD PTR [edi+2]
	mov	DWORD PTR tv534[ebp], eax
$LL6@FoundEdge:
; Line 11202
	mov	al, BYTE PTR [esi-1]
	cmp	al, BYTE PTR [esi-2]
	je	SHORT $LN5@FoundEdge
; Line 11203
	mov	al, BYTE PTR [esi]
	cmp	BYTE PTR _DitherVal$[ebp], al
	jbe	SHORT $LN2@FoundEdge
; Line 11204
	inc	al
	mov	BYTE PTR [esi], al
$LN2@FoundEdge:
; Line 11206
	push	2
	push	edi
	push	DWORD PTR _PerBitSweep$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassFailPerStrobe
	add	esp, 20					; 00000014H
	cmp	al, BYTE PTR _DitherVal$[ebp]
	jb	SHORT $LN5@FoundEdge
; Line 11207
	mov	BYTE PTR _FoundAllEdges$[ebp], 1
$LN5@FoundEdge:
; Line 11201
	add	esi, 3
	dec	DWORD PTR tv534[ebp]
	jne	SHORT $LL6@FoundEdge
$LN4@FoundEdge:
; Line 11211
	mov	al, BYTE PTR _FoundAllEdges$[ebp]
$LN26@FoundEdge:
	pop	esi
$LN16@FoundEdge:
	pop	edi
	pop	ebx
; Line 11212
	leave
	ret	0
_FoundEdge ENDP
_TEXT	ENDS
PUBLIC	_PrechargeAll
EXTRN	_WriteDramCommandSideWrap:PROC
; Function compile flags: /Ogspy
;	COMDAT _PrechargeAll
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_PrechargeAll PROC					; COMDAT
; Line 12323
	push	ebp
	mov	ebp, esp
; Line 12336
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	mov	BYTE PTR [esi+55508], 0
	cmp	BYTE PTR [eax+esi+31272], 3
; Line 12342
	movzx	eax, BYTE PTR _Rank$[ebp]
	ja	SHORT $LN2@PrechargeA
	and	eax, 3
	shl	eax, 22					; 00000016H
	or	eax, 65538				; 00010002H
; Line 12343
	jmp	SHORT $LN1@PrechargeA
$LN2@PrechargeA:
; Line 12354
	and	eax, 3
	shl	eax, 26					; 0000001aH
	or	eax, 262154				; 0004000aH
$LN1@PrechargeA:
; Line 12356
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommandSideWrap
	add	esp, 16					; 00000010H
; Line 12358
	mov	BYTE PTR [esi+55508], bl
	pop	esi
; Line 12360
	xor	eax, eax
	pop	ebx
; Line 12361
	pop	ebp
	ret	0
_PrechargeAll ENDP
_TEXT	ENDS
PUBLIC	_NopCommands
; Function compile flags: /Ogspy
;	COMDAT _NopCommands
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_NopCommands PROC					; COMDAT
; Line 12378
	push	ebp
	mov	ebp, esp
; Line 12391
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	mov	BYTE PTR [esi+55508], 0
	cmp	BYTE PTR [eax+esi+31272], 3
; Line 12397
	movzx	eax, BYTE PTR _Rank$[ebp]
	ja	SHORT $LN2@NopCommand
	and	eax, 3
	shl	eax, 22					; 00000016H
	or	eax, 7
; Line 12398
	jmp	SHORT $LN1@NopCommand
$LN2@NopCommand:
; Line 12409
	and	eax, 3
	shl	eax, 26					; 0000001aH
	or	eax, 15					; 0000000fH
$LN1@NopCommand:
; Line 12411
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommandSideWrap
	add	esp, 16					; 00000010H
; Line 12413
	mov	BYTE PTR [esi+55508], bl
	pop	esi
; Line 12415
	xor	eax, eax
	pop	ebx
; Line 12416
	pop	ebp
	ret	0
_NopCommands ENDP
_TEXT	ENDS
PUBLIC	_ScrubMemory
EXTRN	_MemInitPerDimm:PROC
EXTRN	_IsAdrFlow:PROC
; Function compile flags: /Ogspy
;	COMDAT _ScrubMemory
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_BackupEnable$ = 11					; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_ScrubMemory PROC					; COMDAT
; Line 12938
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 12943
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55509]
	push	edi
; Line 12944
	xor	ebx, ebx
	xor	edi, edi
	mov	BYTE PTR _BackupEnable$[ebp], al
; Line 12948
	cmp	BYTE PTR [esi+65479], bl
; Line 12950
	jne	SHORT $LN11@ScrubMemor
; Line 12951
	cmp	BYTE PTR [esi+65478], bl
	je	SHORT $LN6@ScrubMemor
	mov	al, BYTE PTR [esi+31274]
	cmp	al, 1
	je	SHORT $LN3@ScrubMemor
	cmp	al, 16					; 00000010H
; Line 12956
	je	SHORT $LN3@ScrubMemor
$LN6@ScrubMemor:
	test	BYTE PTR [esi+71008], 4
	jne	SHORT $LN3@ScrubMemor
	push	esi
	call	_IsAdrFlow
	pop	ecx
	test	al, al
	jne	SHORT $LN3@ScrubMemor
$LN11@ScrubMemor:
; Line 12961
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_MemInitPerDimm
	pop	ecx
	mov	edi, eax
	pop	ecx
$LN3@ScrubMemor:
; Line 12963
	movzx	eax, BYTE PTR _Channel$[ebp]
; Line 12965
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	cmp	BYTE PTR [eax+esi+30686], bl
	je	SHORT $LN2@ScrubMemor
	imul	eax, 4336				; 000010f0H
	push	11739					; 00002ddbH
	push	esi
	mov	DWORD PTR [eax+esi+56590], 3
	mov	DWORD PTR [eax+esi+56594], ebx
	call	_MmrcExecuteTask
; Line 12967
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR [esi+55509], 1
	push	ebx
	push	11754					; 00002deaH
	push	esi
	call	_MmrcExecuteTask
; Line 12968
	mov	al, BYTE PTR _BackupEnable$[ebp]
	add	esp, 32					; 00000020H
	mov	BYTE PTR [esi+55509], al
; Line 12971
	jmp	SHORT $LN1@ScrubMemor
$LN2@ScrubMemor:
; Line 12972
	imul	eax, 4336				; 000010f0H
; Line 12973
	push	7633					; 00001dd1H
	push	esi
	mov	DWORD PTR [eax+esi+56590], ebx
	mov	DWORD PTR [eax+esi+56594], ebx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN1@ScrubMemor:
; Line 12975
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 12979
	pop	ebp
	ret	0
_ScrubMemory ENDP
_TEXT	ENDS
PUBLIC	_DisplayInformation
; Function compile flags: /Ogspy
;	COMDAT _DisplayInformation
_TEXT	SEGMENT
tv228 = -12						; size = 4
tv287 = -8						; size = 4
tv601 = -4						; size = 4
tv576 = 8						; size = 4
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
tv471 = 20						; size = 4
_Channel$ = 20						; size = 1
_DisplayInformation PROC				; COMDAT
; Line 13000
	push	ebp
	mov	ebp, esp
; Line 13010
	mov	edx, DWORD PTR _MrcData$[ebp]
	sub	esp, 12					; 0000000cH
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	mov	al, BYTE PTR [edi+edx+31272]
	cmp	al, 3
	jbe	SHORT $LN22@DisplayInf
; Line 13013
	cmp	al, 7
	jne	$LN23@DisplayInf
$LN22@DisplayInf:
; Line 13061
	lea	eax, DWORD PTR [edx+edi*4+55438]
	mov	DWORD PTR tv601[ebp], eax
	mov	eax, edi
	imul	eax, 564				; 00000234H
	push	ebx
	mov	DWORD PTR tv576[ebp], OFFSET _MrsCommandIndex
	lea	eax, DWORD PTR [eax+edx+25988]
	mov	DWORD PTR tv228[ebp], 4
	push	esi
$LL36@DisplayInf:
; Line 13062
	mov	ecx, DWORD PTR tv601[ebp]
	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN5@DisplayInf
; Line 13063
	mov	esi, DWORD PTR tv576[ebp]
	mov	ecx, edi
	mov	DWORD PTR tv471[ebp], esi
	imul	ecx, 542				; 0000021eH
	mov	BYTE PTR [eax], 1
	lea	esi, DWORD PTR [eax-140]
	mov	DWORD PTR tv287[ebp], 35		; 00000023H
$LL3@DisplayInf:
; Line 13070
	mov	ebx, DWORD PTR tv471[ebp]
	movzx	ebx, WORD PTR [ebx]
	add	DWORD PTR tv471[ebp], 2
	add	ebx, ecx
	mov	ebx, DWORD PTR [edx+ebx*8+55526]
	mov	DWORD PTR [esi], ebx
	add	esi, 4
	dec	DWORD PTR tv287[ebp]
	jne	SHORT $LL3@DisplayInf
; Line 13073
	jmp	SHORT $LN7@DisplayInf
$LN5@DisplayInf:
; Line 13065
	mov	BYTE PTR [eax], 0
$LN7@DisplayInf:
; Line 13061
	add	DWORD PTR tv576[ebp], 70		; 00000046H
	add	eax, 141				; 0000008dH
	inc	DWORD PTR tv601[ebp]
	dec	DWORD PTR tv228[ebp]
	jne	SHORT $LL36@DisplayInf
	pop	esi
	pop	ebx
$LN23@DisplayInf:
; Line 13017
	xor	eax, eax
	pop	edi
; Line 13077
	leave
	ret	0
_DisplayInformation ENDP
_TEXT	ENDS
PUBLIC	_SaveMrcHostStructureAddress
; Function compile flags: /Ogspy
;	COMDAT _SaveMrcHostStructureAddress
_TEXT	SEGMENT
_MrcDataAddress$ = 8					; size = 4
_SaveMrcHostStructureAddress PROC			; COMDAT
; Line 13179
	movd	mm3, DWORD PTR _MrcDataAddress$[esp-4]
; Line 13183
	ret	0
_SaveMrcHostStructureAddress ENDP
_TEXT	ENDS
PUBLIC	_GetMrcHostStructureAddress
; Function compile flags: /Ogspy
;	COMDAT _GetMrcHostStructureAddress
_TEXT	SEGMENT
_MrcData$ = -4						; size = 4
_GetMrcHostStructureAddress PROC			; COMDAT
; Line 13193
	push	ecx
; Line 13207
	movd	DWORD PTR _MrcData$[esp+4], mm3
; Line 13210
	mov	eax, DWORD PTR _MrcData$[esp+4]
; Line 13212
	pop	ecx
	ret	0
_GetMrcHostStructureAddress ENDP
_TEXT	ENDS
PUBLIC	_PrintMemoryErrorCode
; Function compile flags: /Ogspy
;	COMDAT _PrintMemoryErrorCode
_TEXT	SEGMENT
_PostCode$ = 8						; size = 1
_IndexError$ = 12					; size = 1
_PrintMemoryErrorCode PROC				; COMDAT
; Line 13229
	ret	0
_PrintMemoryErrorCode ENDP
_TEXT	ENDS
PUBLIC	_MrcDeadLoop
EXTRN	_OemMemoryErrorCode:PROC
; Function compile flags: /Ogspy
;	COMDAT _MrcDeadLoop
_TEXT	SEGMENT
_DeadLoopVar$ = -8					; size = 4
_MrcData$41767 = -4					; size = 4
_MrcDeadLoop PROC					; COMDAT
; Line 13233
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 13240
	mov	DWORD PTR _DeadLoopVar$[ebp], 1
; Line 13241
	movd	DWORD PTR _MrcData$41767[ebp], mm3
	mov	eax, DWORD PTR _MrcData$41767[ebp]
; Line 13242
	mov	BYTE PTR [eax+55508], 0
; Line 13264
	movzx	eax, BYTE PTR [eax+65333]
	push	eax
	call	_OemMemoryErrorCode
	pop	ecx
$LL2@MrcDeadLoo:
; Line 13273
	mov	eax, DWORD PTR _DeadLoopVar$[ebp]
	test	eax, eax
	jne	SHORT $LL2@MrcDeadLoo
; Line 13274
	leave
	ret	0
_MrcDeadLoop ENDP
_TEXT	ENDS
PUBLIC	_EarlyCommandTraining
; Function compile flags: /Ogspy
;	COMDAT _EarlyCommandTraining
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_EarlyCommandTraining PROC				; COMDAT
; Line 13455
	xor	eax, eax
; Line 13456
	ret	0
_EarlyCommandTraining ENDP
_TEXT	ENDS
PUBLIC	_memcpy
; Function compile flags: /Ogspy
;	COMDAT _memcpy
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_cnt$ = 16						; size = 4
_memcpy	PROC						; COMDAT
; Line 13667
	push	ebp
	mov	ebp, esp
; Line 13670
	cmp	DWORD PTR _cnt$[ebp], 0
	mov	eax, DWORD PTR _dst$[ebp]
	je	SHORT $LN6@memcpy
	mov	ecx, DWORD PTR _src$[ebp]
	sub	ecx, eax
$LL2@memcpy:
; Line 13671
	mov	dl, BYTE PTR [ecx+eax]
	dec	DWORD PTR _cnt$[ebp]
	mov	BYTE PTR [eax], dl
	inc	eax
	cmp	DWORD PTR _cnt$[ebp], 0
	jne	SHORT $LL2@memcpy
$LN6@memcpy:
; Line 13673
	mov	eax, DWORD PTR _dst$[ebp]
; Line 13674
	pop	ebp
	ret	0
_memcpy	ENDP
_TEXT	ENDS
PUBLIC	_memset
; Function compile flags: /Ogspy
;	COMDAT _memset
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_value$ = 12						; size = 1
_cnt$ = 16						; size = 4
_memset	PROC						; COMDAT
; Line 13679
	mov	ecx, DWORD PTR _cnt$[esp-4]
	test	ecx, ecx
	je	SHORT $LN2@memset
	mov	al, BYTE PTR _value$[esp-4]
	movzx	eax, al
	imul	eax, 16843009				; 01010101H
	mov	edx, ecx
	push	ebx
	push	edi
	mov	edi, DWORD PTR _dst$[esp+4]
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
	pop	edi
	pop	ebx
$LN2@memset:
; Line 13682
	mov	eax, DWORD PTR _dst$[esp-4]
; Line 13683
	ret	0
_memset	ENDP
_TEXT	ENDS
PUBLIC	__allshl
; Function compile flags: /Ogspy
;	COMDAT __allshl
_TEXT	SEGMENT
__allshl PROC						; COMDAT
; Line 13722
	cmp	cl, 32					; 00000020H
; Line 13723
	jae	SHORT $ShiftLowDword$39195
; Line 13724
	shld	edx, eax, cl
; Line 13725
	shl	eax, cl
; Line 13726
	jmp	SHORT $exitFunction$39196
$ShiftLowDword$39195:
; Line 13728
	mov	edx, eax
; Line 13729
	xor	eax, eax
; Line 13730
	sub	cl, 32					; 00000020H
; Line 13731
	shl	edx, cl
$exitFunction$39196:
; Line 13735
	ret	0
__allshl ENDP
_TEXT	ENDS
PUBLIC	__aullshr
; Function compile flags: /Ogspy
;	COMDAT __aullshr
_TEXT	SEGMENT
__aullshr PROC						; COMDAT
; Line 13769
	cmp	cl, 32					; 00000020H
; Line 13770
	jae	SHORT $ShiftHighDword$39200
; Line 13771
	shrd	eax, edx, cl
; Line 13772
	shr	edx, cl
; Line 13773
	jmp	SHORT $exitFunction$39201
$ShiftHighDword$39200:
; Line 13775
	mov	eax, edx
; Line 13776
	xor	edx, edx
; Line 13777
	sub	cl, 32					; 00000020H
; Line 13778
	shr	eax, cl
$exitFunction$39201:
; Line 13782
	ret	0
__aullshr ENDP
_TEXT	ENDS
PUBLIC	_PrintRmtLaneStatus
; Function compile flags: /Ogspy
;	COMDAT _PrintRmtLaneStatus
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_StrobeSweep$ = 20					; size = 1
_Strobe$ = 20						; size = 1
_MaximumBits$ = 24					; size = 1
_PerBitSweep$ = 28					; size = 1
_LaneErrorVector$ = 32					; size = 4
_PrintRmtLaneStatus PROC				; COMDAT
; Line 13899
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 13904
	mov	bl, BYTE PTR _Strobe$[ebp]
	jmp	SHORT $LN18@PrintRmtLa
$LL10@PrintRmtLa:
; Line 13905
	push	0
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _StrobeSweep$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
$LN18@PrintRmtLa:
	dec	bl
	mov	BYTE PTR _StrobeSweep$[ebp], bl
	jns	SHORT $LL10@PrintRmtLa
; Line 13921
	xor	eax, eax
	pop	ebx
; Line 13922
	pop	ebp
	ret	0
_PrintRmtLaneStatus ENDP
_TEXT	ENDS
PUBLIC	_PrintRmtSummaryPerBit
; Function compile flags: /Ogspy
;	COMDAT _PrintRmtSummaryPerBit
_TEXT	SEGMENT
_LaneErrorVector$ = -68					; size = 18
tv693 = -48						; size = 4
tv928 = -44						; size = 4
tv490 = -40						; size = 4
tv516 = -36						; size = 4
_MaximumBits$ = -32					; size = 1
tv908 = -28						; size = 4
tv766 = -24						; size = 4
_StrobeMinOffset$ = -20					; size = 2
tv525 = -16						; size = 4
_IndexStrobe$ = -12					; size = 2
_StrobeMaxOffset$ = -12					; size = 2
_StrobeSweep$ = -8					; size = 1
tv514 = -4						; size = 1
_Knob$ = -3						; size = 1
_BitSweep$ = -2						; size = 1
_HighLowFlag$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Strobe$ = 20						; size = 4
_Dim1Knobs$ = 24					; size = 1
_Dim1Start$ = 28					; size = 4
_StepSize$ = 32						; size = 1
_Results$ = 36						; size = 4
_PerBitSweep$ = 40					; size = 1
_PrintRmtSummaryPerBit PROC				; COMDAT
; Line 13936
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
; Line 13948
	mov	ebx, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [ebx+55506]
	mov	BYTE PTR tv514[ebp], al
; Line 13949
	or	al, 1
	mov	BYTE PTR [ebx+55506], al
; Line 13951
	movzx	eax, BYTE PTR _Rank$[ebp]
	push	esi
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	add	eax, ebx
; Line 13953
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	mov	al, BYTE PTR [eax+edi*4+55462]
	mov	DWORD PTR tv516[ebp], edi
	mov	BYTE PTR _MaximumBits$[ebp], al
	jbe	SHORT $LN100@PrintRmtSu
	mov	eax, DWORD PTR _Strobe$[ebp]
	movzx	eax, BYTE PTR [edi+eax]
	movzx	esi, BYTE PTR _Dim1Knobs$[ebp]
$LL46@PrintRmtSu:
; Line 13955
	mov	BYTE PTR _StrobeSweep$[ebp], 0
	test	eax, eax
	jle	SHORT $LN45@PrintRmtSu
$LL99@PrintRmtSu:
; Line 13956
	push	0
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _StrobeSweep$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_IsStrobeValid
	mov	eax, DWORD PTR _Strobe$[ebp]
	movzx	eax, BYTE PTR [edi+eax]
	add	esp, 24					; 00000018H
	inc	BYTE PTR _StrobeSweep$[ebp]
	movsx	ecx, BYTE PTR _StrobeSweep$[ebp]
	cmp	ecx, eax
	jl	SHORT $LL99@PrintRmtSu
$LN45@PrintRmtSu:
; Line 13953
	dec	esi
	jne	SHORT $LL46@PrintRmtSu
$LN100@PrintRmtSu:
; Line 13964
	mov	BYTE PTR _HighLowFlag$[ebp], 1
$LL39@PrintRmtSu:
; Line 13965
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	mov	BYTE PTR _Knob$[ebp], 0
	jbe	$LN38@PrintRmtSu
	mov	eax, DWORD PTR _Strobe$[ebp]
; Line 13972
	add	edi, eax
	mov	DWORD PTR tv525[ebp], edi
$LL108@PrintRmtSu:
	cmp	BYTE PTR _HighLowFlag$[ebp], 1
	lea	edi, DWORD PTR _LaneErrorVector$[ebp]
	jne	SHORT $LN33@PrintRmtSu
; Line 13967
	or	eax, -1
; Line 13968
	jmp	SHORT $LN109@PrintRmtSu
$LN33@PrintRmtSu:
; Line 13969
	xor	eax, eax
$LN109@PrintRmtSu:
	stosd
	stosd
	stosd
	stosd
	stosw
; Line 13974
	mov	eax, DWORD PTR tv525[ebp]
	xor	esi, esi
	cmp	BYTE PTR [eax], 0
	mov	DWORD PTR _StrobeMinOffset$[ebp], 255	; 000000ffH
	mov	DWORD PTR _StrobeMaxOffset$[ebp], esi
	mov	BYTE PTR _StrobeSweep$[ebp], 0
	jbe	$LN29@PrintRmtSu
$LL101@PrintRmtSu:
; Line 13975
	push	0
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _StrobeSweep$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN30@PrintRmtSu
; Line 13978
	movzx	ecx, BYTE PTR _MaximumBits$[ebp]
	mov	BYTE PTR _BitSweep$[ebp], 0
	test	ecx, ecx
	jle	SHORT $LN30@PrintRmtSu
	xor	eax, eax
$LL27@PrintRmtSu:
; Line 13979
	cmp	BYTE PTR _StrobeSweep$[ebp], 18		; 00000012H
	jge	SHORT $LN26@PrintRmtSu
; Line 13980
	movzx	edx, BYTE PTR _Knob$[ebp]
	add	edx, DWORD PTR tv516[ebp]
	imul	edx, 18					; 00000012H
	add	edx, esi
	lea	eax, DWORD PTR [eax+edx*8]
	movsx	edx, BYTE PTR _HighLowFlag$[ebp]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _Results$[ebp]
	movzx	eax, WORD PTR [edx+eax*2]
	cmp	ax, WORD PTR _StrobeMinOffset$[ebp]
	jae	SHORT $LN23@PrintRmtSu
; Line 13981
	movzx	edx, ax
	mov	DWORD PTR _StrobeMinOffset$[ebp], edx
$LN23@PrintRmtSu:
; Line 13983
	cmp	ax, WORD PTR _StrobeMaxOffset$[ebp]
	jbe	SHORT $LN26@PrintRmtSu
; Line 13984
	movzx	eax, ax
	mov	DWORD PTR _StrobeMaxOffset$[ebp], eax
$LN26@PrintRmtSu:
	inc	BYTE PTR _BitSweep$[ebp]
	movsx	eax, BYTE PTR _BitSweep$[ebp]
	cmp	eax, ecx
	jl	SHORT $LL27@PrintRmtSu
$LN30@PrintRmtSu:
; Line 13974
	inc	BYTE PTR _StrobeSweep$[ebp]
	mov	eax, DWORD PTR tv525[ebp]
	movsx	esi, BYTE PTR _StrobeSweep$[ebp]
	movzx	eax, BYTE PTR [eax]
	cmp	esi, eax
	jl	SHORT $LL101@PrintRmtSu
$LN29@PrintRmtSu:
; Line 13990
	cmp	BYTE PTR _HighLowFlag$[ebp], 1
	jne	SHORT $LN21@PrintRmtSu
; Line 13991
	inc	DWORD PTR _StrobeMaxOffset$[ebp]
$LN21@PrintRmtSu:
; Line 13996
	mov	eax, DWORD PTR _StrobeMaxOffset$[ebp]
	movzx	ecx, ax
	mov	DWORD PTR _IndexStrobe$[ebp], ecx
	cmp	WORD PTR _StrobeMinOffset$[ebp], ax
	ja	$LN35@PrintRmtSu
	mov	ecx, DWORD PTR tv516[ebp]
	movzx	edx, BYTE PTR _Dim1Knobs$[ebp]
	imul	ecx, 18					; 00000012H
	mov	DWORD PTR tv928[ebp], ecx
	mov	DWORD PTR tv693[ebp], edx
	jmp	SHORT $LN20@PrintRmtSu
$LL104@PrintRmtSu:
	mov	ecx, DWORD PTR tv928[ebp]
	mov	edx, DWORD PTR tv693[ebp]
$LN20@PrintRmtSu:
; Line 13997
	cmp	BYTE PTR _HighLowFlag$[ebp], 1
; Line 13999
	lea	edi, DWORD PTR _LaneErrorVector$[ebp]
	jne	SHORT $LN17@PrintRmtSu
	or	eax, -1
; Line 14000
	jmp	SHORT $LN110@PrintRmtSu
$LN17@PrintRmtSu:
; Line 14002
	xor	eax, eax
$LN110@PrintRmtSu:
	stosd
	stosd
	stosd
	stosd
	stosw
; Line 14005
	mov	DWORD PTR tv908[ebp], ecx
	mov	DWORD PTR tv490[ebp], edx
	mov	BYTE PTR _Knob$[ebp], dl
$LL15@PrintRmtSu:
; Line 14006
	mov	eax, DWORD PTR tv525[ebp]
	mov	al, BYTE PTR [eax]
	dec	al
	mov	BYTE PTR _StrobeSweep$[ebp], al
	js	$LN14@PrintRmtSu
	movsx	esi, al
$LL105@PrintRmtSu:
; Line 14007
	push	0
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _StrobeSweep$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN11@PrintRmtSu
; Line 14010
	mov	al, BYTE PTR _MaximumBits$[ebp]
	dec	al
	mov	BYTE PTR _BitSweep$[ebp], al
	js	SHORT $LN11@PrintRmtSu
	movsx	ecx, al
	mov	eax, DWORD PTR tv908[ebp]
	add	eax, esi
	lea	eax, DWORD PTR [ecx+eax*8]
	lea	edx, DWORD PTR [eax+eax]
	mov	DWORD PTR tv766[ebp], edx
	mov	edx, DWORD PTR _Results$[ebp]
	lea	eax, DWORD PTR [edx+eax*4+2]
$LL8@PrintRmtSu:
; Line 14011
	cmp	BYTE PTR _HighLowFlag$[ebp], 1
	jne	SHORT $LN5@PrintRmtSu
; Line 14012
	mov	dx, WORD PTR _IndexStrobe$[ebp]
	cmp	WORD PTR [eax], dx
	jb	SHORT $LN7@PrintRmtSu
; Line 14013
	mov	dl, 1
	shl	dl, cl
	not	dl
	and	BYTE PTR _LaneErrorVector$[ebp+esi], dl
; Line 14015
	jmp	SHORT $LN7@PrintRmtSu
$LN5@PrintRmtSu:
; Line 14016
	movsx	edx, BYTE PTR _HighLowFlag$[ebp]
	add	edx, DWORD PTR tv766[ebp]
	mov	ebx, DWORD PTR _Results$[ebp]
	mov	di, WORD PTR _IndexStrobe$[ebp]
	cmp	WORD PTR [ebx+edx*2], di
; Line 14017
	mov	ebx, DWORD PTR _MrcData$[ebp]
	jbe	SHORT $LN7@PrintRmtSu
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR _LaneErrorVector$[ebp+esi], dl
$LN7@PrintRmtSu:
	dec	BYTE PTR _BitSweep$[ebp]
	sub	DWORD PTR tv766[ebp], 2
	dec	ecx
	sub	eax, 4
	cmp	BYTE PTR _BitSweep$[ebp], 0
	jge	SHORT $LL8@PrintRmtSu
$LN11@PrintRmtSu:
; Line 14006
	dec	BYTE PTR _StrobeSweep$[ebp]
	dec	esi
	cmp	BYTE PTR _StrobeSweep$[ebp], 0
	jge	$LL105@PrintRmtSu
$LN14@PrintRmtSu:
; Line 14005
	add	DWORD PTR tv908[ebp], 18		; 00000012H
	dec	DWORD PTR tv490[ebp]
	jne	$LL15@PrintRmtSu
; Line 14026
	lea	eax, DWORD PTR _LaneErrorVector$[ebp]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	mov	eax, DWORD PTR tv525[ebp]
	push	DWORD PTR _MaximumBits$[ebp]
	movzx	eax, BYTE PTR [eax]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_PrintRmtLaneStatus
	add	esp, 28					; 0000001cH
; Line 14029
	cmp	WORD PTR _IndexStrobe$[ebp], 0
	je	SHORT $LN35@PrintRmtSu
	movzx	ax, BYTE PTR _StepSize$[ebp]
	sub	WORD PTR _IndexStrobe$[ebp], ax
	mov	ax, WORD PTR _StrobeMinOffset$[ebp]
	cmp	ax, WORD PTR _IndexStrobe$[ebp]
	jbe	$LL104@PrintRmtSu
$LN35@PrintRmtSu:
; Line 13965
	inc	BYTE PTR _Knob$[ebp]
	mov	al, BYTE PTR _Knob$[ebp]
	cmp	al, BYTE PTR _Dim1Knobs$[ebp]
	jb	$LL108@PrintRmtSu
	mov	edi, DWORD PTR tv516[ebp]
$LN38@PrintRmtSu:
; Line 13964
	dec	BYTE PTR _HighLowFlag$[ebp]
	jns	$LL39@PrintRmtSu
; Line 14036
	mov	al, BYTE PTR tv514[ebp]
	pop	edi
	mov	BYTE PTR [ebx+55506], al
	pop	esi
; Line 14037
	xor	eax, eax
	pop	ebx
; Line 14038
	leave
	ret	0
_PrintRmtSummaryPerBit ENDP
_TEXT	ENDS
PUBLIC	_GetSignalInfoIndex
EXTRN	_NumberAlgosGenerated:BYTE
; Function compile flags: /Ogspy
;	COMDAT _GetSignalInfoIndex
_TEXT	SEGMENT
_MrcData$41876 = -4					; size = 4
_Signal$ = 8						; size = 2
_GetSignalInfoIndex PROC				; COMDAT
; Line 14052
	push	ecx
; Line 14054
	movd	DWORD PTR _MrcData$41876[esp+4], mm3
; Line 14056
	mov	eax, DWORD PTR _Signal$[esp]
	mov	ecx, 8192				; 00002000H
	cmp	ax, cx
	jb	SHORT $LN6@GetSignalI
; Line 14057
	add	eax, -8192				; ffffe000H
; Line 14065
	pop	ecx
	ret	0
$LN6@GetSignalI:
; Line 14058
	mov	ecx, 4096				; 00001000H
	cmp	ax, cx
	jb	SHORT $LN4@GetSignalI
; Line 14059
	add	eax, -4096				; fffff000H
; Line 14065
	pop	ecx
	ret	0
$LN4@GetSignalI:
; Line 14060
	movzx	ecx, BYTE PTR _NumberOfElementsPerAlgoGenerated
	push	esi
	movzx	esi, BYTE PTR _NumberAlgosGenerated
	movzx	edx, ax
	mov	eax, esi
	imul	eax, ecx
	cmp	edx, eax
	jge	SHORT $LN2@GetSignalI
; Line 14061
	mov	eax, edx
	cdq
	idiv	ecx
	jmp	SHORT $LN11@GetSignalI
$LN2@GetSignalI:
; Line 14063
	xor	eax, eax
	inc	eax
	sub	eax, ecx
	imul	eax, esi
	add	eax, edx
$LN11@GetSignalI:
	pop	esi
; Line 14065
	pop	ecx
	ret	0
_GetSignalInfoIndex ENDP
_TEXT	ENDS
PUBLIC	_GetOffsetIndex
EXTRN	_UniqueIndexToOffsetLayerGenerated:BYTE
EXTRN	_GroupIndexToOffsetLayerGenerated:TBYTE
EXTRN	_DelayIndexToOffsetLayerGenerated:BYTE
EXTRN	_GsmGtToMmrcDefine:BYTE
EXTRN	_GsmCsnToMmrcDefine:BYTE
; Function compile flags: /Ogspy
;	COMDAT _GetOffsetIndex
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Type$ = 12						; size = 2
_GetOffsetIndex PROC					; COMDAT
; Line 14086
	mov	eax, DWORD PTR _Type$[esp-4]
	mov	ecx, 61440				; 0000f000H
	cmp	ax, cx
	jb	SHORT $LN10@GetOffsetI
; Line 14087
	movzx	eax, ax
	movzx	eax, WORD PTR _GsmCsnToMmrcDefine[eax*2-122880]
$LN15@GetOffsetI:
; Line 14088
	mov	ecx, 255				; 000000ffH
	cmp	ax, cx
	jne	SHORT $LN6@GetOffsetI
; Line 14089
	mov	eax, 65535				; 0000ffffH
; Line 14108
	ret	0
$LN10@GetOffsetI:
; Line 14091
	mov	ecx, 57344				; 0000e000H
	cmp	ax, cx
	jb	SHORT $LN6@GetOffsetI
; Line 14092
	movzx	eax, ax
	movzx	eax, WORD PTR _GsmGtToMmrcDefine[eax*2-114688]
; Line 14094
	jmp	SHORT $LN15@GetOffsetI
$LN6@GetOffsetI:
; Line 14097
	mov	ecx, 12288				; 00003000H
	cmp	ax, cx
	mov	ecx, 16384				; 00004000H
	jb	SHORT $LN5@GetOffsetI
	cmp	ax, cx
	jae	SHORT $LN14@GetOffsetI
; Line 14098
	add	eax, -12288				; ffffd000H
; Line 14099
	movzx	eax, ax
	movzx	eax, WORD PTR _DelayIndexToOffsetLayerGenerated[eax*2]
; Line 14108
	ret	0
$LN5@GetOffsetI:
; Line 14100
	cmp	ax, cx
	jb	SHORT $LN3@GetOffsetI
$LN14@GetOffsetI:
	mov	ecx, 20480				; 00005000H
	cmp	ax, cx
	jae	SHORT $LN13@GetOffsetI
; Line 14101
	add	eax, -16384				; ffffc000H
; Line 14102
	movzx	eax, ax
	movzx	eax, WORD PTR _GroupIndexToOffsetLayerGenerated[eax*2]
; Line 14108
	ret	0
$LN3@GetOffsetI:
; Line 14103
	mov	ecx, 20480				; 00005000H
	cmp	ax, cx
	jb	SHORT $LN11@GetOffsetI
$LN13@GetOffsetI:
; Line 14104
	add	eax, -20480				; ffffb000H
; Line 14105
	movzx	eax, ax
	movzx	eax, WORD PTR _UniqueIndexToOffsetLayerGenerated[eax*2]
$LN11@GetOffsetI:
; Line 14108
	ret	0
_GetOffsetIndex ENDP
_TEXT	ENDS
PUBLIC	_ConvertPfctAndIoLevelToBlueprint
EXTRN	_PfctAndIoLevelToBlueprint:BYTE
; Function compile flags: /Ogspy
;	COMDAT _ConvertPfctAndIoLevelToBlueprint
_TEXT	SEGMENT
tv200 = -8						; size = 4
_i$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_IoLevel$ = 16						; size = 1
_Blueprint$ = 20					; size = 4
_ConvertPfctAndIoLevelToBlueprint PROC			; COMDAT
; Line 14127
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 14135
	movzx	edx, BYTE PTR _Channel$[ebp]
	push	ebx
	xor	ebx, ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	cl, BYTE PTR [esi+edx*2+55490]
	inc	ebx
	mov	DWORD PTR tv200[ebp], ebx
	shl	DWORD PTR tv200[ebp], cl
	push	edi
	mov	BYTE PTR _i$[ebp], 0
$LL10@ConvertPfc@2:
; Line 14141
	movzx	eax, BYTE PTR _i$[ebp]
	mov	edi, DWORD PTR tv200[ebp]
	imul	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _PfctAndIoLevelToBlueprint[eax]
	test	ecx, edi
	je	SHORT $LN4@ConvertPfc@2
	mov	cl, BYTE PTR [esi+edx*2+55494]
	mov	edi, ebx
	shl	edi, cl
	movzx	ecx, WORD PTR _PfctAndIoLevelToBlueprint[eax+2]
	test	edi, ecx
	je	SHORT $LN4@ConvertPfc@2
	mov	cl, BYTE PTR [esi+edx*2+55498]
	mov	edi, ebx
	shl	edi, cl
	movzx	ecx, WORD PTR _PfctAndIoLevelToBlueprint[eax+4]
	test	edi, ecx
	je	SHORT $LN4@ConvertPfc@2
	mov	cl, BYTE PTR [esi+edx*2+55502]
	mov	edi, ebx
	shl	edi, cl
	movzx	ecx, WORD PTR _PfctAndIoLevelToBlueprint[eax+6]
	test	edi, ecx
	je	SHORT $LN4@ConvertPfc@2
	mov	cl, BYTE PTR _IoLevel$[ebp]
	cmp	cl, BYTE PTR _PfctAndIoLevelToBlueprint[eax+8]
	je	SHORT $LN1@ConvertPfc@2
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN1@ConvertPfc@2
$LN4@ConvertPfc@2:
; Line 14135
	inc	BYTE PTR _i$[ebp]
	cmp	BYTE PTR _i$[ebp], bl
	jb	SHORT $LL10@ConvertPfc@2
; Line 14147
	push	31					; 0000001fH
	pop	eax
$LN6@ConvertPfc@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 14148
	leave
	ret	0
$LN1@ConvertPfc@2:
; Line 14143
	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _Blueprint$[ebp]
	imul	eax, 10					; 0000000aH
	mov	al, BYTE PTR _PfctAndIoLevelToBlueprint[eax+9]
	mov	BYTE PTR [ecx], al
; Line 14144
	xor	eax, eax
	jmp	SHORT $LN6@ConvertPfc@2
_ConvertPfctAndIoLevelToBlueprint ENDP
_TEXT	ENDS
PUBLIC	_RunOnThisChannel
; Function compile flags: /Ogspy
;	COMDAT _RunOnThisChannel
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_RunOnThisChannel PROC					; COMDAT
; Line 14169
	movzx	eax, BYTE PTR _Channel$[esp-4]
	push	esi
	mov	esi, DWORD PTR _MrcData$[esp]
	push	edi
	movzx	edi, BYTE PTR _Rank$[esp+4]
	lea	edx, DWORD PTR [eax+esi]
	mov	ecx, eax
	add	edi, esi
	imul	ecx, 4336				; 000010f0H
	mov	al, BYTE PTR [edi+eax*4+55438]
	and	al, BYTE PTR [edx+55511]
	lea	ecx, DWORD PTR [ecx+esi+58406]
	and	al, BYTE PTR [edx+28608]
	pop	edi
	movzx	eax, al
	cdq
	mov	DWORD PTR [ecx], eax
; Line 14170
	or	eax, edx
	mov	DWORD PTR [ecx+4], edx
	pop	esi
	jne	SHORT $LN1@RunOnThisC
; Line 14171
	xor	al, al
; Line 14174
	ret	0
$LN1@RunOnThisC:
; Line 14173
	mov	al, 1
; Line 14174
	ret	0
_RunOnThisChannel ENDP
_TEXT	ENDS
PUBLIC	_SetMspData
EXTRN	_FillUpMspDataStructure:PROC
; Function compile flags: /Ogspy
;	COMDAT _SetMspData
_TEXT	SEGMENT
_i$ = -4						; size = 1
_MspData$ = 8						; size = 4
_InputStructure$ = 12					; size = 4
_SetMspData PROC					; COMDAT
; Line 14181
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 14187
	mov	ebx, DWORD PTR _InputStructure$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _MspData$[ebp]
	mov	BYTE PTR _i$[ebp], 0
	add	ebx, 28608				; 00006fc0H
	lea	esi, DWORD PTR [edi+8]
$LL8@SetMspData:
; Line 14199
	mov	eax, DWORD PTR _InputStructure$[ebp]
	push	DWORD PTR [eax+65441]
	movzx	eax, BYTE PTR [edi+27]
	push	eax
	movzx	eax, BYTE PTR [edi+22]
	push	eax
	movzx	eax, BYTE PTR [edi+20]
	push	eax
	movzx	eax, WORD PTR [esi+8]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	movzx	eax, WORD PTR [esi-4]
	push	eax
	movzx	eax, BYTE PTR [ebx]
	push	eax
	push	DWORD PTR _i$[ebp]
	push	edi
	call	_FillUpMspDataStructure
	add	esp, 40					; 00000028H
	inc	BYTE PTR _i$[ebp]
	inc	esi
	inc	esi
	inc	ebx
	cmp	BYTE PTR _i$[ebp], 2
	jb	SHORT $LL8@SetMspData
	pop	edi
	pop	esi
	pop	ebx
; Line 14201
	leave
	ret	0
_SetMspData ENDP
_TEXT	ENDS
PUBLIC	_ConvertRange
; Function compile flags: /Ogspy
;	COMDAT _ConvertRange
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_InputData$ = 16					; size = 2
_ConvertRange PROC					; COMDAT
; Line 14683
	push	ebp
	mov	ebp, esp
; Line 14692
	movzx	eax, WORD PTR _InputData$[ebp]
	sub	eax, 250				; 000000faH
	je	SHORT $LN2@ConvertRan
	dec	eax
	je	SHORT $LN3@ConvertRan
	dec	eax
	je	SHORT $LN4@ConvertRan
	dec	eax
	je	SHORT $LN5@ConvertRan
	dec	eax
	je	SHORT $LN6@ConvertRan
	dec	eax
	je	SHORT $LN7@ConvertRan
; Line 14733
	movzx	eax, WORD PTR _InputData$[ebp]
; Line 14736
	pop	ebp
	ret	0
$LN7@ConvertRan:
; Line 14697
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetHalfClk
	add	ax, ax
; Line 14698
	jmp	SHORT $LN12@ConvertRan
$LN6@ConvertRan:
; Line 14703
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetHalfClk
; Line 14704
	jmp	SHORT $LN12@ConvertRan
$LN5@ConvertRan:
; Line 14709
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetHalfClk
	shr	ax, 1
; Line 14710
	jmp	SHORT $LN12@ConvertRan
$LN4@ConvertRan:
; Line 14715
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetHalfClk
	shr	ax, 2
; Line 14716
	jmp	SHORT $LN12@ConvertRan
$LN3@ConvertRan:
; Line 14721
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetHalfClk
	shr	ax, 3
; Line 14722
	jmp	SHORT $LN12@ConvertRan
$LN2@ConvertRan:
; Line 14727
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetHalfClk
	shr	ax, 4
$LN12@ConvertRan:
	pop	ecx
	movzx	eax, ax
	pop	ecx
; Line 14736
	pop	ebp
	ret	0
_ConvertRange ENDP
_TEXT	ENDS
PUBLIC	_CheckCount
; Function compile flags: /Ogspy
;	COMDAT _CheckCount
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Ch$ = 16						; size = 1
_Rn$ = 20						; size = 1
_Kn$ = 24						; size = 1
_St$ = 28						; size = 1
_Bi$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_CheckCount PROC					; COMDAT
; Line 14989
	xor	eax, eax
; Line 14990
	ret	0
_CheckCount ENDP
_TEXT	ENDS
PUBLIC	_CopyResults
; Function compile flags: /Ogspy
;	COMDAT _CopyResults
_TEXT	SEGMENT
tv397 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_index2$ = 19						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
tv399 = 36						; size = 4
_Timing$ = 36						; size = 1
_index$ = 39						; size = 1
tv428 = 40						; size = 4
_Param$ = 40						; size = 4
_CopyResults PROC					; COMDAT
; Line 15021
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 15028
	movzx	ecx, BYTE PTR _Timing$[ebp]
	push	ebx
	mov	eax, DWORD PTR _Param$[ebp]
	push	esi
	movzx	esi, BYTE PTR _Channel$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Knob$[ebp]
	mov	dl, BYTE PTR [eax+12]
	lea	ebx, DWORD PTR [esi+ecx*2]
	lea	ebx, DWORD PTR [edi+ebx*4]
	movzx	edi, BYTE PTR _Rank$[ebp]
	add	ebx, edi
	movzx	edi, BYTE PTR _Strobe$[ebp]
	imul	ebx, 18					; 00000012H
	add	ebx, edi
	movzx	edi, BYTE PTR _Bit$[ebp]
	lea	ebx, DWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR [eax+8]
	cmp	BYTE PTR [ebx+edi], dl
	je	$LN5@CopyResult
; Line 15033
	mov	BYTE PTR _index$[ebp], 1
$LL7@CopyResult:
; Line 15034
	movzx	edi, BYTE PTR _index$[ebp]
	lea	edi, DWORD PTR [ecx+edi*2]
	lea	ebx, DWORD PTR [esi+edi*2]
	movzx	edi, BYTE PTR _Knob$[ebp]
	lea	ebx, DWORD PTR [edi+ebx*4]
	movzx	edi, BYTE PTR _Rank$[ebp]
	add	ebx, edi
	movzx	edi, BYTE PTR _Strobe$[ebp]
	imul	ebx, 18					; 00000012H
	add	ebx, edi
	movzx	edi, BYTE PTR _Bit$[ebp]
	lea	ebx, DWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR [eax+8]
	cmp	BYTE PTR [ebx+edi], dl
	je	SHORT $LN13@CopyResult
	inc	BYTE PTR _index$[ebp]
	cmp	BYTE PTR _index$[ebp], 2
	jb	SHORT $LL7@CopyResult
	jmp	$LN5@CopyResult
$LN13@CopyResult:
; Line 15037
	mov	BYTE PTR _index2$[ebp], 0
	test	dl, dl
	jbe	$LN5@CopyResult
	movzx	edi, BYTE PTR _index$[ebp]
	imul	edi, 5
	mov	DWORD PTR tv397[ebp], edi
	jmp	SHORT $LN3@CopyResult
$LL16@CopyResult:
	mov	edi, DWORD PTR tv397[ebp]
$LN3@CopyResult:
; Line 15038
	movzx	edx, BYTE PTR _index2$[ebp]
	add	edi, edx
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv399[ebp], edi
	lea	edi, DWORD PTR [esi+edx*2]
	movzx	edx, BYTE PTR _Knob$[ebp]
	lea	ebx, DWORD PTR [edx+edi*4]
	movzx	edi, BYTE PTR _Rank$[ebp]
	add	ebx, edi
	movzx	edi, BYTE PTR _Strobe$[ebp]
	imul	ebx, 18					; 00000012H
	add	ebx, edi
	movzx	edi, BYTE PTR _Bit$[ebp]
	lea	ebx, DWORD PTR [edi+ebx*8]
	shl	ebx, 2
	mov	DWORD PTR tv428[ebp], ebx
	mov	ebx, DWORD PTR tv399[ebp]
	lea	ebx, DWORD PTR [ecx+ebx*2]
	lea	ebx, DWORD PTR [esi+ebx*2]
	lea	ebx, DWORD PTR [edx+ebx*4]
	movzx	edx, BYTE PTR _Rank$[ebp]
	add	ebx, edx
	movzx	edx, BYTE PTR _Strobe$[ebp]
	imul	ebx, 18					; 00000012H
	add	ebx, edx
	lea	edx, DWORD PTR [edi+ebx*8]
	mov	edi, DWORD PTR [eax+4]
	mov	dx, WORD PTR [edi+edx*4-46078]
	mov	ebx, DWORD PTR [eax]
	mov	edi, DWORD PTR tv428[ebp]
	mov	WORD PTR [edi+ebx+2], dx
; Line 15039
	mov	edx, DWORD PTR tv399[ebp]
	lea	edx, DWORD PTR [ecx+edx*2-10]
	lea	edi, DWORD PTR [esi+edx*2]
	movzx	edx, BYTE PTR _Knob$[ebp]
	lea	edi, DWORD PTR [edx+edi*4]
	movzx	edx, BYTE PTR _Rank$[ebp]
	add	edi, edx
	movzx	edx, BYTE PTR _Strobe$[ebp]
	imul	edi, 18					; 00000012H
	mov	ebx, DWORD PTR [eax]
	add	edi, edx
	movzx	edx, BYTE PTR _Bit$[ebp]
	inc	BYTE PTR _index2$[ebp]
	lea	edx, DWORD PTR [edx+edi*8]
	mov	edi, DWORD PTR [eax+4]
	mov	dx, WORD PTR [edi+edx*4]
	mov	edi, DWORD PTR tv428[ebp]
	mov	WORD PTR [edi+ebx], dx
	mov	dl, BYTE PTR _index2$[ebp]
	cmp	dl, BYTE PTR [eax+12]
	jb	$LL16@CopyResult
$LN5@CopyResult:
	pop	edi
	pop	esi
; Line 15044
	xor	eax, eax
	pop	ebx
; Line 15045
	leave
	ret	0
_CopyResults ENDP
_TEXT	ENDS
PUBLIC	_GenericPrint2
; Function compile flags: /Ogspy
;	COMDAT _GenericPrint2
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_GenericPrint2 PROC					; COMDAT
; Line 15927
	xor	eax, eax
; Line 15928
	ret	0
_GenericPrint2 ENDP
_TEXT	ENDS
PUBLIC	_FinalCalculateCenter2
; Function compile flags: /Ogspy
;	COMDAT _FinalCalculateCenter2
_TEXT	SEGMENT
tv769 = -36						; size = 4
_EyeWidthAtCenter$ = -32				; size = 4
tv856 = -28						; size = 4
tv773 = -24						; size = 4
_SumWeights$ = -24					; size = 4
tv837 = -20						; size = 4
tv915 = -16						; size = 4
_SumLR$ = -12						; size = 4
tv776 = -8						; size = 4
tv800 = -4						; size = 2
_Loop$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_FinalCalculateCenter2 PROC				; COMDAT
; Line 15958
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
; Line 15968
	mov	esi, DWORD PTR _Param$[ebp]
	movzx	eax, WORD PTR [esi+12]
; Line 15970
	cmp	ax, 1
	jne	SHORT $LN6@FinalCalcu
; Line 15973
	movzx	ecx, BYTE PTR _Channel$[ebp]
	movzx	eax, BYTE PTR _Timing$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Knob$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bit$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [esi+8]
	lea	edx, DWORD PTR [eax+ecx*4]
	movzx	eax, WORD PTR [edx+2]
	movzx	edx, WORD PTR [edx]
	add	eax, edx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR [esi+4]
	sar	eax, 1
	mov	WORD PTR [edx+ecx*2], ax
; Line 15974
	jmp	$LN13@FinalCalcu
$LN6@FinalCalcu:
; Line 15980
	movzx	edx, BYTE PTR _Timing$[ebp]
	movzx	esi, BYTE PTR _Channel$[ebp]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, ax
	shr	eax, 1
	mov	DWORD PTR tv776[ebp], eax
	lea	eax, DWORD PTR [edx+eax*2]
	lea	eax, DWORD PTR [esi+eax*2]
	push	ebx
	movzx	ebx, BYTE PTR _Bit$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Knob$[ebp]
	lea	eax, DWORD PTR [edi+eax*4]
	add	eax, ecx
	imul	eax, 18					; 00000012H
	mov	ecx, eax
	movzx	eax, BYTE PTR _Strobe$[ebp]
	add	ecx, eax
	lea	eax, DWORD PTR [ebx+ecx*8]
	mov	ecx, DWORD PTR _Param$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, WORD PTR [eax+2]
	movzx	eax, WORD PTR [eax]
	sub	ecx, eax
; Line 15984
	xor	eax, eax
	mov	DWORD PTR _SumLR$[ebp], eax
; Line 15985
	mov	DWORD PTR _SumWeights$[ebp], eax
; Line 15990
	mov	BYTE PTR _Loop$[ebp], al
	mov	eax, DWORD PTR _Param$[ebp]
	movzx	eax, WORD PTR [eax+12]
	mov	DWORD PTR _EyeWidthAtCenter$[ebp], ecx
	shr	ax, 1
	xor	ecx, ecx
	mov	WORD PTR tv800[ebp], ax
	cmp	cx, ax
	jae	$LN12@FinalCalcu
	lea	eax, DWORD PTR [esi+edx*2]
	lea	ecx, DWORD PTR [edi+eax*4]
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	ecx, eax
	movzx	eax, BYTE PTR _Strobe$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, eax
	mov	eax, DWORD PTR _Param$[ebp]
	mov	eax, DWORD PTR [eax]
	lea	ebx, DWORD PTR [ebx+ecx*8]
	add	ebx, ebx
	movzx	eax, WORD PTR [ebx+eax]
	mov	DWORD PTR tv769[ebp], ebx
	mov	DWORD PTR tv856[ebp], eax
$LL11@FinalCalcu:
; Line 15994
	movzx	ecx, BYTE PTR _Loop$[ebp]
	mov	eax, DWORD PTR tv776[ebp]
	sub	eax, ecx
	lea	eax, DWORD PTR [edx+eax*2]
	lea	eax, DWORD PTR [esi+eax*2]
	lea	ebx, DWORD PTR [edi+eax*4]
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	ebx, eax
	movzx	eax, BYTE PTR _Strobe$[ebp]
	imul	ebx, 18					; 00000012H
	add	ebx, eax
	movzx	eax, BYTE PTR _Bit$[ebp]
	lea	ebx, DWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR _Param$[ebp]
	mov	eax, DWORD PTR [eax+8]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR tv915[ebp], eax
	mov	eax, DWORD PTR tv776[ebp]
	add	eax, ecx
	lea	eax, DWORD PTR [edx+eax*2]
	lea	eax, DWORD PTR [esi+eax*2]
	lea	ebx, DWORD PTR [edi+eax*4]
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	ebx, eax
	movzx	eax, BYTE PTR _Strobe$[ebp]
	imul	ebx, 18					; 00000012H
	add	ebx, eax
	movzx	eax, BYTE PTR _Bit$[ebp]
	lea	ebx, DWORD PTR [eax+ebx*8]
	mov	eax, DWORD PTR _Param$[ebp]
	mov	eax, DWORD PTR [eax+8]
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR tv837[ebp], eax
	mov	eax, DWORD PTR tv776[ebp]
	mov	ebx, DWORD PTR tv837[ebp]
	movzx	ebx, WORD PTR [ebx+2]
	sub	eax, ecx
	imul	ecx, DWORD PTR _EyeWidthAtCenter$[ebp]
	imul	eax, DWORD PTR tv856[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR tv915[ebp]
	movzx	eax, WORD PTR [eax+2]
	add	eax, ebx
	mov	ebx, DWORD PTR tv915[ebp]
	movzx	ebx, WORD PTR [ebx]
	add	eax, ebx
	mov	ebx, DWORD PTR tv837[ebp]
	movzx	ebx, WORD PTR [ebx]
	add	eax, ebx
	imul	eax, ecx
	add	DWORD PTR _SumLR$[ebp], eax
; Line 15995
	mov	eax, DWORD PTR _SumWeights$[ebp]
	inc	BYTE PTR _Loop$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*2]
	movzx	ax, BYTE PTR _Loop$[ebp]
	mov	DWORD PTR _SumWeights$[ebp], ecx
	cmp	ax, WORD PTR tv800[ebp]
	jb	$LL11@FinalCalcu
; Line 16000
	test	ecx, ecx
	je	SHORT $LN12@FinalCalcu
; Line 16001
	mov	eax, DWORD PTR _SumLR$[ebp]
	xor	edx, edx
	div	ecx
	mov	ecx, DWORD PTR _Param$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR tv769[ebp]
	shr	eax, 1
	mov	WORD PTR [edx+ecx], ax
; Line 16002
	jmp	SHORT $LN1@FinalCalcu
$LN12@FinalCalcu:
; Line 16003
	lea	eax, DWORD PTR [esi+edx*2]
	lea	ecx, DWORD PTR [edi+eax*4]
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	ecx, eax
	movzx	eax, BYTE PTR _Strobe$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, eax
	movzx	eax, BYTE PTR _Bit$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR _Param$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	xor	edx, edx
	mov	WORD PTR [ecx+eax*2], dx
$LN1@FinalCalcu:
	pop	edi
	pop	ebx
$LN13@FinalCalcu:
; Line 16006
	xor	eax, eax
	pop	esi
; Line 16007
	leave
	ret	0
_FinalCalculateCenter2 ENDP
_TEXT	ENDS
PUBLIC	_FindMaxMinEW
; Function compile flags: /Ogspy
;	COMDAT _FindMaxMinEW
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Ch$ = 16						; size = 1
_Rn$ = 20						; size = 1
_Kn$ = 24						; size = 1
_St$ = 28						; size = 1
_Bi$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_FindMaxMinEW PROC					; COMDAT
; Line 16037
	push	ebp
	mov	ebp, esp
; Line 16043
	mov	eax, DWORD PTR _Range$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	movzx	eax, WORD PTR [eax]
	mov	edx, ecx
	sub	edx, eax
; Line 16044
	cmp	ax, cx
; Line 16045
	movzx	ecx, BYTE PTR _Ch$[ebp]
	movzx	eax, BYTE PTR _Timing$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR _Rn$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Kn$[ebp]
	movzx	edx, dx
	jbe	SHORT $LN3@FindMaxMin
	add	eax, ecx
	movzx	ecx, BYTE PTR _St$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bi$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _Param$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	xor	edx, edx
	mov	WORD PTR [ecx+eax*2], dx
; Line 16046
	jmp	SHORT $LN1@FindMaxMin
$LN3@FindMaxMin:
; Line 16051
	add	eax, ecx
	movzx	ecx, BYTE PTR _St$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bi$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _Param$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR [esi+4]
	add	eax, eax
	add	ecx, eax
	movzx	ebx, WORD PTR [ecx]
	push	edi
	movsx	edi, dx
	cmp	ebx, edi
	jge	SHORT $LN2@FindMaxMin
	test	dx, dx
	jle	SHORT $LN2@FindMaxMin
; Line 16052
	mov	WORD PTR [ecx], dx
$LN2@FindMaxMin:
; Line 16057
	mov	ecx, DWORD PTR [esi]
	add	eax, ecx
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, edi
	pop	edi
	pop	esi
	pop	ebx
	jle	SHORT $LN1@FindMaxMin
; Line 16058
	mov	WORD PTR [eax], dx
$LN1@FindMaxMin:
; Line 16061
	xor	eax, eax
; Line 16062
	pop	ebp
	ret	0
_FindMaxMinEW ENDP
_TEXT	ENDS
PUBLIC	_FindCommonMaxMinEW
; Function compile flags: /Ogspy
;	COMDAT _FindCommonMaxMinEW
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Ch$ = 16						; size = 1
_Rn$ = 20						; size = 1
_Kn$ = 24						; size = 1
_St$ = 28						; size = 1
_Bi$ = 32						; size = 1
_Tim$ = 36						; size = 1
_Param$ = 40						; size = 4
_FindCommonMaxMinEW PROC				; COMDAT
; Line 16075
	push	ebp
	mov	ebp, esp
; Line 16080
	movzx	ecx, BYTE PTR _Rn$[ebp]
	movzx	eax, BYTE PTR _Ch$[ebp]
	mov	edx, DWORD PTR _Param$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	movzx	ecx, BYTE PTR _Kn$[ebp]
	add	ecx, eax
	lea	eax, DWORD PTR [ecx+4]
	imul	ecx, 18					; 00000012H
	imul	eax, 18					; 00000012H
	push	ebx
	movzx	ebx, BYTE PTR _St$[ebp]
	push	esi
	movzx	esi, BYTE PTR _Bi$[ebp]
	add	ecx, ebx
	add	eax, ebx
	lea	ecx, DWORD PTR [esi+ecx*8]
	lea	eax, DWORD PTR [esi+eax*8]
	push	edi
	mov	edi, DWORD PTR [edx+4]
	add	ecx, ecx
	mov	si, WORD PTR [ecx+edi]
	add	eax, eax
	cmp	si, WORD PTR [edi+eax]
; Line 16081
	mov	esi, edi
	jae	SHORT $LN4@FindCommon
	mov	di, WORD PTR [esi+eax]
	mov	WORD PTR [esi+ecx], di
; Line 16082
	jmp	SHORT $LN3@FindCommon
$LN4@FindCommon:
; Line 16083
	mov	di, WORD PTR [esi+ecx]
	mov	WORD PTR [esi+eax], di
$LN3@FindCommon:
; Line 16088
	mov	edx, DWORD PTR [edx]
	add	eax, edx
	movzx	esi, WORD PTR [eax]
	add	ecx, edx
	movzx	edx, WORD PTR [ecx]
	cmp	dx, si
	jbe	SHORT $LN2@FindCommon
; Line 16089
	mov	WORD PTR [ecx], si
; Line 16090
	jmp	SHORT $LN1@FindCommon
$LN2@FindCommon:
; Line 16091
	mov	WORD PTR [eax], dx
$LN1@FindCommon:
	pop	edi
	pop	esi
; Line 16094
	xor	eax, eax
	pop	ebx
; Line 16095
	pop	ebp
	ret	0
_FindCommonMaxMinEW ENDP
_TEXT	ENDS
PUBLIC	_ApplyMaxMinEWWeight
; Function compile flags: /Ogspy
;	COMDAT _ApplyMaxMinEWWeight
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Width$ = 12						; size = 2
_Range$ = 12						; size = 4
tv754 = 16						; size = 4
_Ch$ = 16						; size = 1
_Rn$ = 20						; size = 1
_Kn$ = 24						; size = 1
_St$ = 28						; size = 1
_Bi$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_ApplyMaxMinEWWeight PROC				; COMDAT
; Line 16126
	push	ebp
	mov	ebp, esp
; Line 16132
	mov	edx, DWORD PTR _Range$[ebp]
; Line 16133
	movzx	ecx, BYTE PTR _Ch$[ebp]
	push	ebx
	push	esi
	movzx	esi, WORD PTR [edx]
	push	edi
	movzx	edi, WORD PTR [edx+2]
	mov	eax, edi
	sub	eax, esi
	movzx	eax, ax
	mov	DWORD PTR _Width$[ebp], eax
	movzx	eax, BYTE PTR _Timing$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR _Rn$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Kn$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _St$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bi$[ebp]
	shl	eax, 3
	add	ecx, eax
	mov	DWORD PTR tv754[ebp], eax
	movzx	eax, si
	mov	esi, DWORD PTR _Param$[ebp]
	mov	ebx, DWORD PTR [esi+4]
	add	ecx, ecx
	movzx	ebx, WORD PTR [ebx+ecx]
	movzx	edi, di
	sub	edi, eax
	cmp	edi, ebx
	jne	SHORT $LN6@ApplyMaxMi
; Line 16137
	movzx	eax, BYTE PTR _Bi$[ebp]
	mov	edi, DWORD PTR [esi+12]
	add	edi, eax
	mov	eax, DWORD PTR tv754[ebp]
	add	eax, edi
	add	BYTE PTR [eax], 5
; Line 16138
	mov	eax, DWORD PTR [esi+8]
	lea	edi, DWORD PTR [eax+ecx]
	movzx	eax, WORD PTR [edx+2]
	movzx	edx, WORD PTR [edx]
	add	eax, edx
	imul	eax, 5
	jmp	SHORT $LN10@ApplyMaxMi
$LN6@ApplyMaxMi:
; Line 16142
	mov	edi, DWORD PTR [esi]
	movzx	ebx, WORD PTR [edx+2]
	movzx	edi, WORD PTR [ecx+edi]
	sub	ebx, eax
	cmp	ebx, edi
	jne	SHORT $LN4@ApplyMaxMi
; Line 16146
	movzx	eax, BYTE PTR _Bi$[ebp]
	mov	edi, DWORD PTR [esi+12]
	add	edi, eax
	mov	eax, DWORD PTR tv754[ebp]
	add	eax, edi
	add	BYTE PTR [eax], 2
; Line 16147
	mov	eax, DWORD PTR [esi+8]
	lea	edi, DWORD PTR [eax+ecx]
	movzx	eax, WORD PTR [edx+2]
	movzx	edx, WORD PTR [edx]
	add	eax, edx
	add	eax, eax
	jmp	SHORT $LN10@ApplyMaxMi
$LN4@ApplyMaxMi:
; Line 16151
	cmp	WORD PTR _Width$[ebp], 0
	jle	SHORT $LN9@ApplyMaxMi
; Line 16155
	movzx	eax, BYTE PTR _Bi$[ebp]
	mov	edi, DWORD PTR [esi+12]
	add	edi, eax
	mov	eax, DWORD PTR tv754[ebp]
	add	eax, edi
	add	BYTE PTR [eax], 3
; Line 16156
	mov	eax, DWORD PTR [esi+8]
	lea	edi, DWORD PTR [eax+ecx]
	movzx	eax, WORD PTR [edx+2]
	movzx	edx, WORD PTR [edx]
	add	eax, edx
	imul	eax, 3
$LN10@ApplyMaxMi:
	cdq
	sub	eax, edx
	sar	eax, 1
	add	WORD PTR [edi], ax
$LN9@ApplyMaxMi:
; Line 16161
	movzx	eax, BYTE PTR _Timing$[ebp]
	cmp	BYTE PTR [eax+esi+16], 1
	jne	SHORT $LN1@ApplyMaxMi
; Line 16162
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	add	ecx, eax
	movzx	eax, BYTE PTR _Bi$[ebp]
	add	edx, eax
	mov	eax, DWORD PTR tv754[ebp]
	movzx	esi, BYTE PTR [edx+eax]
	movzx	eax, WORD PTR [ecx]
	cdq
	idiv	esi
	mov	WORD PTR [ecx], ax
$LN1@ApplyMaxMi:
	pop	edi
	pop	esi
; Line 16164
	xor	eax, eax
	pop	ebx
; Line 16165
	pop	ebp
	ret	0
_ApplyMaxMinEWWeight ENDP
_TEXT	ENDS
PUBLIC	_TestNonLinearPBForDone
; Function compile flags: /Ogspy
;	COMDAT _TestNonLinearPBForDone
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
tv466 = 16						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_TestNonLinearPBForDone PROC				; COMDAT
; Line 16236
	push	ebp
	mov	ebp, esp
; Line 16238
	movzx	edx, BYTE PTR _Channel$[ebp]
	movzx	eax, BYTE PTR _Rank$[ebp]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	push	ebx
	push	esi
	movzx	esi, BYTE PTR _Knob$[ebp]
	push	edi
	movzx	edi, BYTE PTR _Timing$[ebp]
	lea	edi, DWORD PTR [edx+edi*2]
	lea	edi, DWORD PTR [esi+edi*4]
	add	edi, eax
	mov	eax, DWORD PTR _Param$[ebp]
	imul	edi, 18					; 00000012H
	mov	ebx, DWORD PTR [eax+8]
	add	edi, ecx
	mov	ecx, edi
	movzx	edi, BYTE PTR _Bit$[ebp]
	shl	ecx, 3
	add	ebx, edi
	add	ebx, ecx
	cmp	BYTE PTR [ebx], 0
	mov	DWORD PTR tv466[ebp], ebx
	jne	SHORT $LN1@TestNonLin
; Line 16242
	mov	ebx, DWORD PTR [eax+44]
; Line 16244
	lea	esi, DWORD PTR [esi+edx*4]
	movzx	edx, BYTE PTR _Rank$[ebp]
	add	esi, edx
	movzx	edx, BYTE PTR _Strobe$[ebp]
	imul	esi, 18					; 00000012H
	add	ecx, edi
	mov	edi, DWORD PTR [eax+4]
	add	esi, edx
	mov	edx, DWORD PTR [eax+40]
	movzx	edx, WORD PTR [edx+esi*2]
	mov	esi, DWORD PTR [eax]
	add	ecx, ecx
	movzx	edi, WORD PTR [ecx+edi]
	movzx	ecx, WORD PTR [ecx+esi]
	cmp	BYTE PTR [ebx+39], 0
	mov	ebx, DWORD PTR _Range$[ebp]
	movzx	esi, di
	jne	SHORT $LN6@TestNonLin
	movzx	ebx, WORD PTR [ebx+2]
	sub	edx, ecx
	movzx	ecx, bx
	sub	ecx, esi
	cmp	ecx, edx
	jl	SHORT $LN2@TestNonLin
	cmp	bx, di
	ja	SHORT $LN10@TestNonLin
$LN2@TestNonLin:
; Line 16257
	mov	BYTE PTR [eax+36], 0
$LN1@TestNonLin:
	pop	edi
	pop	esi
; Line 16261
	xor	eax, eax
	pop	ebx
; Line 16262
	pop	ebp
	ret	0
$LN6@TestNonLin:
; Line 16254
	movzx	ebx, WORD PTR [ebx]
	sub	ecx, edx
	movzx	edx, bx
	sub	esi, edx
	cmp	esi, ecx
	jl	SHORT $LN2@TestNonLin
	cmp	bx, di
	jae	SHORT $LN2@TestNonLin
$LN10@TestNonLin:
; Line 16255
	mov	eax, DWORD PTR tv466[ebp]
	mov	BYTE PTR [eax], 1
; Line 16256
	jmp	SHORT $LN1@TestNonLin
_TestNonLinearPBForDone ENDP
_TEXT	ENDS
PUBLIC	_SplitByteResultsPerNibble
; Function compile flags: /Ogspy
;	COMDAT _SplitByteResultsPerNibble
_TEXT	SEGMENT
tv528 = -24						; size = 4
tv516 = -24						; size = 4
tv257 = -20						; size = 4
tv180 = -16						; size = 4
tv499 = -12						; size = 4
_Ch$ = -8						; size = 1
_Rk$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_PBFlags$ = 12						; size = 2
_Data$ = 16						; size = 4
_DataHL$ = 20						; size = 4
_SplitByteResultsPerNibble PROC				; COMDAT
; Line 16285
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 16291
	and	DWORD PTR tv499[ebp], 0
	push	ebx
	push	esi
	mov	DWORD PTR tv257[ebp], 2
	push	edi
$LL27@SplitByteR:
; Line 16292
	mov	BYTE PTR _Ch$[ebp], 0
	xor	ebx, ebx
$LL28@SplitByteR:
; Line 16293
	mov	BYTE PTR _Rk$[ebp], 0
	xor	esi, esi
$LL10@SplitByteR:
; Line 16294
	push	DWORD PTR _Rk$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	push	DWORD PTR _Ch$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN9@SplitByteR
; Line 16297
	lea	eax, DWORD PTR [esi+ebx*4]
	cmp	BYTE PTR [eax+edi+55470], 9
	jne	$LN9@SplitByteR
	test	DWORD PTR _PBFlags$[ebp], 1024		; 00000400H
	je	$LN9@SplitByteR
; Line 16298
	xor	edi, edi
	mov	DWORD PTR tv180[ebp], 9
$LL5@SplitByteR:
; Line 16299
	mov	ecx, DWORD PTR _Data$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@SplitByteR
; Line 16307
	mov	eax, DWORD PTR tv499[ebp]
	add	eax, ebx
	lea	eax, DWORD PTR [esi+eax*4]
	imul	eax, 18					; 00000012H
	add	eax, edi
	mov	edx, eax
	add	eax, 9
	shl	edx, 4
	lea	edx, DWORD PTR [edx+ecx+8]
	push	8
	shl	eax, 4
	push	edx
	add	eax, ecx
	push	eax
	mov	DWORD PTR tv516[ebp], edx
	call	_MmrcMemCopy
; Line 16315
	push	8
	push	-1
	push	DWORD PTR tv516[ebp]
	call	_MmrcMemset
	add	esp, 24					; 00000018H
$LN2@SplitByteR:
; Line 16317
	mov	ecx, DWORD PTR _DataHL$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@SplitByteR
; Line 16325
	mov	eax, DWORD PTR tv499[ebp]
	add	eax, ebx
	lea	eax, DWORD PTR [esi+eax*4]
	imul	eax, 18					; 00000012H
	add	eax, edi
	mov	edx, eax
	add	eax, 9
	shl	edx, 5
	lea	edx, DWORD PTR [edx+ecx+16]
	push	16					; 00000010H
	shl	eax, 5
	push	edx
	add	eax, ecx
	push	eax
	mov	DWORD PTR tv528[ebp], edx
	call	_MmrcMemCopy
; Line 16333
	push	16					; 00000010H
	push	-1
	push	DWORD PTR tv528[ebp]
	call	_MmrcMemset
	add	esp, 24					; 00000018H
$LN4@SplitByteR:
	inc	edi
	dec	DWORD PTR tv180[ebp]
	jne	$LL5@SplitByteR
$LN9@SplitByteR:
; Line 16293
	inc	BYTE PTR _Rk$[ebp]
	inc	esi
	cmp	BYTE PTR _Rk$[ebp], 4
	jb	$LL10@SplitByteR
	inc	BYTE PTR _Ch$[ebp]
	inc	ebx
	cmp	BYTE PTR _Ch$[ebp], 2
	jb	$LL28@SplitByteR
	add	DWORD PTR tv499[ebp], 2
	dec	DWORD PTR tv257[ebp]
	jne	$LL27@SplitByteR
	pop	edi
	pop	esi
; Line 16341
	xor	eax, eax
	pop	ebx
; Line 16342
	leave
	ret	0
_SplitByteResultsPerNibble ENDP
_TEXT	ENDS
PUBLIC	_DetermineStrobeVal
; Function compile flags: /Ogspy
;	COMDAT _DetermineStrobeVal
_TEXT	SEGMENT
tv398 = -8						; size = 4
_MaxBit$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
tv393 = 40						; size = 4
_Param$ = 40						; size = 4
_DetermineStrobeVal PROC				; COMDAT
; Line 16356
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 16360
	lea	eax, DWORD PTR _MaxBit$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
; Line 16361
	mov	esi, DWORD PTR _Param$[ebp]
	mov	eax, DWORD PTR [esi+44]
; Line 16366
	movzx	ecx, BYTE PTR _Channel$[ebp]
	movzx	edx, BYTE PTR _Rank$[ebp]
	movzx	edi, BYTE PTR _Knob$[ebp]
	movzx	ebx, BYTE PTR _Strobe$[ebp]
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [eax+39], 1
	mov	DWORD PTR tv393[ebp], edx
	mov	DWORD PTR tv398[ebp], ebx
	lea	eax, DWORD PTR [edi+ecx*4]
	jne	SHORT $LN13@DetermineS
	add	eax, edx
	mov	edx, DWORD PTR [esi+40]
	imul	eax, 18					; 00000012H
	add	eax, ebx
	add	eax, eax
; Line 16367
	cmp	BYTE PTR _MaxBit$[ebp], 0
	mov	ebx, 65535				; 0000ffffH
	mov	WORD PTR [eax+edx], bx
	jbe	SHORT $LN5@DetermineS
	movzx	edx, BYTE PTR _Timing$[ebp]
	movzx	ebx, BYTE PTR _MaxBit$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*2]
	lea	ecx, DWORD PTR [edi+ecx*4]
	add	ecx, DWORD PTR tv393[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR tv398[ebp]
	shl	ecx, 4
$LL12@DetermineS:
; Line 16368
	mov	edi, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+40]
	movzx	edi, WORD PTR [ecx+edi]
	add	edx, eax
	cmp	di, WORD PTR [edx]
	jae	SHORT $LN11@DetermineS
; Line 16369
	mov	WORD PTR [edx], di
$LN11@DetermineS:
; Line 16367
	inc	ecx
	inc	ecx
	dec	ebx
	jne	SHORT $LL12@DetermineS
; Line 16372
	jmp	SHORT $LN5@DetermineS
$LN13@DetermineS:
; Line 16377
	add	eax, edx
	mov	edx, DWORD PTR [esi+40]
	imul	eax, 18					; 00000012H
	add	eax, ebx
	xor	ebx, ebx
	add	eax, eax
	mov	WORD PTR [eax+edx], bx
; Line 16378
	cmp	BYTE PTR _MaxBit$[ebp], bl
	jbe	SHORT $LN5@DetermineS
	movzx	edx, BYTE PTR _Timing$[ebp]
	movzx	ebx, BYTE PTR _MaxBit$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*2]
	lea	ecx, DWORD PTR [edi+ecx*4]
	add	ecx, DWORD PTR tv393[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR tv398[ebp]
	shl	ecx, 4
$LL7@DetermineS:
; Line 16379
	mov	edi, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+40]
	movzx	edi, WORD PTR [ecx+edi]
	add	edx, eax
	cmp	di, WORD PTR [edx]
	jbe	SHORT $LN6@DetermineS
; Line 16380
	mov	WORD PTR [edx], di
$LN6@DetermineS:
; Line 16378
	inc	ecx
	inc	ecx
	dec	ebx
	jne	SHORT $LL7@DetermineS
$LN5@DetermineS:
	pop	edi
	pop	esi
; Line 16395
	xor	eax, eax
	pop	ebx
; Line 16396
	leave
	ret	0
_DetermineStrobeVal ENDP
_TEXT	ENDS
PUBLIC	_CopyToLow
; Function compile flags: /Ogspy
;	COMDAT _CopyToLow
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
tv276 = 16						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_CopyToLow PROC						; COMDAT
; Line 16410
	push	ebp
	mov	ebp, esp
; Line 16413
	movzx	ecx, BYTE PTR _Channel$[ebp]
	movzx	edx, BYTE PTR _Knob$[ebp]
	push	ebx
	movzx	ebx, BYTE PTR _Timing$[ebp]
	push	esi
	mov	esi, DWORD PTR _Param$[ebp]
	mov	eax, DWORD PTR [esi+44]
	cmp	BYTE PTR [eax+39], 0
	movzx	eax, BYTE PTR _Rank$[ebp]
	lea	ebx, DWORD PTR [ecx+ebx*2]
	push	edi
	movzx	edi, BYTE PTR _Strobe$[ebp]
	lea	ebx, DWORD PTR [edx+ebx*4]
	jne	SHORT $LN4@CopyToLow
	add	ebx, eax
	imul	ebx, 18					; 00000012H
	add	ebx, edi
	mov	edi, ebx
	mov	ebx, DWORD PTR _Range$[ebp]
	mov	bx, WORD PTR [ebx+2]
; Line 16414
	jmp	SHORT $LN7@CopyToLow
$LN4@CopyToLow:
; Line 16415
	add	ebx, eax
	imul	ebx, 18					; 00000012H
	add	ebx, edi
	mov	edi, ebx
	mov	ebx, DWORD PTR _Range$[ebp]
	mov	bx, WORD PTR [ebx]
$LN7@CopyToLow:
	movzx	eax, BYTE PTR _Bit$[ebp]
; Line 16417
	lea	edx, DWORD PTR [edx+ecx*4]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	add	edx, ecx
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	edx, 18					; 00000012H
	shl	edi, 3
	add	eax, edi
	add	eax, eax
	mov	DWORD PTR tv276[ebp], edi
	mov	edi, DWORD PTR [esi+4]
	mov	WORD PTR [eax+edi], bx
	add	edx, ecx
	mov	ecx, DWORD PTR [esi+40]
	movzx	ecx, WORD PTR [ecx+edx*2]
	mov	edx, DWORD PTR [esi]
	movzx	eax, WORD PTR [eax+edx]
	sub	eax, ecx
	jne	SHORT $LN2@CopyToLow
; Line 16418
	movzx	eax, BYTE PTR _Bit$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, eax
	mov	eax, DWORD PTR tv276[ebp]
	mov	BYTE PTR [ecx+eax], 1
; Line 16419
	jmp	SHORT $LN1@CopyToLow
$LN2@CopyToLow:
; Line 16420
	mov	BYTE PTR [esi+36], 0
$LN1@CopyToLow:
	pop	edi
	pop	esi
; Line 16422
	xor	eax, eax
	pop	ebx
; Line 16423
	pop	ebp
	ret	0
_CopyToLow ENDP
_TEXT	ENDS
PUBLIC	_FillSignalIndexArray
; Function compile flags: /Ogspy
;	COMDAT _FillSignalIndexArray
_TEXT	SEGMENT
_Index$ = 8						; size = 4
_ControlKnobs$ = 12					; size = 4
_IdxArrayFlag$ = 16					; size = 1
_FillSignalIndexArray PROC				; COMDAT
; Line 16650
	mov	eax, DWORD PTR _ControlKnobs$[esp-4]
	mov	cl, BYTE PTR [eax+43]
	xor	dl, dl
	test	cl, cl
	jbe	SHORT $LN7@FillSignal
	push	ebx
	movzx	ebx, BYTE PTR _IdxArrayFlag$[esp]
	push	esi
	mov	esi, DWORD PTR _Index$[esp+4]
	push	edi
$LL9@FillSignal:
; Line 16651
	mov	edi, ebx
	sub	edi, 0
	je	SHORT $LN3@FillSignal
	dec	edi
	je	SHORT $LN2@FillSignal
	sub	edi, 254				; 000000feH
; Line 16662
	movzx	ecx, dl
; Line 16663
	jne	SHORT $LN14@FillSignal
; Line 16653
	mov	edi, 65535				; 0000ffffH
; Line 16654
	jmp	SHORT $LN15@FillSignal
$LN2@FillSignal:
; Line 16659
	movzx	ecx, cl
	imul	ecx, 45					; 0000002dH
	mov	cx, WORD PTR [ecx+eax]
	movzx	edi, dl
	mov	WORD PTR [esi+edi*2], cx
; Line 16660
	jmp	SHORT $LN8@FillSignal
$LN3@FillSignal:
; Line 16656
	movzx	ecx, dl
$LN14@FillSignal:
	mov	edi, ecx
	imul	edi, 45					; 0000002dH
	mov	di, WORD PTR [edi+eax]
$LN15@FillSignal:
	mov	WORD PTR [esi+ecx*2], di
$LN8@FillSignal:
; Line 16650
	mov	cl, BYTE PTR [eax+43]
	inc	dl
	cmp	dl, cl
	jb	SHORT $LL9@FillSignal
	pop	edi
	pop	esi
	pop	ebx
$LN7@FillSignal:
; Line 16666
	ret	0
_FillSignalIndexArray ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@LFJFNKGJ@Supportx4withByteLevelSignals?$AA@ ; `string'
PUBLIC	_Supportx4withByteLevelSignals
EXTRN	_CheckX4Support:PROC
;	COMDAT ??_C@_0BO@LFJFNKGJ@Supportx4withByteLevelSignals?$AA@
CONST	SEGMENT
??_C@_0BO@LFJFNKGJ@Supportx4withByteLevelSignals?$AA@ DB 'Supportx4withBy'
	DB	'teLevelSignals', 00H			; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _Supportx4withByteLevelSignals
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Index$ = 12						; size = 2
_SharedFlags$ = 16					; size = 2
_Channel$ = 20						; size = 1
_Rank$ = 24						; size = 1
_NumberElements$ = 28					; size = 4
_Supportx4withByteLevelSignals PROC			; COMDAT
; Line 17257
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 17261
	mov	esi, DWORD PTR _NumberElements$[ebp]
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _Channel$[ebp], bl
$LL6@Supportx4w:
; Line 17262
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN5@Supportx4w
; Line 17263
	test	BYTE PTR _SharedFlags$[ebp], 128	; 00000080H
	je	SHORT $LN11@Supportx4w
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, ebx
	add	eax, edi
	cmp	BYTE PTR [eax+55454], 18		; 00000012H
	jne	SHORT $LN11@Supportx4w
; Line 17266
	push	17266					; 00004372H
	push	OFFSET ??_C@_0BO@LFJFNKGJ@Supportx4withByteLevelSignals?$AA@
	mov	BYTE PTR [esi], 9
	push	edi
	mov	BYTE PTR [eax+55462], 8
	call	_CheckX4Support
	add	esp, 12					; 0000000cH
; Line 17267
	jmp	SHORT $LN5@Supportx4w
$LN11@Supportx4w:
; Line 17268
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, ebx
	mov	al, BYTE PTR [eax+edi+55454]
	mov	BYTE PTR [esi], al
$LN5@Supportx4w:
	inc	BYTE PTR _Channel$[ebp]
	add	ebx, 4
	inc	esi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL6@Supportx4w
	pop	edi
	pop	esi
; Line 17271
	xor	eax, eax
	pop	ebx
; Line 17272
	pop	ebp
	ret	0
_Supportx4withByteLevelSignals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JCOMMCBM@Restorex4withByteLevelSignals?$AA@ ; `string'
PUBLIC	_Restorex4withByteLevelSignals
;	COMDAT ??_C@_0BO@JCOMMCBM@Restorex4withByteLevelSignals?$AA@
CONST	SEGMENT
??_C@_0BO@JCOMMCBM@Restorex4withByteLevelSignals?$AA@ DB 'Restorex4withBy'
	DB	'teLevelSignals', 00H			; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _Restorex4withByteLevelSignals
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Index$ = 12						; size = 2
_SharedFlags$ = 16					; size = 2
_Channel$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Restorex4withByteLevelSignals PROC			; COMDAT
; Line 17281
	push	ebp
	mov	ebp, esp
	push	esi
; Line 17285
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	mov	BYTE PTR _Channel$[ebp], 0
	xor	edi, edi
$LL5@Restorex4w:
; Line 17286
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN4@Restorex4w
; Line 17287
	test	BYTE PTR _SharedFlags$[ebp], 128	; 00000080H
	je	SHORT $LN4@Restorex4w
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, edi
	add	eax, esi
	cmp	BYTE PTR [eax+55454], 18		; 00000012H
	jne	SHORT $LN4@Restorex4w
; Line 17289
	push	17289					; 00004389H
	push	OFFSET ??_C@_0BO@JCOMMCBM@Restorex4withByteLevelSignals?$AA@
	push	esi
	mov	BYTE PTR [eax+55462], 4
	call	_CheckX4Support
	add	esp, 12					; 0000000cH
$LN4@Restorex4w:
	inc	BYTE PTR _Channel$[ebp]
	add	edi, 4
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL5@Restorex4w
	pop	edi
; Line 17292
	xor	eax, eax
	pop	esi
; Line 17293
	pop	ebp
	ret	0
_Restorex4withByteLevelSignals ENDP
_TEXT	ENDS
PUBLIC	_GetMaxElements
; Function compile flags: /Ogspy
;	COMDAT _GetMaxElements
_TEXT	SEGMENT
_ch$ = -9						; size = 1
_rk$ = -5						; size = 1
_MaxElements$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_GetMaxElements PROC					; COMDAT
; Line 17555
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 17559
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	push	edi
	mov	BYTE PTR _MaxElements$[ebp], 0
; Line 17560
	mov	BYTE PTR _ch$[ebp], 0
	xor	edi, edi
$LL16@GetMaxElem:
; Line 17561
	mov	BYTE PTR _rk$[ebp], 0
	xor	esi, esi
$LL4@GetMaxElem:
; Line 17562
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN3@GetMaxElem
; Line 17563
	mov	cl, BYTE PTR _MaxElements$[ebp]
	lea	eax, DWORD PTR [edi+esi]
	mov	al, BYTE PTR [eax+ebx+55454]
	mov	BYTE PTR _MaxElements$[ebp], cl
	cmp	cl, al
	ja	SHORT $LN3@GetMaxElem
	mov	BYTE PTR _MaxElements$[ebp], al
$LN3@GetMaxElem:
; Line 17561
	inc	BYTE PTR _rk$[ebp]
	inc	esi
	cmp	BYTE PTR _rk$[ebp], 4
	jb	SHORT $LL4@GetMaxElem
	inc	BYTE PTR _ch$[ebp]
	add	edi, 4
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL16@GetMaxElem
; Line 17567
	mov	al, BYTE PTR _MaxElements$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 17568
	leave
	ret	0
_GetMaxElements ENDP
_TEXT	ENDS
PUBLIC	_GetMaxBits
; Function compile flags: /Ogspy
;	COMDAT _GetMaxBits
_TEXT	SEGMENT
_ch$ = -9						; size = 1
_rk$ = -5						; size = 1
_MaxBits$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_GetMaxBits PROC					; COMDAT
; Line 17574
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 17578
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	push	edi
	mov	BYTE PTR _MaxBits$[ebp], 0
; Line 17579
	mov	BYTE PTR _ch$[ebp], 0
	xor	edi, edi
$LL16@GetMaxBits:
; Line 17580
	mov	BYTE PTR _rk$[ebp], 0
	xor	esi, esi
$LL4@GetMaxBits:
; Line 17581
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN3@GetMaxBits
; Line 17582
	mov	cl, BYTE PTR _MaxBits$[ebp]
	lea	eax, DWORD PTR [edi+esi]
	mov	al, BYTE PTR [eax+ebx+55462]
	mov	BYTE PTR _MaxBits$[ebp], cl
	cmp	cl, al
	ja	SHORT $LN3@GetMaxBits
	mov	BYTE PTR _MaxBits$[ebp], al
$LN3@GetMaxBits:
; Line 17580
	inc	BYTE PTR _rk$[ebp]
	inc	esi
	cmp	BYTE PTR _rk$[ebp], 4
	jb	SHORT $LL4@GetMaxBits
	inc	BYTE PTR _ch$[ebp]
	add	edi, 4
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL16@GetMaxBits
; Line 17586
	mov	al, BYTE PTR _MaxBits$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 17587
	leave
	ret	0
_GetMaxBits ENDP
_TEXT	ENDS
PUBLIC	_MmrcWriteMsr
; Function compile flags: /Ogspy
;	COMDAT _MmrcWriteMsr
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_MsrAddress$ = 12					; size = 4
_MsrDataLow$ = 16					; size = 4
_MsrDataHigh$ = 20					; size = 4
_MmrcWriteMsr PROC					; COMDAT
; Line 17613
	mov	edx, DWORD PTR _MsrDataHigh$[esp-4]
; Line 17614
	mov	eax, DWORD PTR _MsrDataLow$[esp-4]
; Line 17615
	mov	ecx, DWORD PTR _MsrAddress$[esp-4]
; Line 17616
	wrmsr
; Line 17619
	xor	eax, eax
; Line 17620
	ret	0
_MmrcWriteMsr ENDP
_TEXT	ENDS
PUBLIC	_MmrcReadMsr
; Function compile flags: /Ogspy
;	COMDAT _MmrcReadMsr
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_MsrAddress$ = 12					; size = 4
_MmrcReadMsr PROC					; COMDAT
; Line 17645
	mov	ecx, DWORD PTR _MsrAddress$[esp-4]
; Line 17646
	rdmsr
; Line 17650
	ret	0
_MmrcReadMsr ENDP
_TEXT	ENDS
PUBLIC	_PrintTaskNameType
; Function compile flags: /Ogspy
;	COMDAT _PrintTaskNameType
_TEXT	SEGMENT
_j$ = 8							; size = 4
_PrintTaskNameType PROC					; COMDAT
; Line 230
	ret	0
_PrintTaskNameType ENDP
_TEXT	ENDS
PUBLIC	_CheckAdvConstrains
; Function compile flags: /Ogspy
;	COMDAT _CheckAdvConstrains
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Str$ = 12						; size = 4
_function$ = 16						; size = 4
_line$ = 20						; size = 4
_CheckAdvConstrains PROC				; COMDAT
; Line 259
	mov	eax, DWORD PTR _MrcData$[esp-4]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
; Line 260
	call	_MrcDeadLoop
; Line 261
	or	eax, -1
; Line 262
	ret	0
_CheckAdvConstrains ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FECKJEFM@ReInitializeFunction?$AA@	; `string'
PUBLIC	_MmrcEntry
EXTRN	_Mmio32Read:PROC
EXTRN	_CapsuleStrings:BYTE
EXTRN	_HandleCheckpoint:PROC
EXTRN	_InitTasks:BYTE
EXTRN	_LockMspDataStructure:PROC
;	COMDAT ??_C@_0BF@FECKJEFM@ReInitializeFunction?$AA@
CONST	SEGMENT
??_C@_0BF@FECKJEFM@ReInitializeFunction?$AA@ DB 'ReInitializeFunction', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _MmrcEntry
_TEXT	SEGMENT
tv712 = -16						; size = 4
_Channel$ = -12						; size = 1
_Status$ = -8						; size = 4
_BackupMessage$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_ChannelBackup$ = 12					; size = 2
_Action$ = 12						; size = 4
_Parameters$ = 16					; size = 4
_MmrcEntry PROC						; COMDAT
; Line 368
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
; Line 380
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55506]
	push	edi
	xor	edi, edi
; Line 384
	push	esi
	mov	DWORD PTR _Status$[ebp], edi
	mov	BYTE PTR _BackupMessage$[ebp], al
	call	_ConvertPfctFromBitXToX
	pop	ecx
; Line 388
	call	_LockMspDataStructure
; Line 392
	cmp	DWORD PTR _Action$[ebp], edi
	je	SHORT $LN56@MmrcEntry
	cmp	DWORD PTR _Action$[ebp], 5
	jne	SHORT $LN3@MmrcEntry
; Line 553
	mov	eax, DWORD PTR _Parameters$[ebp]
	cmp	BYTE PTR [eax+2], 0
	jne	SHORT $LN4@MmrcEntry
; Line 554
	mov	BYTE PTR [eax+1], 254			; 000000feH
$LN4@MmrcEntry:
; Line 556
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, edi
	je	SHORT $LN3@MmrcEntry
; Line 557
	movzx	eax, BYTE PTR [eax+1]
	push	eax
	push	esi
	call	ecx
	pop	ecx
	pop	ecx
	jmp	$LN59@MmrcEntry
$LN3@MmrcEntry:
; Line 569
	xor	eax, eax
	jmp	$LN59@MmrcEntry
$LN56@MmrcEntry:
; Line 395
	mov	eax, DWORD PTR _Parameters$[ebp]
	push	ebx
	mov	ebx, OFFSET _InitTasks
	cmp	eax, edi
	je	SHORT $LN54@MmrcEntry
; Line 396
	cmp	BYTE PTR [eax+2], 0
	je	SHORT $LN54@MmrcEntry
; Line 397
	mov	al, BYTE PTR [eax+1]
	mov	BYTE PTR _InitTasks+11, al
$LN54@MmrcEntry:
; Line 400
	cmp	DWORD PTR _InitTasks+4, edi
	je	$LN51@MmrcEntry
$LL53@MmrcEntry:
; Line 401
	mov	al, BYTE PTR [ebx+1]
	test	al, BYTE PTR [esi+31274]
	je	$LN52@MmrcEntry
; Line 402
	mov	al, BYTE PTR [ebx]
	mov	BYTE PTR [esi+65332], al
; Line 403
	movzx	eax, BYTE PTR [ebx]
	push	eax
	push	esi
	call	_HandleCheckpoint
; Line 408
	push	ebx
	push	esi
	call	_CreateChannelMask
; Line 409
	mov	al, BYTE PTR [ebx+11]
	add	esp, 16					; 00000010H
	cmp	al, 255					; 000000ffH
	je	$LN48@MmrcEntry
	cmp	al, 224					; 000000e0H
	jne	SHORT $LN32@MmrcEntry
	cmp	BYTE PTR [esi+65552], 0
	je	$LN48@MmrcEntry
; Line 456
	cmp	al, al
	jne	SHORT $LN32@MmrcEntry
; Line 460
	mov	BYTE PTR [esi+55508], 1
; Line 461
	push	edi
; Line 464
	jmp	$LN157@MmrcEntry
$LN32@MmrcEntry:
; Line 465
	cmp	al, 254					; 000000feH
	jne	$LN28@MmrcEntry
; Line 466
	mov	eax, 254				; 000000feH
	cmp	WORD PTR [ebx+8], ax
	jne	SHORT $LN25@MmrcEntry
; Line 468
	movzx	eax, BYTE PTR [ebx+10]
	push	20					; 00000014H
	push	OFFSET ??_C@_0BF@FECKJEFM@ReInitializeFunction?$AA@
	push	DWORD PTR _CapsuleStrings[eax*4]
	call	_MmrcStringCompare
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN25@MmrcEntry
; Line 469
	mov	al, BYTE PTR [esi+55506]
	test	al, al
	je	SHORT $LN25@MmrcEntry
; Line 470
	or	al, 15					; 0000000fH
	mov	BYTE PTR [esi+55506], al
$LN25@MmrcEntry:
; Line 479
	push	ebx
	push	esi
	call	_CreateChannelMask
	pop	ecx
	lea	eax, DWORD PTR [esi+55511]
	pop	ecx
	lea	edi, DWORD PTR _ChannelBackup$[ebp]
	mov	ecx, eax
	mov	DWORD PTR tv712[ebp], 2
$LL24@MmrcEntry:
; Line 487
	cmp	BYTE PTR [ecx], 0
	mov	dl, BYTE PTR [ecx-2]
	mov	BYTE PTR [edi], dl
	je	SHORT $LN23@MmrcEntry
; Line 488
	mov	BYTE PTR [eax], 1
; Line 489
	mov	BYTE PTR [esi+55509], 1
$LN23@MmrcEntry:
	inc	edi
	inc	ecx
	dec	DWORD PTR tv712[ebp]
	jne	SHORT $LL24@MmrcEntry
; Line 494
	mov	BYTE PTR [esi+55512], 0
; Line 495
	mov	BYTE PTR [esi+55510], 0
; Line 501
	lea	edi, DWORD PTR [esi+55509]
; Line 502
	lea	esi, DWORD PTR _ChannelBackup$[ebp]
	movsw
; Line 508
	cmp	BYTE PTR [eax], 0
	je	$LN152@MmrcEntry
; Line 511
	movzx	eax, WORD PTR [ebx+12]
	mov	ecx, 542				; 0000021eH
	cmp	ax, cx
	jae	SHORT $LN12@MmrcEntry
; Line 513
	mov	ecx, DWORD PTR _MrcData$[ebp]
	movzx	eax, ax
	mov	edx, DWORD PTR [ecx+eax*8+55526]
	or	edx, DWORD PTR [ecx+eax*8+55530]
	je	$LN152@MmrcEntry
$LN12@MmrcEntry:
; Line 517
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR [esi+55508], 0
; Line 518
	movzx	ax, BYTE PTR [ebx+10]
	movzx	eax, ax
	push	0
	push	eax
	movzx	eax, WORD PTR [ebx+8]
	push	eax
	push	esi
	call	DWORD PTR [ebx+4]
	mov	DWORD PTR _Status$[ebp], eax
; Line 519
	movzx	eax, BYTE PTR [ebx+10]
	push	20					; 00000014H
	push	OFFSET ??_C@_0BF@FECKJEFM@ReInitializeFunction?$AA@
	push	DWORD PTR _CapsuleStrings[eax*4]
	call	_MmrcStringCompare
	add	esp, 28					; 0000001cH
	test	al, al
	je	SHORT $LN11@MmrcEntry
; Line 520
	mov	al, BYTE PTR _BackupMessage$[ebp]
	mov	BYTE PTR [esi+55506], al
$LN11@MmrcEntry:
; Line 522
	cmp	DWORD PTR _Status$[ebp], 0
	jne	$LN51@MmrcEntry
; Line 525
	jmp	$LN52@MmrcEntry
$LN28@MmrcEntry:
; Line 532
	movzx	eax, al
	add	eax, esi
	cmp	BYTE PTR [eax+28608], 0
	je	$LN52@MmrcEntry
	cmp	BYTE PTR [eax+55511], 0
	je	$LN52@MmrcEntry
; Line 533
	mov	BYTE PTR [esi+55508], 0
; Line 534
	movzx	eax, BYTE PTR [ebx+11]
	push	eax
$LN157@MmrcEntry:
	movzx	ax, BYTE PTR [ebx+10]
	movzx	eax, ax
	push	eax
	movzx	eax, WORD PTR [ebx+8]
	push	eax
	push	esi
	call	DWORD PTR [ebx+4]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Status$[ebp], eax
; Line 535
	cmp	eax, edi
	jne	$LN155@MmrcEntry
	jmp	$LN52@MmrcEntry
$LN48@MmrcEntry:
; Line 410
	mov	BYTE PTR _Channel$[ebp], 0
$LL47@MmrcEntry:
; Line 415
	push	ebx
	push	esi
	call	_CreateChannelMask
; Line 416
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	edi, DWORD PTR [eax+esi]
	cmp	BYTE PTR [edi+28608], 0
	pop	ecx
	pop	ecx
	je	$LN46@MmrcEntry
	cmp	BYTE PTR [edi+55511], 0
	je	$LN46@MmrcEntry
; Line 419
	movzx	ecx, WORD PTR [ebx+12]
	mov	edx, 542				; 0000021eH
	cmp	cx, dx
	je	SHORT $LN41@MmrcEntry
; Line 421
	imul	eax, 542				; 0000021eH
	movzx	ecx, cx
	add	eax, ecx
	mov	ecx, DWORD PTR [esi+eax*8+55526]
	or	ecx, DWORD PTR [esi+eax*8+55530]
	je	$LN46@MmrcEntry
$LN41@MmrcEntry:
; Line 425
	mov	eax, 254				; 000000feH
	cmp	WORD PTR [ebx+8], ax
	jne	SHORT $LN151@MmrcEntry
; Line 427
	movzx	eax, BYTE PTR [ebx+10]
	push	20					; 00000014H
	push	OFFSET ??_C@_0BF@FECKJEFM@ReInitializeFunction?$AA@
	push	DWORD PTR _CapsuleStrings[eax*4]
	call	_MmrcStringCompare
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN151@MmrcEntry
; Line 428
	mov	al, BYTE PTR [esi+55506]
	test	al, al
	je	SHORT $LN151@MmrcEntry
; Line 429
	or	al, 15					; 0000000fH
	mov	BYTE PTR [esi+55506], al
$LN151@MmrcEntry:
; Line 438
	push	2
	lea	eax, DWORD PTR [esi+55511]
	push	0
	push	eax
	mov	BYTE PTR [esi+55508], 0
	call	_MmrcMemset
; Line 439
	mov	al, BYTE PTR [edi+28608]
	mov	BYTE PTR [edi+55511], al
; Line 440
	mov	edi, -19922704				; fed000f0H
	push	edi
	call	_Mmio32Read
; Line 441
	movzx	ax, BYTE PTR [ebx+10]
	push	DWORD PTR _Channel$[ebp]
	movzx	eax, ax
	push	eax
	movzx	eax, WORD PTR [ebx+8]
	push	eax
	push	esi
	call	DWORD PTR [ebx+4]
; Line 442
	push	edi
	mov	DWORD PTR _Status$[ebp], eax
	call	_Mmio32Read
; Line 449
	movzx	eax, BYTE PTR [ebx+10]
	push	20					; 00000014H
	push	OFFSET ??_C@_0BF@FECKJEFM@ReInitializeFunction?$AA@
	push	DWORD PTR _CapsuleStrings[eax*4]
	call	_MmrcStringCompare
	add	esp, 48					; 00000030H
	test	al, al
	je	SHORT $LN35@MmrcEntry
; Line 450
	mov	al, BYTE PTR _BackupMessage$[ebp]
	mov	BYTE PTR [esi+55506], al
$LN35@MmrcEntry:
; Line 452
	cmp	DWORD PTR _Status$[ebp], 0
	jne	SHORT $LN51@MmrcEntry
$LN46@MmrcEntry:
; Line 410
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL47@MmrcEntry
	jmp	SHORT $LN52@MmrcEntry
$LN152@MmrcEntry:
	mov	esi, DWORD PTR _MrcData$[ebp]
$LN52@MmrcEntry:
; Line 400
	add	ebx, 24					; 00000018H
	xor	edi, edi
	cmp	DWORD PTR [ebx+4], edi
	jne	$LL53@MmrcEntry
$LN51@MmrcEntry:
; Line 542
	mov	eax, DWORD PTR _Status$[ebp]
$LN155@MmrcEntry:
	pop	ebx
$LN59@MmrcEntry:
	pop	edi
	pop	esi
; Line 570
	leave
	ret	0
_MmrcEntry ENDP
_TEXT	ENDS
PUBLIC	_GetCacheIndexArray
; Function compile flags: /Ogspy
;	COMDAT _GetCacheIndexArray
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CacheIndex$ = 12					; size = 2
_GetCacheIndexArray PROC				; COMDAT
; Line 2781
	mov	eax, DWORD PTR _CacheIndex$[esp-4]
	push	ebx
	xor	bl, bl
	and	eax, 192				; 000000c0H
$LL5@GetCacheIn:
; Line 2782
	movzx	ecx, bl
	movzx	cx, BYTE PTR _CacheTypePrefix[ecx]
	cmp	ax, cx
	je	SHORT $LN9@GetCacheIn
	inc	bl
	cmp	bl, 4
	jb	SHORT $LL5@GetCacheIn
$LN9@GetCacheIn:
; Line 2787
	cmp	bl, 4
	jne	SHORT $LN1@GetCacheIn
; Line 2788
	mov	eax, DWORD PTR _MrcData$[esp]
	mov	DWORD PTR [eax+65333], 43		; 0000002bH
; Line 2789
	call	_MrcDeadLoop
$LN1@GetCacheIn:
; Line 2792
	mov	al, bl
	pop	ebx
; Line 2793
	ret	0
_GetCacheIndexArray ENDP
_TEXT	ENDS
PUBLIC	_GetSetCache
; Function compile flags: /Ogspy
;	COMDAT _GetSetCache
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Strobe$ = 20						; size = 1
_Bit$ = 24						; size = 1
_CacheIndex$ = 28					; size = 1
_Cmd$ = 32						; size = 1
_Value$ = 36						; size = 4
_GetSetCache PROC					; COMDAT
; Line 2821
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 2824
	mov	bl, BYTE PTR _CacheIndex$[ebp]
	movzx	ax, bl
	movzx	eax, ax
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	eax
	push	esi
	call	_GetCacheIndexArray
	pop	ecx
; Line 2828
	and	bl, 63					; 0000003fH
; Line 2830
	test	BYTE PTR _Cmd$[ebp], 2
	pop	ecx
	je	$LN18@GetSetCach
; Line 2831
	movzx	eax, al
	sub	eax, 0
	je	$LN15@GetSetCach
	dec	eax
	je	SHORT $LN14@GetSetCach
	dec	eax
	je	SHORT $LN13@GetSetCach
	dec	eax
	je	SHORT $LN12@GetSetCach
$LN22@GetSetCach:
; Line 2845
	mov	DWORD PTR [esi+65333], 43		; 0000002bH
; Line 2847
	jmp	$LN21@GetSetCach
$LN12@GetSetCach:
; Line 2842
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, bl
	add	eax, ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bit$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [esi+eax*4+50296]
; Line 2843
	jmp	SHORT $LN23@GetSetCach
$LN13@GetSetCach:
; Line 2839
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 33					; 00000021H
	movzx	ecx, bl
	add	eax, ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	mov	eax, DWORD PTR [esi+eax*4+31288]
; Line 2840
	jmp	SHORT $LN23@GetSetCach
$LN14@GetSetCach:
; Line 2836
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, bl
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bit$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [esi+eax*4+16632]
; Line 2837
	jmp	SHORT $LN23@GetSetCach
$LN15@GetSetCach:
; Line 2833
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 17					; 00000011H
	movzx	ecx, bl
	add	eax, ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4+95]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	mov	eax, DWORD PTR [esi+eax*4]
$LN23@GetSetCach:
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2849
	jmp	$LN1@GetSetCach
$LN18@GetSetCach:
	test	BYTE PTR _Cmd$[ebp], 16			; 00000010H
	je	$LN9@GetSetCach
; Line 2850
	movzx	eax, al
	sub	eax, 0
	je	$LN6@GetSetCach
	dec	eax
	je	SHORT $LN5@GetSetCach
	dec	eax
	je	SHORT $LN4@GetSetCach
	dec	eax
; Line 2866
	jne	$LN22@GetSetCach
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, bl
	add	eax, ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bit$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [esi+eax*4+50296], ecx
	jmp	$LN1@GetSetCach
$LN4@GetSetCach:
; Line 2858
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 33					; 00000021H
	movzx	ecx, bl
	add	eax, ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [esi+eax*4+31288], ecx
; Line 2859
	jmp	SHORT $LN1@GetSetCach
$LN5@GetSetCach:
; Line 2855
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, bl
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bit$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [esi+eax*4+16632], ecx
; Line 2856
	jmp	SHORT $LN1@GetSetCach
$LN6@GetSetCach:
; Line 2852
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 17					; 00000011H
	movzx	ecx, bl
	add	eax, ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4+95]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [esi+eax*4], ecx
; Line 2868
	jmp	SHORT $LN1@GetSetCach
$LN9@GetSetCach:
; Line 2869
	mov	DWORD PTR [esi+65333], 42		; 0000002aH
$LN21@GetSetCach:
; Line 2870
	call	_MrcDeadLoop
$LN1@GetSetCach:
	pop	esi
; Line 2873
	xor	eax, eax
	pop	ebx
; Line 2874
	pop	ebp
	ret	0
_GetSetCache ENDP
_TEXT	ENDS
EXTRN	_MspDelay:PROC
EXTRN	_ConvertLinearToPhysicalValue:PROC
EXTRN	_MemFieldRead:PROC
EXTRN	_ConvertPhysicalToLinearValue:PROC
EXTRN	_ExternalFunctions:BYTE
EXTRN	_SignalInfoGenerated:BYTE
EXTRN	_FloorPlanGenerated:BYTE
EXTRN	__allshl:PROC
; Function compile flags: /Ogspy
;	COMDAT _GetSetDdrioGroup
_TEXT	SEGMENT
_Register$ = -68					; size = 24
_CurrentValue$ = -44					; size = 4
_WaitTime$ = -40					; size = 4
_PhysicalChannel$ = -36					; size = 1
tv903 = -32						; size = 4
_Instance$ = -32					; size = 1
_CacheValue$ = -28					; size = 4
tv934 = -24						; size = 4
tv905 = -24						; size = 4
tv896 = -20						; size = 4
tv939 = -16						; size = 4
_Type$ = -12						; size = 2
_MaxLimit$ = -12					; size = 4
_NewValue$ = -8						; size = 4
_EndingBit$ = -3					; size = 1
_TempBlueprint$ = -2					; size = 1
tv956 = -1						; size = 1
_i$ = -1						; size = 1
tv851 = 8						; size = 4
_PhysicalStrobe$ = 8					; size = 1
_MrcData$ = 8						; size = 4
_ThisGroup$ = 11					; size = 1
_StartingBit$ = 11					; size = 1
_Socket$ = 12						; size = 1
_Channel$ = 16						; size = 1
_Dimm$ = 20						; size = 1
_Rank$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_FrequencyIndex$ = 36					; size = 1
_IoLevel$ = 40						; size = 1
_Element$ = 44						; size = 2
_Cmd$ = 48						; size = 1
_Value$ = 52						; size = 4
_GetSetDdrioGroup PROC					; COMDAT
; Line 2963
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
; Line 2985
	and	DWORD PTR _WaitTime$[ebp], 0
; Line 2986
	and	DWORD PTR _CacheValue$[ebp], 0
	push	ebx
; Line 2987
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	lea	esi, DWORD PTR [ebx+55513]
	mov	al, BYTE PTR [esi]
	push	edi
	mov	DWORD PTR tv896[ebp], esi
	mov	BYTE PTR _TempBlueprint$[ebp], al
; Line 2989
	call	_GetMspHostStructureAddress
; Line 2997
	push	esi
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_ConvertPfctAndIoLevelToBlueprint
; Line 2999
	push	DWORD PTR _Element$[ebp]
	mov	edx, eax
	push	ebx
	call	_GetOffsetIndex
	movzx	edi, ax
	add	esp, 24					; 00000018H
	mov	DWORD PTR _Type$[ebp], edi
; Line 3001
	test	edx, edx
	je	SHORT $LN42@GetSetDdri
	push	31					; 0000001fH
$LN60@GetSetDdri:
	pop	eax
$LN47@GetSetDdri:
; Line 3002
	mov	cl, BYTE PTR _TempBlueprint$[ebp]
	mov	BYTE PTR [esi], cl
; Line 3006
	jmp	$LN43@GetSetDdri
$LN42@GetSetDdri:
; Line 3009
	mov	dx, WORD PTR _Type$[ebp]
	mov	eax, 255				; 000000ffH
	cmp	dx, ax
	jne	SHORT $LN41@GetSetDdri
$LN61@GetSetDdri:
	push	2
	jmp	SHORT $LN60@GetSetDdri
$LN41@GetSetDdri:
; Line 3012
	mov	eax, 65535				; 0000ffffH
	cmp	dx, ax
	jne	SHORT $LN39@GetSetDdri
; Line 3013
	push	2
	jmp	$LN63@GetSetDdri
$LN39@GetSetDdri:
; Line 3018
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	mov	DWORD PTR tv903[ebp], eax
	imul	eax, 18					; 00000012H
	add	eax, ecx
	add	eax, eax
	mov	DWORD PTR tv905[ebp], ecx
	mov	cl, BYTE PTR _FloorPlanGenerated[eax]
; Line 3019
	mov	al, BYTE PTR _FloorPlanGenerated[eax+1]
	mov	BYTE PTR _PhysicalStrobe$[ebp], al
; Line 3026
	mov	eax, 4096				; 00001000H
	mov	BYTE PTR _PhysicalChannel$[ebp], cl
	cmp	dx, ax
	jae	$LN38@GetSetDdri
; Line 3033
	push	edi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	pop	ecx
	mov	cl, BYTE PTR _FrequencyIndex$[ebp]
	cmp	cl, BYTE PTR _SignalInfoGenerated[eax+1]
	jae	$LN37@GetSetDdri
; Line 3034
	mov	al, BYTE PTR _NumberOfElementsPerAlgoGenerated
	movzx	edx, BYTE PTR _NumberAlgosGenerated
	movzx	edi, al
	imul	edx, edi
	movzx	edi, WORD PTR _Type$[ebp]
	cmp	edi, edx
	jge	SHORT $LN36@GetSetDdri
; Line 3035
	movzx	ax, al
	movzx	cx, cl
	imul	ax, cx
; Line 3036
	jmp	SHORT $LN64@GetSetDdri
$LN36@GetSetDdri:
; Line 3037
	movzx	ax, cl
$LN64@GetSetDdri:
	add	WORD PTR _Type$[ebp], ax
; Line 3054
	movzx	edi, WORD PTR _Type$[ebp]
	mov	ecx, DWORD PTR _Rank$[ebp]
	mov	eax, edi
	imul	eax, 11					; 0000000bH
	movzx	edx, cl
	add	eax, edx
	shl	eax, 2
	mov	DWORD PTR tv934[ebp], eax
	movzx	eax, WORD PTR _ElementsGenerated[eax+2]
	mov	edx, 255				; 000000ffH
	cmp	ax, dx
	je	$LN61@GetSetDdri
; Line 3058
	imul	edi, 44					; 0000002cH
	test	BYTE PTR _ElementsGenerated[edi+20], 1
	mov	DWORD PTR tv939[ebp], edi
	je	SHORT $LN32@GetSetDdri
	cmp	BYTE PTR _ElementsGenerated[edi], 254	; 000000feH
	jne	SHORT $LN32@GetSetDdri
; Line 3060
	push	DWORD PTR _Value$[ebp]
	movzx	eax, ax
	push	DWORD PTR _Cmd$[ebp]
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	ecx
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	DWORD PTR _ExternalFunctions[eax*4]
	add	esp, 44					; 0000002cH
$LN66@GetSetDdri:
; Line 3061
	xor	eax, eax
	jmp	$LN43@GetSetDdri
$LN32@GetSetDdri:
; Line 3066
	test	BYTE PTR _Cmd$[ebp], 2
	je	$LN31@GetSetDdri
	test	BYTE PTR _Cmd$[ebp], 1
	jne	$LN31@GetSetDdri
; Line 3067
	mov	esi, DWORD PTR _Value$[ebp]
	movzx	eax, BYTE PTR _ElementsGenerated[edi+18]
	push	esi
	push	2
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	ecx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetCache
	add	esp, 32					; 00000020H
; Line 3068
	cmp	BYTE PTR _ElementsGenerated[edi], 254	; 000000feH
	je	SHORT $LN30@GetSetDdri
; Line 3070
	mov	edi, DWORD PTR tv934[ebp]
	movzx	ecx, BYTE PTR _ElementsGenerated[edi+5]
	xor	eax, eax
	inc	ecx
	inc	eax
	xor	edx, edx
	call	__allshl
	movzx	ecx, BYTE PTR _ElementsGenerated[edi+4]
	mov	DWORD PTR tv851[ebp], eax
	xor	eax, eax
	inc	eax
	xor	edx, edx
	call	__allshl
	mov	ecx, DWORD PTR tv851[ebp]
	sub	ecx, eax
	and	DWORD PTR [esi], ecx
	mov	eax, DWORD PTR [esi]
; Line 3071
	mov	ecx, edi
	mov	cl, BYTE PTR _ElementsGenerated[ecx+4]
	shr	eax, cl
	mov	DWORD PTR [esi], eax
$LN30@GetSetDdri:
; Line 3073
	push	DWORD PTR [esi]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_ConvertPhysicalToLinearValue
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi], eax
	xor	eax, eax
$LN62@GetSetDdri:
	mov	esi, DWORD PTR tv896[ebp]
	jmp	$LN47@GetSetDdri
$LN31@GetSetDdri:
; Line 3080
	lea	edi, DWORD PTR _ElementsGenerated[edi]
	movzx	eax, BYTE PTR [edi]
	shl	eax, 4
	mov	dl, 1
	cmp	dl, BYTE PTR _InstancePortMapGenerated[eax+1]
; Line 3089
	mov	esi, edi
	sbb	al, al
	and	al, BYTE PTR _PhysicalStrobe$[ebp]
	and	DWORD PTR _Register$[ebp], 0
	mov	BYTE PTR _Instance$[ebp], al
	lea	eax, DWORD PTR _EndingBit$[ebp]
	push	eax
	lea	eax, DWORD PTR _StartingBit$[ebp]
	push	eax
	lea	eax, DWORD PTR _Register$[ebp]
	push	eax
	lea	eax, DWORD PTR _Instance$[ebp]
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _PhysicalStrobe$[ebp]
	push	ecx
	push	DWORD PTR _PhysicalChannel$[ebp]
	sub	esp, 44					; 0000002cH
	push	11					; 0000000bH
	pop	ecx
	mov	edi, esp
	push	ebx
	rep movsd
	call	_GetLocation
; Line 3090
	mov	edi, DWORD PTR _Value$[ebp]
; Line 3095
	mov	al, BYTE PTR _Cmd$[ebp]
	mov	esi, DWORD PTR [edi]
	add	esp, 80					; 00000050H
	and	al, 1
	mov	DWORD PTR _NewValue$[ebp], esi
	mov	BYTE PTR tv956[ebp], al
	je	$LN52@GetSetDdri
; Line 3096
	mov	eax, DWORD PTR tv939[ebp]
	lea	eax, DWORD PTR _ElementsGenerated[eax]
	cmp	BYTE PTR [eax], 254			; 000000feH
	jne	SHORT $LN26@GetSetDdri
; Line 3098
	push	edi
	mov	eax, DWORD PTR tv934[ebp]
	movzx	eax, WORD PTR _ElementsGenerated[eax+2]
	push	1
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	DWORD PTR _ExternalFunctions[eax*4]
	add	esp, 44					; 0000002cH
; Line 3100
	jmp	SHORT $LN25@GetSetDdri
$LN26@GetSetDdri:
; Line 3101
	movzx	ecx, BYTE PTR _EndingBit$[ebp]
	xor	eax, eax
	inc	ecx
	inc	eax
	xor	edx, edx
	call	__allshl
	movzx	ecx, BYTE PTR _StartingBit$[ebp]
	mov	esi, eax
	xor	eax, eax
	mov	edi, edx
	inc	eax
	xor	edx, edx
	call	__allshl
	sub	esi, eax
; Line 3102
	mov	al, BYTE PTR _StartingBit$[ebp]
	sbb	edi, edx
; Line 3103
	sub	esp, 24					; 00000018H
	push	6
	mov	BYTE PTR _Register$[ebp+16], al
	mov	eax, DWORD PTR tv939[ebp]
	pop	ecx
	mov	DWORD PTR _Register$[ebp+12], edi
	mov	edi, esp
	push	DWORD PTR _Instance$[ebp]
	lea	eax, DWORD PTR _ElementsGenerated[eax]
	movzx	eax, BYTE PTR [eax]
	push	DWORD PTR _PhysicalChannel$[ebp]
	mov	DWORD PTR _Register$[ebp+8], esi
	lea	esi, DWORD PTR _Register$[ebp]
	push	eax
	rep movsd
	call	_MemFieldRead
	mov	ecx, DWORD PTR _Value$[ebp]
	add	esp, 36					; 00000024H
	mov	DWORD PTR [ecx], eax
	mov	edi, ecx
$LN25@GetSetDdri:
; Line 3108
	push	DWORD PTR [edi]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_ConvertPhysicalToLinearValue
; Line 3109
	mov	esi, eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR _NewValue$[ebp], esi
$LN52@GetSetDdri:
; Line 3114
	test	BYTE PTR _Cmd$[ebp], 8
	je	$LN54@GetSetDdri
; Line 3119
	test	BYTE PTR _Cmd$[ebp], 4
	je	SHORT $LN53@GetSetDdri
; Line 3123
	lea	eax, DWORD PTR _CurrentValue$[ebp]
	push	eax
	push	2
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	_GetSetDdrioGroup
; Line 3124
	mov	esi, DWORD PTR [edi]
	add	esp, 48					; 00000030H
	add	esi, DWORD PTR _CurrentValue$[ebp]
	mov	DWORD PTR _NewValue$[ebp], esi
$LN53@GetSetDdri:
; Line 3129
	lea	eax, DWORD PTR _WaitTime$[ebp]
	push	eax
	lea	eax, DWORD PTR _MaxLimit$[ebp]
	push	eax
	push	DWORD PTR _Type$[ebp]
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	_GetDdrioGroupLimits
	add	esp, 32					; 00000020H
; Line 3130
	test	eax, eax
	jne	$LN21@GetSetDdri
	cmp	esi, DWORD PTR _MaxLimit$[ebp]
	ja	$LN21@GetSetDdri
; Line 3148
	push	esi
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_ConvertLinearToPhysicalValue
	mov	DWORD PTR _NewValue$[ebp], eax
; Line 3150
	mov	eax, DWORD PTR tv939[ebp]
	lea	eax, DWORD PTR _ElementsGenerated[eax]
	add	esp, 16					; 00000010H
	cmp	BYTE PTR [eax], 254			; 000000feH
	jne	SHORT $LN20@GetSetDdri
; Line 3152
	mov	eax, DWORD PTR tv934[ebp]
	movzx	eax, WORD PTR _ElementsGenerated[eax+2]
	lea	ecx, DWORD PTR _NewValue$[ebp]
	push	ecx
	push	8
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	DWORD PTR _ExternalFunctions[eax*4]
	add	esp, 44					; 0000002cH
; Line 3153
	jmp	SHORT $LN19@GetSetDdri
$LN20@GetSetDdri:
; Line 3154
	movzx	ecx, BYTE PTR _EndingBit$[ebp]
	xor	eax, eax
	inc	ecx
	inc	eax
	xor	edx, edx
	call	__allshl
	movzx	ecx, BYTE PTR _StartingBit$[ebp]
	mov	esi, eax
	xor	eax, eax
	mov	edi, edx
	inc	eax
	xor	edx, edx
	call	__allshl
; Line 3156
	push	15					; 0000000fH
	sub	esi, eax
	mov	al, BYTE PTR _StartingBit$[ebp]
	push	0
	push	DWORD PTR _NewValue$[ebp]
	sbb	edi, edx
	sub	esp, 24					; 00000018H
	push	6
	mov	BYTE PTR _Register$[ebp+16], al
	mov	eax, DWORD PTR tv939[ebp]
	pop	ecx
	mov	DWORD PTR _Register$[ebp+12], edi
	mov	edi, esp
	push	DWORD PTR _Instance$[ebp]
	lea	eax, DWORD PTR _ElementsGenerated[eax]
	movzx	eax, BYTE PTR [eax]
	push	DWORD PTR _PhysicalChannel$[ebp]
	mov	DWORD PTR _Register$[ebp+8], esi
	lea	esi, DWORD PTR _Register$[ebp]
	push	eax
	rep movsd
	call	_MemRegWrite
	add	esp, 48					; 00000030H
$LN19@GetSetDdri:
; Line 3161
	cmp	DWORD PTR _WaitTime$[ebp], 0
	je	SHORT $LN51@GetSetDdri
; Line 3165
	push	DWORD PTR _WaitTime$[ebp]
	push	2
	call	_MspDelay
	pop	ecx
	pop	ecx
$LN51@GetSetDdri:
; Line 3073
	mov	esi, DWORD PTR _NewValue$[ebp]
$LN54@GetSetDdri:
; Line 3173
	test	BYTE PTR _Cmd$[ebp], 16			; 00000010H
	je	$LN57@GetSetDdri
; Line 3174
	cmp	BYTE PTR tv956[ebp], 0
	je	SHORT $LN16@GetSetDdri
; Line 3179
	push	esi
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_ConvertLinearToPhysicalValue
	add	esp, 16					; 00000010H
	mov	DWORD PTR _NewValue$[ebp], eax
$LN16@GetSetDdri:
; Line 3184
	mov	eax, DWORD PTR tv939[ebp]
	lea	eax, DWORD PTR _ElementsGenerated[eax]
	cmp	BYTE PTR [eax], 254			; 000000feH
	je	$LN15@GetSetDdri
; Line 3185
	lea	eax, DWORD PTR _CacheValue$[ebp]
	push	eax
	mov	eax, DWORD PTR tv939[ebp]
	movzx	eax, BYTE PTR _ElementsGenerated[eax+18]
	push	2
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetCache
; Line 3189
	mov	eax, DWORD PTR tv934[ebp]
; Line 3190
	movzx	ecx, BYTE PTR _ElementsGenerated[eax+5]
	movzx	esi, BYTE PTR _ElementsGenerated[eax+4]
	xor	eax, eax
	add	esp, 32					; 00000020H
	inc	ecx
	inc	eax
	xor	edx, edx
	call	__allshl
	mov	edi, eax
	xor	eax, eax
	inc	eax
	xor	edx, edx
	mov	ecx, esi
	call	__allshl
	sub	edi, eax
	mov	eax, DWORD PTR _NewValue$[ebp]
	mov	ecx, esi
	not	edi
	and	edi, DWORD PTR _CacheValue$[ebp]
	shl	eax, cl
	or	edi, eax
	mov	DWORD PTR _CacheValue$[ebp], edi
; Line 3191
	lea	eax, DWORD PTR _CacheValue$[ebp]
$LN65@GetSetDdri:
	push	eax
	mov	eax, DWORD PTR tv939[ebp]
	movzx	eax, BYTE PTR _ElementsGenerated[eax+18]
	push	16					; 00000010H
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetCache
	add	esp, 32					; 00000020H
; Line 3192
	jmp	$LN57@GetSetDdri
$LN21@GetSetDdri:
; Line 3073
	push	16					; 00000010H
	pop	eax
	jmp	$LN62@GetSetDdri
$LN15@GetSetDdri:
; Line 3193
	lea	eax, DWORD PTR _NewValue$[ebp]
; Line 3195
	jmp	SHORT $LN65@GetSetDdri
$LN37@GetSetDdri:
	push	34					; 00000022H
	jmp	$LN60@GetSetDdri
$LN38@GetSetDdri:
; Line 3196
	mov	eax, 8192				; 00002000H
	cmp	dx, ax
	jb	SHORT $LN12@GetSetDdri
; Line 3200
	add	edi, -8192				; ffffe000H
	movzx	eax, di
; Line 3202
	movzx	esi, ax
	imul	esi, 12					; 0000000cH
	cmp	BYTE PTR _SignalInfoGenerated[esi], 0
	mov	BYTE PTR _ThisGroup$[ebp], 0
	mov	BYTE PTR _i$[ebp], 0
	jbe	$LN57@GetSetDdri
$LL55@GetSetDdri:
; Line 3206
	push	DWORD PTR _Value$[ebp]
	movzx	ax, BYTE PTR _ThisGroup$[ebp]
	push	DWORD PTR _Cmd$[ebp]
	add	ax, WORD PTR _Type$[ebp]
	mov	ecx, 4096				; 00001000H
	sub	ax, cx
	movzx	eax, ax
	push	eax
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	_GetSetDdrioGroup
; Line 3207
	mov	al, BYTE PTR _SignalInfoGenerated[esi+1]
	add	BYTE PTR _ThisGroup$[ebp], al
	add	esp, 48					; 00000030H
	inc	BYTE PTR _i$[ebp]
	mov	al, BYTE PTR _i$[ebp]
	cmp	al, BYTE PTR _SignalInfoGenerated[esi]
	jb	SHORT $LL55@GetSetDdri
; Line 3209
	jmp	$LN57@GetSetDdri
$LN12@GetSetDdri:
; Line 3215
	test	BYTE PTR _Cmd$[ebp], 8
	mov	esi, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _NewValue$[ebp], eax
	je	SHORT $LN7@GetSetDdri
; Line 3220
	test	BYTE PTR _Cmd$[ebp], 4
	je	SHORT $LN6@GetSetDdri
; Line 3221
	lea	eax, DWORD PTR _CurrentValue$[ebp]
	push	eax
	push	2
	push	edi
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	_GetLinearFromRegs
; Line 3222
	mov	eax, DWORD PTR _CurrentValue$[ebp]
	add	esp, 48					; 00000030H
	add	DWORD PTR _NewValue$[ebp], eax
$LN6@GetSetDdri:
; Line 3228
	lea	eax, DWORD PTR _NewValue$[ebp]
	push	eax
	mov	al, BYTE PTR _Cmd$[ebp]
	and	al, 251					; 000000fbH
	movzx	eax, al
	push	eax
	push	edi
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	_SetRegsToLinear
	add	esp, 48					; 00000030H
$LN7@GetSetDdri:
; Line 3233
	mov	al, BYTE PTR _Cmd$[ebp]
	and	al, 1
	mov	BYTE PTR tv956[ebp], al
	je	SHORT $LN5@GetSetDdri
; Line 3234
	push	esi
	push	DWORD PTR _Cmd$[ebp]
	push	edi
	push	DWORD PTR _IoLevel$[ebp]
	push	DWORD PTR _FrequencyIndex$[ebp]
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Dimm$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _Socket$[ebp]
	push	ebx
	call	_GetLinearFromRegs
; Line 3235
	mov	eax, DWORD PTR [esi]
	add	esp, 48					; 00000030H
	mov	DWORD PTR _NewValue$[ebp], eax
$LN5@GetSetDdri:
; Line 3240
	movzx	eax, WORD PTR _Type$[ebp]
	mov	cl, BYTE PTR _FrequencyIndex$[ebp]
	lea	edx, DWORD PTR [eax-4096]
	imul	edx, 12					; 0000000cH
	cmp	cl, BYTE PTR _SignalInfoGenerated[edx+1]
	jae	SHORT $LN4@GetSetDdri
; Line 3244
	test	BYTE PTR _Cmd$[ebp], 2
	je	SHORT $LN59@GetSetDdri
	cmp	BYTE PTR tv956[ebp], 0
	jne	SHORT $LN59@GetSetDdri
; Line 3245
	mov	edx, DWORD PTR tv896[ebp]
	movzx	edx, BYTE PTR [edx]
	add	edx, DWORD PTR tv903[ebp]
	movzx	edi, cl
	imul	edx, 22					; 00000016H
	add	edx, eax
	add	edi, edx
	movzx	edx, BYTE PTR _Rank$[ebp]
	lea	edx, DWORD PTR [edx+edi*4]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv905[ebp]
	movzx	edx, WORD PTR [ebx+edx*2-589344]
	mov	DWORD PTR [esi], edx
$LN59@GetSetDdri:
; Line 3250
	test	BYTE PTR _Cmd$[ebp], 16			; 00000010H
	je	SHORT $LN57@GetSetDdri
; Line 3251
	mov	edx, DWORD PTR tv896[ebp]
	movzx	edx, BYTE PTR [edx]
	add	edx, DWORD PTR tv903[ebp]
	movzx	ecx, cl
	imul	edx, 22					; 00000016H
	add	edx, eax
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	ecx, edx
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	cx, WORD PTR _NewValue$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv905[ebp]
	mov	WORD PTR [ebx+eax*2-589344], cx
$LN57@GetSetDdri:
; Line 3259
	mov	al, BYTE PTR _TempBlueprint$[ebp]
	mov	ecx, DWORD PTR tv896[ebp]
	mov	BYTE PTR [ecx], al
; Line 3260
	jmp	$LN66@GetSetDdri
$LN4@GetSetDdri:
; Line 3254
	mov	al, BYTE PTR _TempBlueprint$[ebp]
	mov	ecx, DWORD PTR tv896[ebp]
	mov	BYTE PTR [ecx], al
; Line 3255
	push	34					; 00000022H
$LN63@GetSetDdri:
	pop	eax
$LN43@GetSetDdri:
; Line 3261
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_GetSetDdrioGroup ENDP
_TEXT	ENDS
PUBLIC	_WriteLevelingMode
; Function compile flags: /Ogspy
;	COMDAT _WriteLevelingMode
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_WriteLevelMode$ = 16					; size = 1
_WriteLevelingMode PROC					; COMDAT
; Line 4002
	push	ebp
	mov	ebp, esp
; Line 4010
	cmp	BYTE PTR _WriteLevelMode$[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	mov	BYTE PTR [esi+55508], 0
	je	SHORT $LN1@WriteLevel
	cmp	BYTE PTR _WriteLevelMode$[ebp], 1
	je	SHORT $LN1@WriteLevel
; Line 4011
	or	eax, -1
	jmp	SHORT $LN2@WriteLevel
$LN1@WriteLevel:
; Line 4013
	movzx	ecx, BYTE PTR _Channel$[ebp]
; Line 4014
	push	DWORD PTR _Channel$[ebp]
	imul	ecx, 4336				; 000010f0H
	movzx	eax, BYTE PTR _WriteLevelMode$[ebp]
	push	65535					; 0000ffffH
	cdq
	push	14420					; 00003854H
	push	esi
	mov	DWORD PTR [ecx+esi+58534], eax
	mov	DWORD PTR [ecx+esi+58538], edx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 4016
	mov	BYTE PTR [esi+55508], bl
; Line 4018
	xor	eax, eax
$LN2@WriteLevel:
	pop	esi
	pop	ebx
; Line 4019
	pop	ebp
	ret	0
_WriteLevelingMode ENDP
_TEXT	ENDS
PUBLIC	_MprWrite
EXTRN	_ToggleMprMode:PROC
EXTRN	_HandleAddressMirroring:PROC
EXTRN	_ToggleMprModeSide:PROC
; Function compile flags: /Ogspy
;	COMDAT _MprWrite
_TEXT	SEGMENT
tv259 = -8						; size = 4
_DramCmdDdr4$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_MprWrite PROC						; COMDAT
; Line 4417
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 4422
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LN3@MprWrite
; Line 4423
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 44		; 0000002cH
; Line 4424
	call	_MrcDeadLoop
; Line 4472
	leave
	ret	0
$LN3@MprWrite:
; Line 4429
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	xor	ebx, ebx
	inc	ebx
	cmp	BYTE PTR [eax+esi+31272], 7
	push	edi
	mov	DWORD PTR tv259[ebp], eax
	jne	$LN2@MprWrite
	imul	eax, 4336				; 000010f0H
	lea	edi, DWORD PTR [eax+esi]
	cmp	DWORD PTR [edi+55966], ebx
	jne	$LN2@MprWrite
	xor	eax, eax
	cmp	DWORD PTR [edi+55970], eax
	jne	$LN2@MprWrite
; Line 4441
	push	eax
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprModeSide
; Line 4443
	push	ebx
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprModeSide
	movzx	eax, BYTE PTR _Rank$[ebp]
; Line 4458
	mov	ecx, eax
	and	ecx, 3
	shl	ecx, 26					; 0000001aH
	or	ecx, 21820				; 0000553cH
; Line 4461
	shr	eax, 1
	mov	DWORD PTR _DramCmdDdr4$[ebp], ecx
	mov	ecx, DWORD PTR tv259[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	imul	eax, 514				; 00000202H
; Line 4462
	push	ebx
	add	eax, esi
	movzx	ecx, BYTE PTR [eax+28643]
	movzx	eax, BYTE PTR [eax+28762]
	push	ebx
	push	7
	push	ecx
	push	eax
	lea	eax, DWORD PTR _DramCmdDdr4$[ebp]
	push	eax
	call	_HandleAddressMirroring
; Line 4463
	mov	eax, DWORD PTR _DramCmdDdr4$[ebp]
	and	DWORD PTR [edi+58490], 0
	add	esp, 64					; 00000040H
; Line 4464
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [edi+58486], eax
	push	65535					; 0000ffffH
	push	14185					; 00003769H
	push	esi
	call	_MmrcExecuteTask
; Line 4465
	push	ebx
	push	0
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprModeSide
; Line 4467
	push	0
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprModeSide
; Line 4468
	push	ebx
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprModeSide
	add	esp, 76					; 0000004cH
; Line 4469
	jmp	SHORT $LN6@MprWrite
$LN2@MprWrite:
; Line 4470
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprMode
	add	esp, 16					; 00000010H
$LN6@MprWrite:
	pop	edi
	pop	esi
	pop	ebx
; Line 4472
	leave
	ret	0
_MprWrite ENDP
_TEXT	ENDS
PUBLIC	_CpgcExecuteSingleTest
; Function compile flags: /Ogspy
;	COMDAT _CpgcExecuteSingleTest
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_CompareFlag$ = 20					; size = 4
_LaneErrorHigh$ = 24					; size = 4
_LaneErrorLow$ = 28					; size = 4
_CpgcExecuteSingleTest PROC				; COMDAT
; Line 5485
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5489
	mov	esi, DWORD PTR _MrcData$[ebp]
	test	BYTE PTR [esi+71008], 2
	je	SHORT $LN6@CpgcExecut
; Line 5490
	mov	eax, DWORD PTR _CompareFlag$[ebp]
	and	DWORD PTR [eax], 0
; Line 5491
	mov	eax, DWORD PTR _LaneErrorHigh$[ebp]
	test	eax, eax
	je	SHORT $LN5@CpgcExecut
; Line 5492
	and	DWORD PTR [eax], 0
$LN5@CpgcExecut:
; Line 5494
	mov	eax, DWORD PTR _LaneErrorLow$[ebp]
	test	eax, eax
	je	SHORT $LN1@CpgcExecut
; Line 5495
	and	DWORD PTR [eax], 0
; Line 5497
	jmp	SHORT $LN1@CpgcExecut
$LN6@CpgcExecut:
	push	edi
; Line 5499
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	13494					; 000034b6H
	push	esi
	call	_MmrcExecuteTask
; Line 5500
	movzx	ecx, BYTE PTR _Channel$[ebp]
	mov	edi, DWORD PTR _CompareFlag$[ebp]
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	add	eax, esi
	mov	edx, DWORD PTR [eax+58374]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [edi], edx
; Line 5501
	cmp	BYTE PTR [ecx+esi+30686], 0
	je	SHORT $LN3@CpgcExecut
; Line 5502
	mov	ecx, DWORD PTR [eax+58366]
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [edi], ecx
$LN3@CpgcExecut:
; Line 5504
	mov	ecx, DWORD PTR _LaneErrorHigh$[ebp]
	pop	edi
	test	ecx, ecx
	je	SHORT $LN2@CpgcExecut
; Line 5505
	mov	edx, DWORD PTR [eax+58390]
	mov	DWORD PTR [ecx], edx
$LN2@CpgcExecut:
; Line 5508
	mov	ecx, DWORD PTR _LaneErrorLow$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@CpgcExecut
; Line 5509
	mov	eax, DWORD PTR [eax+58382]
	mov	DWORD PTR [ecx], eax
$LN1@CpgcExecut:
; Line 5513
	xor	eax, eax
	pop	esi
; Line 5514
	pop	ebp
	ret	0
_CpgcExecuteSingleTest ENDP
_TEXT	ENDS
PUBLIC	_HeaderCommandClockTraining
; Function compile flags: /Ogspy
;	COMDAT _HeaderCommandClockTraining
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_HeaderType$ = 12					; size = 1
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Step$ = 24						; size = 1
_CmdLow$ = 28						; size = 4
_CmdHigh$ = 32						; size = 4
_CmdValue$ = 36						; size = 4
_HeaderCommandClockTraining PROC			; COMDAT
; Line 8445
	push	DWORD PTR _Rank$[esp-4]
	push	DWORD PTR _Channel$[esp]
	push	DWORD PTR _MrcData$[esp+4]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
; Line 8494
	xor	eax, eax
; Line 8495
	ret	0
_HeaderCommandClockTraining ENDP
_TEXT	ENDS
PUBLIC	_ChangeCmdMode
; Function compile flags: /Ogspy
;	COMDAT _ChangeCmdMode
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Mode$ = 16						; size = 1
_ChangeCmdMode PROC					; COMDAT
; Line 8642
	push	ebp
	mov	ebp, esp
; Line 8643
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 4336				; 000010f0H
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	lea	ecx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR [ecx+56126]
	mov	DWORD PTR [ecx+58558], eax
	mov	eax, DWORD PTR [ecx+56130]
	mov	DWORD PTR [ecx+58562], eax
; Line 8644
	movzx	eax, BYTE PTR _Mode$[ebp]
	dec	eax
	cdq
	mov	DWORD PTR [ecx+58550], eax
; Line 8646
	mov	eax, DWORD PTR [ecx+57870]
	or	eax, DWORD PTR [ecx+57874]
	mov	DWORD PTR [ecx+58554], edx
	jne	SHORT $LN3@ChangeCmdM
	cmp	BYTE PTR _Mode$[ebp], 1
	je	SHORT $LN1@ChangeCmdM
$LN3@ChangeCmdM:
; Line 8648
	cmp	BYTE PTR _Mode$[ebp], 1
	jne	SHORT $LN1@ChangeCmdM
; Line 8652
	add	DWORD PTR [ecx+58558], 1
	push	0
	pop	eax
	adc	DWORD PTR [ecx+58562], eax
; Line 8653
	mov	DWORD PTR [ecx+58550], eax
	mov	DWORD PTR [ecx+58554], eax
$LN1@ChangeCmdM:
; Line 8662
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	14559					; 000038dfH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 8664
	xor	eax, eax
	pop	esi
; Line 8665
	pop	ebp
	ret	0
_ChangeCmdMode ENDP
_TEXT	ENDS
PUBLIC	_CalculateOrRestoreResults
; Function compile flags: /Ogspy
;	COMDAT _CalculateOrRestoreResults
_TEXT	SEGMENT
_GetMinMax$ = -16					; size = 4
_Channel$ = -9						; size = 1
_Element$ = -5						; size = 1
_Knob$ = -1						; size = 1
_MrcData$ = 8						; size = 4
tv262 = 12						; size = 4
_ChannelBackup$ = 12					; size = 1
_Rank$ = 16						; size = 1
_Dim1Knobs$ = 20					; size = 1
_NumberElements$ = 24					; size = 4
_Results$ = 28						; size = 4
_Dim1Start$ = 32					; size = 4
_FlagDirection$ = 36					; size = 1
_Stage$ = 40						; size = 1
_CalculateOrRestoreResults PROC				; COMDAT
; Line 10593
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 10599
	xor	eax, eax
	lea	edi, DWORD PTR _GetMinMax$[ebp]
; Line 10600
	push	2
	stosw
	lea	eax, DWORD PTR _GetMinMax$[ebp+2]
	push	-1
	push	eax
	call	_MmrcMemset
; Line 10602
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	ebx, DWORD PTR _NumberElements$[ebp]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN52@CalculateO
$LL30@CalculateO:
; Line 10603
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN29@CalculateO
; Line 10606
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	mov	BYTE PTR _Knob$[ebp], 0
	jbe	$LN29@CalculateO
	movzx	edi, BYTE PTR _Channel$[ebp]
$LL26@CalculateO:
; Line 10607
	cmp	BYTE PTR [edi+ebx], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	$LN25@CalculateO
$LL55@CalculateO:
; Line 10608
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	0
	push	0
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN22@CalculateO
; Line 10612
	movzx	eax, BYTE PTR _Knob$[ebp]
	movzx	ecx, BYTE PTR _Element$[ebp]
	add	eax, edi
	imul	eax, 18					; 00000012H
	cmp	BYTE PTR _FlagDirection$[ebp], 0
	jne	SHORT $LN19@CalculateO
	mov	edx, DWORD PTR _Results$[ebp]
	add	ecx, eax
	mov	eax, ecx
	shl	eax, 5
	add	eax, edx
	movzx	esi, WORD PTR [eax]
	cmp	WORD PTR [eax+2], si
	jbe	$LN18@CalculateO
; Line 10617
	mov	edx, DWORD PTR _MrcData$[ebp]
	mov	ebx, DWORD PTR _Dim1Start$[ebp]
	add	edx, 71458				; 00011722H
	lea	ecx, DWORD PTR [ebx+ecx*4]
	movzx	bx, BYTE PTR [edx]
	add	bx, si
	mov	WORD PTR [ecx], bx
; Line 10618
	movzx	dx, BYTE PTR [edx]
	mov	ax, WORD PTR [eax+2]
	sub	ax, dx
	mov	WORD PTR [ecx+2], ax
; Line 10619
	cmp	WORD PTR _GetMinMax$[ebp+2], ax
	jbe	SHORT $LN16@CalculateO
; Line 10620
	mov	WORD PTR _GetMinMax$[ebp+2], ax
$LN16@CalculateO:
; Line 10622
	movzx	eax, WORD PTR [ecx]
	cmp	WORD PTR _GetMinMax$[ebp], ax
	jae	SHORT $LN22@CalculateO
; Line 10623
	mov	WORD PTR _GetMinMax$[ebp], ax
; Line 10625
	jmp	SHORT $LN22@CalculateO
$LN19@CalculateO:
; Line 10626
	add	eax, ecx
	mov	ecx, DWORD PTR _Dim1Start$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	bx, WORD PTR [ecx]
	lea	edx, DWORD PTR [esi+71458]
	mov	esi, DWORD PTR _Results$[ebp]
	shl	eax, 5
	add	eax, esi
	movzx	si, BYTE PTR [edx]
	sub	bx, si
	mov	WORD PTR [eax], bx
; Line 10627
	movzx	dx, BYTE PTR [edx]
	add	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
$LN22@CalculateO:
	inc	BYTE PTR _Element$[ebp]
	mov	ebx, DWORD PTR _NumberElements$[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [edi+ebx]
	jb	$LL55@CalculateO
$LN25@CalculateO:
; Line 10606
	inc	BYTE PTR _Knob$[ebp]
	mov	al, BYTE PTR _Knob$[ebp]
	cmp	al, BYTE PTR _Dim1Knobs$[ebp]
	jb	$LL26@CalculateO
$LN29@CalculateO:
; Line 10602
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL30@CalculateO
; Line 10607
	mov	al, BYTE PTR _ChannelBackup$[ebp]
$LN52@CalculateO:
; Line 10636
	test	BYTE PTR _Stage$[ebp], 8
	je	$LN10@CalculateO
; Line 10637
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN10@CalculateO
	movzx	eax, al
	mov	esi, eax
	imul	esi, 18					; 00000012H
	lea	edi, DWORD PTR [eax+ebx]
$LL12@CalculateO:
; Line 10638
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN11@CalculateO
; Line 10641
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	SHORT $LN11@CalculateO
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	mov	ebx, esi
	mov	DWORD PTR tv262[ebp], eax
$LL8@CalculateO:
; Line 10642
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	SHORT $LN7@CalculateO
$LL5@CalculateO:
; Line 10643
	push	0
	push	0
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN4@CalculateO
; Line 10646
	cmp	BYTE PTR _FlagDirection$[ebp], 0
	jne	SHORT $LN4@CalculateO
; Line 10647
	movzx	eax, BYTE PTR _Element$[ebp]
	mov	ecx, DWORD PTR _Dim1Start$[ebp]
	add	eax, ebx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	cx, WORD PTR _GetMinMax$[ebp]
	mov	WORD PTR [eax], cx
; Line 10648
	mov	cx, WORD PTR _GetMinMax$[ebp+2]
	mov	WORD PTR [eax+2], cx
$LN4@CalculateO:
	inc	BYTE PTR _Element$[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL5@CalculateO
$LN7@CalculateO:
; Line 10641
	add	ebx, 18					; 00000012H
	dec	DWORD PTR tv262[ebp]
	jne	SHORT $LL8@CalculateO
$LN11@CalculateO:
; Line 10637
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	add	esi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL12@CalculateO
$LN10@CalculateO:
; Line 10654
	xor	eax, eax
$LN31@CalculateO:
	pop	edi
	pop	esi
	pop	ebx
; Line 10655
	leave
	ret	0
$LN18@CalculateO:
; Line 10615
	or	eax, -1
	jmp	SHORT $LN31@CalculateO
_CalculateOrRestoreResults ENDP
_TEXT	ENDS
PUBLIC	_CpgcSetup
EXTRN	_CpgcOptionsSetup:PROC
; Function compile flags: /Ogspy
;	COMDAT _CpgcSetup
_TEXT	SEGMENT
tv495 = -4						; size = 4
tv453 = -4						; size = 4
_MrcData$ = 8						; size = 4
_ExecuteMode$ = 11					; size = 1
_Channel$ = 12						; size = 1
tv505 = 16						; size = 4
_SetupType$ = 16					; size = 1
_CpgcSetup PROC						; COMDAT
; Line 11731
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 11734
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55508]
	push	edi
; Line 11742
	push	DWORD PTR _Channel$[ebp]
	xor	ebx, ebx
	push	esi
	mov	BYTE PTR _ExecuteMode$[ebp], al
	mov	BYTE PTR [esi+55508], bl
	call	_CpgcOptionsSetup
; Line 11748
	push	DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR _SetupType$[ebp]
	mov	edi, 65535				; 0000ffffH
	push	edi
	push	12247					; 00002fd7H
	push	esi
	mov	BYTE PTR [esi+65569], al
	call	_MmrcExecuteTask
; Line 11749
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	DWORD PTR tv453[ebp], eax
	imul	eax, 4336				; 000010f0H
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR [ecx+58174], ebx
	mov	DWORD PTR [ecx+58178], ebx
; Line 11753
	mov	DWORD PTR [ecx+58158], ebx
	mov	DWORD PTR [ecx+58162], ebx
; Line 11758
	mov	DWORD PTR [ecx+58166], ebx
	mov	DWORD PTR [ecx+58170], ebx
; Line 11760
	movzx	eax, BYTE PTR [esi+65582]
	cdq
	mov	DWORD PTR [ecx+58150], eax
	mov	DWORD PTR [ecx+58154], edx
; Line 11761
	movzx	eax, BYTE PTR [esi+65583]
	cdq
	mov	DWORD PTR [ecx+58142], eax
; Line 11763
	mov	al, BYTE PTR _SetupType$[ebp]
	add	esp, 24					; 00000018H
	mov	DWORD PTR [ecx+58146], edx
	cmp	al, 1
	jbe	$LN13@CpgcSetup
	cmp	al, 2
	je	$LN11@CpgcSetup
	jbe	$LN2@CpgcSetup
	cmp	al, 4
	jbe	$LN10@CpgcSetup
	cmp	al, 7
	jne	$LN2@CpgcSetup
; Line 11813
	movzx	edx, BYTE PTR [esi+65579]
	movzx	eax, BYTE PTR [esi+65580]
	sub	eax, edx
	sub	eax, 17					; 00000011H
	cdq
	mov	DWORD PTR [ecx+58254], eax
; Line 11830
	mov	eax, DWORD PTR tv453[ebp]
	lea	eax, DWORD PTR [eax+esi+31272]
	mov	DWORD PTR [ecx+58258], edx
	cmp	BYTE PTR [eax], 3
	mov	DWORD PTR tv495[ebp], eax
	ja	SHORT $LN6@CpgcSetup
; Line 11836
	movzx	eax, BYTE PTR [esi+65579]
	lea	edx, DWORD PTR [eax+eax+4]
	movzx	eax, BYTE PTR [esi+65581]
	sub	eax, edx
	movzx	edx, BYTE PTR [esi+65580]
	mov	DWORD PTR tv505[ebp], eax
	movzx	eax, BYTE PTR [esi+65579]
	sub	edx, eax
	lea	eax, DWORD PTR [edx-20]
	cmp	DWORD PTR tv505[ebp], eax
	jge	SHORT $LN7@CpgcSetup
; Line 11841
	mov	eax, DWORD PTR tv505[ebp]
$LN7@CpgcSetup:
; Line 11846
	cdq
	mov	DWORD PTR [ecx+58266], edx
	mov	DWORD PTR [ecx+58262], eax
$LN6@CpgcSetup:
; Line 11851
	mov	eax, DWORD PTR tv495[ebp]
	cmp	BYTE PTR [eax], 7
	jne	SHORT $LN3@CpgcSetup
; Line 11857
	movzx	eax, BYTE PTR [esi+65579]
	lea	edx, DWORD PTR [eax+eax+4]
	movzx	eax, BYTE PTR [esi+65581]
	sub	eax, edx
	movzx	edx, BYTE PTR [esi+65580]
	mov	DWORD PTR tv505[ebp], eax
	movzx	eax, BYTE PTR [esi+65579]
	sub	edx, eax
	lea	eax, DWORD PTR [edx-20]
	cmp	DWORD PTR tv505[ebp], eax
	jge	SHORT $LN4@CpgcSetup
; Line 11862
	mov	eax, DWORD PTR tv505[ebp]
$LN4@CpgcSetup:
; Line 11867
	cdq
	mov	DWORD PTR [ecx+58266], edx
	mov	DWORD PTR [ecx+58262], eax
$LN3@CpgcSetup:
; Line 11875
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [ecx+58246], ebx
	push	edi
	push	12470					; 000030b6H
	push	esi
	mov	DWORD PTR [ecx+58250], ebx
	call	_MmrcExecuteTask
; Line 11876
	push	DWORD PTR _Channel$[ebp]
	push	edi
	push	12912					; 00003270H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 32					; 00000020H
; Line 11877
	jmp	SHORT $LN18@CpgcSetup
$LN10@CpgcSetup:
; Line 11785
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [ecx+58158], ebx
	push	edi
	push	12470					; 000030b6H
	push	esi
	mov	DWORD PTR [ecx+58162], ebx
	mov	DWORD PTR [ecx+58166], ebx
	mov	DWORD PTR [ecx+58170], ebx
	mov	DWORD PTR [ecx+58174], ebx
	mov	DWORD PTR [ecx+58178], ebx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 11786
	jmp	SHORT $LN13@CpgcSetup
$LN11@CpgcSetup:
; Line 11773
	push	DWORD PTR _Channel$[ebp]
	push	edi
	push	12470					; 000030b6H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 11774
	jmp	SHORT $LN18@CpgcSetup
$LN2@CpgcSetup:
; Line 11879
	call	_MrcDeadLoop
$LN13@CpgcSetup:
; Line 11882
	cmp	BYTE PTR _SetupType$[ebp], bl
	je	SHORT $LN1@CpgcSetup
	cmp	BYTE PTR _SetupType$[ebp], 1
	je	SHORT $LN1@CpgcSetup
$LN18@CpgcSetup:
; Line 11883
	push	DWORD PTR _Channel$[ebp]
	push	edi
	push	12439					; 00003097H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN1@CpgcSetup:
; Line 11886
	mov	al, BYTE PTR _ExecuteMode$[ebp]
	pop	edi
	mov	BYTE PTR [esi+55508], al
	pop	esi
; Line 11888
	xor	eax, eax
	pop	ebx
; Line 11889
	leave
	ret	0
_CpgcSetup ENDP
_TEXT	ENDS
PUBLIC	_CpgcReconfig
EXTRN	_GetAddressBit:PROC
; Function compile flags: /Ogspy
;	COMDAT _CpgcReconfig
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ExecuteMode$ = 11					; size = 1
_Channel$ = 12						; size = 1
_CpgcReconfig PROC					; COMDAT
; Line 11910
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 11913
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55508]
	mov	BYTE PTR _ExecuteMode$[ebp], al
; Line 11921
	mov	al, BYTE PTR [esi+65569]
	push	edi
	mov	BYTE PTR [esi+55508], 0
	test	al, al
	je	$LN12@CpgcReconf
	cmp	al, 1
	je	$LN11@CpgcReconf
	cmp	al, 2
	je	$LN10@CpgcReconf
	jbe	$LN1@CpgcReconf
	cmp	al, 4
	jbe	SHORT $LN9@CpgcReconf
	cmp	al, 7
	jne	$LN1@CpgcReconf
; Line 11994
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, BYTE PTR [esi+65580]
	imul	eax, 4336				; 000010f0H
; Line 11998
	push	DWORD PTR _Channel$[ebp]
	lea	edi, DWORD PTR [eax+esi]
	movzx	eax, BYTE PTR [esi+65579]
	sub	ecx, eax
	movzx	eax, BYTE PTR [esi+65585]
	sub	ecx, 5
	shl	eax, cl
	push	65535					; 0000ffffH
	push	12853					; 00003235H
	cdq
	mov	ecx, edx
	mov	DWORD PTR [edi+58198], eax
	mov	DWORD PTR [edi+58202], edx
	mov	DWORD PTR [edi+58206], eax
	mov	DWORD PTR [edi+58210], ecx
	mov	DWORD PTR [edi+58694], eax
	mov	DWORD PTR [edi+58698], ecx
	mov	DWORD PTR [edi+58702], eax
	mov	DWORD PTR [edi+58706], ecx
; Line 11999
	jmp	$LN21@CpgcReconf
$LN9@CpgcReconf:
; Line 11956
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 4336				; 000010f0H
	lea	edi, DWORD PTR [eax+esi]
	movzx	eax, BYTE PTR [esi+65585]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetAddressBit
	mov	ecx, eax
	movzx	eax, BYTE PTR [esi+65579]
	push	-5					; fffffffbH
	pop	edx
; Line 11958
	push	DWORD PTR _Channel$[ebp]
	sub	edx, eax
	movzx	eax, BYTE PTR [esi+65585]
	add	ecx, edx
	shl	eax, cl
	mov	ebx, 65535				; 0000ffffH
	push	ebx
	push	12853					; 00003235H
	cdq
	mov	DWORD PTR [edi+58198], eax
	mov	DWORD PTR [edi+58206], eax
	mov	eax, edx
	push	esi
	mov	DWORD PTR [edi+58202], edx
	mov	DWORD PTR [edi+58210], eax
	call	_MmrcExecuteTask
; Line 11959
	movzx	ecx, BYTE PTR [esi+65570]
	xor	eax, eax
	add	esp, 28					; 0000001cH
	sub	ecx, eax
	je	SHORT $LN5@CpgcReconf
	dec	ecx
	je	SHORT $LN6@CpgcReconf
	dec	ecx
	jne	SHORT $LN7@CpgcReconf
; Line 11970
	mov	DWORD PTR [edi+58230], 1
; Line 11971
	jmp	SHORT $LN18@CpgcReconf
$LN6@CpgcReconf:
; Line 11961
	xor	ecx, ecx
	inc	ecx
	mov	DWORD PTR [edi+58238], ecx
; Line 11962
	mov	DWORD PTR [edi+58230], ecx
; Line 11963
	jmp	SHORT $LN19@CpgcReconf
$LN5@CpgcReconf:
; Line 11966
	mov	DWORD PTR [edi+58230], eax
$LN18@CpgcReconf:
; Line 11965
	mov	DWORD PTR [edi+58238], eax
$LN19@CpgcReconf:
	mov	DWORD PTR [edi+58242], eax
; Line 11966
	mov	DWORD PTR [edi+58234], eax
$LN7@CpgcReconf:
; Line 11973
	mov	ecx, DWORD PTR [esi+65571]
; Line 11975
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [edi+58222], ecx
	push	ebx
	mov	DWORD PTR [edi+58226], eax
	mov	ecx, DWORD PTR [esi+65575]
	push	12878					; 0000324eH
	push	esi
	mov	DWORD PTR [edi+58214], ecx
	mov	DWORD PTR [edi+58218], eax
	call	_MmrcExecuteTask
; Line 11976
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	12893					; 0000325dH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 32					; 00000020H
; Line 11977
	cmp	BYTE PTR [esi+65569], 3
	je	$LN17@CpgcReconf
; Line 11983
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	14906					; 00003a3aH
$LN21@CpgcReconf:
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 11984
	jmp	$LN17@CpgcReconf
$LN1@CpgcReconf:
; Line 12001
	call	_MrcDeadLoop
	jmp	$LN17@CpgcReconf
$LN10@CpgcReconf:
; Line 11936
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 4336				; 000010f0H
	lea	edi, DWORD PTR [eax+esi]
	xor	eax, eax
	mov	DWORD PTR [edi+58238], eax
	mov	DWORD PTR [edi+58242], eax
; Line 11937
	mov	DWORD PTR [edi+58230], 1
	mov	DWORD PTR [edi+58234], eax
; Line 11938
	movzx	eax, BYTE PTR [esi+65585]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetAddressBit
	mov	ecx, eax
	movzx	eax, BYTE PTR [esi+65579]
	push	-5					; fffffffbH
	pop	edx
; Line 11942
	push	DWORD PTR _Channel$[ebp]
	sub	edx, eax
	movzx	eax, BYTE PTR [esi+65585]
	add	ecx, edx
	shl	eax, cl
	mov	ebx, 65535				; 0000ffffH
	push	ebx
	push	12853					; 00003235H
	cdq
	mov	ecx, edx
	push	esi
	mov	DWORD PTR [edi+58198], eax
	mov	DWORD PTR [edi+58202], edx
	mov	DWORD PTR [edi+58206], eax
	mov	DWORD PTR [edi+58210], ecx
	mov	DWORD PTR [edi+58694], eax
	mov	DWORD PTR [edi+58698], ecx
	mov	DWORD PTR [edi+58702], eax
	mov	DWORD PTR [edi+58706], ecx
	call	_MmrcExecuteTask
; Line 11943
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	12893					; 0000325dH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 44					; 0000002cH
; Line 11944
	jmp	SHORT $LN17@CpgcReconf
$LN11@CpgcReconf:
; Line 11928
	push	DWORD PTR _Channel$[ebp]
	mov	ebx, 65535				; 0000ffffH
	push	ebx
	push	13933					; 0000366dH
; Line 11930
	jmp	SHORT $LN20@CpgcReconf
$LN12@CpgcReconf:
; Line 11924
	push	DWORD PTR _Channel$[ebp]
	mov	ebx, 65535				; 0000ffffH
	push	ebx
	push	13707					; 0000358bH
$LN20@CpgcReconf:
	push	esi
	call	_MmrcExecuteTask
; Line 11925
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	13811					; 000035f3H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 32					; 00000020H
$LN17@CpgcReconf:
; Line 12004
	mov	al, BYTE PTR _ExecuteMode$[ebp]
	pop	edi
	mov	BYTE PTR [esi+55508], al
	pop	esi
; Line 12006
	xor	eax, eax
	pop	ebx
; Line 12007
	pop	ebp
	ret	0
_CpgcReconfig ENDP
_TEXT	ENDS
PUBLIC	_CpgcBaseLineTest
; Function compile flags: /Ogspy
;	COMDAT _CpgcBaseLineTest
_TEXT	SEGMENT
tv282 = -8						; size = 4
tv343 = -4						; size = 4
_ModMrcData$ = 8					; size = 4
_Rank$ = 11						; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_CpgcBaseLineTest PROC					; COMDAT
; Line 12185
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 12199
	mov	esi, DWORD PTR _ModMrcData$[ebp]
	cmp	BYTE PTR [esi+71014], 0
	je	SHORT $LN8@CpgcBaseLi
	cmp	BYTE PTR [esi+71015], 0
	je	SHORT $LN8@CpgcBaseLi
	cmp	BYTE PTR [esi+71016], 0
	je	SHORT $LN8@CpgcBaseLi
	cmp	BYTE PTR [esi+71017], 0
	je	SHORT $LN8@CpgcBaseLi
	cmp	BYTE PTR [esi+71018], 0
	je	SHORT $LN8@CpgcBaseLi
	cmp	BYTE PTR [esi+71019], 0
	je	SHORT $LN8@CpgcBaseLi
	cmp	BYTE PTR [esi+71020], 0
; Line 12200
	jne	$LN17@CpgcBaseLi
$LN8@CpgcBaseLi:
	push	ebx
; Line 12203
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	edi
	push	ebx
	mov	edi, 65535				; 0000ffffH
	push	edi
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
; Line 12205
	push	ebx
	push	edi
	push	15209					; 00003b69H
	push	esi
	call	_MmrcExecuteTask
; Line 12218
	push	2
	push	ebx
	push	esi
	mov	BYTE PTR [esi+65583], 8
	mov	BYTE PTR [esi+65582], 6
	call	_CpgcSetup
; Line 12245
	movzx	ebx, bl
	lea	eax, DWORD PTR [esi+ebx*4+55438]
	add	esp, 44					; 0000002cH
	mov	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR tv343[ebp], eax
$LL7@CpgcBaseLi:
	mov	eax, DWORD PTR tv343[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN6@CpgcBaseLi
	push	DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR _Rank$[ebp]
	push	esi
	mov	BYTE PTR [esi+65585], al
	mov	BYTE PTR [esi+65570], 2
	call	_CpgcReconfig
	push	DWORD PTR _Channel$[ebp]
	mov	eax, ebx
	imul	eax, 4336				; 000010f0H
	push	edi
	lea	eax, DWORD PTR [eax+esi+58406]
	push	13608					; 00003528H
	push	esi
	mov	DWORD PTR tv282[ebp], eax
	call	_MmrcExecuteTask
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [ebx+esi+28608], 0
	je	SHORT $LN11@CpgcBaseLi
; Line 12236
	cmp	BYTE PTR [ebx+esi+55511], 0
	je	SHORT $LN11@CpgcBaseLi
	xor	ecx, ecx
	inc	ecx
	jmp	SHORT $LN18@CpgcBaseLi
$LN11@CpgcBaseLi:
	xor	ecx, ecx
$LN18@CpgcBaseLi:
; Line 12237
	push	DWORD PTR _Channel$[ebp]
	mov	eax, DWORD PTR tv282[ebp]
	push	edi
	xor	edx, edx
	push	13625					; 00003539H
	push	esi
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	call	_MmrcExecuteTask
; Line 12238
	push	DWORD PTR _Channel$[ebp]
	push	edi
	push	13638					; 00003546H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 32					; 00000020H
$LN6@CpgcBaseLi:
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv343[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL7@CpgcBaseLi
	pop	edi
	pop	ebx
$LN17@CpgcBaseLi:
; Line 12245
	xor	eax, eax
	pop	esi
; Line 12246
	leave
	ret	0
_CpgcBaseLineTest ENDP
_TEXT	ENDS
PUBLIC	_DoZqCal
; Function compile flags: /Ogspy
;	COMDAT _DoZqCal
_TEXT	SEGMENT
_Dram3Cmd$ = -4						; size = 4
_Rank$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_DoZqCal PROC						; COMDAT
; Line 12260
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 12272
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55508]
	xor	eax, eax
	push	edi
	mov	DWORD PTR _Dram3Cmd$[ebp], eax
; Line 12273
	mov	BYTE PTR [esi+55508], al
; Line 12275
	mov	BYTE PTR _Rank$[ebp], al
	xor	edi, edi
$LL6@DoZqCal:
; Line 12276
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN5@DoZqCal
; Line 12279
	movzx	eax, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [eax+esi+31272], 3
; Line 12283
	mov	eax, edi
	ja	SHORT $LN2@DoZqCal
	mov	ecx, DWORD PTR _Dram3Cmd$[ebp]
	and	eax, 3
	shl	eax, 22					; 00000016H
	and	ecx, -16711674				; ff010006H
	or	eax, ecx
	or	eax, 65542				; 00010006H
	mov	DWORD PTR _Dram3Cmd$[ebp], eax
; Line 12286
	jmp	SHORT $LN1@DoZqCal
$LN2@DoZqCal:
; Line 12297
	and	eax, 3
	shl	eax, 26					; 0000001aH
	or	eax, 262158				; 0004000eH
$LN1@DoZqCal:
; Line 12300
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteDramCommandSideWrap
	add	esp, 16					; 00000010H
$LN5@DoZqCal:
	inc	BYTE PTR _Rank$[ebp]
	inc	edi
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL6@DoZqCal
	pop	edi
; Line 12303
	mov	BYTE PTR [esi+55508], bl
	pop	esi
; Line 12305
	xor	eax, eax
	pop	ebx
; Line 12306
	leave
	ret	0
_DoZqCal ENDP
_TEXT	ENDS
PUBLIC	_CpgcRunCadbTest
EXTRN	_StrobeToErrorMask:BYTE
EXTRN	_CadbMaGroupsDdr4:BYTE
EXTRN	_CadbMaGroupsDdr3:BYTE
; Function compile flags: /Ogspy
;	COMDAT _CpgcRunCadbTest
_TEXT	SEGMENT
_Cmd$ = -84						; size = 16
_BankAddress$ = -68					; size = 16
_RowColAddress$ = -52					; size = 16
tv1652 = -36						; size = 4
tv708 = -32						; size = 4
tv1788 = -28						; size = 4
tv1678 = -28						; size = 4
tv1607 = -24						; size = 4
tv1139 = -24						; size = 4
_CadbMaGroupPtr$ = -20					; size = 4
_ChannelBackup$ = -16					; size = 1
_i$ = -12						; size = 1
_FailureOnChannel$ = -8					; size = 2
_DevWidthIndex$ = -3					; size = 1
_MaxMaSignals$ = -2					; size = 1
_MaxMaGroups$ = -1					; size = 1
tv1702 = 8						; size = 4
_MrcData$ = 8						; size = 4
_DramType$ = 11						; size = 1
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_CpgcRunCadbTest PROC					; COMDAT
; Line 12425
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
; Line 12443
	mov	cl, BYTE PTR _Channel$[ebp]
	movzx	edx, BYTE PTR _Rank$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _MrcData$[ebp]
	add	edx, ebx
	movzx	eax, cl
	movzx	eax, BYTE PTR [edx+eax*4+55454]
	push	esi
	push	edi
	push	18					; 00000012H
	cdq
	pop	esi
	idiv	esi
; Line 12447
	and	DWORD PTR _CadbMaGroupPtr$[ebp], 0
	mov	BYTE PTR _MaxMaGroups$[ebp], 0
	mov	BYTE PTR _MaxMaSignals$[ebp], 0
	mov	BYTE PTR _DramType$[ebp], 255		; 000000ffH
; Line 12452
	mov	BYTE PTR _ChannelBackup$[ebp], cl
	mov	BYTE PTR _DevWidthIndex$[ebp], al
; Line 12456
	cmp	cl, 2
	jae	SHORT $LN112@CpgcRunCad
$LL111@CpgcRunCad:
; Line 12457
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN72@CpgcRunCad
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL111@CpgcRunCad
; Line 12456
	jmp	SHORT $LN112@CpgcRunCad
$LN72@CpgcRunCad:
; Line 12461
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	al, BYTE PTR [eax+ebx+31272]
	cmp	al, 3
	ja	SHORT $LN71@CpgcRunCad
; Line 12463
	mov	BYTE PTR _MaxMaGroups$[ebp], 3
; Line 12464
	mov	BYTE PTR _MaxMaSignals$[ebp], 7
; Line 12465
	mov	BYTE PTR _DramType$[ebp], 3
	jmp	SHORT $LN112@CpgcRunCad
$LN71@CpgcRunCad:
; Line 12467
	cmp	al, 7
	jne	SHORT $LN69@CpgcRunCad
; Line 12469
	mov	BYTE PTR _MaxMaGroups$[ebp], 3
; Line 12470
	mov	BYTE PTR _MaxMaSignals$[ebp], al
; Line 12471
	mov	BYTE PTR _DramType$[ebp], al
; Line 12473
	jmp	SHORT $LN112@CpgcRunCad
$LN69@CpgcRunCad:
; Line 12474
	mov	BYTE PTR _MaxMaGroups$[ebp], 0
; Line 12475
	mov	BYTE PTR _MaxMaSignals$[ebp], 0
; Line 12476
	mov	DWORD PTR [ebx+65333], 35		; 00000023H
; Line 12477
	call	_MrcDeadLoop
$LN112@CpgcRunCad:
; Line 12490
	xor	eax, eax
	lea	edi, DWORD PTR _FailureOnChannel$[ebp]
	stosw
; Line 12492
	cmp	BYTE PTR _MaxMaGroups$[ebp], al
	jbe	$LN65@CpgcRunCad
	movzx	ecx, BYTE PTR _MaxMaGroups$[ebp]
	mov	DWORD PTR tv1678[ebp], eax
	mov	DWORD PTR tv1652[ebp], ecx
	jmp	SHORT $LN67@CpgcRunCad
$LL113@CpgcRunCad:
	mov	eax, DWORD PTR tv1678[ebp]
$LN67@CpgcRunCad:
; Line 12500
	xor	ecx, ecx
; Line 12515
	cmp	BYTE PTR _DramType$[ebp], 3
	push	7
	pop	edx
	mov	edi, 65535				; 0000ffffH
	mov	DWORD PTR _RowColAddress$[ebp+4], edi
	mov	DWORD PTR _RowColAddress$[ebp+8], ecx
	mov	DWORD PTR _BankAddress$[ebp+4], edx
	mov	DWORD PTR _BankAddress$[ebp+8], ecx
	mov	DWORD PTR _Cmd$[ebp+4], edx
	mov	DWORD PTR _Cmd$[ebp+8], ecx
	ja	SHORT $LN64@CpgcRunCad
; Line 12517
	lea	eax, DWORD PTR _CadbMaGroupsDdr3[eax]
	jmp	SHORT $LN121@CpgcRunCad
$LN64@CpgcRunCad:
; Line 12519
	cmp	BYTE PTR _DramType$[ebp], 7
	jne	SHORT $LN62@CpgcRunCad
; Line 12521
	lea	eax, DWORD PTR _CadbMaGroupsDdr4[eax]
$LN121@CpgcRunCad:
	mov	DWORD PTR _CadbMaGroupPtr$[ebp], eax
; Line 12523
	jmp	SHORT $LN61@CpgcRunCad
$LN62@CpgcRunCad:
; Line 12524
	mov	DWORD PTR [ebx+65333], 35		; 00000023H
; Line 12525
	call	_MrcDeadLoop
$LN61@CpgcRunCad:
; Line 12529
	cmp	BYTE PTR _MaxMaSignals$[ebp], 0
	jbe	$LN58@CpgcRunCad
	movzx	eax, BYTE PTR _MaxMaSignals$[ebp]
	mov	edx, DWORD PTR _CadbMaGroupPtr$[ebp]
	mov	DWORD PTR tv1139[ebp], edx
	mov	DWORD PTR tv708[ebp], eax
$LL60@CpgcRunCad:
; Line 12533
	cmp	BYTE PTR [edx], 255			; 000000ffH
	je	$LN59@CpgcRunCad
; Line 12537
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	SHORT $LN54@CpgcRunCad
	movzx	eax, al
	lea	edi, DWORD PTR _FailureOnChannel$[ebp+eax]
	imul	eax, 4336				; 000010f0H
	lea	esi, DWORD PTR [eax+ebx+58406]
$LL114@CpgcRunCad:
; Line 12538
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN55@CpgcRunCad
; Line 12541
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN52@CpgcRunCad
; Line 12542
	and	DWORD PTR [esi], 0
; Line 12543
	jmp	SHORT $LN122@CpgcRunCad
$LN52@CpgcRunCad:
; Line 12544
	mov	DWORD PTR [esi], 1
$LN122@CpgcRunCad:
	and	DWORD PTR [esi+4], 0
$LN55@CpgcRunCad:
; Line 12537
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	add	esi, 4336				; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL114@CpgcRunCad
	mov	edx, DWORD PTR tv1139[ebp]
	mov	edi, 65535				; 0000ffffH
$LN54@CpgcRunCad:
; Line 12549
	cmp	BYTE PTR _DramType$[ebp], 3
; Line 12559
	jbe	SHORT $LN125@CpgcRunCad
; Line 12560
	cmp	BYTE PTR _DramType$[ebp], 7
	jne	SHORT $LN59@CpgcRunCad
$LN125@CpgcRunCad:
; Line 12561
	mov	cl, BYTE PTR [edx]
	cmp	cl, 15					; 0000000fH
	ja	SHORT $LN42@CpgcRunCad
; Line 12562
	xor	eax, eax
	inc	eax
	shl	eax, cl
	mov	ecx, eax
	not	ecx
	and	DWORD PTR _RowColAddress$[ebp+4], ecx
; Line 12563
	or	DWORD PTR _RowColAddress$[ebp+8], eax
	jmp	SHORT $LN59@CpgcRunCad
$LN42@CpgcRunCad:
; Line 12564
	cmp	cl, 18					; 00000012H
	ja	SHORT $LN40@CpgcRunCad
; Line 12565
	movzx	ecx, cl
	xor	eax, eax
	sub	ecx, 16					; 00000010H
	inc	eax
	shl	eax, cl
	mov	ecx, eax
	not	ecx
	and	DWORD PTR _BankAddress$[ebp+4], ecx
; Line 12566
	or	DWORD PTR _BankAddress$[ebp+8], eax
	jmp	SHORT $LN59@CpgcRunCad
$LN40@CpgcRunCad:
; Line 12567
	cmp	cl, 21					; 00000015H
	ja	SHORT $LN59@CpgcRunCad
; Line 12568
	movzx	ecx, cl
	xor	eax, eax
	sub	ecx, 19					; 00000013H
	inc	eax
	shl	eax, cl
	mov	ecx, eax
	not	ecx
	and	DWORD PTR _Cmd$[ebp+4], ecx
; Line 12569
	or	DWORD PTR _Cmd$[ebp+8], eax
$LN59@CpgcRunCad:
	inc	edx
	dec	DWORD PTR tv708[ebp]
	mov	DWORD PTR tv1139[ebp], edx
	jne	$LL60@CpgcRunCad
$LN58@CpgcRunCad:
; Line 12573
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN35@CpgcRunCad
	movzx	eax, al
	imul	eax, 4336				; 000010f0H
	lea	esi, DWORD PTR [eax+ebx+58278]
$LL115@CpgcRunCad:
; Line 12574
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN36@CpgcRunCad
; Line 12578
	mov	ecx, DWORD PTR _RowColAddress$[ebp+4]
; Line 12588
	mov	edx, DWORD PTR _Cmd$[ebp+4]
	xor	eax, eax
	mov	DWORD PTR [esi], ecx
	mov	ecx, DWORD PTR _RowColAddress$[ebp+8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR _BankAddress$[ebp+4]
	mov	DWORD PTR [esi+32], ecx
	mov	ecx, DWORD PTR _BankAddress$[ebp+8]
	push	7
	mov	DWORD PTR [esi+40], ecx
	pop	ecx
	mov	DWORD PTR [esi+64], edx
; Line 12589
	mov	edx, DWORD PTR _Cmd$[ebp+8]
	mov	DWORD PTR [esi-8], eax
	mov	DWORD PTR [esi-4], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR [esi+44], eax
	mov	DWORD PTR [esi+48], ecx
	mov	DWORD PTR [esi+52], eax
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [esi+60], eax
	mov	DWORD PTR [esi+68], eax
	mov	DWORD PTR [esi+72], edx
	mov	DWORD PTR [esi+76], eax
; Line 12590
	mov	DWORD PTR [esi+80], ecx
	mov	DWORD PTR [esi+84], eax
$LN36@CpgcRunCad:
	inc	BYTE PTR _Channel$[ebp]
	add	esi, 4336				; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL115@CpgcRunCad
$LN35@CpgcRunCad:
; Line 12608
	mov	esi, DWORD PTR _ChannelBackup$[ebp]
	push	esi
	push	edi
	push	13365					; 00003435H
	push	ebx
	call	_MmrcExecuteTask
; Line 12612
	push	esi
	push	edi
	push	13608					; 00003528H
	push	ebx
	call	_MmrcExecuteTask
; Line 12616
	push	esi
	push	edi
	push	13625					; 00003539H
	push	ebx
	call	_MmrcExecuteTask
; Line 12620
	push	esi
	push	edi
	push	13638					; 00003546H
	push	ebx
	call	_MmrcExecuteTask
; Line 12622
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 64					; 00000040H
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN66@CpgcRunCad
	movzx	eax, al
	lea	esi, DWORD PTR _FailureOnChannel$[ebp+eax]
	imul	eax, 542				; 0000021eH
	mov	DWORD PTR tv1607[ebp], eax
$LL24@CpgcRunCad:
; Line 12623
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN23@CpgcRunCad
; Line 12630
	mov	BYTE PTR _i$[ebp], 0
	xor	edi, edi
$LL120@CpgcRunCad:
; Line 12631
	push	0
	push	0
	push	DWORD PTR _i$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN16@CpgcRunCad
; Line 12639
	movzx	eax, BYTE PTR _DevWidthIndex$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, edi
	imul	eax, 7
	movzx	ecx, WORD PTR _StrobeToErrorMask[eax]
	add	ecx, DWORD PTR tv1607[ebp]
	mov	eax, DWORD PTR _StrobeToErrorMask[eax+2]
	and	eax, DWORD PTR [ebx+ecx*8+55526]
	xor	edx, edx
	and	edx, DWORD PTR [ebx+ecx*8+55530]
	or	eax, edx
	jne	SHORT $LN12@CpgcRunCad
	cmp	BYTE PTR [esi], al
	je	SHORT $LN16@CpgcRunCad
$LN12@CpgcRunCad:
; Line 12640
	mov	BYTE PTR [esi], 1
$LN16@CpgcRunCad:
; Line 12630
	inc	BYTE PTR _i$[ebp]
	inc	edi
	cmp	BYTE PTR _i$[ebp], 18			; 00000012H
	jb	SHORT $LL120@CpgcRunCad
$LN23@CpgcRunCad:
; Line 12622
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1607[ebp], 542		; 0000021eH
	inc	esi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL24@CpgcRunCad
$LN66@CpgcRunCad:
; Line 12492
	add	DWORD PTR tv1678[ebp], 7
	dec	DWORD PTR tv1652[ebp]
	jne	$LL113@CpgcRunCad
$LN65@CpgcRunCad:
; Line 12671
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN8@CpgcRunCad
	movzx	eax, al
	mov	esi, eax
	lea	eax, DWORD PTR _FailureOnChannel$[ebp+eax]
	imul	esi, 542				; 0000021eH
	mov	DWORD PTR tv1788[ebp], eax
$LL116@CpgcRunCad:
; Line 12672
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN9@CpgcRunCad
; Line 12675
	xor	edi, edi
	mov	BYTE PTR _i$[ebp], 0
	mov	DWORD PTR tv1702[ebp], edi
$LL6@CpgcRunCad:
; Line 12676
	push	edi
	push	edi
	push	DWORD PTR _i$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN5@CpgcRunCad
; Line 12679
	mov	eax, DWORD PTR tv1788[ebp]
	cmp	BYTE PTR [eax], 0
; Line 12680
	movzx	eax, BYTE PTR _DevWidthIndex$[ebp]
	je	SHORT $LN2@CpgcRunCad
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv1702[ebp]
	imul	eax, 7
	movzx	eax, WORD PTR _StrobeToErrorMask[eax]
	add	eax, esi
	or	DWORD PTR [ebx+eax*8+55526], -1
; Line 12681
	jmp	SHORT $LN126@CpgcRunCad
$LN2@CpgcRunCad:
; Line 12682
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv1702[ebp]
	imul	eax, 7
	movzx	eax, WORD PTR _StrobeToErrorMask[eax]
	add	eax, esi
	mov	DWORD PTR [ebx+eax*8+55526], edi
$LN126@CpgcRunCad:
	mov	DWORD PTR [ebx+eax*8+55530], edi
$LN5@CpgcRunCad:
; Line 12675
	inc	BYTE PTR _i$[ebp]
	inc	DWORD PTR tv1702[ebp]
	cmp	BYTE PTR _i$[ebp], 18			; 00000012H
	jb	SHORT $LL6@CpgcRunCad
$LN9@CpgcRunCad:
; Line 12671
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1788[ebp]
	add	esi, 542				; 0000021eH
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL116@CpgcRunCad
$LN8@CpgcRunCad:
	pop	edi
	pop	esi
; Line 12688
	xor	eax, eax
	pop	ebx
; Line 12689
	leave
	ret	0
_CpgcRunCadbTest ENDP
_TEXT	ENDS
PUBLIC	_CpgcExecuteParallel
; Function compile flags: /Ogspy
;	COMDAT _CpgcExecuteParallel
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_CpgcExecuteParallel PROC				; COMDAT
; Line 12707
	push	ebp
	mov	ebp, esp
	push	edi
; Line 12712
	mov	edi, DWORD PTR _MrcData$[ebp]
	movzx	eax, BYTE PTR [edi+65569]
	sub	eax, 5
	je	SHORT $LN1@CpgcExecut@2
	dec	eax
	je	SHORT $LN1@CpgcExecut@2
	dec	eax
	jne	SHORT $LN10@CpgcExecut@2
; Line 12728
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_CpgcRunCadbTest
	add	esp, 12					; 0000000cH
; Line 12729
	jmp	SHORT $LN1@CpgcExecut@2
$LN10@CpgcExecut@2:
	push	esi
; Line 12737
	push	DWORD PTR _Channel$[ebp]
	mov	esi, 65535				; 0000ffffH
	push	esi
	push	13608					; 00003528H
	push	edi
	call	_MmrcExecuteTask
; Line 12741
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	13625					; 00003539H
	push	edi
	call	_MmrcExecuteTask
; Line 12745
	push	DWORD PTR _Channel$[ebp]
	push	esi
	push	13638					; 00003546H
	push	edi
	call	_MmrcExecuteTask
	add	esp, 48					; 00000030H
	pop	esi
$LN1@CpgcExecut@2:
; Line 12748
	xor	eax, eax
	pop	edi
; Line 12749
	pop	ebp
	ret	0
_CpgcExecuteParallel ENDP
_TEXT	ENDS
PUBLIC	_MemInit
; Function compile flags: /Ogspy
;	COMDAT _MemInit
_TEXT	SEGMENT
tv188 = -48						; size = 8
tv930 = -40						; size = 8
tv350 = -32						; size = 8
tv906 = -24						; size = 4
tv896 = -20						; size = 4
_ChannelBackup$ = -16					; size = 1
tv831 = -12						; size = 4
tv753 = -8						; size = 4
tv533 = -8						; size = 4
_GlobalError$ = -1					; size = 1
_StrobeLane$ = 8					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
tv1060 = 16						; size = 4
_MemInitFlag$ = 16					; size = 1
_Sequence$ = 19						; size = 1
_MemInit PROC						; COMDAT
; Line 12775
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 12790
	mov	al, BYTE PTR _Channel$[ebp]
	push	ebx
	push	esi
	xor	esi, esi
	push	edi
; Line 12794
	mov	edi, DWORD PTR _MrcData$[ebp]
	xor	ebx, ebx
	inc	esi
	mov	BYTE PTR _GlobalError$[ebp], bl
	mov	BYTE PTR _ChannelBackup$[ebp], al
	cmp	BYTE PTR [edi+65493], bl
	je	SHORT $LN37@MemInit
; Line 12795
	mov	esi, DWORD PTR [edi+65494]
$LN37@MemInit:
; Line 12797
	movzx	eax, BYTE PTR _MemInitFlag$[ebp]
	sub	eax, ebx
	je	$LN34@MemInit
	dec	eax
; Line 12914
	jne	$LN64@MemInit
; Line 12823
	mov	BYTE PTR _Channel$[ebp], bl
$LL59@MemInit:
; Line 12824
	push	1
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_CpgcSetup
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL59@MemInit
; Line 12830
	cmp	esi, ebx
	jbe	$LN2@MemInit
	mov	DWORD PTR tv906[ebp], esi
$LL26@MemInit:
; Line 12831
	mov	DWORD PTR tv831[ebp], ebx
	mov	DWORD PTR tv896[ebp], 4
$LL60@MemInit:
; Line 12839
	mov	eax, DWORD PTR tv831[ebp]
	cdq
	mov	BYTE PTR _Sequence$[ebp], bl
	mov	DWORD PTR tv930[ebp], eax
	mov	DWORD PTR tv930[ebp+4], edx
$LL61@MemInit:
; Line 12864
	movzx	eax, BYTE PTR _Sequence$[ebp]
	cdq
	lea	ecx, DWORD PTR [edi+55511]
	mov	BYTE PTR _Channel$[ebp], bl
	mov	DWORD PTR tv350[ebp], eax
	mov	DWORD PTR tv350[ebp+4], edx
	mov	DWORD PTR tv533[ebp], ecx
	lea	esi, DWORD PTR [edi+58238]
	jmp	SHORT $LN17@MemInit
$LL62@MemInit:
; Line 12844
	mov	ecx, DWORD PTR tv533[ebp]
	mov	edx, DWORD PTR tv350[ebp+4]
	mov	eax, DWORD PTR tv350[ebp]
$LN17@MemInit:
; Line 12845
	cmp	BYTE PTR [ecx-26903], bl
	je	SHORT $LN42@MemInit
	mov	DWORD PTR tv188[ebp], 1
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $LN43@MemInit
$LN42@MemInit:
	mov	DWORD PTR tv188[ebp], ebx
$LN43@MemInit:
	mov	ecx, DWORD PTR tv188[ebp]
; Line 12853
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [esi+168], ecx
	xor	ecx, ecx
	mov	DWORD PTR [esi+172], ecx
	mov	ecx, DWORD PTR tv930[ebp+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi-8], eax
	mov	eax, DWORD PTR tv930[ebp]
	push	edi
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi-4], edx
	mov	DWORD PTR [esi+208], eax
	mov	DWORD PTR [esi+212], ecx
	mov	DWORD PTR [esi+200], eax
	mov	DWORD PTR [esi+204], ecx
	call	_CpgcReconfig
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv533[ebp]
	pop	ecx
	add	esi, 4336				; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 2
	pop	ecx
	jb	SHORT $LL62@MemInit
; Line 12862
	push	ebx
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	call	_CpgcExecuteParallel
	add	esp, 12					; 0000000cH
; Line 12864
	cmp	BYTE PTR _Sequence$[ebp], 1
	jne	SHORT $LN19@MemInit
; Line 12865
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	SHORT $LN19@MemInit
	movzx	eax, al
	lea	ecx, DWORD PTR [eax+edi+30686]
	imul	eax, 4336				; 000010f0H
	mov	DWORD PTR tv753[ebp], ecx
	lea	esi, DWORD PTR [eax+edi+58374]
$LL13@MemInit:
; Line 12866
	mov	eax, DWORD PTR [esi+32]
	or	eax, DWORD PTR [esi+36]
	je	SHORT $LN12@MemInit
; Line 12873
	mov	ecx, DWORD PTR tv753[ebp]
	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [ecx], bl
	je	SHORT $LN9@MemInit
; Line 12874
	mov	ecx, DWORD PTR [esi-8]
	shl	ecx, 8
	or	eax, ecx
$LN9@MemInit:
; Line 12885
	cmp	eax, ebx
	je	SHORT $LN12@MemInit
; Line 12890
	mov	BYTE PTR _StrobeLane$[ebp], bl
$LL7@MemInit:
; Line 12891
	push	ebx
	push	ebx
	push	DWORD PTR _StrobeLane$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	inc	BYTE PTR _StrobeLane$[ebp]
	cmp	BYTE PTR _StrobeLane$[ebp], 18		; 00000012H
	jb	SHORT $LL7@MemInit
; Line 12901
	mov	BYTE PTR _GlobalError$[ebp], 1
$LN12@MemInit:
; Line 12865
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv753[ebp]
	add	esi, 4336				; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL13@MemInit
$LN19@MemInit:
; Line 12839
	inc	BYTE PTR _Sequence$[ebp]
	cmp	BYTE PTR _Sequence$[ebp], 2
	jb	$LL61@MemInit
	inc	DWORD PTR tv831[ebp]
	dec	DWORD PTR tv896[ebp]
	jne	$LL60@MemInit
; Line 12830
	dec	DWORD PTR tv906[ebp]
	jne	$LL26@MemInit
; Line 12909
	cmp	BYTE PTR _GlobalError$[ebp], bl
	je	$LN2@MemInit
$LN64@MemInit:
; Line 12910
	or	eax, -1
	jmp	$LN38@MemInit
$LN34@MemInit:
; Line 12799
	lea	eax, DWORD PTR [edi+55511]
	mov	BYTE PTR _Channel$[ebp], bl
	mov	DWORD PTR tv1060[ebp], eax
	lea	esi, DWORD PTR [edi+58238]
	jmp	SHORT $LN33@MemInit
$LL63@MemInit:
	mov	eax, DWORD PTR tv1060[ebp]
$LN33@MemInit:
; Line 12800
	cmp	BYTE PTR [eax-26903], bl
	je	SHORT $LN40@MemInit
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN40@MemInit
	xor	eax, eax
	inc	eax
	jmp	SHORT $LN41@MemInit
$LN40@MemInit:
	xor	eax, eax
$LN41@MemInit:
; Line 12808
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [esi+168], eax
	push	edi
	mov	DWORD PTR [esi+172], ebx
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi-8], ebx
	mov	DWORD PTR [esi-4], ebx
	mov	DWORD PTR [esi+208], ebx
	mov	DWORD PTR [esi+212], ebx
	mov	DWORD PTR [esi+200], ebx
	mov	DWORD PTR [esi+204], ebx
	call	_CpgcSetup
; Line 12809
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_CpgcReconfig
; Line 12810
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	15587					; 00003ce3H
	push	edi
	call	_MmrcExecuteTask
	add	esp, 36					; 00000024H
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1060[ebp]
	add	esi, 4336				; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL63@MemInit
; Line 12819
	push	ebx
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	call	_CpgcExecuteParallel
	add	esp, 12					; 0000000cH
$LN2@MemInit:
; Line 12821
	xor	eax, eax
$LN38@MemInit:
	pop	edi
	pop	esi
	pop	ebx
; Line 12918
	leave
	ret	0
_MemInit ENDP
_TEXT	ENDS
PUBLIC	_MemoryTest
EXTRN	_SetExtDefault:PROC
; Function compile flags: /Ogspy
;	COMDAT _MemoryTest
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_MemoryTest PROC					; COMDAT
; Line 13097
	push	edi
; Line 13105
	push	DWORD PTR _Channel$[esp]
	mov	edi, DWORD PTR _MrcData$[esp+4]
	push	edi
	call	_SetExtDefault
; Line 13106
	cmp	BYTE PTR [edi+71021], 0
	pop	ecx
	pop	ecx
; Line 13108
	jne	SHORT $LN11@MemoryTest
; Line 13111
	cmp	BYTE PTR [edi+65478], 0
	je	SHORT $LN7@MemoryTest
	mov	al, BYTE PTR [edi+31274]
	cmp	al, 1
	je	SHORT $LN11@MemoryTest
	cmp	al, 16					; 00000010H
; Line 13116
	je	SHORT $LN11@MemoryTest
$LN7@MemoryTest:
; Line 13133
	push	1
	push	DWORD PTR _Channel$[esp+4]
	push	edi
	call	_MemInit
	add	esp, 12					; 0000000cH
; Line 13134
	test	eax, eax
	je	SHORT $LN3@MemoryTest
; Line 13136
	call	_EnableMrcBreakpoint
; Line 13137
	jmp	SHORT $LN2@MemoryTest
$LN3@MemoryTest:
; Line 13139
	call	_DisableMrcBreakpoint
$LN2@MemoryTest:
	push	ebx
	push	esi
; Line 13143
	push	0
	push	65535					; 0000ffffH
	lea	esi, DWORD PTR [edi+55509]
	mov	bl, BYTE PTR [esi]
	push	18223					; 0000472fH
	push	edi
	mov	BYTE PTR [esi], 1
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 13144
	mov	BYTE PTR [esi], bl
	pop	esi
	pop	ebx
$LN11@MemoryTest:
; Line 13150
	xor	eax, eax
	pop	edi
; Line 13154
	ret	0
_MemoryTest ENDP
_TEXT	ENDS
PUBLIC	_IsCmdSignalDelay
; Function compile flags: /Ogspy
;	COMDAT _IsCmdSignalDelay
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Delay$ = 12						; size = 2
_IsCmdSignalDelay PROC					; COMDAT
; Line 13791
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 13796
	push	57373					; 0000e01dH
	push	DWORD PTR _MrcData$[ebp]
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
	push	8
	movzx	esi, ax
; Line 13798
	xor	bl, bl
	pop	edi
$LL6@IsCmdSigna:
; Line 13800
	movzx	ax, bl
	add	ax, si
	movzx	eax, ax
	push	eax
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	add	bl, BYTE PTR _SignalInfoGenerated[eax+1]
	dec	edi
	pop	ecx
	jne	SHORT $LL6@IsCmdSigna
; Line 13803
	push	DWORD PTR _Delay$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
	cmp	ax, si
	jb	SHORT $LN1@IsCmdSigna
	movzx	ecx, bl
	movzx	edx, si
	movzx	eax, ax
	add	ecx, edx
	cmp	eax, ecx
	jl	SHORT $LN2@IsCmdSigna
$LN1@IsCmdSigna:
	mov	eax, 16384				; 00004000H
	cmp	WORD PTR _Delay$[ebp], ax
	je	SHORT $LN2@IsCmdSigna
	mov	eax, 57372				; 0000e01cH
	cmp	WORD PTR _Delay$[ebp], ax
	je	SHORT $LN2@IsCmdSigna
; Line 13807
	xor	al, al
	jmp	SHORT $LN7@IsCmdSigna
$LN2@IsCmdSigna:
; Line 13804
	mov	al, 1
$LN7@IsCmdSigna:
	pop	edi
	pop	esi
	pop	ebx
; Line 13808
	pop	ebp
	ret	0
_IsCmdSignalDelay ENDP
_TEXT	ENDS
PUBLIC	_IsCtlSignalDelay
; Function compile flags: /Ogspy
;	COMDAT _IsCtlSignalDelay
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Delay$ = 12						; size = 2
_IsCtlSignalDelay PROC					; COMDAT
; Line 13815
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 13820
	push	57377					; 0000e021H
	push	DWORD PTR _MrcData$[ebp]
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
	push	3
	movzx	esi, ax
; Line 13822
	xor	bl, bl
	pop	edi
$LL6@IsCtlSigna:
; Line 13824
	movzx	ax, bl
	add	ax, si
	movzx	eax, ax
	push	eax
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	add	bl, BYTE PTR _SignalInfoGenerated[eax+1]
	dec	edi
	pop	ecx
	jne	SHORT $LL6@IsCtlSigna
; Line 13827
	push	DWORD PTR _Delay$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
	cmp	ax, si
	jb	SHORT $LN1@IsCtlSigna
	movzx	ecx, bl
	movzx	edx, si
	movzx	eax, ax
	add	ecx, edx
	cmp	eax, ecx
	jl	SHORT $LN2@IsCtlSigna
$LN1@IsCtlSigna:
	mov	eax, 16385				; 00004001H
	cmp	WORD PTR _Delay$[ebp], ax
	je	SHORT $LN2@IsCtlSigna
	mov	eax, 57376				; 0000e020H
	cmp	WORD PTR _Delay$[ebp], ax
	je	SHORT $LN2@IsCtlSigna
; Line 13831
	xor	al, al
	jmp	SHORT $LN7@IsCtlSigna
$LN2@IsCtlSigna:
; Line 13828
	mov	al, 1
$LN7@IsCtlSigna:
	pop	edi
	pop	esi
	pop	ebx
; Line 13832
	pop	ebp
	ret	0
_IsCtlSignalDelay ENDP
_TEXT	ENDS
PUBLIC	_PrintFooter1DSweep
; Function compile flags: /Ogspy
;	COMDAT _PrintFooter1DSweep
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Dim1Index$ = 20					; size = 2
_Dim1Knobs$ = 24					; size = 1
_Results$ = 28						; size = 4
_PerBitSweep$ = 32					; size = 1
_PrintFooter1DSweep PROC				; COMDAT
; Line 13845
	push	ebp
	mov	ebp, esp
; Line 13854
	jmp	SHORT $LN28@PrintFoote
$LL17@PrintFoote:
; Line 13855
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN16@PrintFoote
; Line 13858
	push	DWORD PTR _Dim1Index$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsCmdSignalDelay
	pop	ecx
	pop	ecx
	test	al, al
	jne	SHORT $LN16@PrintFoote
; Line 13860
	cmp	BYTE PTR _Dim1Knobs$[ebp], al
	jbe	SHORT $LN16@PrintFoote
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
$LL12@PrintFoote:
; Line 13861
	xor	cl, cl
$LL8@PrintFoote:
	inc	cl
	cmp	cl, 18					; 00000012H
	jb	SHORT $LL8@PrintFoote
; Line 13860
	dec	eax
	jne	SHORT $LL12@PrintFoote
$LN16@PrintFoote:
; Line 13854
	inc	BYTE PTR _Channel$[ebp]
$LN28@PrintFoote:
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL17@PrintFoote
; Line 13883
	xor	eax, eax
; Line 13884
	pop	ebp
	ret	0
_PrintFooter1DSweep ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HLPDKILJ@BuildComposite?$AA@		; `string'
PUBLIC	_BuildComposite
EXTRN	_CheckPerBitSupport:PROC
;	COMDAT ??_C@_0P@HLPDKILJ@BuildComposite?$AA@
CONST	SEGMENT
??_C@_0P@HLPDKILJ@BuildComposite?$AA@ DB 'BuildComposite', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _BuildComposite
_TEXT	SEGMENT
_CompositeCount$ = -80					; size = 10
tv2693 = -68						; size = 4
tv2675 = -64						; size = 4
tv2664 = -60						; size = 4
tv1005 = -56						; size = 4
tv2484 = -52						; size = 4
tv2670 = -48						; size = 4
_Edge$ = -44						; size = 14
tv970 = -28						; size = 4
tv360 = -24						; size = 4
_IndBit$ = -20						; size = 1
tv1356 = -16						; size = 4
_IndStb$ = -12						; size = 1
tv1354 = -8						; size = 4
_ShrRnk$ = -4						; size = 1
_FirstAvailableRank$ = 0				; size = 2
_ShrChn$ = 4						; size = 1
_ShrStb$ = 8						; size = 1
_IndKnb$ = 12						; size = 1
tv2255 = 16						; size = 4
tv2396 = 20						; size = 4
_IndTiming$ = 24					; size = 1
tv2299 = 28						; size = 4
tv2475 = 32						; size = 4
tv2458 = 36						; size = 4
tv1029 = 42						; size = 1
tv1054 = 43						; size = 1
_IndChn$ = 44						; size = 1
_IndRnk$ = 48						; size = 1
_ShrStbRange$ = 52					; size = 2
_ShrKnbRange$ = 56					; size = 2
_ShrChnRange$ = 60					; size = 2
_ShrRnkRange$ = 64					; size = 2
_ShrBitRange$ = 68					; size = 2
_ShrTimingRange$ = 72					; size = 2
_Loop$ = 79						; size = 1
_ShrKnb$ = 80						; size = 1
_ShrBit$ = 81						; size = 1
_MaxBits$ = 82						; size = 1
_CountLoop$ = 83					; size = 1
_MrcData$ = 92						; size = 4
_SharedFlag$ = 96					; size = 2
_CompositeFlag$ = 100					; size = 1
_NumberCounts$ = 104					; size = 1
_MaxCount$ = 108					; size = 1
_Count$ = 112						; size = 4
_Results$ = 116						; size = 4
_Param$ = 120						; size = 4
_TestFunction$ = 124					; size = 4
_BuildComposite PROC					; COMDAT
; Line 14244
	push	ebp
	lea	ebp, DWORD PTR [esp-84]
	sub	esp, 164				; 000000a4H
	push	ebx
	push	esi
	push	edi
; Line 14277
	or	eax, -1
	lea	edi, DWORD PTR _FirstAvailableRank$[ebp]
	stosw
; Line 14278
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _MaxBits$[ebp], 0
	mov	BYTE PTR _IndChn$[ebp], 0
	lea	esi, DWORD PTR _FirstAvailableRank$[ebp]
$LL106@BuildCompo:
; Line 14279
	mov	BYTE PTR _IndRnk$[ebp], 0
$LL103@BuildCompo:
; Line 14280
	push	DWORD PTR _IndRnk$[ebp]
	push	DWORD PTR _IndChn$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN102@BuildCompo
; Line 14281
	cmp	BYTE PTR [esi], 255			; 000000ffH
	jne	SHORT $LN102@BuildCompo
; Line 14282
	mov	al, BYTE PTR _IndRnk$[ebp]
	mov	BYTE PTR [esi], al
$LN102@BuildCompo:
	inc	BYTE PTR _IndRnk$[ebp]
	cmp	BYTE PTR _IndRnk$[ebp], 4
	jb	SHORT $LL103@BuildCompo
	inc	BYTE PTR _IndChn$[ebp]
	inc	esi
	cmp	BYTE PTR _IndChn$[ebp], 2
	jb	SHORT $LL106@BuildCompo
; Line 14290
	mov	eax, DWORD PTR _SharedFlag$[ebp]
	and	eax, 32					; 00000020H
	mov	BYTE PTR _IndChn$[ebp], 0
; Line 14368
	mov	DWORD PTR tv2693[ebp], eax
$LL178@BuildCompo:
; Line 14291
	cmp	WORD PTR tv2693[ebp], 32		; 00000020H
	jne	SHORT $LN95@BuildCompo
; Line 14292
	mov	BYTE PTR _ShrChnRange$[ebp], 0
; Line 14293
	mov	BYTE PTR _ShrChnRange$[ebp+1], 2
; Line 14294
	jmp	SHORT $LN94@BuildCompo
$LN95@BuildCompo:
; Line 14295
	mov	al, BYTE PTR _IndChn$[ebp]
	mov	BYTE PTR _ShrChnRange$[ebp], al
; Line 14296
	inc	al
	mov	BYTE PTR _ShrChnRange$[ebp+1], al
$LN94@BuildCompo:
; Line 14298
	mov	BYTE PTR _IndRnk$[ebp], 0
$LL93@BuildCompo:
; Line 14299
	push	DWORD PTR _IndRnk$[ebp]
	push	DWORD PTR _IndChn$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN92@BuildCompo
; Line 14301
	test	BYTE PTR _SharedFlag$[ebp], 1
	je	SHORT $LN89@BuildCompo
; Line 14302
	movzx	eax, BYTE PTR _IndChn$[ebp]
	mov	al, BYTE PTR _FirstAvailableRank$[ebp+eax]
	cmp	BYTE PTR _IndRnk$[ebp], al
	ja	$LN92@BuildCompo
	cmp	al, 255					; 000000ffH
	je	$LN92@BuildCompo
; Line 14303
	mov	BYTE PTR _ShrRnkRange$[ebp], 0
; Line 14304
	mov	BYTE PTR _ShrRnkRange$[ebp+1], 4
; Line 14305
	jmp	SHORT $LN86@BuildCompo
$LN89@BuildCompo:
; Line 14306
	mov	al, BYTE PTR _IndRnk$[ebp]
	mov	BYTE PTR _ShrRnkRange$[ebp], al
; Line 14307
	inc	al
	mov	BYTE PTR _ShrRnkRange$[ebp+1], al
$LN86@BuildCompo:
; Line 14309
	cmp	BYTE PTR [edi+55393], 0
	mov	BYTE PTR _IndTiming$[ebp], 0
	jbe	$LN92@BuildCompo
	mov	eax, DWORD PTR _SharedFlag$[ebp]
	and	eax, 512				; 00000200H
; Line 14368
	mov	DWORD PTR tv2675[ebp], eax
$LL85@BuildCompo:
	mov	eax, 512				; 00000200H
	cmp	WORD PTR tv2675[ebp], ax
	jne	SHORT $LN82@BuildCompo
; Line 14311
	cmp	BYTE PTR _IndTiming$[ebp], 0
	ja	$LN84@BuildCompo
; Line 14313
	mov	al, BYTE PTR [edi+55393]
	mov	BYTE PTR _ShrTimingRange$[ebp], 0
; Line 14314
	jmp	SHORT $LN179@BuildCompo
$LN82@BuildCompo:
; Line 14315
	mov	al, BYTE PTR _IndTiming$[ebp]
	mov	BYTE PTR _ShrTimingRange$[ebp], al
; Line 14316
	inc	al
$LN179@BuildCompo:
	mov	BYTE PTR _ShrTimingRange$[ebp+1], al
; Line 14318
	mov	eax, DWORD PTR _SharedFlag$[ebp]
	and	eax, 2
	mov	BYTE PTR _IndKnb$[ebp], 0
; Line 14368
	mov	DWORD PTR tv2670[ebp], eax
$LL79@BuildCompo:
; Line 14319
	cmp	WORD PTR tv2670[ebp], 2
	jne	SHORT $LN76@BuildCompo
; Line 14320
	cmp	BYTE PTR _IndKnb$[ebp], 0
	ja	$LN78@BuildCompo
; Line 14321
	mov	BYTE PTR _ShrKnbRange$[ebp], 0
; Line 14322
	mov	BYTE PTR _ShrKnbRange$[ebp+1], 1
; Line 14323
	jmp	SHORT $LN74@BuildCompo
$LN76@BuildCompo:
; Line 14324
	mov	al, BYTE PTR _IndKnb$[ebp]
	mov	BYTE PTR _ShrKnbRange$[ebp], al
; Line 14325
	inc	al
	mov	BYTE PTR _ShrKnbRange$[ebp+1], al
$LN74@BuildCompo:
; Line 14327
	movzx	ecx, BYTE PTR _IndRnk$[ebp]
	movzx	eax, BYTE PTR _IndChn$[ebp]
	add	ecx, edi
	xor	bl, bl
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR _IndStb$[ebp], bl
	mov	DWORD PTR tv970[ebp], esi
	cmp	BYTE PTR [esi+55454], bl
	jbe	$LN78@BuildCompo
$LL73@BuildCompo:
; Line 14328
	lea	eax, DWORD PTR _MaxBits$[ebp]
	push	eax
	push	1
	push	DWORD PTR _IndStb$[ebp]
	push	DWORD PTR _IndRnk$[ebp]
	push	DWORD PTR _IndChn$[ebp]
	push	edi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN72@BuildCompo
; Line 14331
	mov	al, BYTE PTR _MaxBits$[ebp]
	cmp	al, BYTE PTR [esi+55462]
	jbe	SHORT $LN113@BuildCompo
; Line 14332
	mov	DWORD PTR [edi+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN113@BuildCompo:
; Line 14334
	test	BYTE PTR _SharedFlag$[ebp], 4
	je	SHORT $LN68@BuildCompo
; Line 14335
	test	bl, bl
	ja	$LN72@BuildCompo
; Line 14337
	mov	al, BYTE PTR [esi+55454]
	mov	BYTE PTR _ShrStbRange$[ebp], 0
; Line 14338
	jmp	SHORT $LN180@BuildCompo
$LN68@BuildCompo:
; Line 14340
	mov	al, bl
	mov	BYTE PTR _ShrStbRange$[ebp], bl
	inc	al
$LN180@BuildCompo:
	mov	BYTE PTR _ShrStbRange$[ebp+1], al
; Line 14342
	xor	al, al
	mov	BYTE PTR _IndBit$[ebp], al
	cmp	BYTE PTR _MaxBits$[ebp], al
	jbe	$LN72@BuildCompo
	mov	ecx, DWORD PTR _SharedFlag$[ebp]
	and	ecx, 8
; Line 14368
	mov	DWORD PTR tv2664[ebp], ecx
$LL177@BuildCompo:
; Line 14343
	cmp	WORD PTR tv2664[ebp], 8
	jne	SHORT $LN62@BuildCompo
; Line 14344
	test	al, al
	ja	$LN64@BuildCompo
; Line 14346
	mov	al, BYTE PTR _MaxBits$[ebp]
	mov	BYTE PTR _ShrBitRange$[ebp], 0
; Line 14347
	jmp	SHORT $LN181@BuildCompo
$LN62@BuildCompo:
; Line 14348
	mov	BYTE PTR _ShrBitRange$[ebp], al
; Line 14349
	inc	al
$LN181@BuildCompo:
	mov	BYTE PTR _ShrBitRange$[ebp+1], al
; Line 14354
	xor	eax, eax
; Line 14359
	test	BYTE PTR _CompositeFlag$[ebp], 3
	mov	WORD PTR _Edge$[ebp], ax
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _Edge$[ebp+2], ax
	je	$LN52@BuildCompo
; Line 14360
	xor	bl, bl
	cmp	BYTE PTR _NumberCounts$[ebp], bl
	jbe	SHORT $LN56@BuildCompo
	movzx	ecx, BYTE PTR _NumberCounts$[ebp]
	movzx	edx, ax
	mov	eax, edx
	shl	edx, 16					; 00000010H
	or	eax, edx
	shr	ecx, 1
	lea	edi, DWORD PTR _CompositeCount$[ebp]
	rep stosd
	adc	ecx, ecx
	rep stosw
$LL58@BuildCompo:
; Line 14362
	cmp	bl, 5
	jb	SHORT $LN115@BuildCompo
; Line 14363
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN115@BuildCompo:
	inc	bl
	cmp	bl, BYTE PTR _NumberCounts$[ebp]
	jb	SHORT $LL58@BuildCompo
$LN56@BuildCompo:
; Line 14367
	mov	al, BYTE PTR _CompositeFlag$[ebp]
	and	al, 4
	movzx	ax, al
	shl	ax, 2
	movzx	eax, ax
; Line 14368
	movzx	eax, ax
	inc	eax
	mov	BYTE PTR _Loop$[ebp], 0
	mov	DWORD PTR tv1005[ebp], eax
	test	eax, eax
	jle	$LN52@BuildCompo
$LL54@BuildCompo:
; Line 14369
	mov	al, BYTE PTR _ShrChnRange$[ebp]
	mov	BYTE PTR _ShrChn$[ebp], al
	cmp	al, BYTE PTR _ShrChnRange$[ebp+1]
	jae	$LN53@BuildCompo
	movzx	eax, al
	mov	DWORD PTR tv2475[ebp], eax
$LL51@BuildCompo:
; Line 14370
	mov	al, BYTE PTR _ShrRnkRange$[ebp]
	mov	BYTE PTR _ShrRnk$[ebp], al
	cmp	al, BYTE PTR _ShrRnkRange$[ebp+1]
	jae	$LN50@BuildCompo
	movzx	eax, al
	mov	DWORD PTR tv2458[ebp], eax
$LL48@BuildCompo:
; Line 14371
	push	DWORD PTR _ShrRnk$[ebp]
	push	DWORD PTR _ShrChn$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN47@BuildCompo
; Line 14372
	mov	al, BYTE PTR _ShrTimingRange$[ebp+1]
	cmp	BYTE PTR _ShrTimingRange$[ebp], al
	jae	$LN47@BuildCompo
	movzx	eax, BYTE PTR _ShrTimingRange$[ebp]
	add	eax, eax
	mov	DWORD PTR tv2396[ebp], eax
	mov	al, BYTE PTR _ShrTimingRange$[ebp+1]
	sub	al, BYTE PTR _ShrTimingRange$[ebp]
	movzx	eax, al
	mov	DWORD PTR tv360[ebp], eax
$LL44@BuildCompo:
; Line 14373
	mov	al, BYTE PTR _ShrKnbRange$[ebp]
	mov	BYTE PTR _ShrKnb$[ebp], al
	cmp	al, BYTE PTR _ShrKnbRange$[ebp+1]
	jae	$LN43@BuildCompo
	movzx	eax, al
	mov	DWORD PTR tv2299[ebp], eax
$LL41@BuildCompo:
; Line 14374
	cmp	BYTE PTR _ShrKnb$[ebp], 1
	jb	SHORT $LN117@BuildCompo
; Line 14375
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN117@BuildCompo:
; Line 14377
	mov	al, BYTE PTR _ShrStbRange$[ebp]
	mov	BYTE PTR _ShrStb$[ebp], al
	cmp	al, BYTE PTR _ShrStbRange$[ebp+1]
	jae	$LN40@BuildCompo
	mov	ecx, DWORD PTR tv2475[ebp]
	mov	eax, DWORD PTR tv2458[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR [eax+ecx+55454]
	mov	DWORD PTR tv2484[ebp], eax
	movzx	eax, BYTE PTR _ShrStbRange$[ebp]
	mov	DWORD PTR tv2255[ebp], eax
$LL37@BuildCompo:
; Line 14378
	mov	al, BYTE PTR _ShrStb$[ebp]
	mov	ecx, DWORD PTR tv2484[ebp]
	cmp	al, BYTE PTR [ecx]
	jbe	SHORT $LN172@BuildCompo
; Line 14379
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN172@BuildCompo:
; Line 14381
	push	0
	push	0
	push	DWORD PTR _ShrStb$[ebp]
	push	DWORD PTR _ShrRnk$[ebp]
	push	DWORD PTR _ShrChn$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN36@BuildCompo
; Line 14384
	mov	al, BYTE PTR _ShrBitRange$[ebp]
	mov	BYTE PTR _ShrBit$[ebp], al
	cmp	al, BYTE PTR _ShrBitRange$[ebp+1]
	jae	$LN36@BuildCompo
	mov	al, BYTE PTR _CompositeFlag$[ebp]
	movzx	edi, BYTE PTR _ShrBitRange$[ebp]
	and	al, 2
	mov	BYTE PTR tv1029[ebp], al
	mov	al, BYTE PTR _CompositeFlag$[ebp]
	and	al, 1
	mov	BYTE PTR tv1054[ebp], al
$LL32@BuildCompo:
; Line 14385
	cmp	BYTE PTR _ShrBit$[ebp], 0
	jbe	SHORT $LN173@BuildCompo
; Line 14386
	push	14386					; 00003832H
	push	OFFSET ??_C@_0P@HLPDKILJ@BuildComposite?$AA@
	push	DWORD PTR _MrcData$[ebp]
	call	_CheckPerBitSupport
	add	esp, 12					; 0000000cH
$LN173@BuildCompo:
; Line 14388
	cmp	BYTE PTR _ShrBit$[ebp], 7
	jbe	SHORT $LN121@BuildCompo
; Line 14389
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN121@BuildCompo:
; Line 14395
	cmp	BYTE PTR _Loop$[ebp], 0
	jne	$LN27@BuildCompo
; Line 14399
	cmp	BYTE PTR tv1029[ebp], 2
	jne	SHORT $LN23@BuildCompo
; Line 14400
	mov	ecx, DWORD PTR tv2396[ebp]
	mov	eax, DWORD PTR tv2475[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR tv2458[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv2299[ebp]
	mov	ecx, DWORD PTR _Results$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2255[ebp]
	lea	eax, DWORD PTR [edi+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, WORD PTR [eax]
	movzx	eax, WORD PTR [eax+2]
	cmp	cx, ax
	ja	SHORT $LN23@BuildCompo
; Line 14401
	cmp	WORD PTR _Edge$[ebp], cx
	jae	SHORT $LN24@BuildCompo
; Line 14402
	mov	WORD PTR _Edge$[ebp], cx
$LN24@BuildCompo:
; Line 14403
	cmp	WORD PTR _Edge$[ebp+2], ax
	jbe	SHORT $LN23@BuildCompo
; Line 14404
	mov	WORD PTR _Edge$[ebp+2], ax
$LN23@BuildCompo:
; Line 14410
	cmp	BYTE PTR tv1054[ebp], 1
	jne	$LN31@BuildCompo
; Line 14411
	cmp	BYTE PTR _NumberCounts$[ebp], 0
	mov	BYTE PTR _CountLoop$[ebp], 0
	jbe	$LN31@BuildCompo
	mov	ecx, DWORD PTR tv2396[ebp]
	mov	eax, DWORD PTR tv2475[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR tv2458[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv2299[ebp]
	mov	DWORD PTR tv1356[ebp], 2
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2255[ebp]
	lea	esi, DWORD PTR [edi+eax*8]
	add	esi, DWORD PTR _Count$[ebp]
; Line 14420
	and	DWORD PTR tv1354[ebp], 0
$LL175@BuildCompo:
; Line 14412
	cmp	BYTE PTR _CountLoop$[ebp], 5
	jb	SHORT $LN123@BuildCompo
; Line 14413
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN123@BuildCompo:
; Line 14415
	movzx	ax, BYTE PTR [esi]
	mov	ebx, DWORD PTR tv1354[ebp]
	lea	ebx, DWORD PTR _CompositeCount$[ebp+ebx]
	cmp	ax, WORD PTR [ebx]
	jae	SHORT $LN20@BuildCompo
; Line 14417
	cmp	DWORD PTR tv1356[ebp], 7
	mov	WORD PTR [ebx], ax
	jl	SHORT $LN125@BuildCompo
; Line 14418
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN125@BuildCompo:
; Line 14420
	mov	ax, WORD PTR [ebx]
	mov	ecx, DWORD PTR tv1354[ebp]
	mov	WORD PTR _Edge$[ebp+ecx+4], ax
$LN20@BuildCompo:
	inc	BYTE PTR _CountLoop$[ebp]
	mov	al, BYTE PTR _CountLoop$[ebp]
	inc	DWORD PTR tv1356[ebp]
	add	DWORD PTR tv1354[ebp], 2
	add	esi, 2304				; 00000900H
	cmp	al, BYTE PTR _NumberCounts$[ebp]
	jb	SHORT $LL175@BuildCompo
; Line 14424
	jmp	$LN31@BuildCompo
$LN27@BuildCompo:
; Line 14429
	cmp	BYTE PTR tv1029[ebp], 2
	jne	SHORT $LN14@BuildCompo
; Line 14430
	mov	ecx, DWORD PTR tv2396[ebp]
	mov	eax, DWORD PTR tv2475[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR tv2458[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv2299[ebp]
	mov	ecx, DWORD PTR _Results$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2255[ebp]
	lea	eax, DWORD PTR [edi+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	cx, WORD PTR _Edge$[ebp]
	mov	WORD PTR [eax], cx
; Line 14431
	mov	cx, WORD PTR _Edge$[ebp+2]
	mov	WORD PTR [eax+2], cx
$LN14@BuildCompo:
; Line 14437
	cmp	BYTE PTR tv1054[ebp], 1
	jne	SHORT $LN31@BuildCompo
; Line 14438
	cmp	BYTE PTR _NumberCounts$[ebp], 0
	mov	BYTE PTR _CountLoop$[ebp], 0
	jbe	SHORT $LN31@BuildCompo
	mov	ecx, DWORD PTR tv2396[ebp]
	mov	eax, DWORD PTR tv2475[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR tv2458[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	add	eax, DWORD PTR tv2299[ebp]
	lea	ebx, DWORD PTR _CompositeCount$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2255[ebp]
	lea	esi, DWORD PTR [edi+eax*8]
	add	esi, DWORD PTR _Count$[ebp]
$LL12@BuildCompo:
; Line 14439
	cmp	BYTE PTR _CountLoop$[ebp], 5
	jb	SHORT $LN127@BuildCompo
; Line 14440
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN127@BuildCompo:
; Line 14442
	movzx	ax, BYTE PTR _MaxCount$[ebp]
	cmp	WORD PTR [ebx], ax
	jae	SHORT $LN8@BuildCompo
; Line 14443
	xor	eax, eax
	mov	WORD PTR [ebx], ax
$LN8@BuildCompo:
; Line 14445
	mov	al, BYTE PTR [ebx]
	inc	BYTE PTR _CountLoop$[ebp]
	mov	BYTE PTR [esi], al
	mov	al, BYTE PTR _CountLoop$[ebp]
	add	esi, 2304				; 00000900H
	inc	ebx
	inc	ebx
	cmp	al, BYTE PTR _NumberCounts$[ebp]
	jb	SHORT $LL12@BuildCompo
$LN31@BuildCompo:
; Line 14384
	inc	BYTE PTR _ShrBit$[ebp]
	mov	al, BYTE PTR _ShrBit$[ebp]
	inc	edi
	cmp	al, BYTE PTR _ShrBitRange$[ebp+1]
	jb	$LL32@BuildCompo
$LN36@BuildCompo:
; Line 14377
	inc	BYTE PTR _ShrStb$[ebp]
	mov	al, BYTE PTR _ShrStb$[ebp]
	inc	DWORD PTR tv2255[ebp]
	cmp	al, BYTE PTR _ShrStbRange$[ebp+1]
	jb	$LL37@BuildCompo
$LN40@BuildCompo:
; Line 14373
	inc	BYTE PTR _ShrKnb$[ebp]
	mov	al, BYTE PTR _ShrKnb$[ebp]
	inc	DWORD PTR tv2299[ebp]
	cmp	al, BYTE PTR _ShrKnbRange$[ebp+1]
	jb	$LL41@BuildCompo
$LN43@BuildCompo:
; Line 14372
	add	DWORD PTR tv2396[ebp], 2
	dec	DWORD PTR tv360[ebp]
	jne	$LL44@BuildCompo
$LN47@BuildCompo:
; Line 14370
	inc	BYTE PTR _ShrRnk$[ebp]
	mov	al, BYTE PTR _ShrRnk$[ebp]
	inc	DWORD PTR tv2458[ebp]
	cmp	al, BYTE PTR _ShrRnkRange$[ebp+1]
	jb	$LL48@BuildCompo
$LN50@BuildCompo:
; Line 14369
	inc	BYTE PTR _ShrChn$[ebp]
	mov	al, BYTE PTR _ShrChn$[ebp]
	inc	DWORD PTR tv2475[ebp]
	cmp	al, BYTE PTR _ShrChnRange$[ebp+1]
	jb	$LL51@BuildCompo
$LN53@BuildCompo:
; Line 14368
	inc	BYTE PTR _Loop$[ebp]
	movzx	eax, BYTE PTR _Loop$[ebp]
	cmp	eax, DWORD PTR tv1005[ebp]
	jl	$LL54@BuildCompo
$LN52@BuildCompo:
; Line 14462
	cmp	DWORD PTR _TestFunction$[ebp], -1
	je	SHORT $LN174@BuildCompo
; Line 14474
	push	DWORD PTR _Param$[ebp]
	lea	eax, DWORD PTR _Edge$[ebp]
	push	DWORD PTR _IndTiming$[ebp]
	push	DWORD PTR _IndBit$[ebp]
	push	DWORD PTR _IndStb$[ebp]
	push	DWORD PTR _IndKnb$[ebp]
	push	DWORD PTR _IndRnk$[ebp]
	push	DWORD PTR _IndChn$[ebp]
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	call	DWORD PTR _TestFunction$[ebp]
	add	esp, 36					; 00000024H
$LN174@BuildCompo:
	mov	esi, DWORD PTR tv970[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
$LN64@BuildCompo:
	mov	al, BYTE PTR _IndBit$[ebp]
	inc	al
	mov	BYTE PTR _IndBit$[ebp], al
	cmp	al, BYTE PTR _MaxBits$[ebp]
	jb	$LL177@BuildCompo
; Line 14342
	mov	bl, BYTE PTR _IndStb$[ebp]
$LN72@BuildCompo:
; Line 14327
	inc	bl
	mov	BYTE PTR _IndStb$[ebp], bl
	cmp	bl, BYTE PTR [esi+55454]
	jb	$LL73@BuildCompo
$LN78@BuildCompo:
; Line 14318
	inc	BYTE PTR _IndKnb$[ebp]
	cmp	BYTE PTR _IndKnb$[ebp], 1
	jb	$LL79@BuildCompo
$LN84@BuildCompo:
; Line 14309
	inc	BYTE PTR _IndTiming$[ebp]
	mov	al, BYTE PTR _IndTiming$[ebp]
	cmp	al, BYTE PTR [edi+55393]
	jb	$LL85@BuildCompo
$LN92@BuildCompo:
; Line 14298
	inc	BYTE PTR _IndRnk$[ebp]
	cmp	BYTE PTR _IndRnk$[ebp], 4
	jb	$LL93@BuildCompo
	inc	BYTE PTR _IndChn$[ebp]
	cmp	BYTE PTR _IndChn$[ebp], 2
	jb	$LL178@BuildCompo
	pop	edi
	pop	esi
	pop	ebx
; Line 14482
	add	ebp, 84					; 00000054H
	leave
	ret	0
_BuildComposite ENDP
_TEXT	ENDS
PUBLIC	_GetSet
; Function compile flags: /Ogspy
;	COMDAT _GetSet
_TEXT	SEGMENT
tv152 = -20						; size = 4
tv457 = -16						; size = 4
_value$ = -12						; size = 4
_bit$ = -5						; size = 1
_BitLoop$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_index$ = 43						; size = 1
_GetSet	PROC						; COMDAT
; Line 15073
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 15085
	and	DWORD PTR _value$[ebp], 0
	push	esi
; Line 15090
	mov	esi, DWORD PTR _Param$[ebp]
	movzx	eax, BYTE PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	imul	eax, 45					; 0000002dH
	mov	al, BYTE PTR [eax+ecx+31]
	mov	ecx, DWORD PTR [esi+12]
	movzx	ecx, WORD PTR [ecx]
	push	edi
; Line 15100
	mov	BYTE PTR _index$[ebp], 0
$LL15@GetSet:
; Line 15101
	movzx	edx, BYTE PTR _index$[ebp]
	mov	edi, DWORD PTR _Range$[ebp]
	cmp	WORD PTR [edi+edx*2+4], cx
	je	SHORT $LN22@GetSet
	inc	BYTE PTR _index$[ebp]
	cmp	BYTE PTR _index$[ebp], 2
	jb	SHORT $LL15@GetSet
; Line 15136
	or	eax, -1
	jmp	$LN17@GetSet
$LN22@GetSet:
; Line 15108
	dec	al
	cmp	al, 2
	jb	$LN1@GetSet
	movzx	edx, BYTE PTR _index$[ebp]
	movzx	ecx, al
	mov	edi, ecx
	add	edx, ecx
	imul	edi, 45					; 0000002dH
	dec	al
	movzx	eax, al
	lea	ecx, DWORD PTR [edx+edx-6]
	push	ebx
	mov	ebx, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR tv457[ebp], ecx
	mov	DWORD PTR tv152[ebp], eax
$LL28@GetSet:
; Line 15112
	cmp	BYTE PTR _index$[ebp], 0
	jne	SHORT $LN8@GetSet
; Line 15113
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	eax, DWORD PTR [esi]
	movzx	eax, WORD PTR [edi+eax]
	push	3
	push	eax
	movzx	eax, BYTE PTR [ebx+55392]
	push	255					; 000000ffH
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	ebx
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
; Line 15114
	jmp	SHORT $LN7@GetSet
$LN8@GetSet:
; Line 15115
	movzx	eax, BYTE PTR _Channel$[ebp]
	add	eax, DWORD PTR tv457[ebp]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Knob$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	mov	ecx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [ecx+eax*8]
	movzx	ecx, BYTE PTR _Bit$[ebp]
	movzx	eax, BYTE PTR [eax+ecx]
	mov	DWORD PTR _value$[ebp], eax
$LN7@GetSet:
; Line 15118
	mov	eax, DWORD PTR [esi]
	mov	al, BYTE PTR [edi+eax+23]
; Line 15120
	mov	cl, BYTE PTR _Bit$[ebp]
	and	al, 24					; 00000018H
	cmp	al, 24					; 00000018H
	jne	SHORT $LN6@GetSet
; Line 15119
	mov	BYTE PTR _BitLoop$[ebp], 8
; Line 15120
	jmp	SHORT $LN5@GetSet
$LN6@GetSet:
; Line 15121
	mov	al, cl
	inc	al
	mov	BYTE PTR _BitLoop$[ebp], al
$LN5@GetSet:
; Line 15123
	mov	BYTE PTR _bit$[ebp], cl
	cmp	cl, BYTE PTR _BitLoop$[ebp]
	jae	SHORT $LN10@GetSet
$LL27@GetSet:
; Line 15124
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	eax, DWORD PTR [esi]
	movzx	eax, WORD PTR [edi+eax]
	push	24					; 00000018H
	push	eax
	movzx	eax, BYTE PTR [ebx+55392]
	push	255					; 000000ffH
	push	eax
	push	DWORD PTR _bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	ebx
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	inc	BYTE PTR _bit$[ebp]
	mov	al, BYTE PTR _bit$[ebp]
	cmp	al, BYTE PTR _BitLoop$[ebp]
	jb	SHORT $LL27@GetSet
$LN10@GetSet:
; Line 15108
	sub	DWORD PTR tv457[ebp], 2
	sub	edi, 45					; 0000002dH
	dec	DWORD PTR tv152[ebp]
	jne	$LL28@GetSet
	pop	ebx
$LN1@GetSet:
; Line 15139
	xor	eax, eax
$LN17@GetSet:
	pop	edi
	pop	esi
; Line 15140
	leave
	ret	0
_GetSet	ENDP
_TEXT	ENDS
PUBLIC	_PrintCount
; Function compile flags: /Ogspy
;	COMDAT _PrintCount
_TEXT	SEGMENT
_value$ = -8						; size = 4
_index$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_PrintCount PROC					; COMDAT
; Line 15170
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 15183
	mov	ecx, DWORD PTR _Param$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	al, BYTE PTR [eax+31]
	dec	al
	mov	BYTE PTR _index$[ebp], al
	je	$LN11@PrintCount
	push	ebx
	push	esi
	movzx	ebx, al
	push	edi
	imul	ebx, 45					; 0000002dH
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	esi, 255				; 000000ffH
	jmp	SHORT $LN13@PrintCount
$LL23@PrintCount:
	mov	al, BYTE PTR _index$[ebp]
$LN13@PrintCount:
; Line 15184
	mov	edx, DWORD PTR [ecx]
	cmp	al, BYTE PTR [edx+31]
	jb	SHORT $LN17@PrintCount
; Line 15185
	mov	DWORD PTR [edi+65333], 40		; 00000028H
	call	_MrcDeadLoop
	mov	ecx, DWORD PTR _Param$[ebp]
$LN17@PrintCount:
; Line 15187
	mov	eax, DWORD PTR [ecx]
	mov	cl, BYTE PTR [eax+43]
	cmp	cl, 1
	jbe	SHORT $LN8@PrintCount
; Line 15189
	movzx	ecx, cl
	imul	ecx, 45					; 0000002dH
	movzx	eax, WORD PTR [ecx+eax]
	lea	edx, DWORD PTR _value$[ebp]
	push	edx
; Line 15190
	jmp	SHORT $LN24@PrintCount
$LN8@PrintCount:
; Line 15192
	movzx	eax, WORD PTR [ebx+eax]
	lea	ecx, DWORD PTR _value$[ebp]
	push	ecx
$LN24@PrintCount:
	push	3
	push	eax
	movzx	eax, BYTE PTR [edi+55392]
	push	esi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	edi
	call	_GetSetDdrioGroup
	mov	ecx, DWORD PTR _Param$[ebp]
	add	esp, 48					; 00000030H
	dec	BYTE PTR _index$[ebp]
	sub	ebx, 45					; 0000002dH
	cmp	BYTE PTR _index$[ebp], 0
	ja	SHORT $LL23@PrintCount
	pop	edi
	pop	esi
	pop	ebx
$LN11@PrintCount:
; Line 15209
	mov	edx, DWORD PTR _Range$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	dx, WORD PTR [edx+4]
	cmp	dx, WORD PTR [eax]
	je	SHORT $LN4@PrintCount
; Line 15210
	mov	BYTE PTR [ecx+12], 0
$LN4@PrintCount:
; Line 15219
	xor	eax, eax
; Line 15220
	leave
	ret	0
_PrintCount ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@PPPKKAFK@SetCriteria2?$AA@		; `string'
PUBLIC	_SetCriteria2
;	COMDAT ??_C@_0N@PPPKKAFK@SetCriteria2?$AA@
CONST	SEGMENT
??_C@_0N@PPPKKAFK@SetCriteria2?$AA@ DB 'SetCriteria2', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _SetCriteria2
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_BitLoop$ = 15						; size = 1
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_i$ = 43						; size = 1
_MaxBit$ = 43						; size = 1
_SetCriteria2 PROC					; COMDAT
; Line 15251
	push	ebp
	mov	ebp, esp
; Line 15265
	mov	ecx, DWORD PTR _Range$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _Param$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	ax, WORD PTR [eax]
	mov	ebx, DWORD PTR [esi+12]
	cmp	ax, WORD PTR [ecx+4]
; Line 15269
	je	$LN12@SetCriteri
; Line 15275
	movzx	eax, BYTE PTR [esi+4]
	imul	eax, 45					; 0000002dH
	mov	al, BYTE PTR [eax+ebx+23]
	and	al, 24					; 00000018H
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	cmp	al, 24					; 00000018H
	jne	SHORT $LN5@SetCriteri
; Line 15276
	lea	eax, DWORD PTR _MaxBit$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_IsStrobeValid
; Line 15277
	mov	al, BYTE PTR _MaxBit$[ebp]
; Line 15278
	push	15278					; 00003baeH
	push	OFFSET ??_C@_0N@PPPKKAFK@SetCriteria2?$AA@
	push	edi
	mov	BYTE PTR _BitLoop$[ebp], al
	call	_CheckPerBitSupport
	add	esp, 36					; 00000024H
; Line 15279
	jmp	SHORT $LN4@SetCriteri
$LN5@SetCriteri:
; Line 15280
	mov	BYTE PTR _BitLoop$[ebp], 1
$LN4@SetCriteri:
; Line 15287
	cmp	BYTE PTR _BitLoop$[ebp], 0
	mov	BYTE PTR _i$[ebp], 0
	jbe	SHORT $LN1@SetCriteri
$LL11@SetCriteri:
; Line 15289
	lea	eax, DWORD PTR [esi+8]
	push	eax
	movzx	eax, BYTE PTR [esi+4]
	imul	eax, 45					; 0000002dH
	movzx	eax, WORD PTR [eax+ebx]
	push	24					; 00000018H
	push	eax
	movzx	eax, BYTE PTR [edi+55392]
	push	255					; 000000ffH
	push	eax
	mov	al, BYTE PTR _i$[ebp]
	add	al, BYTE PTR _Bit$[ebp]
	movzx	eax, al
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	edi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	inc	BYTE PTR _i$[ebp]
	mov	al, BYTE PTR _i$[ebp]
	cmp	al, BYTE PTR _BitLoop$[ebp]
	jb	SHORT $LL11@SetCriteri
$LN1@SetCriteri:
	pop	edi
$LN12@SetCriteri:
	pop	esi
; Line 15291
	xor	eax, eax
	pop	ebx
; Line 15292
	pop	ebp
	ret	0
_SetCriteria2 ENDP
_TEXT	ENDS
PUBLIC	_CalculateCenter2
; Function compile flags: /Ogspy
;	COMDAT _CalculateCenter2
_TEXT	SEGMENT
_Param$ = -48						; size = 48
_MrcData$ = 8						; size = 4
_ResultsV$ = 12						; size = 4
tv191 = 16						; size = 4
_Flags$ = 16						; size = 2
_NumberSamples$ = 20					; size = 1
_PiCenter$ = 24						; size = 4
_Max$ = 28						; size = 4
_CalculateCenter2 PROC					; COMDAT
; Line 15782
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	ebx
; Line 15790
	xor	ebx, ebx
	push	esi
	mov	esi, DWORD PTR _Flags$[ebp]
	cmp	BYTE PTR _NumberSamples$[ebp], bl
	jbe	SHORT $LN1@CalculateC
	mov	eax, DWORD PTR _ResultsV$[ebp]
	push	edi
	movzx	edi, BYTE PTR _NumberSamples$[ebp]
	mov	DWORD PTR tv191[ebp], eax
$LL8@CalculateC:
; Line 15792
	push	-1
	push	ebx
	push	DWORD PTR tv191[ebp]
	push	ebx
	push	ebx
	push	1
	push	6
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	DWORD PTR tv191[ebp], 9216		; 00002400H
	add	esp, 36					; 00000024H
	dec	edi
	jne	SHORT $LL8@CalculateC
	pop	edi
$LN1@CalculateC:
; Line 15799
	movzx	ax, BYTE PTR _NumberSamples$[ebp]
	mov	WORD PTR _Param$[ebp+12], ax
; Line 15800
	mov	eax, DWORD PTR _ResultsV$[ebp]
	mov	DWORD PTR _Param$[ebp+8], eax
; Line 15801
	mov	eax, DWORD PTR _Max$[ebp]
; Line 15806
	push	OFFSET _FinalCalculateCenter2
	mov	DWORD PTR _Param$[ebp], eax
	mov	eax, DWORD PTR _PiCenter$[ebp]
	mov	DWORD PTR _Param$[ebp+4], eax
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	push	1
	push	ebx
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	mov	WORD PTR _Param$[ebp+14], si
	call	_BuildComposite
	add	esp, 36					; 00000024H
	pop	esi
; Line 15808
	xor	eax, eax
	pop	ebx
; Line 15809
	leave
	ret	0
_CalculateCenter2 ENDP
_TEXT	ENDS
PUBLIC	_CalculateCenter1
; Function compile flags: /Ogspy
;	COMDAT _CalculateCenter1
_TEXT	SEGMENT
_Min$ = -11568						; size = 4608
_Max$ = -6960						; size = 4608
_AccumWeights$ = -2352					; size = 2304
_Param$ = -48						; size = 48
_MrcData$ = 8						; size = 4
_ResultsV$ = 12						; size = 4
_Flags$ = 16						; size = 2
_EyeMask$ = 20						; size = 4
_SelectedEyeMask$ = 24					; size = 1
_PICenter$ = 28						; size = 4
_CalculateCenter1 PROC					; COMDAT
; Line 15834
	push	ebp
	mov	ebp, esp
	sub	esp, 11568				; 00002d30H
	push	ebx
	push	esi
	push	edi
; Line 15845
	mov	esi, 4608				; 00001200H
	push	esi
	lea	eax, DWORD PTR _Min$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
; Line 15846
	push	esi
	xor	edi, edi
	lea	eax, DWORD PTR _Max$[ebp]
	push	edi
	push	eax
	call	_memset
; Line 15847
	push	2304					; 00000900H
	lea	eax, DWORD PTR _AccumWeights$[ebp]
	push	edi
	push	eax
	call	_memset
; Line 15848
	push	esi
	push	edi
	push	DWORD PTR _PICenter$[ebp]
	call	_MmrcMemset
	add	esp, 48					; 00000030H
	push	2
	pop	eax
$LL11@CalculateC@2:
; Line 15853
	dec	eax
; Line 15854
	lea	ecx, DWORD PTR _Max$[ebp]
	mov	DWORD PTR _Param$[ebp+4], ecx
; Line 15855
	lea	ecx, DWORD PTR _Min$[ebp]
	mov	DWORD PTR _Param$[ebp], ecx
	jne	SHORT $LL11@CalculateC@2
; Line 15858
	movzx	eax, BYTE PTR _SelectedEyeMask$[ebp]
	mov	edi, DWORD PTR _EyeMask$[ebp]
	xor	bl, bl
	lea	esi, DWORD PTR [edi+eax*4]
	xor	eax, eax
	jmp	SHORT $LN43@CalculateC@2
$LL41@CalculateC@2:
; Line 15861
	push	OFFSET _FindMaxMinEW
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	movzx	eax, bl
	imul	eax, 9216				; 00002400H
	add	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	movzx	eax, BYTE PTR [edi]
	push	0
	push	eax
	push	1
	push	2
	push	DWORD PTR _Flags$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 36					; 00000024H
	inc	bl
	movzx	ax, bl
$LN43@CalculateC@2:
; Line 15858
	cmp	ax, WORD PTR [esi]
	jb	SHORT $LL41@CalculateC@2
; Line 15869
	lea	eax, DWORD PTR _Max$[ebp]
	mov	DWORD PTR _Param$[ebp+4], eax
; Line 15870
	lea	eax, DWORD PTR _Min$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 15871
	mov	eax, DWORD PTR _PICenter$[ebp]
	mov	DWORD PTR _Param$[ebp+8], eax
; Line 15872
	lea	eax, DWORD PTR _AccumWeights$[ebp]
	mov	DWORD PTR _Param$[ebp+12], eax
; Line 15874
	xor	bl, bl
	xor	eax, eax
	jmp	SHORT $LN45@CalculateC@2
$LL42@CalculateC@2:
; Line 15881
	movzx	ecx, cx
	movzx	eax, bl
	dec	ecx
	cmp	eax, ecx
	jne	SHORT $LN2@CalculateC@2
; Line 15882
	mov	BYTE PTR _Param$[ebp+16], 1
; Line 15883
	mov	BYTE PTR _Param$[ebp+17], 1
; Line 15884
	jmp	SHORT $LN1@CalculateC@2
$LN2@CalculateC@2:
; Line 15885
	mov	BYTE PTR _Param$[ebp+16], 0
; Line 15886
	mov	BYTE PTR _Param$[ebp+17], 0
$LN1@CalculateC@2:
; Line 15889
	imul	eax, 9216				; 00002400H
	add	eax, DWORD PTR _ResultsV$[ebp]
	push	OFFSET _ApplyMaxMinEWWeight
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	push	eax
	movzx	eax, BYTE PTR [edi]
	push	0
	push	eax
	push	1
	push	2
	push	DWORD PTR _Flags$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 36					; 00000024H
	inc	bl
	movzx	ax, bl
$LN45@CalculateC@2:
	movzx	ecx, WORD PTR [esi]
	cmp	ax, cx
	jb	SHORT $LL42@CalculateC@2
	pop	edi
	pop	esi
; Line 15892
	xor	eax, eax
	pop	ebx
; Line 15893
	leave
	ret	0
_CalculateCenter1 ENDP
_TEXT	ENDS
PUBLIC	_ProgramSetGetLinear
; Function compile flags: /Ogspy
;	COMDAT _ProgramSetGetLinear
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
_ProgramSetGetLinear PROC				; COMDAT
; Line 16209
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 16211
	mov	esi, DWORD PTR _Param$[ebp]
	cmp	BYTE PTR [esi+8], 0
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	ebx, 255				; 000000ffH
	jne	SHORT $LN3@ProgramSet
; Line 16212
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Knob$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	mov	ecx, DWORD PTR [esi+12]
	lea	eax, DWORD PTR [ecx+eax*8]
	movzx	ecx, BYTE PTR _Bit$[ebp]
	cmp	BYTE PTR [eax+ecx], 1
; Line 16213
	je	SHORT $LN1@ProgramSet
; Line 16214
	movzx	eax, WORD PTR [esi+6]
	push	esi
	push	24					; 00000018H
	push	eax
	movzx	eax, BYTE PTR [edi+55392]
	push	ebx
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	edi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
$LN3@ProgramSet:
; Line 16217
	cmp	BYTE PTR [esi+8], 1
	jne	SHORT $LN1@ProgramSet
; Line 16218
	movzx	eax, WORD PTR [esi+6]
	push	esi
	push	24					; 00000018H
	push	eax
	movzx	eax, BYTE PTR [edi+55392]
	push	ebx
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	edi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
$LN1@ProgramSet:
	pop	edi
	pop	esi
; Line 16221
	xor	eax, eax
	pop	ebx
; Line 16222
	pop	ebp
	ret	0
_ProgramSetGetLinear ENDP
_TEXT	ENDS
PUBLIC	_PrintHiLow
; Function compile flags: /Ogspy
;	COMDAT _PrintHiLow
_TEXT	SEGMENT
_value$ = -36						; size = 4
tv147 = -32						; size = 4
tv369 = -28						; size = 4
tv364 = -24						; size = 4
tv304 = -20						; size = 4
_Strobe$ = -13						; size = 1
_Channel$ = -9						; size = 1
_Rank$ = -5						; size = 1
_Bit$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Param$ = 12						; size = 4
_PrintHiLow PROC					; COMDAT
; Line 17123
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 17133
	and	DWORD PTR tv364[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	mov	edi, DWORD PTR _Param$[ebp]
	mov	BYTE PTR _Channel$[ebp], 0
	mov	ebx, 255				; 000000ffH
$LL37@PrintHiLow:
; Line 17134
	and	DWORD PTR tv304[ebp], 0
	mov	BYTE PTR _Rank$[ebp], 0
$LL19@PrintHiLow:
; Line 17135
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN18@PrintHiLow
	mov	eax, DWORD PTR tv364[ebp]
	mov	ecx, DWORD PTR tv304[ebp]
	add	eax, ecx
	add	eax, esi
	mov	DWORD PTR tv369[ebp], eax
; Line 17137
	mov	DWORD PTR tv147[ebp], 2
$LL12@PrintHiLow:
; Line 17138
	cmp	BYTE PTR [eax+55454], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	$LN11@PrintHiLow
$LL9@PrintHiLow:
; Line 17139
	cmp	BYTE PTR [eax+55462], 0
	mov	BYTE PTR _Bit$[ebp], 0
	jbe	$LN8@PrintHiLow
$LL6@PrintHiLow:
; Line 17143
	cmp	BYTE PTR _Bit$[ebp], 0
	jne	SHORT $LN5@PrintHiLow
; Line 17146
	mov	ecx, DWORD PTR [edi+4]
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	movzx	eax, BYTE PTR [edi+16]
	imul	eax, 45					; 0000002dH
	movzx	eax, WORD PTR [eax+ecx]
	push	3
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	ebx
	push	eax
	xor	eax, eax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	eax
	push	esi
	call	_GetSetDdrioGroup
; Line 17148
	mov	al, BYTE PTR [esi+55393]
	add	esp, 48					; 00000030H
	cmp	al, 1
	jbe	SHORT $LN38@PrintHiLow
	mov	cl, BYTE PTR [edi+16]
	cmp	cl, al
	jae	SHORT $LN38@PrintHiLow
; Line 17151
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	movzx	eax, cl
	mov	ecx, DWORD PTR [edi+4]
	inc	eax
	imul	eax, 45					; 0000002dH
	movzx	eax, WORD PTR [eax+ecx]
	push	3
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	ebx
	push	eax
	xor	eax, eax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	eax
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
$LN38@PrintHiLow:
	mov	eax, DWORD PTR tv369[ebp]
$LN5@PrintHiLow:
; Line 17139
	inc	BYTE PTR _Bit$[ebp]
	mov	cl, BYTE PTR _Bit$[ebp]
	cmp	cl, BYTE PTR [eax+55462]
	jb	$LL6@PrintHiLow
$LN8@PrintHiLow:
; Line 17138
	inc	BYTE PTR _Strobe$[ebp]
	mov	cl, BYTE PTR _Strobe$[ebp]
	cmp	cl, BYTE PTR [eax+55454]
	jb	$LL9@PrintHiLow
$LN11@PrintHiLow:
; Line 17137
	dec	DWORD PTR tv147[ebp]
	jne	$LL12@PrintHiLow
$LN18@PrintHiLow:
; Line 17134
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv304[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL19@PrintHiLow
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv364[ebp], 4
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL37@PrintHiLow
	pop	edi
	pop	esi
; Line 17166
	xor	eax, eax
	pop	ebx
; Line 17167
	leave
	ret	0
_PrintHiLow ENDP
_TEXT	ENDS
PUBLIC	_ReceiveEnableDramEntryExit
EXTRN	_ReadMrsCommand:PROC
; Function compile flags: /Ogspy
;	COMDAT _ReceiveEnableDramEntryExit
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ExecuteMode$ = 11					; size = 1
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Entry$ = 20						; size = 1
_ReceiveEnableDramEntryExit PROC			; COMDAT
; Line 1461
	push	ebp
	mov	ebp, esp
; Line 1472
	cmp	BYTE PTR _Entry$[ebp], 1
	push	ebx
; Line 1477
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55508]
	mov	BYTE PTR _ExecuteMode$[ebp], al
	mov	BYTE PTR [esi+55508], 0
	movzx	eax, bl
	jne	SHORT $LN4@ReceiveEna
	cmp	BYTE PTR [eax+esi+31272], 7
	jne	SHORT $LN1@ReceiveEna
	push	edi
; Line 1478
	mov	edi, DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_PrechargeAll
; Line 1479
	push	1
	push	edi
	push	ebx
	push	esi
	call	_ToggleMprMode
; Line 1480
	push	4
	push	edi
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 1481
	or	eax, 262144				; 00040000H
; Line 1482
	push	eax
	push	edi
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 1487
	push	edi
	push	ebx
	push	esi
	call	_CpgcExecuteParallel
	add	esp, 72					; 00000048H
	pop	edi
; Line 1491
	jmp	SHORT $LN1@ReceiveEna
$LN4@ReceiveEna:
; Line 1496
	cmp	BYTE PTR [eax+esi+31272], 7
	jne	SHORT $LN1@ReceiveEna
; Line 1497
	push	4
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 1498
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 1499
	push	DWORD PTR _Entry$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_ToggleMprMode
	add	esp, 48					; 00000030H
$LN1@ReceiveEna:
; Line 1503
	mov	al, BYTE PTR _ExecuteMode$[ebp]
	mov	BYTE PTR [esi+55508], al
	pop	esi
; Line 1506
	xor	eax, eax
	pop	ebx
; Line 1507
	pop	ebp
	ret	0
_ReceiveEnableDramEntryExit ENDP
_TEXT	ENDS
PUBLIC	_JedecInitFunction
; Function compile flags: /Ogspy
;	COMDAT _JedecInitFunction
_TEXT	SEGMENT
_Rank$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_JedecInitFunction PROC					; COMDAT
; Line 1777
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1782
	push	DWORD PTR _Channel$[ebp]
	mov	esi, 14461				; 0000387dH
	push	esi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	esi
	call	_MmrcExecuteTask
; Line 1783
	movzx	ebx, BYTE PTR _Channel$[ebp]
	mov	eax, ebx
	imul	eax, 4336				; 000010f0H
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [eax+esi+55966], 1
	jne	$LN14@JedecInitF
	cmp	DWORD PTR [eax+esi+55970], 0
	jne	$LN14@JedecInitF
; Line 1788
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 9394				; 000024b2H
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 1792
	push	500					; 000001f4H
	push	1
	call	_MspDelay
	add	esp, 24					; 00000018H
; Line 1796
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 14597				; 00003905H
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 1800
	push	100					; 00000064H
	push	2
	call	_MspDelay
	add	esp, 24					; 00000018H
; Line 1805
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 9973				; 000026f5H
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 1809
	mov	BYTE PTR _Rank$[ebp], 0
	lea	edi, DWORD PTR [esi+ebx*4+55438]
$LL13@JedecInitF:
; Line 1810
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN12@JedecInitF
; Line 1814
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_PrechargeAll
	add	esp, 12					; 0000000cH
$LN12@JedecInitF:
	inc	BYTE PTR _Rank$[ebp]
	inc	edi
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL13@JedecInitF
; Line 1816
	jmp	SHORT $LN9@JedecInitF
$LN14@JedecInitF:
; Line 1820
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 14597				; 00003905H
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN9@JedecInitF:
; Line 1825
	lea	ebx, DWORD PTR [esi+ebx*4+55438]
	mov	BYTE PTR _Rank$[ebp], 0
	mov	edi, ebx
$LL8@JedecInitF:
; Line 1826
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN7@JedecInitF
; Line 1831
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_NopCommands
	add	esp, 12					; 0000000cH
$LN7@JedecInitF:
	inc	BYTE PTR _Rank$[ebp]
	inc	edi
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL8@JedecInitF
; Line 1836
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 10050				; 00002742H
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 1840
	mov	BYTE PTR _Rank$[ebp], 0
$LL4@JedecInitF:
; Line 1841
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN3@JedecInitF
; Line 1845
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_PrechargeAll
	add	esp, 12					; 0000000cH
$LN3@JedecInitF:
	inc	BYTE PTR _Rank$[ebp]
	inc	ebx
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL4@JedecInitF
; Line 1850
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DoZqCal
	pop	ecx
	pop	ecx
; Line 1854
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 14480				; 00003890H
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
; Line 1855
	xor	eax, eax
	pop	ebx
; Line 1856
	pop	ebp
	ret	0
_JedecInitFunction ENDP
_TEXT	ENDS
PUBLIC	_GetSetDdrioGroup2
; Function compile flags: /Ogspy
;	COMDAT _GetSetDdrioGroup2
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Strobe$ = 20						; size = 1
_Type$ = 24						; size = 2
_Cmd$ = 28						; size = 1
_Value$ = 32						; size = 4
_GetSetDdrioGroup2 PROC					; COMDAT
; Line 2903
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 2904
	mov	ebx, DWORD PTR _Strobe$[ebp]
	push	esi
	cmp	bl, 4
	jb	SHORT $LN8@GetSetDdri@2
	cmp	bl, 7
	jbe	SHORT $LN9@GetSetDdri@2
$LN8@GetSetDdri@2:
	mov	al, bl
	sub	al, 13					; 0000000dH
	cmp	al, 3
	ja	SHORT $LN13@GetSetDdri@2
$LN9@GetSetDdri@2:
; Line 2913
	mov	eax, DWORD PTR _Type$[ebp]
	mov	edx, 20501				; 00005015H
	mov	ecx, edx
	cmp	ax, cx
	jne	SHORT $LN7@GetSetDdri@2
; Line 2914
	lea	eax, DWORD PTR [edx+2]
	jmp	SHORT $LN1@GetSetDdri@2
$LN7@GetSetDdri@2:
; Line 2915
	mov	ecx, 20502				; 00005016H
	mov	esi, ecx
	cmp	ax, si
	jne	SHORT $LN5@GetSetDdri@2
; Line 2916
	lea	eax, DWORD PTR [ecx+2]
	jmp	SHORT $LN1@GetSetDdri@2
$LN5@GetSetDdri@2:
; Line 2917
	mov	esi, 20503				; 00005017H
	cmp	ax, si
	jne	SHORT $LN3@GetSetDdri@2
; Line 2918
	mov	eax, edx
	jmp	SHORT $LN1@GetSetDdri@2
$LN3@GetSetDdri@2:
; Line 2919
	mov	edx, 20504				; 00005018H
	cmp	ax, dx
	jne	SHORT $LN1@GetSetDdri@2
; Line 2920
	mov	eax, ecx
	jmp	SHORT $LN1@GetSetDdri@2
$LN13@GetSetDdri@2:
	mov	eax, DWORD PTR _Type$[ebp]
$LN1@GetSetDdri@2:
; Line 2923
	push	DWORD PTR _Value$[ebp]
	push	DWORD PTR _Cmd$[ebp]
	push	eax
	mov	eax, DWORD PTR _MrcData$[ebp]
	movzx	ecx, BYTE PTR [eax+55392]
	push	255					; 000000ffH
	push	ecx
	xor	ecx, ecx
	push	ecx
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	ecx
	push	DWORD PTR _Channel$[ebp]
	push	ecx
	push	eax
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	pop	esi
	pop	ebx
; Line 2924
	pop	ebp
	ret	0
_GetSetDdrioGroup2 ENDP
_TEXT	ENDS
PUBLIC	_Average
; Function compile flags: /Ogspy
;	COMDAT _Average
_TEXT	SEGMENT
tv334 = -24						; size = 4
tv308 = -20						; size = 4
_TempValue$ = -16					; size = 4
_Strobe$ = -12						; size = 1
_Average$ = -8						; size = 4
_Rank$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Index$ = 16						; size = 2
_Minus1Index$ = 20					; size = 2
_Average PROC						; COMDAT
; Line 3733
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 3740
	cmp	BYTE PTR _Channel$[ebp], 2
	jae	$LN16@Average
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	ecx, eax
	shl	ecx, 2
	lea	eax, DWORD PTR [eax+esi+55511]
	push	edi
	mov	DWORD PTR tv308[ebp], ecx
	mov	DWORD PTR tv334[ebp], eax
$LL18@Average:
; Line 3743
	cmp	BYTE PTR [eax-26903], 0
	je	$LN17@Average
	cmp	BYTE PTR [eax], 0
	je	$LN17@Average
	cmp	BYTE PTR [eax+15489], 0
	jne	$LN17@Average
; Line 3747
	mov	BYTE PTR _Strobe$[ebp], 0
$LL31@Average:
; Line 3748
	and	DWORD PTR _Average$[ebp], 0
; Line 3750
	mov	edi, DWORD PTR _Strobe$[ebp]
	xor	bl, bl
	mov	BYTE PTR _Rank$[ebp], bl
$LL32@Average:
; Line 3751
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, DWORD PTR tv308[ebp]
	cmp	BYTE PTR [eax+esi+55438], 0
	je	SHORT $LN9@Average
; Line 3754
	push	0
	push	0
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN30@Average
; Line 3758
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	DWORD PTR _Index$[ebp]
	inc	bl
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 3759
	mov	eax, DWORD PTR _TempValue$[ebp]
	add	esp, 28					; 0000001cH
	add	DWORD PTR _Average$[ebp], eax
$LN9@Average:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL32@Average
$LN30@Average:
; Line 3761
	test	bl, bl
	je	SHORT $LN12@Average
; Line 3764
	mov	eax, DWORD PTR _Average$[ebp]
	movzx	ecx, bl
	xor	edx, edx
	div	ecx
; Line 3765
	mov	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR _Average$[ebp], eax
$LL4@Average:
; Line 3766
	lea	eax, DWORD PTR _Average$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _Index$[ebp]
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 3772
	mov	eax, 255				; 000000ffH
	add	esp, 28					; 0000001cH
	cmp	WORD PTR _Minus1Index$[ebp], ax
	je	SHORT $LN3@Average
; Line 3774
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _Minus1Index$[ebp]
	mov	DWORD PTR _TempValue$[ebp], 1
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN3@Average:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL4@Average
$LN12@Average:
; Line 3747
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL31@Average
	mov	eax, DWORD PTR tv334[ebp]
$LN17@Average:
; Line 3740
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv308[ebp], 4
	inc	eax
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv334[ebp], eax
	jb	$LL18@Average
	pop	edi
	pop	esi
	pop	ebx
$LN16@Average:
; Line 3779
	xor	eax, eax
; Line 3780
	leave
	ret	0
_Average ENDP
_TEXT	ENDS
PUBLIC	_AverageGroups
; Function compile flags: /Ogspy
;	COMDAT _AverageGroups
_TEXT	SEGMENT
_TrainingDelay$ = -4					; size = 2
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_StartIndex$ = 16					; size = 2
_AllGroups$ = 20					; size = 1
_AverageGroups PROC					; COMDAT
; Line 3799
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 3807
	push	DWORD PTR _StartIndex$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetOffsetIndex
	movzx	eax, ax
; Line 3809
	xor	bl, bl
	pop	ecx
	pop	ecx
	mov	DWORD PTR _TrainingDelay$[ebp], eax
	cmp	BYTE PTR _AllGroups$[ebp], bl
	je	SHORT $LN5@AverageGro
; Line 3810
	push	eax
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	mov	al, BYTE PTR _SignalInfoGenerated[eax]
	pop	ecx
; Line 3811
	jmp	SHORT $LN4@AverageGro
$LN5@AverageGro:
; Line 3812
	mov	al, 1
$LN4@AverageGro:
; Line 3817
	cmp	al, bl
	jbe	SHORT $LN1@AverageGro
	push	esi
	push	edi
	movzx	edi, al
$LL3@AverageGro:
; Line 3818
	movzx	si, bl
	add	si, WORD PTR _TrainingDelay$[ebp]
	push	esi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	eax, WORD PTR _SignalInfoGenerated[eax+6]
; Line 3819
	push	eax
	push	esi
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_Average
; Line 3820
	push	esi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	add	bl, BYTE PTR _SignalInfoGenerated[eax+1]
	add	esp, 24					; 00000018H
	dec	edi
	jne	SHORT $LL3@AverageGro
	pop	edi
	pop	esi
$LN1@AverageGro:
; Line 3823
	xor	eax, eax
	pop	ebx
; Line 3824
	leave
	ret	0
_AverageGroups ENDP
_TEXT	ENDS
PUBLIC	_FineWriteLevelingDramEntryExit
; Function compile flags: /Ogspy
;	COMDAT _FineWriteLevelingDramEntryExit
_TEXT	SEGMENT
_Ddr4Mrs2Command$ = -20					; size = 4
_Mrs2Command$ = -20					; size = 4
tv668 = -16						; size = 4
tv595 = -16						; size = 4
tv490 = -16						; size = 4
tv447 = -16						; size = 4
_Value$ = -12						; size = 4
_Ddr4Mrs1Command$ = -8					; size = 4
_Mrs1Command$ = -8					; size = 4
_St$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_ExecuteMode$ = 11					; size = 1
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_ConfigureRank$ = 20					; size = 1
_Entry$ = 20						; size = 1
_FineWriteLevelingDramEntryExit PROC			; COMDAT
; Line 4039
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
; Line 4060
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55508]
	push	edi
	push	ebx
	push	65535					; 0000ffffH
	push	14461					; 0000387dH
	push	esi
	mov	BYTE PTR _ExecuteMode$[ebp], al
	mov	BYTE PTR [esi+55508], 0
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 4063
	cmp	BYTE PTR _Entry$[ebp], 1
	jne	$LN40@FineWriteL
; Line 4074
	movzx	eax, bl
	cmp	BYTE PTR [eax+esi+31272], 3
	ja	$LN36@FineWriteL
; Line 4075
	lea	eax, DWORD PTR [esi+eax*4+55438]
	mov	BYTE PTR _ConfigureRank$[ebp], 0
	mov	DWORD PTR tv447[ebp], eax
$LL38@FineWriteL:
; Line 4076
	cmp	BYTE PTR [eax], 0
	je	$LN37@FineWriteL
; Line 4080
	push	1
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 4081
	push	2
	push	DWORD PTR _ConfigureRank$[ebp]
	mov	DWORD PTR _Mrs1Command$[ebp], eax
; Line 4082
	or	DWORD PTR _Mrs1Command$[ebp], 8192	; 00002000H
	push	ebx
	push	esi
	call	_ReadMrsCommand
	mov	edi, eax
; Line 4084
	mov	al, BYTE PTR _ConfigureRank$[ebp]
	add	esp, 32					; 00000020H
	and	edi, -98305				; fffe7fffH
	cmp	BYTE PTR _Rank$[ebp], al
	je	SHORT $LN34@FineWriteL
; Line 4085
	or	DWORD PTR _Mrs1Command$[ebp], 262144	; 00040000H
$LN34@FineWriteL:
; Line 4087
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_PrechargeAll
; Line 4088
	push	edi
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 4089
	push	DWORD PTR _Mrs1Command$[ebp]
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 4090
	push	10					; 0000000aH
	push	1
	call	_MspDelay
; Line 4091
	mov	al, BYTE PTR _Rank$[ebp]
	add	esp, 52					; 00000034H
	cmp	al, BYTE PTR _ConfigureRank$[ebp]
	jne	SHORT $LN37@FineWriteL
; Line 4092
	mov	BYTE PTR _St$[ebp], 0
$LL59@FineWriteL:
; Line 4093
	and	DWORD PTR _Value$[ebp], 0
; Line 4094
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	24					; 00000018H
	push	20487					; 00005007H
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _St$[ebp]
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	SHORT $LL59@FineWriteL
$LN37@FineWriteL:
; Line 4075
	mov	eax, DWORD PTR tv447[ebp]
	inc	BYTE PTR _ConfigureRank$[ebp]
	inc	eax
	cmp	BYTE PTR _ConfigureRank$[ebp], 4
	mov	DWORD PTR tv447[ebp], eax
	jb	$LL38@FineWriteL
$LN36@FineWriteL:
; Line 4102
	movzx	eax, bl
	cmp	BYTE PTR [eax+esi+31272], 7
	jne	$LN6@FineWriteL
; Line 4103
	lea	eax, DWORD PTR [esi+eax*4+55438]
	mov	BYTE PTR _ConfigureRank$[ebp], 0
	mov	DWORD PTR tv490[ebp], eax
$LL28@FineWriteL:
; Line 4104
	cmp	BYTE PTR [eax], 0
	je	$LN27@FineWriteL
; Line 4107
	push	1
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 4108
	push	2
	push	DWORD PTR _ConfigureRank$[ebp]
	mov	DWORD PTR _Ddr4Mrs1Command$[ebp], eax
; Line 4109
	or	DWORD PTR _Ddr4Mrs1Command$[ebp], 32768	; 00008000H
	push	ebx
	push	esi
	call	_ReadMrsCommand
	mov	edi, eax
; Line 4111
	mov	al, BYTE PTR _ConfigureRank$[ebp]
	add	esp, 32					; 00000020H
	and	edi, -917505				; fff1ffffH
	cmp	BYTE PTR _Rank$[ebp], al
	je	SHORT $LN24@FineWriteL
; Line 4112
	or	DWORD PTR _Ddr4Mrs1Command$[ebp], 1048576 ; 00100000H
$LN24@FineWriteL:
; Line 4114
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_PrechargeAll
; Line 4115
	push	edi
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 4116
	push	DWORD PTR _Ddr4Mrs1Command$[ebp]
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 4117
	push	10					; 0000000aH
	push	1
	call	_MspDelay
; Line 4118
	mov	al, BYTE PTR _Rank$[ebp]
	add	esp, 52					; 00000034H
	cmp	al, BYTE PTR _ConfigureRank$[ebp]
	jne	SHORT $LN27@FineWriteL
; Line 4119
	mov	BYTE PTR _St$[ebp], 0
$LL61@FineWriteL:
; Line 4120
	and	DWORD PTR _Value$[ebp], 0
; Line 4121
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	24					; 00000018H
	push	20487					; 00005007H
	push	DWORD PTR _St$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _St$[ebp]
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	SHORT $LL61@FineWriteL
$LN27@FineWriteL:
; Line 4103
	mov	eax, DWORD PTR tv490[ebp]
	inc	BYTE PTR _ConfigureRank$[ebp]
	inc	eax
	cmp	BYTE PTR _ConfigureRank$[ebp], 4
	mov	DWORD PTR tv490[ebp], eax
	jb	$LL28@FineWriteL
; Line 4127
	jmp	$LN6@FineWriteL
$LN40@FineWriteL:
; Line 4138
	movzx	edi, bl
	cmp	BYTE PTR [edi+esi+31272], 3
	ja	$LN15@FineWriteL
; Line 4139
	lea	eax, DWORD PTR [esi+edi*4+55438]
	mov	BYTE PTR _ConfigureRank$[ebp], 0
	mov	DWORD PTR tv595[ebp], eax
$LL17@FineWriteL:
; Line 4140
	mov	eax, DWORD PTR tv595[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN16@FineWriteL
; Line 4141
	push	1
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 4142
	push	2
	push	DWORD PTR _ConfigureRank$[ebp]
	mov	DWORD PTR _Mrs1Command$[ebp], eax
	push	ebx
	push	esi
	call	_ReadMrsCommand
	add	esp, 32					; 00000020H
; Line 4143
	cmp	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR _Mrs2Command$[ebp], eax
	jne	SHORT $LN10@FineWriteL
; Line 4144
	mov	BYTE PTR _St$[ebp], 0
$LL12@FineWriteL:
; Line 4146
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	24					; 00000018H
	push	20487					; 00005007H
	push	DWORD PTR _St$[ebp]
	mov	DWORD PTR _Value$[ebp], 3
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _St$[ebp]
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	SHORT $LL12@FineWriteL
$LN10@FineWriteL:
; Line 4149
	push	DWORD PTR _Mrs1Command$[ebp]
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 4150
	push	DWORD PTR _Mrs2Command$[ebp]
	push	DWORD PTR _ConfigureRank$[ebp]
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
	add	esp, 32					; 00000020H
$LN16@FineWriteL:
	inc	BYTE PTR _ConfigureRank$[ebp]
	inc	DWORD PTR tv595[ebp]
	cmp	BYTE PTR _ConfigureRank$[ebp], 4
	jb	$LL17@FineWriteL
$LN15@FineWriteL:
; Line 4156
	cmp	BYTE PTR [edi+esi+31272], 7
	jne	$LN6@FineWriteL
; Line 4157
	lea	edi, DWORD PTR [esi+edi*4+55438]
	mov	BYTE PTR _ConfigureRank$[ebp], 0
	mov	DWORD PTR tv668[ebp], edi
$LL8@FineWriteL:
; Line 4158
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN7@FineWriteL
; Line 4159
	mov	edi, DWORD PTR _ConfigureRank$[ebp]
	push	1
	push	edi
	push	ebx
	push	esi
	call	_ReadMrsCommand
; Line 4160
	push	2
	push	edi
	push	ebx
	push	esi
	mov	DWORD PTR _Ddr4Mrs1Command$[ebp], eax
	call	_ReadMrsCommand
	add	esp, 32					; 00000020H
; Line 4161
	cmp	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR _Ddr4Mrs2Command$[ebp], eax
	jne	SHORT $LN1@FineWriteL
; Line 4162
	mov	BYTE PTR _St$[ebp], 0
$LL3@FineWriteL:
; Line 4164
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	24					; 00000018H
	push	20487					; 00005007H
	push	DWORD PTR _St$[ebp]
	mov	DWORD PTR _Value$[ebp], 3
	push	0
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _St$[ebp]
	cmp	BYTE PTR _St$[ebp], 18			; 00000012H
	jb	SHORT $LL3@FineWriteL
$LN1@FineWriteL:
; Line 4167
	push	DWORD PTR _Ddr4Mrs1Command$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
; Line 4168
	push	DWORD PTR _Ddr4Mrs2Command$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_WriteDramCommandSideWrap
	add	esp, 32					; 00000020H
$LN7@FineWriteL:
	mov	edi, DWORD PTR tv668[ebp]
	inc	BYTE PTR _ConfigureRank$[ebp]
	inc	edi
	cmp	BYTE PTR _ConfigureRank$[ebp], 4
	mov	DWORD PTR tv668[ebp], edi
	jb	$LL8@FineWriteL
$LN6@FineWriteL:
; Line 4175
	mov	al, BYTE PTR _ExecuteMode$[ebp]
	pop	edi
	mov	BYTE PTR [esi+55508], al
	pop	esi
; Line 4177
	xor	eax, eax
	pop	ebx
; Line 4178
	leave
	ret	0
_FineWriteLevelingDramEntryExit ENDP
_TEXT	ENDS
PUBLIC	_EarlyCwlSetup
; Function compile flags: /Ogspy
;	COMDAT _EarlyCwlSetup
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_EarlyCwlSetup PROC					; COMDAT
; Line 4915
	push	ebx
; Line 4917
	mov	ebx, DWORD PTR _Rank$[esp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[esp+4]
	push	edi
	mov	edi, DWORD PTR _Channel$[esp+8]
	push	ebx
	push	edi
	push	esi
	call	_ConfigureCwlStressTest
; Line 4921
	push	3
	push	edi
	push	esi
	call	_CpgcSetup
; Line 4928
	push	edi
	push	esi
	mov	BYTE PTR [esi+65585], bl
	mov	BYTE PTR [esi+65570], 2
	call	_CpgcReconfig
; Line 4930
	push	ebx
	push	edi
	push	esi
	call	_PrechargeAll
; Line 4934
	push	edi
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 60					; 0000003cH
	pop	edi
	pop	esi
	pop	ebx
; Line 4937
	ret	0
_EarlyCwlSetup ENDP
_TEXT	ENDS
PUBLIC	_IsCurrentStrobeWithinLimit
; Function compile flags: /Ogspy
;	COMDAT _IsCurrentStrobeWithinLimit
_TEXT	SEGMENT
_StrobePairValue$ = -8					; size = 4
_StrobeValue$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_StrobePair$ = 20					; size = 1
_Strobe$ = 20						; size = 1
_IsCurrentStrobeWithinLimit PROC			; COMDAT
; Line 4976
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 4982
	mov	eax, DWORD PTR _Strobe$[ebp]
; Line 4983
	mov	cl, al
	cmp	al, 9
	jb	SHORT $LN3@IsCurrentS
	sub	cl, 9
; Line 4984
	jmp	SHORT $LN6@IsCurrentS
$LN3@IsCurrentS:
; Line 4985
	add	cl, 9
$LN6@IsCurrentS:
	push	esi
	mov	BYTE PTR _StrobePair$[ebp], cl
; Line 4988
	lea	ecx, DWORD PTR _StrobeValue$[ebp]
	push	ecx
	push	2
	mov	esi, 57358				; 0000e00eH
	push	esi
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 4989
	lea	eax, DWORD PTR _StrobePairValue$[ebp]
	push	eax
	push	2
	push	esi
	push	DWORD PTR _StrobePair$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 4991
	mov	eax, DWORD PTR _StrobeValue$[ebp]
	sub	eax, DWORD PTR _StrobePairValue$[ebp]
	add	esp, 56					; 00000038H
; Line 4993
	push	62					; 0000003eH
	add	eax, 31					; 0000001fH
	pop	ecx
	cmp	ecx, eax
	sbb	al, al
	inc	al
	pop	esi
; Line 4998
	leave
	ret	0
_IsCurrentStrobeWithinLimit ENDP
_TEXT	ENDS
PUBLIC	_PrintAndRestoreAfterFailureValues
; Function compile flags: /Ogspy
;	COMDAT _PrintAndRestoreAfterFailureValues
_TEXT	SEGMENT
_Strobe$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_TempValue$ = 20					; size = 4
_NumberElements$ = 20					; size = 4
_SignalsToRestore$ = 24					; size = 1
_DelayOffset$ = 28					; size = 2
_GroupOffset$ = 32					; size = 2
_ValueToRestore$ = 36					; size = 4
_Str$ = 40						; size = 4
_PrintAndRestoreAfterFailureValues PROC			; COMDAT
; Line 5529
	push	ebp
	mov	ebp, esp
; Line 5538
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR _NumberElements$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55506]
	push	edi
	lea	edi, DWORD PTR [eax+ecx]
; Line 5546
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	SHORT $LN10@PrintAndRe
$LL27@PrintAndRe:
; Line 5547
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	test	eax, DWORD PTR [esi+70799]
	je	SHORT $LN11@PrintAndRe
; Line 5548
	mov	eax, DWORD PTR _ValueToRestore$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 5550
	mov	ecx, DWORD PTR _GroupOffset$[ebp]
	mov	DWORD PTR _TempValue$[ebp], eax
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	mov	eax, DWORD PTR _DelayOffset$[ebp]
	push	24					; 00000018H
	add	eax, ecx
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN11@PrintAndRe:
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL27@PrintAndRe
$LN10@PrintAndRe:
	pop	edi
; Line 5570
	mov	BYTE PTR [esi+55506], bl
	pop	esi
	pop	ebx
; Line 5572
	pop	ebp
	ret	0
_PrintAndRestoreAfterFailureValues ENDP
_TEXT	ENDS
PUBLIC	_RestoreFastBootParameters
; Function compile flags: /Ogspy
;	COMDAT _RestoreFastBootParameters
_TEXT	SEGMENT
_Strobe$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_inputParameter$ = 20					; size = 1
_RestoreFastBootParameters PROC				; COMDAT
; Line 7224
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 7228
	push	DWORD PTR _inputParameter$[ebp]
	call	_GetIndexBasedOnFastBootParameter
	mov	esi, DWORD PTR _MrcData$[ebp]
	add	esp, 4
	movzx	edi, ax
; Line 7230
	mov	BYTE PTR _Strobe$[ebp], 0
	xor	ebx, ebx
$LL9@RestoreFas:
; Line 7231
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN3@RestoreFas
; Line 7240
	movzx	ecx, BYTE PTR _Channel$[ebp]
	movzx	eax, BYTE PTR _inputParameter$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	imul	eax, 18					; 00000012H
	add	eax, ebx
	lea	eax, DWORD PTR [esi+eax*4+65591]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN3@RestoreFas:
	inc	BYTE PTR _Strobe$[ebp]
	inc	ebx
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL9@RestoreFas
	pop	edi
	pop	esi
	pop	ebx
; Line 7242
	leave
	ret	0
_RestoreFastBootParameters ENDP
_TEXT	ENDS
PUBLIC	_Create2DEye
; Function compile flags: /Ogspy
;	COMDAT _Create2DEye
_TEXT	SEGMENT
_StringToPrint$ = -72					; size = 81
tv542 = 12						; size = 4
tv1284 = 16						; size = 4
tv1245 = 20						; size = 4
tv1136 = 24						; size = 4
tv1252 = 28						; size = 4
_CenterY$ = 32						; size = 2
_StepSize$ = 36						; size = 2
tv819 = 40						; size = 4
_AxisXResult$ = 44					; size = 4
_CenterX$ = 48						; size = 2
_AxisY$ = 52						; size = 2
tv650 = 56						; size = 4
_TempValue$ = 60					; size = 4
tv1170 = 64						; size = 4
_Strobe$ = 68						; size = 1
_AxisX$ = 72						; size = 2
_MrcData$ = 84						; size = 4
_Results$ = 88						; size = 4
_Channel$ = 92						; size = 1
_Rank$ = 96						; size = 1
_Dim1Index$ = 100					; size = 2
_Dim1Knobs$ = 104					; size = 1
_Dim1Min$ = 108						; size = 4
_Dim1Step$ = 112					; size = 2
_Dim2Index$ = 116					; size = 2
_Dim2Min$ = 120						; size = 4
_Dim2Step$ = 124					; size = 2
_Create2DEye PROC					; COMDAT
; Line 8281
	push	ebp
	lea	ebp, DWORD PTR [esp-76]
	sub	esp, 148				; 00000094H
; Line 8297
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetHalfClk
	shr	ax, 6
	movzx	eax, ax
	pop	ecx
	pop	ecx
	mov	DWORD PTR _StepSize$[ebp], eax
; Line 8299
	test	ax, ax
	jne	SHORT $LN31@Create2DEy
; Line 8303
	mov	DWORD PTR _StepSize$[ebp], 1
$LN31@Create2DEy:
; Line 8306
	and	DWORD PTR _TempValue$[ebp], 0
; Line 8308
	cmp	BYTE PTR _Channel$[ebp], 2
	jae	$LN28@Create2DEy
	push	ebx
	push	esi
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	imul	edi, 18					; 00000012H
	mov	DWORD PTR tv1245[ebp], edi
$LL56@Create2DEy:
; Line 8309
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN29@Create2DEy
; Line 8312
	and	DWORD PTR tv1170[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL62@Create2DEy:
; Line 8313
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN25@Create2DEy
; Line 8323
	xor	bl, bl
	cmp	BYTE PTR _Dim1Knobs$[ebp], bl
	jbe	SHORT $LN17@Create2DEy
	lea	esi, DWORD PTR _CenterX$[ebp]
$LL19@Create2DEy:
; Line 8324
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	ax, bl
	add	ax, WORD PTR _Dim1Index$[ebp]
	push	2
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 8325
	mov	ax, WORD PTR _TempValue$[ebp]
	add	esp, 28					; 0000001cH
	mov	WORD PTR [esi], ax
	inc	bl
	inc	esi
	inc	esi
	cmp	bl, BYTE PTR _Dim1Knobs$[ebp]
	jb	SHORT $LL19@Create2DEy
$LN17@Create2DEy:
; Line 8327
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	DWORD PTR _Dim2Index$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 8330
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN25@Create2DEy
	mov	eax, DWORD PTR tv1170[ebp]
	mov	ecx, DWORD PTR _Dim1Min$[ebp]
	mov	si, WORD PTR _TempValue$[ebp]
	add	eax, edi
	add	eax, eax
	add	ecx, eax
	mov	DWORD PTR tv1252[ebp], ecx
	mov	ecx, DWORD PTR _Dim2Min$[ebp]
	sub	si, WORD PTR [eax+ecx]
	mov	eax, DWORD PTR tv1170[ebp]
	lea	ecx, DWORD PTR [edi+eax+3420]
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR _Results$[ebp]
	lea	ebx, DWORD PTR _CenterX$[ebp]
	mov	DWORD PTR tv1136[ebp], eax
$LL57@Create2DEy:
; Line 8341
	mov	edx, DWORD PTR tv1252[ebp]
	movzx	edx, WORD PTR [edx]
	mov	ax, WORD PTR [ebx]
; Line 8346
	movzx	edi, WORD PTR _Dim2Step$[ebp]
	sub	ax, dx
	movzx	edx, ax
	mov	WORD PTR [ebx], ax
	movzx	eax, si
	mov	DWORD PTR _CenterY$[ebp], eax
	movzx	eax, ax
	mov	DWORD PTR tv1284[ebp], edx
	cdq
	idiv	edi
; Line 8348
	push	95					; 0000005fH
	pop	eax
	mov	DWORD PTR _AxisY$[ebp], eax
	mov	DWORD PTR tv650[ebp], eax
	mov	DWORD PTR tv819[ebp], ecx
	sub	DWORD PTR _CenterY$[ebp], edx
$LL13@Create2DEy:
; Line 8349
	mov	edx, DWORD PTR tv819[ebp]
	movzx	eax, WORD PTR [edx+2]
	movzx	edx, WORD PTR [edx]
	cmp	ax, dx
	jbe	$LN12@Create2DEy
; Line 8352
	mov	edi, DWORD PTR tv1252[ebp]
	movzx	edi, WORD PTR [edi]
; Line 8355
	and	DWORD PTR _AxisX$[ebp], 0
	sub	eax, edi
	sub	edx, edi
	movzx	edi, WORD PTR _StepSize$[ebp]
	mov	WORD PTR _AxisXResult$[ebp+2], ax
	mov	eax, edi
	imul	eax, 80					; 00000050H
	mov	WORD PTR _AxisXResult$[ebp], dx
	mov	DWORD PTR tv542[ebp], eax
	test	eax, eax
	jle	$LN12@Create2DEy
$LL58@Create2DEy:
; Line 8356
	movzx	eax, WORD PTR _CenterY$[ebp]
	cmp	DWORD PTR tv650[ebp], eax
	jne	SHORT $LN6@Create2DEy
	movzx	eax, WORD PTR tv1284[ebp]
	movsx	edx, WORD PTR _AxisX$[ebp]
	cmp	edx, eax
	jg	SHORT $LN6@Create2DEy
	add	edx, edi
	cmp	edx, eax
	jle	SHORT $LN6@Create2DEy
; Line 8357
	movsx	eax, WORD PTR _AxisX$[ebp]
	cdq
	idiv	edi
	mov	BYTE PTR _StringToPrint$[ebp+eax], 43	; 0000002bH
	jmp	SHORT $LN8@Create2DEy
$LN6@Create2DEy:
; Line 8358
	movsx	edx, WORD PTR _AxisX$[ebp]
	movzx	eax, WORD PTR _AxisXResult$[ebp+2]
	cmp	edx, eax
	jg	SHORT $LN4@Create2DEy
	add	edx, edi
	cmp	edx, eax
	jg	SHORT $LN46@Create2DEy
$LN4@Create2DEy:
; Line 8365
	movzx	edx, WORD PTR _AxisXResult$[ebp]
	movsx	eax, WORD PTR _AxisX$[ebp]
	cmp	eax, edx
	jg	SHORT $LN2@Create2DEy
	add	eax, edi
	cmp	eax, edx
	jle	SHORT $LN2@Create2DEy
; Line 8369
	movsx	eax, WORD PTR _AxisX$[ebp]
	cdq
	idiv	edi
	mov	BYTE PTR _StringToPrint$[ebp+eax], 42	; 0000002aH
; Line 8370
	jmp	SHORT $LN8@Create2DEy
$LN2@Create2DEy:
; Line 8374
	movsx	eax, WORD PTR _AxisX$[ebp]
	cdq
	idiv	edi
	mov	BYTE PTR _StringToPrint$[ebp+eax], 32	; 00000020H
$LN8@Create2DEy:
	mov	eax, DWORD PTR _AxisX$[ebp]
	add	eax, DWORD PTR _StepSize$[ebp]
	mov	DWORD PTR _AxisX$[ebp], eax
	cwde
	cmp	eax, DWORD PTR tv542[ebp]
	jl	SHORT $LL58@Create2DEy
; Line 8358
	jmp	SHORT $LN12@Create2DEy
$LN46@Create2DEy:
; Line 8362
	movsx	eax, WORD PTR _AxisX$[ebp]
	cdq
	idiv	edi
	mov	BYTE PTR _StringToPrint$[ebp+eax], 42	; 0000002aH
; Line 8363
	mov	BYTE PTR _StringToPrint$[ebp+eax+1], 0
$LN12@Create2DEy:
	dec	DWORD PTR _AxisY$[ebp]
	dec	DWORD PTR tv650[ebp]
	sub	DWORD PTR tv819[ebp], 1152		; 00000480H
	cmp	WORD PTR _AxisY$[ebp], 0
	jge	$LL13@Create2DEy
	add	ecx, 576				; 00000240H
	inc	ebx
	inc	ebx
	dec	DWORD PTR tv1136[ebp]
	jne	$LL57@Create2DEy
; Line 8330
	mov	edi, DWORD PTR tv1245[ebp]
$LN25@Create2DEy:
; Line 8312
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1170[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL62@Create2DEy
$LN29@Create2DEy:
; Line 8308
	inc	BYTE PTR _Channel$[ebp]
	add	edi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv1245[ebp], edi
	jb	$LL56@Create2DEy
	pop	edi
	pop	esi
	pop	ebx
$LN28@Create2DEy:
; Line 8383
	xor	eax, eax
; Line 8384
	add	ebp, 76					; 0000004cH
	leave
	ret	0
_Create2DEye ENDP
_TEXT	ENDS
PUBLIC	_CommandClockEntry
; Function compile flags: /Ogspy
;	COMDAT _CommandClockEntry
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_CommandClockEntry PROC					; COMDAT
; Line 8521
	movzx	ecx, BYTE PTR _Channel$[esp-4]
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[esp+4]
	mov	bl, BYTE PTR [esi+55506]
	and	DWORD PTR [eax+esi+58566], 0
	and	DWORD PTR [eax+esi+58570], 0
; Line 8522
	or	BYTE PTR [esi+55506], 32		; 00000020H
; Line 8523
	movzx	eax, BYTE PTR [ecx+esi+71456]
	push	eax
	push	DWORD PTR _Channel$[esp+8]
	push	esi
	call	_ChangeCmdMode
	add	esp, 12					; 0000000cH
; Line 8524
	mov	BYTE PTR [esi+55506], bl
	pop	esi
; Line 8526
	xor	eax, eax
	pop	ebx
; Line 8527
	ret	0
_CommandClockEntry ENDP
_TEXT	ENDS
PUBLIC	_BlastCommandGroups
; Function compile flags: /Ogspy
;	COMDAT _BlastCommandGroups
_TEXT	SEGMENT
tv205 = -24						; size = 4
_CommandTrainingDelay$ = -20				; size = 2
tv257 = -16						; size = 4
tv250 = -12						; size = 4
_CommandGroupOffset$ = -8				; size = 2
_Rank$ = -4						; size = 1
_Strobe$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Value$ = 16						; size = 4
_Mode$ = 20						; size = 1
_BlastCommandGroups PROC				; COMDAT
; Line 8604
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 8611
	and	DWORD PTR tv257[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	eax, 57373				; 0000e01dH
	push	edi
	mov	WORD PTR [esi+65588], ax
; Line 8612
	mov	BYTE PTR [esi+65590], 8
; Line 8615
	mov	BYTE PTR _Rank$[ebp], 0
$LL19@BlastComma:
; Line 8616
	and	DWORD PTR tv250[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL20@BlastComma:
; Line 8620
	movzx	eax, WORD PTR [esi+65588]
	push	eax
	push	esi
	call	_GetOffsetIndex
; Line 8621
	and	DWORD PTR _CommandGroupOffset$[ebp], 0
	movzx	eax, ax
; Line 8622
	xor	bl, bl
	pop	ecx
	pop	ecx
	mov	DWORD PTR _CommandTrainingDelay$[ebp], eax
	cmp	BYTE PTR [esi+65590], bl
	jbe	SHORT $LN5@BlastComma
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	DWORD PTR tv205[ebp], eax
$LL18@BlastComma:
; Line 8628
	mov	eax, DWORD PTR _CommandGroupOffset$[ebp]
	mov	ecx, DWORD PTR _CommandTrainingDelay$[ebp]
	lea	edi, DWORD PTR [eax+ecx]
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 8629
	mov	ecx, DWORD PTR tv205[ebp]
	movzx	eax, bl
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR tv257[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _Value$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv250[ebp]
; Line 8630
	push	edi
	mov	DWORD PTR [esi+eax*4+65591], ecx
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _CommandGroupOffset$[ebp], ax
	add	esp, 32					; 00000020H
	inc	bl
	cmp	bl, BYTE PTR [esi+65590]
	jb	SHORT $LL18@BlastComma
$LN5@BlastComma:
; Line 8616
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv250[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL20@BlastComma
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv257[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL19@BlastComma
	pop	edi
	pop	esi
	pop	ebx
; Line 8634
	leave
	ret	0
_BlastCommandGroups ENDP
_TEXT	ENDS
PUBLIC	_ReInitializeDramsAcrossChannels
; Function compile flags: /Ogspy
;	COMDAT _ReInitializeDramsAcrossChannels
_TEXT	SEGMENT
_Value$ = -28						; size = 4
tv717 = -24						; size = 4
tv691 = -20						; size = 4
tv715 = -16						; size = 4
tv540 = -12						; size = 4
_IndRk$ = -8						; size = 1
_IndCh$ = -4						; size = 1
_IndSt$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_BackupEnable$ = 11					; size = 1
_ReInitializeDramsAcrossChannels PROC			; COMDAT
; Line 9585
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
; Line 9592
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55509]
	mov	BYTE PTR _BackupEnable$[ebp], al
	lea	eax, DWORD PTR [esi+28608]
	push	edi
; Line 9593
	mov	BYTE PTR _IndCh$[ebp], 0
	mov	ebx, eax
	mov	edi, 65535				; 0000ffffH
$LL30@ReInitiali:
; Line 9594
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN29@ReInitiali
; Line 9597
	push	DWORD PTR _IndCh$[ebp]
	push	edi
	push	15525					; 00003ca5H
	push	esi
	call	_MmrcExecuteTask
; Line 9598
	push	200					; 000000c8H
	push	2
	call	_MspDelay
; Line 9599
	push	DWORD PTR _IndCh$[ebp]
	push	edi
	push	15556					; 00003cc4H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 40					; 00000028H
$LN29@ReInitiali:
	inc	BYTE PTR _IndCh$[ebp]
	inc	ebx
	cmp	BYTE PTR _IndCh$[ebp], 2
	jb	SHORT $LL30@ReInitiali
; Line 9603
	mov	BYTE PTR _IndCh$[ebp], 0
	lea	ebx, DWORD PTR [esi+28608]
	mov	edi, 14643				; 00003933H
$LL26@ReInitiali:
; Line 9604
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN25@ReInitiali
; Line 9607
	push	DWORD PTR _IndCh$[ebp]
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN25@ReInitiali:
	inc	BYTE PTR _IndCh$[ebp]
	inc	ebx
	cmp	BYTE PTR _IndCh$[ebp], 2
	jb	SHORT $LL26@ReInitiali
; Line 9610
	push	0
	mov	edi, 14666				; 0000394aH
	push	edi
	mov	BYTE PTR [esi+55509], 1
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 9611
	cmp	BYTE PTR [esi+71462], 0
	je	SHORT $LN22@ReInitiali
; Line 9613
	push	5
	push	1
	call	_MspDelay
; Line 9614
	jmp	SHORT $LN48@ReInitiali
$LN22@ReInitiali:
; Line 9616
	push	200					; 000000c8H
	push	1
	call	_MspDelay
; Line 9617
	mov	BYTE PTR [esi+71462], 1
$LN48@ReInitiali:
	pop	ecx
	pop	ecx
; Line 9619
	push	0
	mov	edi, 14687				; 0000395fH
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 9620
	mov	al, BYTE PTR _BackupEnable$[ebp]
	add	esp, 16					; 00000010H
	mov	BYTE PTR [esi+55509], al
; Line 9624
	mov	BYTE PTR _IndCh$[ebp], 0
	lea	edi, DWORD PTR [esi+28608]
	mov	ebx, 14716				; 0000397cH
$LL20@ReInitiali:
; Line 9625
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN19@ReInitiali
; Line 9636
	push	DWORD PTR _IndCh$[ebp]
	push	ebx
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	ebx
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN19@ReInitiali:
	inc	BYTE PTR _IndCh$[ebp]
	inc	edi
	cmp	BYTE PTR _IndCh$[ebp], 2
	jb	SHORT $LL20@ReInitiali
; Line 9641
	push	5
	push	1
	call	_MspDelay
	and	DWORD PTR tv691[ebp], 0
	pop	ecx
	lea	edi, DWORD PTR [esi+31272]
	pop	ecx
; Line 9643
	mov	BYTE PTR _IndCh$[ebp], 0
	mov	DWORD PTR tv715[ebp], esi
	mov	DWORD PTR tv717[ebp], edi
$LL47@ReInitiali:
; Line 9644
	cmp	BYTE PTR [edi-2664], 0
	je	$LN15@ReInitiali
; Line 9650
	push	DWORD PTR _IndCh$[ebp]
	push	0
	push	0
	push	esi
	call	_JedecInitFunction
; Line 9654
	push	100					; 00000064H
	push	1
	call	_MspDelay
	add	esp, 24					; 00000018H
; Line 9657
	cmp	BYTE PTR [esi+71461], 0
	mov	BYTE PTR [esi+71022], 1
	je	$LN15@ReInitiali
; Line 9658
	cmp	BYTE PTR [edi], 7
	jne	$LN15@ReInitiali
; Line 9659
	mov	eax, DWORD PTR tv715[ebp]
	mov	ebx, DWORD PTR tv691[ebp]
	mov	BYTE PTR _IndRk$[ebp], 0
	mov	DWORD PTR tv540[ebp], eax
$LL10@ReInitiali:
; Line 9660
	mov	eax, DWORD PTR tv540[ebp]
	cmp	BYTE PTR [eax+55438], 0
	je	SHORT $LN9@ReInitiali
; Line 9661
	mov	BYTE PTR _IndSt$[ebp], 0
	xor	edi, edi
$LL6@ReInitiali:
; Line 9664
	push	0
	push	0
	push	DWORD PTR _IndSt$[ebp]
	push	DWORD PTR _IndRk$[ebp]
	push	DWORD PTR _IndCh$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN5@ReInitiali
	mov	eax, DWORD PTR tv540[ebp]
	cmp	BYTE PTR [eax+55470], 9
	jne	SHORT $LN45@ReInitiali
	cmp	BYTE PTR _IndSt$[ebp], 8
	ja	SHORT $LN5@ReInitiali
$LN45@ReInitiali:
	cmp	BYTE PTR [esi+71022], 0
	jne	SHORT $LN3@ReInitiali
	cmp	BYTE PTR _IndSt$[ebp], 0
	ja	SHORT $LN5@ReInitiali
$LN3@ReInitiali:
; Line 9670
	lea	eax, DWORD PTR [ebx+edi]
	movzx	eax, BYTE PTR [eax+esi+71023]
	mov	DWORD PTR _Value$[ebp], eax
; Line 9671
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	24					; 00000018H
	push	57360					; 0000e010H
	push	DWORD PTR _IndSt$[ebp]
	push	DWORD PTR _IndRk$[ebp]
	push	DWORD PTR _IndCh$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN5@ReInitiali:
	inc	BYTE PTR _IndSt$[ebp]
	inc	edi
	cmp	BYTE PTR _IndSt$[ebp], 18		; 00000012H
	jb	SHORT $LL6@ReInitiali
; Line 9661
	mov	edi, DWORD PTR tv717[ebp]
$LN9@ReInitiali:
; Line 9659
	inc	BYTE PTR _IndRk$[ebp]
	add	ebx, 18					; 00000012H
	inc	DWORD PTR tv540[ebp]
	cmp	BYTE PTR _IndRk$[ebp], 4
	jb	$LL10@ReInitiali
$LN15@ReInitiali:
; Line 9643
	inc	BYTE PTR _IndCh$[ebp]
	add	DWORD PTR tv715[ebp], 4
	add	DWORD PTR tv691[ebp], 72		; 00000048H
	inc	edi
	cmp	BYTE PTR _IndCh$[ebp], 2
	mov	DWORD PTR tv717[ebp], edi
	jb	$LL47@ReInitiali
	pop	edi
	pop	esi
	pop	ebx
; Line 9677
	leave
	ret	0
_ReInitializeDramsAcrossChannels ENDP
_TEXT	ENDS
PUBLIC	_BlastFinalResults
; Function compile flags: /Ogspy
;	COMDAT _BlastFinalResults
_TEXT	SEGMENT
_TempValue$ = -40					; size = 4
tv495 = -36						; size = 4
tv480 = -32						; size = 4
tv417 = -28						; size = 4
_Value$ = -24						; size = 4
_ThisSignalExists$ = -20				; size = 2
_Bit$ = -14						; size = 1
_Rank$ = -10						; size = 1
_Strobe$ = -6						; size = 1
_BitDelay$ = -2						; size = 1
_MaxBits$ = -1						; size = 1
_ElementIndex$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_TrainingDelay$ = 16					; size = 2
_BlastDirection$ = 20					; size = 1
_BlastFinalResults PROC					; COMDAT
; Line 9768
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
; Line 9784
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	DWORD PTR _TrainingDelay$[ebp]
	push	esi
	call	_GetOffsetIndex
	movzx	edi, ax
; Line 9786
	mov	eax, 4096				; 00001000H
	pop	ecx
	pop	ecx
	mov	DWORD PTR _TrainingDelay$[ebp], edi
	cmp	di, ax
	jb	SHORT $LN28@BlastFinal
	mov	eax, 8192				; 00002000H
	cmp	di, ax
	jb	SHORT $LN27@BlastFinal
$LN28@BlastFinal:
; Line 9792
	mov	DWORD PTR [esi+65333], 33		; 00000021H
; Line 9793
	call	_MrcDeadLoop
$LN27@BlastFinal:
; Line 9798
	movzx	ax, BYTE PTR _NumberOfElementsPerAlgoGenerated
	add	edi, -4096				; fffff000H
	imul	di, ax
; Line 9800
	xor	ebx, ebx
	movzx	edi, di
	mov	DWORD PTR _ThisSignalExists$[ebp], ebx
; Line 9801
	mov	BYTE PTR _ElementIndex$[ebp], bl
	cmp	BYTE PTR _NumberOfDelayElementsPerAlgoGenerated, bl
	jbe	SHORT $LN31@BlastFinal
$LL45@BlastFinal:
; Line 9805
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	ax, BYTE PTR _ElementIndex$[ebp]
	add	ax, di
	push	3
	movzx	eax, ax
	push	eax
	push	ebx
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN38@BlastFinal
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	jb	SHORT $LL45@BlastFinal
	jmp	SHORT $LN31@BlastFinal
$LN38@BlastFinal:
; Line 9810
	movzx	ax, BYTE PTR _ElementIndex$[ebp]
	add	ax, di
	movzx	eax, ax
; Line 9814
	mov	ecx, 176				; 000000b0H
	mov	DWORD PTR _ThisSignalExists$[ebp], eax
	cmp	ax, cx
	jb	SHORT $LN31@BlastFinal
; Line 9815
	mov	DWORD PTR [esi+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN31@BlastFinal:
; Line 9818
	cmp	BYTE PTR _Channel$[ebp], 2
	jae	$LN19@BlastFinal
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	ecx, DWORD PTR [eax+esi+55511]
	lea	eax, DWORD PTR [esi+eax*4+55438]
	mov	DWORD PTR tv480[ebp], ecx
	mov	DWORD PTR tv495[ebp], eax
	mov	edi, 255				; 000000ffH
$LL44@BlastFinal:
; Line 9819
	cmp	BYTE PTR [ecx-26903], bl
	je	$LN20@BlastFinal
	cmp	BYTE PTR [ecx], bl
	je	$LN20@BlastFinal
; Line 9822
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv417[ebp], eax
$LL16@BlastFinal:
; Line 9823
	mov	eax, DWORD PTR tv417[ebp]
	cmp	BYTE PTR [eax], bl
	je	$LN15@BlastFinal
; Line 9824
	mov	BYTE PTR _Strobe$[ebp], bl
$LL12@BlastFinal:
; Line 9825
	lea	eax, DWORD PTR _MaxBits$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
; Line 9828
	cmp	WORD PTR _ThisSignalExists$[ebp], bx
	je	SHORT $LN8@BlastFinal
	movzx	eax, WORD PTR _ThisSignalExists$[ebp]
	imul	eax, 44					; 0000002cH
	test	BYTE PTR _ElementsGenerated[eax+19], 16	; 00000010H
	je	SHORT $LN8@BlastFinal
; Line 9829
	mov	BYTE PTR _BitDelay$[ebp], 1
; Line 9830
	jmp	SHORT $LN7@BlastFinal
$LN8@BlastFinal:
; Line 9831
	mov	BYTE PTR _BitDelay$[ebp], bl
; Line 9832
	mov	BYTE PTR _MaxBits$[ebp], 1
$LN7@BlastFinal:
; Line 9834
	mov	BYTE PTR _Bit$[ebp], bl
	cmp	BYTE PTR _MaxBits$[ebp], bl
	jbe	$LN11@BlastFinal
$LL6@BlastFinal:
; Line 9836
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	cmp	BYTE PTR _BlastDirection$[ebp], bl
	jne	SHORT $LN3@BlastFinal
	push	19					; 00000013H
; Line 9837
	jmp	SHORT $LN46@BlastFinal
$LN3@BlastFinal:
; Line 9838
	push	2
	push	DWORD PTR _TrainingDelay$[ebp]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
; Line 9839
	cmp	BYTE PTR _BitDelay$[ebp], bl
	je	SHORT $LN1@BlastFinal
; Line 9841
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	push	2
	push	DWORD PTR _TrainingDelay$[ebp]
	push	esi
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
	movzx	eax, ax
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetLinearFromRegs
	add	esp, 48					; 00000030H
$LN1@BlastFinal:
; Line 9843
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	24					; 00000018H
$LN46@BlastFinal:
	push	DWORD PTR _TrainingDelay$[ebp]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	inc	BYTE PTR _Bit$[ebp]
	mov	al, BYTE PTR _Bit$[ebp]
	cmp	al, BYTE PTR _MaxBits$[ebp]
	jb	$LL6@BlastFinal
$LN11@BlastFinal:
; Line 9824
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL12@BlastFinal
	mov	ecx, DWORD PTR tv480[ebp]
$LN15@BlastFinal:
; Line 9822
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv417[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL16@BlastFinal
$LN20@BlastFinal:
; Line 9818
	mov	eax, DWORD PTR tv495[ebp]
	inc	BYTE PTR _Channel$[ebp]
	inc	ecx
	add	eax, 4
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv480[ebp], ecx
	mov	DWORD PTR tv495[ebp], eax
	jb	$LL44@BlastFinal
$LN19@BlastFinal:
	pop	edi
	pop	esi
; Line 9851
	xor	eax, eax
	pop	ebx
; Line 9852
	leave
	ret	0
_BlastFinalResults ENDP
_TEXT	ENDS
PUBLIC	_DisplayOrRestoreTrainingResults
; Function compile flags: /Ogspy
;	COMDAT _DisplayOrRestoreTrainingResults
_TEXT	SEGMENT
_OrgTrainingDelay$ = -72				; size = 2
tv792 = -68						; size = 4
tv1029 = -64						; size = 4
tv1056 = -60						; size = 4
_CCRange$ = -56						; size = 2
tv1048 = -52						; size = 4
tv1033 = -48						; size = 4
tv970 = -44						; size = 4
_CCValue$ = -40						; size = 2
_ThisSignalExists$ = -36				; size = 2
tv1055 = -32						; size = 4
_AccessMethod$ = -28					; size = 1
_Bit$ = -24						; size = 1
_TempValue$ = -20					; size = 4
_Rank$ = -13						; size = 1
_Strobe$ = -9						; size = 1
_MaxBits$ = -5						; size = 1
tv710 = -4						; size = 2
_ThisCcRange$ = -3					; size = 1
_ElementIndex$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_TrainingDelay$ = 16					; size = 2
_FaultyPartProcess$ = 20				; size = 1
_DisplayOrRestoreTrainingResults PROC			; COMDAT
; Line 9871
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
; Line 9894
	movzx	eax, WORD PTR _TrainingDelay$[ebp]
	push	ebx
	push	esi
; Line 9895
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	DWORD PTR _TrainingDelay$[ebp]
	xor	ebx, ebx
	push	esi
	mov	DWORD PTR _CCValue$[ebp], ebx
	mov	DWORD PTR _OrgTrainingDelay$[ebp], eax
	call	_GetOffsetIndex
	movzx	edi, ax
; Line 9897
	mov	eax, 65535				; 0000ffffH
	pop	ecx
	pop	ecx
	cmp	di, ax
; Line 9898
	je	$LN45@DisplayOrR
; Line 9901
	cmp	BYTE PTR [esi+65337], bl
	je	SHORT $LN49@DisplayOrR
; Line 9902
	mov	BYTE PTR _AccessMethod$[ebp], 2
; Line 9903
	push	1
; Line 9904
	jmp	SHORT $LN116@DisplayOrR
$LN49@DisplayOrR:
; Line 9905
	mov	BYTE PTR _AccessMethod$[ebp], 19	; 00000013H
; Line 9906
	push	ebx
$LN116@DisplayOrR:
	push	edi
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_BlastFinalResults
; Line 9910
	movzx	ax, BYTE PTR _NumberOfElementsPerAlgoGenerated
	add	edi, -4096				; fffff000H
	imul	di, ax
	movzx	eax, di
	add	esp, 16					; 00000010H
; Line 9912
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR _TrainingDelay$[ebp], eax
	jae	$LN45@DisplayOrR
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	ecx, DWORD PTR [eax+esi+55511]
	lea	eax, DWORD PTR [esi+eax*4+55438]
	mov	DWORD PTR tv1055[ebp], -55511		; ffff2729H
	sub	DWORD PTR tv1055[ebp], esi
	mov	DWORD PTR tv1033[ebp], ecx
	mov	DWORD PTR tv1048[ebp], eax
	mov	edi, 255				; 000000ffH
$LL106@DisplayOrR:
; Line 9913
	cmp	BYTE PTR [ecx-26903], bl
	je	$LN46@DisplayOrR
	cmp	BYTE PTR [ecx], bl
	je	$LN46@DisplayOrR
; Line 9919
	push	DWORD PTR _TrainingDelay$[ebp]
	call	_GetSignalInfoIndex
	pop	ecx
; Line 9920
	mov	DWORD PTR _ThisSignalExists$[ebp], ebx
; Line 9921
	mov	BYTE PTR _ElementIndex$[ebp], bl
	cmp	BYTE PTR _NumberOfDelayElementsPerAlgoGenerated, bl
	jbe	SHORT $LN40@DisplayOrR
$LL111@DisplayOrR:
; Line 9925
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	ax, BYTE PTR _ElementIndex$[ebp]
	add	ax, WORD PTR _TrainingDelay$[ebp]
	push	3
	movzx	eax, ax
	push	eax
	push	ebx
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN90@DisplayOrR
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	jb	SHORT $LL111@DisplayOrR
; Line 10025
	jmp	SHORT $LN40@DisplayOrR
$LN90@DisplayOrR:
; Line 9930
	movzx	ax, BYTE PTR _ElementIndex$[ebp]
	add	ax, WORD PTR _TrainingDelay$[ebp]
	movzx	eax, ax
	mov	DWORD PTR _ThisSignalExists$[ebp], eax
$LN40@DisplayOrR:
; Line 9935
	mov	eax, DWORD PTR tv1055[ebp]
	mov	ecx, DWORD PTR tv1033[ebp]
	add	eax, ecx
	mov	DWORD PTR tv1056[ebp], eax
	mov	eax, DWORD PTR tv1048[ebp]
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv970[ebp], eax
$LL38@DisplayOrR:
; Line 9936
	mov	eax, DWORD PTR tv970[ebp]
	cmp	BYTE PTR [eax], bl
	je	$LN37@DisplayOrR
; Line 9937
	mov	BYTE PTR _Strobe$[ebp], bl
$LL107@DisplayOrR:
; Line 9938
	lea	eax, DWORD PTR _MaxBits$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
; Line 9941
	cmp	WORD PTR _ThisSignalExists$[ebp], bx
	je	SHORT $LN30@DisplayOrR
	movzx	eax, WORD PTR _ThisSignalExists$[ebp]
	imul	eax, 44					; 0000002cH
	test	BYTE PTR _ElementsGenerated[eax+19], 16	; 00000010H
	jne	SHORT $LN108@DisplayOrR
$LN30@DisplayOrR:
; Line 9945
	mov	BYTE PTR _MaxBits$[ebp], 1
$LN108@DisplayOrR:
; Line 9947
	mov	BYTE PTR _Bit$[ebp], bl
	cmp	BYTE PTR _MaxBits$[ebp], bl
	jbe	$LN26@DisplayOrR
$LL109@DisplayOrR:
; Line 9964
	mov	BYTE PTR _ElementIndex$[ebp], bl
	cmp	BYTE PTR _NumberOfDelayElementsPerAlgoGenerated, bl
	jbe	$LN23@DisplayOrR
$LL110@DisplayOrR:
; Line 9968
	movzx	ax, BYTE PTR _ElementIndex$[ebp]
	add	ax, WORD PTR _TrainingDelay$[ebp]
	lea	ecx, DWORD PTR _TempValue$[ebp]
	push	ecx
	push	DWORD PTR _AccessMethod$[ebp]
	mov	WORD PTR tv1029[ebp], ax
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN24@DisplayOrR
; Line 9970
	movzx	eax, BYTE PTR [esi+65338]
	movzx	eax, BYTE PTR _ADdllGenerated[eax]
	mov	ecx, DWORD PTR tv1056[ebp]
	imul	eax, 5
	movzx	ecx, WORD PTR [esi+ecx*2+55494]
	add	eax, ecx
	movzx	ecx, BYTE PTR _ElementIndex$[ebp]
	imul	eax, 3
	add	eax, ecx
	cmp	WORD PTR _GranularityGenerated[eax*2], 1
	jne	SHORT $LN21@DisplayOrR
; Line 9971
	movzx	eax, WORD PTR _TempValue$[ebp]
	mov	DWORD PTR _CCValue$[ebp], eax
$LN21@DisplayOrR:
; Line 9975
	cmp	BYTE PTR [esi+65337], bl
	je	SHORT $LN24@DisplayOrR
; Line 9976
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	24					; 00000018H
	push	DWORD PTR tv1029[ebp]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
$LN24@DisplayOrR:
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	jb	$LL110@DisplayOrR
$LN23@DisplayOrR:
; Line 9985
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	DWORD PTR _AccessMethod$[ebp]
	push	DWORD PTR _TrainingDelay$[ebp]
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	eax, WORD PTR _SignalInfoGenerated[eax+6]
	pop	ecx
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN16@DisplayOrR
; Line 9991
	cmp	BYTE PTR [esi+65337], bl
	je	SHORT $LN16@DisplayOrR
; Line 9992
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _TrainingDelay$[ebp]
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	eax, WORD PTR _SignalInfoGenerated[eax+6]
	pop	ecx
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
$LN16@DisplayOrR:
; Line 10000
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetHalfClk
	movzx	eax, ax
	pop	ecx
	pop	ecx
	mov	DWORD PTR _CCRange$[ebp], eax
; Line 10001
	mov	BYTE PTR _ElementIndex$[ebp], bl
	cmp	BYTE PTR _NumberOfCCElementsGenerated, bl
	jbe	$LN12@DisplayOrR
$LL113@DisplayOrR:
; Line 10002
	movzx	ax, BYTE PTR _ElementIndex$[ebp]
	lea	ecx, DWORD PTR _TempValue$[ebp]
	push	ecx
	movzx	cx, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	push	DWORD PTR _AccessMethod$[ebp]
	add	cx, ax
	add	cx, WORD PTR _TrainingDelay$[ebp]
	mov	WORD PTR tv710[ebp], ax
	movzx	eax, cx
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN10@DisplayOrR
; Line 10004
	cmp	BYTE PTR [esi+65337], bl
	je	SHORT $LN10@DisplayOrR
; Line 10005
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	ax, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	add	ax, WORD PTR tv710[ebp]
	push	24					; 00000018H
	add	ax, WORD PTR _TrainingDelay$[ebp]
	movzx	eax, ax
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
$LN10@DisplayOrR:
; Line 10016
	movzx	ecx, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	movzx	eax, WORD PTR _TrainingDelay$[ebp]
	movzx	edx, BYTE PTR _ElementIndex$[ebp]
	add	ecx, eax
	add	edx, ecx
	imul	edx, 44					; 0000002cH
	test	BYTE PTR _ElementsGenerated[edx+19], 32	; 00000020H
	je	SHORT $LN13@DisplayOrR
; Line 10017
	mov	DWORD PTR _TempValue$[ebp], ebx
; Line 10022
	mov	BYTE PTR _ThisCcRange$[ebp], bl
	cmp	BYTE PTR _NumberOfCCRangesGenerated, bl
	jbe	SHORT $LN13@DisplayOrR
$LL7@DisplayOrR:
; Line 10025
	movzx	eax, BYTE PTR _ThisCcRange$[ebp]
	mov	cl, BYTE PTR _ElementIndex$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR tv792[ebp], eax
	cmp	cl, BYTE PTR _ClockCrossingsGenerated[eax]
	jne	SHORT $LN6@DisplayOrR
	movzx	eax, WORD PTR _ClockCrossingsGenerated[eax+4]
	movzx	ecx, WORD PTR _CCRange$[ebp]
	imul	eax, ecx
	push	100					; 00000064H
	cdq
	pop	ecx
	idiv	ecx
	movzx	ecx, WORD PTR _CCValue$[ebp]
	cmp	ecx, eax
	jae	SHORT $LN6@DisplayOrR
	mov	eax, DWORD PTR tv792[ebp]
	movzx	eax, WORD PTR _ClockCrossingsGenerated[eax+2]
	movzx	ecx, WORD PTR _CCRange$[ebp]
	imul	eax, ecx
	push	100					; 00000064H
	cdq
	pop	ecx
	idiv	ecx
	movzx	ecx, WORD PTR _CCValue$[ebp]
	cmp	ecx, eax
	jae	SHORT $LN91@DisplayOrR
$LN6@DisplayOrR:
; Line 10022
	inc	BYTE PTR _ThisCcRange$[ebp]
	mov	al, BYTE PTR _ThisCcRange$[ebp]
	cmp	al, BYTE PTR _NumberOfCCRangesGenerated
	jb	SHORT $LL7@DisplayOrR
; Line 10025
	jmp	SHORT $LN13@DisplayOrR
$LN91@DisplayOrR:
; Line 10026
	movzx	eax, BYTE PTR _ThisCcRange$[ebp]
	imul	eax, 10					; 0000000aH
	movsx	eax, WORD PTR _ClockCrossingsGenerated[eax+6]
	mov	DWORD PTR _TempValue$[ebp], eax
$LN13@DisplayOrR:
	inc	BYTE PTR _ElementIndex$[ebp]
	mov	al, BYTE PTR _ElementIndex$[ebp]
	cmp	al, BYTE PTR _NumberOfCCElementsGenerated
	jb	$LL113@DisplayOrR
$LN12@DisplayOrR:
; Line 10036
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	DWORD PTR _AccessMethod$[ebp]
	push	DWORD PTR _TrainingDelay$[ebp]
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	eax, WORD PTR _SignalInfoGenerated[eax+4]
	pop	ecx
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN27@DisplayOrR
; Line 10038
	cmp	BYTE PTR [esi+65337], bl
	je	SHORT $LN27@DisplayOrR
; Line 10039
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _TrainingDelay$[ebp]
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	eax, WORD PTR _SignalInfoGenerated[eax+4]
	pop	ecx
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	edi
	push	eax
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
$LN27@DisplayOrR:
	inc	BYTE PTR _Bit$[ebp]
	mov	al, BYTE PTR _Bit$[ebp]
	cmp	al, BYTE PTR _MaxBits$[ebp]
	jb	$LL109@DisplayOrR
$LN26@DisplayOrR:
; Line 10049
	lea	eax, DWORD PTR _Strobe$[ebp]
	push	eax
	push	DWORD PTR _OrgTrainingDelay$[ebp]
	push	esi
	call	_BreakStrobeLoop
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL107@DisplayOrR
$LN37@DisplayOrR:
; Line 9935
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv970[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL38@DisplayOrR
	mov	ecx, DWORD PTR tv1033[ebp]
$LN46@DisplayOrR:
; Line 9912
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1048[ebp], 4
	inc	ecx
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv1033[ebp], ecx
	jb	$LL106@DisplayOrR
$LN45@DisplayOrR:
	pop	edi
	pop	esi
; Line 10061
	xor	eax, eax
	pop	ebx
; Line 10062
	leave
	ret	0
_DisplayOrRestoreTrainingResults ENDP
_TEXT	ENDS
PUBLIC	_GetMinMaxRelativeAbsolute
; Function compile flags: /Ogspy
;	COMDAT _GetMinMaxRelativeAbsolute
_TEXT	SEGMENT
_TempValue$ = -8					; size = 4
_Strobe$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Index$ = 20						; size = 2
_Start$ = 24						; size = 2
_End$ = 28						; size = 2
_Flag$ = 32						; size = 1
_Min$ = 36						; size = 4
_Max$ = 40						; size = 4
_GetMinMaxRelativeAbsolute PROC				; COMDAT
; Line 10152
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 10157
	mov	eax, 57372				; 0000e01cH
	cmp	WORD PTR _Index$[ebp], ax
	jne	SHORT $LN15@GetMinMaxR
; Line 10158
	mov	DWORD PTR _Index$[ebp], 57373		; 0000e01dH
$LN15@GetMinMaxR:
; Line 10161
	cmp	BYTE PTR _Channel$[ebp], 2
	jae	$LN12@GetMinMaxR
	push	ebx
	push	esi
	push	edi
	movzx	edi, BYTE PTR _Channel$[ebp]
	imul	edi, 18					; 00000012H
$LL23@GetMinMaxR:
; Line 10162
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN13@GetMinMaxR
; Line 10168
	mov	BYTE PTR _Strobe$[ebp], 0
	xor	esi, esi
$LL22@GetMinMaxR:
; Line 10169
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN9@GetMinMaxR
; Line 10172
	test	BYTE PTR _Flag$[ebp], 2
	je	SHORT $LN6@GetMinMaxR
; Line 10173
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	DWORD PTR _Index$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 10174
	mov	ecx, DWORD PTR _TempValue$[ebp]
	mov	edx, DWORD PTR _Start$[ebp]
	movsx	eax, cx
	movsx	ebx, dx
	add	esp, 28					; 0000001cH
	add	ebx, eax
; Line 10175
	mov	ebx, DWORD PTR _Min$[ebp]
	lea	eax, DWORD PTR [edi+esi]
	jns	SHORT $LN5@GetMinMaxR
	add	eax, eax
	xor	edx, edx
; Line 10176
	jmp	SHORT $LN24@GetMinMaxR
$LN5@GetMinMaxR:
; Line 10177
	add	eax, eax
	add	edx, ecx
$LN24@GetMinMaxR:
	mov	WORD PTR [eax+ebx], dx
; Line 10179
	movsx	ebx, WORD PTR _End$[ebp]
	movsx	edx, cx
	add	ebx, edx
	jns	SHORT $LN3@GetMinMaxR
; Line 10180
	xor	ecx, ecx
; Line 10181
	jmp	SHORT $LN25@GetMinMaxR
$LN3@GetMinMaxR:
; Line 10182
	mov	edx, DWORD PTR _End$[ebp]
	add	ecx, edx
; Line 10184
	jmp	SHORT $LN25@GetMinMaxR
$LN6@GetMinMaxR:
; Line 10185
	mov	cx, WORD PTR _Start$[ebp]
	mov	edx, DWORD PTR _Min$[ebp]
	lea	eax, DWORD PTR [edi+esi]
	add	eax, eax
	mov	WORD PTR [eax+edx], cx
; Line 10186
	mov	cx, WORD PTR _End$[ebp]
$LN25@GetMinMaxR:
	mov	edx, DWORD PTR _Max$[ebp]
	mov	WORD PTR [eax+edx], cx
$LN9@GetMinMaxR:
	inc	BYTE PTR _Strobe$[ebp]
	inc	esi
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL22@GetMinMaxR
$LN13@GetMinMaxR:
; Line 10161
	inc	BYTE PTR _Channel$[ebp]
	add	edi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL23@GetMinMaxR
	pop	edi
	pop	esi
	pop	ebx
$LN12@GetMinMaxR:
; Line 10190
	xor	eax, eax
; Line 10191
	leave
	ret	0
_GetMinMaxRelativeAbsolute ENDP
_TEXT	ENDS
PUBLIC	_Center2D
; Function compile flags: /Ogspy
;	COMDAT _Center2D
_TEXT	SEGMENT
_ResultsComposite$ = -110904				; size = 110592
_EyeWidth$ = -312					; size = 192
_MaxEyeHeight$ = -120					; size = 36
_CenterX$ = -84						; size = 4
tv2155 = -80						; size = 4
tv2154 = -76						; size = 4
tv2199 = -72						; size = 4
tv2109 = -68						; size = 4
tv2198 = -64						; size = 4
tv4067 = -60						; size = 4
tv3358 = -60						; size = 4
tv4051 = -56						; size = 4
tv3977 = -56						; size = 4
tv3961 = -56						; size = 4
tv4053 = -52						; size = 4
tv3514 = -52						; size = 4
tv3446 = -52						; size = 4
_CenterYAligned$ = -48					; size = 4
tv3290 = -44						; size = 4
tv3496 = -40						; size = 4
tv3428 = -40						; size = 4
tv3376 = -40						; size = 4
_EyeWidthAtCenter$ = -40				; size = 2
_StrobeLoopCount$ = -33					; size = 1
tv2933 = -32						; size = 4
_MaxMarginInX$ = -32					; size = 2
_CenterY$ = -32						; size = 4
tv3981 = -28						; size = 4
tv2046 = -28						; size = 4
tv1072 = -28						; size = 4
tv956 = -28						; size = 4
tv79 = -28						; size = 4
tv2689 = -24						; size = 4
tv2392 = -24						; size = 4
tv1968 = -24						; size = 4
tv3838 = -20						; size = 4
tv2599 = -20						; size = 4
tv2514 = -20						; size = 4
tv2049 = -20						; size = 4
tv3698 = -16						; size = 4
tv1869 = -16						; size = 4
tv1491 = -16						; size = 4
tv1063 = -16						; size = 4
tv883 = -16						; size = 4
tv753 = -16						; size = 4
_Knob$ = -9						; size = 1
_Strobe$ = -8						; size = 1
tv3687 = -4						; size = 4
tv2573 = -4						; size = 4
tv2435 = -4						; size = 4
_AxisXCounter$ = -4					; size = 2
_AccumulateMarginFactor$ = -4				; size = 4
_MrcData$ = 8						; size = 4
_Results$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Dim1Index$ = 24					; size = 2
_Dim1Knobs$ = 28					; size = 1
_Dim1Min$ = 32						; size = 4
_Dim2Index$ = 36					; size = 2
_Dim2Min$ = 40						; size = 4
_Dim2Step$ = 44						; size = 2
_Dim2ConsolidateStrobes$ = 48				; size = 1
_Center2D PROC						; COMDAT
; Line 10209
	push	ebp
	mov	ebp, esp
	sub	esp, 110904				; 0001b138H
	push	ebx
	push	esi
; Line 10233
	xor	esi, esi
	push	edi
	mov	DWORD PTR _CenterY$[ebp], esi
; Line 10234
	mov	DWORD PTR _CenterYAligned$[ebp], esi
	jmp	$LN146@Center2D
$LL141@Center2D:
; Line 10237
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN67@Center2D
; Line 10243
	push	110592					; 0001b000H
	lea	eax, DWORD PTR _ResultsComposite$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 10244
	and	DWORD PTR tv2514[ebp], 0
	mov	DWORD PTR tv1072[ebp], 96		; 00000060H
$LL136@Center2D:
; Line 10245
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN63@Center2D
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	and	DWORD PTR tv2435[ebp], 0
	mov	DWORD PTR tv1063[ebp], eax
$LL127@Center2D:
; Line 10246
	and	DWORD PTR tv2392[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL128@Center2D:
; Line 10247
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN57@Center2D
; Line 10252
	movzx	edx, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR tv2514[ebp]
	lea	eax, DWORD PTR [edx+ecx]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2392[ebp]
	mov	ebx, 65535				; 0000ffffH
	shl	eax, 5
	lea	esi, DWORD PTR _ResultsComposite$[ebp+eax]
	movzx	edi, WORD PTR [esi]
	cmp	di, bx
	je	SHORT $LN142@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	add	ecx, edx
	add	ecx, DWORD PTR tv2435[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR tv2392[ebp]
	shl	ecx, 5
	add	ecx, ebx
	cmp	di, WORD PTR [ecx]
	jae	SHORT $LN125@Center2D
$LN142@Center2D:
; Line 10254
	mov	ecx, DWORD PTR tv2514[ebp]
	add	edx, ecx
	add	edx, DWORD PTR tv2435[ebp]
	mov	ecx, DWORD PTR _Results$[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv2392[ebp]
	shl	edx, 5
	add	ecx, edx
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [esi], dx
$LN125@Center2D:
; Line 10258
	lea	eax, DWORD PTR _ResultsComposite$[ebp+eax+2]
	movzx	edx, WORD PTR [eax]
	mov	esi, 65535				; 0000ffffH
	cmp	dx, si
	je	SHORT $LN51@Center2D
	cmp	dx, WORD PTR [ecx+2]
	jbe	SHORT $LN57@Center2D
$LN51@Center2D:
; Line 10260
	mov	cx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], cx
$LN57@Center2D:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv2392[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL128@Center2D
	inc	DWORD PTR tv2435[ebp]
	dec	DWORD PTR tv1063[ebp]
	jne	$LL127@Center2D
; Line 10245
	mov	esi, DWORD PTR _CenterYAligned$[ebp]
$LN63@Center2D:
; Line 10244
	add	DWORD PTR tv2514[ebp], 2
	dec	DWORD PTR tv1072[ebp]
	jne	$LL136@Center2D
; Line 10268
	cmp	BYTE PTR _Dim2ConsolidateStrobes$[ebp], 1
	jne	$LN50@Center2D
; Line 10269
	push	110592					; 0001b000H
	lea	eax, DWORD PTR _ResultsComposite$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 10270
	and	DWORD PTR tv2689[ebp], 0
; Line 10271
	mov	BYTE PTR _StrobeLoopCount$[ebp], 1
	mov	DWORD PTR tv956[ebp], 96		; 00000060H
$LL145@Center2D:
; Line 10272
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN48@Center2D
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	and	DWORD PTR tv2599[ebp], 0
	mov	DWORD PTR tv1869[ebp], eax
$LL129@Center2D:
; Line 10273
	and	DWORD PTR tv2573[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL130@Center2D:
; Line 10274
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN42@Center2D
; Line 10279
	movzx	eax, BYTE PTR _Channel$[ebp]
	add	eax, DWORD PTR tv2689[ebp]
	mov	ecx, DWORD PTR tv2599[ebp]
	add	eax, ecx
	mov	ecx, eax
	imul	ecx, 576				; 00000240H
	lea	esi, DWORD PTR _ResultsComposite$[ebp+ecx]
	movzx	edi, WORD PTR [esi]
	mov	edx, 65535				; 0000ffffH
	cmp	di, dx
	je	SHORT $LN144@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	mov	edx, eax
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv2573[ebp]
	shl	edx, 5
	add	edx, ebx
	cmp	di, WORD PTR [edx]
	jae	SHORT $LN126@Center2D
$LN144@Center2D:
; Line 10281
	mov	edx, DWORD PTR _Results$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2573[ebp]
	shl	eax, 5
	add	edx, eax
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [esi], ax
$LN126@Center2D:
; Line 10285
	lea	ecx, DWORD PTR _ResultsComposite$[ebp+ecx+2]
	movzx	eax, WORD PTR [ecx]
	mov	esi, 65535				; 0000ffffH
	cmp	ax, si
	je	SHORT $LN36@Center2D
	cmp	ax, WORD PTR [edx+2]
	jbe	SHORT $LN42@Center2D
$LN36@Center2D:
; Line 10287
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR [ecx], ax
$LN42@Center2D:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv2573[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL130@Center2D
	inc	DWORD PTR tv2599[ebp]
	dec	DWORD PTR tv1869[ebp]
	jne	$LL129@Center2D
; Line 10272
	mov	esi, DWORD PTR _CenterYAligned$[ebp]
$LN48@Center2D:
; Line 10270
	add	DWORD PTR tv2689[ebp], 2
	dec	DWORD PTR tv956[ebp]
	jne	$LL145@Center2D
; Line 10292
	jmp	SHORT $LN35@Center2D
$LN50@Center2D:
; Line 10293
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	add	ecx, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [ecx+eax*4+55454]
	mov	BYTE PTR _StrobeLoopCount$[ebp], al
$LN35@Center2D:
; Line 10299
	mov	BYTE PTR _Strobe$[ebp], 0
$LL139@Center2D:
; Line 10300
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN33@Center2D
; Line 10303
	mov	al, BYTE PTR _StrobeLoopCount$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], al
	jae	$LN30@Center2D
; Line 10304
	push	192					; 000000c0H
	lea	eax, DWORD PTR _EyeWidth$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
; Line 10306
	movzx	ecx, BYTE PTR _Channel$[ebp]
	movzx	esi, BYTE PTR _Strobe$[ebp]
	imul	ecx, 18					; 00000012H
	and	DWORD PTR _MaxMarginInX$[ebp], 0
	lea	ebx, DWORD PTR [ecx+esi]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv2049[ebp], ebx
	shl	ebx, 5
	lea	eax, DWORD PTR _EyeWidth$[ebp]
	lea	ecx, DWORD PTR _ResultsComposite$[ebp+ebx]
	mov	DWORD PTR tv883[ebp], 96		; 00000060H
$LL29@Center2D:
; Line 10308
	movzx	edx, WORD PTR [ecx+2]
	movzx	edi, WORD PTR [ecx]
	cmp	dx, di
	jae	SHORT $LN26@Center2D
; Line 10309
	xor	edx, edx
	mov	WORD PTR [eax], dx
; Line 10310
	jmp	SHORT $LN28@Center2D
$LN26@Center2D:
; Line 10313
	sub	edx, edi
	mov	WORD PTR [eax], dx
; Line 10317
	cmp	WORD PTR _MaxMarginInX$[ebp], dx
	jae	SHORT $LN28@Center2D
; Line 10318
	movzx	edx, dx
	mov	DWORD PTR _MaxMarginInX$[ebp], edx
$LN28@Center2D:
	add	ecx, 1152				; 00000480H
	inc	eax
	inc	eax
	dec	DWORD PTR tv883[ebp]
	jne	SHORT $LL29@Center2D
; Line 10337
	movzx	eax, WORD PTR _MaxMarginInX$[ebp]
	imul	eax, 7
	push	10					; 0000000aH
	cdq
	pop	ecx
	idiv	ecx
	xor	edi, edi
	and	DWORD PTR tv2933[ebp], edi
	mov	DWORD PTR _AccumulateMarginFactor$[ebp], edi
	lea	ecx, DWORD PTR _EyeWidth$[ebp]
	mov	DWORD PTR tv753[ebp], 96		; 00000060H
	mov	DWORD PTR tv2046[ebp], eax
$LL140@Center2D:
	movzx	eax, WORD PTR [ecx]
	cmp	eax, DWORD PTR tv2046[ebp]
	jl	SHORT $LN23@Center2D
	mov	eax, DWORD PTR _Dim2Min$[ebp]
	mov	edx, DWORD PTR tv2049[ebp]
	movzx	edx, WORD PTR [eax+edx*2]
	movzx	eax, WORD PTR [ecx]
	add	edx, DWORD PTR tv2933[ebp]
	imul	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	DWORD PTR _AccumulateMarginFactor$[ebp], edx
	add	edi, eax
$LN23@Center2D:
	inc	DWORD PTR tv2933[ebp]
	inc	ecx
	inc	ecx
	dec	DWORD PTR tv753[ebp]
	jne	SHORT $LL140@Center2D
	test	edi, edi
	je	$LN100@Center2D
; Line 10341
	mov	eax, edi
	shr	eax, 1
	add	eax, DWORD PTR _AccumulateMarginFactor$[ebp]
	xor	edx, edx
	div	edi
	mov	DWORD PTR _CenterY$[ebp], eax
; Line 10345
	lea	eax, DWORD PTR _CenterY$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _Dim2Index$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 10350
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	SHORT $LN131@Center2D
	mov	ecx, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [ebx+ecx]
	movzx	ecx, BYTE PTR _Dim1Knobs$[ebp]
	lea	eax, DWORD PTR _MaxEyeHeight$[ebp+esi*2]
	mov	DWORD PTR tv79[ebp], ecx
$LL134@Center2D:
; Line 10351
	xor	ecx, ecx
; Line 10352
	xor	esi, esi
	mov	WORD PTR [eax], cx
	mov	DWORD PTR _AxisXCounter$[ebp], esi
$LL135@Center2D:
; Line 10353
	xor	edi, edi
	mov	ecx, edx
	mov	DWORD PTR tv1491[ebp], 96		; 00000060H
$LL13@Center2D:
; Line 10356
	mov	ebx, DWORD PTR _AxisXCounter$[ebp]
	cmp	bx, WORD PTR [ecx]
	jb	SHORT $LN12@Center2D
	cmp	bx, WORD PTR [ecx+2]
	ja	SHORT $LN12@Center2D
; Line 10357
	add	edi, DWORD PTR _Dim2Step$[ebp]
$LN12@Center2D:
; Line 10354
	add	ecx, 1152				; 00000480H
	dec	DWORD PTR tv1491[ebp]
	jne	SHORT $LL13@Center2D
; Line 10360
	cmp	di, si
	jbe	SHORT $LN15@Center2D
; Line 10361
	movzx	esi, di
$LN15@Center2D:
; Line 10352
	inc	DWORD PTR _AxisXCounter$[ebp]
	mov	ecx, 128				; 00000080H
	cmp	WORD PTR _AxisXCounter$[ebp], cx
	jb	SHORT $LL135@Center2D
	mov	WORD PTR [eax], si
	add	edx, 576				; 00000240H
	add	eax, 36					; 00000024H
	dec	DWORD PTR tv79[ebp]
	jne	SHORT $LL134@Center2D
$LN131@Center2D:
; Line 10369
	mov	eax, DWORD PTR _CenterY$[ebp]
	imul	eax, 10					; 0000000aH
	xor	edx, edx
	add	eax, 5
	push	10					; 0000000aH
	pop	esi
	div	esi
; Line 10372
	mov	esi, DWORD PTR tv2049[ebp]
	mov	edx, DWORD PTR _Dim2Min$[ebp]
	movzx	edx, WORD PTR [edx+esi*2]
	movzx	ecx, WORD PTR _Dim2Step$[ebp]
	movzx	eax, ax
	sub	eax, edx
	xor	edx, edx
	div	ecx
	mov	esi, eax
	imul	esi, ecx
	mov	DWORD PTR _CenterYAligned$[ebp], esi
$LN30@Center2D:
; Line 10377
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	mov	BYTE PTR _Knob$[ebp], 0
	jbe	$LN6@Center2D
	movzx	eax, WORD PTR _Dim2Step$[ebp]
	movzx	edi, BYTE PTR _Channel$[ebp]
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR tv2109[ebp], ecx
	lea	ecx, DWORD PTR [eax+eax]
	imul	eax, 3
	and	DWORD PTR tv3290[ebp], 0
	mov	DWORD PTR tv2154[ebp], ecx
	add	ecx, esi
	mov	DWORD PTR tv2198[ebp], eax
	add	eax, esi
	lea	esi, DWORD PTR [edi+esi*2]
	imul	esi, 18					; 00000012H
	mov	DWORD PTR tv2155[ebp], ecx
	mov	DWORD PTR tv2199[ebp], eax
	movzx	eax, BYTE PTR _Strobe$[ebp]
	lea	ecx, DWORD PTR _CenterX$[ebp]
	mov	DWORD PTR tv3687[ebp], ecx
	lea	ecx, DWORD PTR _EyeWidthAtCenter$[ebp]
	add	esi, eax
	mov	DWORD PTR tv3698[ebp], ecx
	lea	ecx, DWORD PTR _MaxEyeHeight$[ebp+eax*2]
	shl	esi, 5
	add	esi, DWORD PTR _Results$[ebp]
	mov	DWORD PTR tv1968[ebp], eax
	mov	DWORD PTR tv3838[ebp], ecx
$LL8@Center2D:
; Line 10378
	movzx	edx, WORD PTR [esi+2]
	movzx	eax, WORD PTR [esi]
	mov	ebx, DWORD PTR tv3698[ebp]
	mov	ecx, edx
	sub	ecx, eax
	mov	DWORD PTR tv3981[ebp], ecx
	mov	WORD PTR [ebx], cx
; Line 10384
	mov	ecx, DWORD PTR tv3838[ebp]
	movzx	ecx, WORD PTR [ecx]
	movzx	eax, ax
	movzx	edx, dx
	add	eax, edx
; Line 10388
	mov	edx, DWORD PTR tv2109[ebp]
	imul	eax, ecx
	imul	ecx, 6
	imul	eax, 6
	cmp	edx, 96					; 00000060H
	jae	$LN121@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [edi+edx*2]
	add	edx, DWORD PTR tv3290[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv1968[ebp]
	shl	edx, 5
	add	edx, ebx
	mov	DWORD PTR tv3358[ebp], edx
	movzx	edx, WORD PTR [edx+2]
	mov	ebx, 65535				; 0000ffffH
	mov	DWORD PTR tv3977[ebp], edx
	cmp	dx, bx
	je	SHORT $LN121@Center2D
	movzx	ebx, WORD PTR _Dim2Step$[ebp]
	mov	edx, DWORD PTR _CenterYAligned$[ebp]
	sub	edx, ebx
	js	SHORT $LN121@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [edi+edx*2]
	add	edx, DWORD PTR tv3290[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv1968[ebp]
	shl	edx, 5
	add	edx, ebx
	mov	DWORD PTR tv3376[ebp], edx
	movzx	edx, WORD PTR [edx+2]
	mov	ebx, 65535				; 0000ffffH
	cmp	dx, bx
	je	SHORT $LN121@Center2D
; Line 10394
	mov	edx, DWORD PTR tv3838[ebp]
	movzx	edx, WORD PTR [edx]
	movzx	ebx, WORD PTR tv3981[ebp]
	lea	edx, DWORD PTR [ebx+edx*2]
	mov	DWORD PTR tv4053[ebp], edx
	mov	edx, DWORD PTR tv3358[ebp]
	movzx	ebx, WORD PTR [edx]
	mov	edx, DWORD PTR tv3376[ebp]
	movzx	edx, WORD PTR [edx+2]
	add	ebx, edx
	movzx	edx, WORD PTR tv3977[ebp]
	add	ebx, edx
	mov	edx, DWORD PTR tv3376[ebp]
	movzx	edx, WORD PTR [edx]
	add	ebx, edx
	mov	edx, DWORD PTR tv4053[ebp]
	imul	ebx, edx
	add	eax, ebx
; Line 10395
	lea	ecx, DWORD PTR [ecx+edx*2]
$LN121@Center2D:
; Line 10399
	mov	edx, DWORD PTR tv2155[ebp]
	cmp	edx, 96					; 00000060H
	jae	$LN122@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [edi+edx*2]
	add	edx, DWORD PTR tv3290[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv1968[ebp]
	shl	edx, 5
	add	edx, ebx
	mov	DWORD PTR tv3428[ebp], edx
	movzx	edx, WORD PTR [edx+2]
	mov	ebx, 65535				; 0000ffffH
	cmp	dx, bx
	je	SHORT $LN122@Center2D
	mov	edx, DWORD PTR _CenterYAligned$[ebp]
	sub	edx, DWORD PTR tv2154[ebp]
	js	SHORT $LN122@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [edi+edx*2]
	add	edx, DWORD PTR tv3290[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv1968[ebp]
	shl	edx, 5
	add	edx, ebx
	mov	DWORD PTR tv3446[ebp], edx
	movzx	edx, WORD PTR [edx+2]
	mov	ebx, 65535				; 0000ffffH
	mov	DWORD PTR tv3961[ebp], edx
	cmp	dx, bx
	je	SHORT $LN122@Center2D
; Line 10405
	mov	edx, DWORD PTR tv3838[ebp]
	movzx	edx, WORD PTR [edx]
	movzx	ebx, WORD PTR tv3981[ebp]
	lea	edx, DWORD PTR [edx+ebx*2]
	mov	DWORD PTR tv4067[ebp], edx
	mov	edx, DWORD PTR tv3446[ebp]
	movzx	ebx, WORD PTR [edx]
	movzx	edx, WORD PTR tv3961[ebp]
	add	ebx, edx
	mov	edx, DWORD PTR tv3428[ebp]
	movzx	edx, WORD PTR [edx+2]
	add	ebx, edx
	mov	edx, DWORD PTR tv3428[ebp]
	movzx	edx, WORD PTR [edx]
	add	ebx, edx
	mov	edx, DWORD PTR tv4067[ebp]
	imul	ebx, edx
	add	eax, ebx
; Line 10406
	lea	ecx, DWORD PTR [ecx+edx*2]
$LN122@Center2D:
; Line 10409
	mov	edx, DWORD PTR tv2199[ebp]
	cmp	edx, 96					; 00000060H
	jae	$LN123@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [edi+edx*2]
	add	edx, DWORD PTR tv3290[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv1968[ebp]
	shl	edx, 5
	add	edx, ebx
	mov	DWORD PTR tv3496[ebp], edx
	movzx	edx, WORD PTR [edx+2]
	mov	ebx, 65535				; 0000ffffH
	cmp	dx, bx
	je	SHORT $LN123@Center2D
	mov	edx, DWORD PTR _CenterYAligned$[ebp]
	sub	edx, DWORD PTR tv2198[ebp]
	js	SHORT $LN123@Center2D
	mov	ebx, DWORD PTR _Results$[ebp]
	lea	edx, DWORD PTR [edi+edx*2]
	add	edx, DWORD PTR tv3290[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv1968[ebp]
	shl	edx, 5
	add	edx, ebx
	mov	DWORD PTR tv3514[ebp], edx
	movzx	edx, WORD PTR [edx+2]
	mov	ebx, 65535				; 0000ffffH
	cmp	dx, bx
	je	SHORT $LN123@Center2D
; Line 10415
	movzx	ebx, WORD PTR tv3981[ebp]
	mov	DWORD PTR tv4051[ebp], ebx
	mov	ebx, DWORD PTR tv3514[ebp]
	movzx	ebx, WORD PTR [ebx]
	movzx	edx, dx
	add	ebx, edx
	mov	edx, DWORD PTR tv3496[ebp]
	movzx	edx, WORD PTR [edx+2]
	add	ebx, edx
	mov	edx, DWORD PTR tv3496[ebp]
	movzx	edx, WORD PTR [edx]
	add	ebx, edx
	mov	edx, DWORD PTR tv4051[ebp]
	imul	ebx, edx
; Line 10416
	imul	edx, 6
	imul	ebx, 3
	add	eax, ebx
	add	ecx, edx
$LN123@Center2D:
; Line 10418
	test	ecx, ecx
	je	SHORT $LN2@Center2D
; Line 10419
	xor	edx, edx
	div	ecx
	mov	ecx, DWORD PTR tv3687[ebp]
	shr	eax, 1
	mov	DWORD PTR [ecx], eax
; Line 10420
	jmp	SHORT $LN1@Center2D
$LN2@Center2D:
; Line 10421
	mov	eax, DWORD PTR tv3687[ebp]
	and	DWORD PTR [eax], 0
$LN1@Center2D:
; Line 10423
	movzx	ax, BYTE PTR _Knob$[ebp]
	push	DWORD PTR tv3687[ebp]
	add	ax, WORD PTR _Dim1Index$[ebp]
	push	24					; 00000018H
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	DWORD PTR tv3698[ebp], 2
	add	DWORD PTR tv3838[ebp], 36		; 00000024H
	add	DWORD PTR tv3687[ebp], 4
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _Knob$[ebp]
	mov	al, BYTE PTR _Knob$[ebp]
	inc	DWORD PTR tv3290[ebp]
	add	esi, 576				; 00000240H
	cmp	al, BYTE PTR _Dim1Knobs$[ebp]
	jb	$LL8@Center2D
$LN6@Center2D:
; Line 10430
	lea	eax, DWORD PTR _CenterY$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _Dim2Index$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	mov	esi, DWORD PTR _CenterYAligned$[ebp]
	add	esp, 28					; 0000001cH
$LN33@Center2D:
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL139@Center2D
$LN67@Center2D:
; Line 10236
	inc	BYTE PTR _Channel$[ebp]
$LN146@Center2D:
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL141@Center2D
; Line 10434
	xor	eax, eax
$LN69@Center2D:
	pop	edi
	pop	esi
	pop	ebx
; Line 10435
	leave
	ret	0
$LN100@Center2D:
; Line 10339
	push	24					; 00000018H
	pop	eax
	jmp	SHORT $LN69@Center2D
_Center2D ENDP
_TEXT	ENDS
PUBLIC	_Create1DSweep
; Function compile flags: /Ogspy
;	COMDAT _Create1DSweep
_TEXT	SEGMENT
_PassFail$ = -1424					; size = 864
_Dim1StartRestore$ = -560				; size = 144
_ResultsB0Backup$ = -416				; size = 144
_Value$ = -272						; size = 144
_ElementDone$ = -128					; size = 36
_EdgeFound$ = -92					; size = 36
_LowHighFlag$ = -56					; size = 36
_PostTestFlags$ = -20					; size = 2
_PerBitSweepBackup$ = -16				; size = 1
tv641 = -12						; size = 4
_IndSt$ = -12						; size = 1
tv3479 = -8						; size = 4
tv2015 = -8						; size = 4
tv875 = -8						; size = 4
tv3086 = -4						; size = 4
tv3074 = -4						; size = 4
tv710 = -4						; size = 4
tv2583 = 0						; size = 4
_IndCh$ = 0						; size = 1
_ChannelBackup$ = 7					; size = 1
_LockStepRun$ = 11					; size = 1
tv3859 = 12						; size = 4
tv3635 = 12						; size = 4
tv3002 = 12						; size = 4
tv2642 = 12						; size = 4
tv3474 = 16						; size = 4
tv3119 = 16						; size = 4
tv1151 = 16						; size = 4
tv1030 = 16						; size = 4
_TestFinished$ = 22					; size = 1
_LimitFound$ = 23					; size = 1
tv3176 = 24						; size = 4
tv3121 = 24						; size = 4
tv2710 = 24						; size = 4
tv2080 = 31						; size = 1
tv3633 = 32						; size = 4
tv2995 = 32						; size = 4
tv2751 = 32						; size = 4
tv2644 = 32						; size = 4
tv1852 = 32						; size = 4
_MaximumBits$ = 39					; size = 1
tv2089 = 43						; size = 1
_Element$ = 44						; size = 1
_MrcData$ = 56						; size = 4
_Channel$ = 60						; size = 1
_Rank$ = 64						; size = 1
_Dim1Index$ = 68					; size = 2
_Dim1Knobs$ = 72					; size = 1
_Dim1Start$ = 76					; size = 4
_Dim1Min$ = 80						; size = 4
_Dim1Max$ = 84						; size = 4
_Dim1Step$ = 88						; size = 2
_FullSweep$ = 92					; size = 1
_SkipInitialValueProgramming$ = 96			; size = 1
_PerBitSweep$ = 100					; size = 1
_NumberElements$ = 104					; size = 4
_ExecuteTest$ = 108					; size = 4
_Results$ = 112						; size = 4
_HeaderLabel$ = 116					; size = 4
_DitherVal$ = 120					; size = 1
_Stage$ = 124						; size = 1
_Create1DSweep PROC					; COMDAT
; Line 10724
	push	ebp
	lea	ebp, DWORD PTR [esp-48]
	sub	esp, 1472				; 000005c0H
	push	ebx
	push	esi
	push	edi
; Line 10746
	push	144					; 00000090H
	push	DWORD PTR _Dim1Start$[ebp]
	lea	eax, DWORD PTR _Dim1StartRestore$[ebp]
	push	eax
	call	_MmrcMemCopy
; Line 10752
	mov	cl, BYTE PTR _Stage$[ebp]
	mov	BYTE PTR tv2080[ebp], cl
	add	esp, 12					; 0000000cH
	and	BYTE PTR tv2080[ebp], 1
	mov	BYTE PTR _MaximumBits$[ebp], 0
	mov	BYTE PTR _LockStepRun$[ebp], 0
	je	SHORT $LN148@Create1DSw
; Line 10753
	mov	al, BYTE PTR _PerBitSweep$[ebp]
	mov	BYTE PTR _PerBitSweepBackup$[ebp], al
; Line 10755
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	edx, 256				; 00000100H
	or	WORD PTR [eax+65586], dx
	mov	BYTE PTR _PerBitSweep$[ebp], 0
	jmp	SHORT $LN145@Create1DSw
$LN148@Create1DSw:
; Line 10757
	test	cl, 2
	je	$LN146@Create1DSw
; Line 10758
	mov	al, BYTE PTR _PerBitSweep$[ebp]
	mov	BYTE PTR _PerBitSweepBackup$[ebp], al
; Line 10760
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	edx, 65279				; 0000feffH
	and	WORD PTR [eax+65586], dx
	mov	BYTE PTR _PerBitSweep$[ebp], 1
$LN145@Create1DSw:
; Line 10767
	movzx	eax, WORD PTR [eax+65586]
; Line 10769
	mov	BYTE PTR tv2089[ebp], cl
	and	BYTE PTR tv2089[ebp], 8
	mov	DWORD PTR _PostTestFlags$[ebp], eax
	je	SHORT $LN144@Create1DSw
; Line 10770
	mov	BYTE PTR _LockStepRun$[ebp], 8
$LN144@Create1DSw:
; Line 10773
	mov	bl, BYTE PTR _Channel$[ebp]
; Line 10777
	mov	esi, DWORD PTR _NumberElements$[ebp]
	mov	BYTE PTR _ChannelBackup$[ebp], bl
	jmp	SHORT $LN332@Create1DSw
$LL143@Create1DSw:
; Line 10778
	mov	eax, DWORD PTR _HeaderLabel$[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN142@Create1DSw
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN191@Create1DSw
$LN142@Create1DSw:
; Line 10777
	inc	bl
	mov	BYTE PTR _Channel$[ebp], bl
$LN332@Create1DSw:
	cmp	bl, 2
	jb	SHORT $LL143@Create1DSw
; Line 10778
	jmp	SHORT $LN137@Create1DSw
$LN191@Create1DSw:
; Line 10780
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	SHORT $LN137@Create1DSw
	movzx	edi, BYTE PTR _Dim1Knobs$[ebp]
	movzx	eax, bl
	mov	bl, BYTE PTR [eax+esi]
$LL139@Create1DSw:
; Line 10781
	mov	BYTE PTR _Element$[ebp], 0
	test	bl, bl
	jbe	SHORT $LN138@Create1DSw
$LL136@Create1DSw:
; Line 10782
	lea	eax, DWORD PTR _MaximumBits$[ebp]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	inc	BYTE PTR _Element$[ebp]
	cmp	BYTE PTR _Element$[ebp], bl
	jb	SHORT $LL136@Create1DSw
$LN138@Create1DSw:
; Line 10780
	dec	edi
	jne	SHORT $LL139@Create1DSw
$LN137@Create1DSw:
; Line 10795
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN127@Create1DSw
	mov	edi, DWORD PTR _Dim1Start$[ebp]
	movzx	eax, al
	mov	ebx, eax
	imul	ebx, 18					; 00000012H
	add	esi, eax
	mov	DWORD PTR tv2642[ebp], ebx
	mov	DWORD PTR tv2644[ebp], esi
$LL129@Create1DSw:
; Line 10796
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN128@Create1DSw
; Line 10802
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN128@Create1DSw
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	mov	DWORD PTR tv2583[ebp], ebx
	mov	DWORD PTR tv1151[ebp], eax
$LL125@Create1DSw:
; Line 10803
	cmp	BYTE PTR [esi], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	$LN124@Create1DSw
$LL304@Create1DSw:
; Line 10804
	lea	eax, DWORD PTR _MaximumBits$[ebp]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN121@Create1DSw
; Line 10807
	movzx	eax, BYTE PTR _Element$[ebp]
	mov	ecx, DWORD PTR tv2583[ebp]
	add	eax, ecx
; Line 10808
	cmp	BYTE PTR _MaximumBits$[ebp], 0
	mov	BYTE PTR _LowHighFlag$[ebp+eax], 0
	jbe	SHORT $LN116@Create1DSw
	mov	dl, BYTE PTR _Stage$[ebp]
	mov	esi, DWORD PTR _Results$[ebp]
	mov	ecx, eax
	and	dl, 31					; 0000001fH
	shl	ecx, 5
	lea	ecx, DWORD PTR [ecx+esi+2]
	movzx	esi, BYTE PTR _MaximumBits$[ebp]
$LL118@Create1DSw:
; Line 10809
	mov	bx, WORD PTR [edi+eax*4]
	mov	WORD PTR [ecx-2], bx
; Line 10810
	xor	ebx, ebx
	mov	WORD PTR [ecx], bx
; Line 10811
	cmp	dl, 6
	jne	SHORT $LN117@Create1DSw
; Line 10812
	mov	bx, WORD PTR [edi+eax*4+2]
	mov	WORD PTR [ecx], bx
$LN117@Create1DSw:
	add	ecx, 4
	dec	esi
	jne	SHORT $LL118@Create1DSw
$LN116@Create1DSw:
; Line 10819
	cmp	BYTE PTR _SkipInitialValueProgramming$[ebp], 0
	jne	SHORT $LN121@Create1DSw
; Line 10820
	shl	eax, 2
	lea	ecx, DWORD PTR _Value$[ebp+eax]
	movzx	eax, WORD PTR [eax+edi]
; Line 10821
	push	ecx
	push	24					; 00000018H
	push	DWORD PTR _Dim1Index$[ebp]
	mov	DWORD PTR [ecx], eax
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN121@Create1DSw:
	inc	BYTE PTR _Element$[ebp]
	mov	esi, DWORD PTR tv2644[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [esi]
	jb	$LL304@Create1DSw
$LN124@Create1DSw:
; Line 10802
	add	DWORD PTR tv2583[ebp], 18		; 00000012H
	dec	DWORD PTR tv1151[ebp]
	jne	$LL125@Create1DSw
	mov	ebx, DWORD PTR tv2642[ebp]
$LN128@Create1DSw:
; Line 10795
	inc	BYTE PTR _Channel$[ebp]
	inc	esi
	add	ebx, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv2644[ebp], esi
	mov	DWORD PTR tv2642[ebp], ebx
	jb	$LL129@Create1DSw
$LN127@Create1DSw:
; Line 10829
	push	864					; 00000360H
	lea	eax, DWORD PTR _PassFail$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 10830
	push	9
	xor	eax, eax
	pop	ecx
	lea	edi, DWORD PTR _ElementDone$[ebp]
	rep stosd
; Line 10832
	cmp	BYTE PTR tv2089[ebp], al
	je	SHORT $LL112@Create1DSw
; Line 10842
	mov	eax, DWORD PTR _MrcData$[ebp]
	or	WORD PTR [eax+65586], 64		; 00000040H
$LL112@Create1DSw:
; Line 10848
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN108@Create1DSw
	mov	ecx, DWORD PTR _NumberElements$[ebp]
	movzx	eax, al
	mov	ebx, eax
	lea	esi, DWORD PTR [eax+ecx]
	imul	ebx, 18					; 00000012H
	mov	DWORD PTR tv2751[ebp], esi
$LL110@Create1DSw:
; Line 10849
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN109@Create1DSw
; Line 10855
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN109@Create1DSw
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	mov	DWORD PTR tv2710[ebp], ebx
	mov	DWORD PTR tv1030[ebp], eax
$LL106@Create1DSw:
; Line 10856
	cmp	BYTE PTR [esi], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	SHORT $LN105@Create1DSw
$LL307@Create1DSw:
; Line 10857
	push	0
	push	0
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN102@Create1DSw
; Line 10861
	movzx	eax, BYTE PTR _Element$[ebp]
	mov	ecx, DWORD PTR tv2710[ebp]
	lea	esi, DWORD PTR [eax+ecx]
	cmp	BYTE PTR _ElementDone$[ebp+esi], 0
	jne	SHORT $LN102@Create1DSw
	mov	eax, esi
	imul	eax, 24					; 00000018H
	push	0
	lea	eax, DWORD PTR _PassFail$[ebp+eax]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _MaximumBits$[ebp]
	push	edi
	call	_DeterminePassFailPerStrobe
	add	esp, 20					; 00000014H
	cmp	al, 255					; 000000ffH
	je	SHORT $LN102@Create1DSw
; Line 10862
	lea	eax, DWORD PTR _Value$[ebp+esi*4]
	push	eax
	push	28					; 0000001cH
	push	DWORD PTR _Dim1Index$[ebp]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN102@Create1DSw:
	inc	BYTE PTR _Element$[ebp]
	mov	esi, DWORD PTR tv2751[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [esi]
	jb	SHORT $LL307@Create1DSw
$LN105@Create1DSw:
; Line 10855
	add	DWORD PTR tv2710[ebp], 18		; 00000012H
	dec	DWORD PTR tv1030[ebp]
	jne	$LL106@Create1DSw
$LN109@Create1DSw:
; Line 10848
	inc	BYTE PTR _Channel$[ebp]
	inc	esi
	add	ebx, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv2751[ebp], esi
	jb	$LL110@Create1DSw
$LN108@Create1DSw:
; Line 10874
	lea	eax, DWORD PTR _PassFail$[ebp]
	push	eax
	push	DWORD PTR _Dim1Knobs$[ebp]
	push	DWORD PTR _NumberElements$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	call	DWORD PTR _ExecuteTest$[ebp]
; Line 10875
	mov	ax, WORD PTR _PostTestFlags$[ebp]
	mov	WORD PTR [edi+65586], ax
; Line 10882
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 24					; 00000018H
	mov	BYTE PTR _TestFinished$[ebp], 1
	mov	BYTE PTR _LimitFound$[ebp], 0
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN96@Create1DSw
	mov	ecx, DWORD PTR _NumberElements$[ebp]
	movzx	eax, al
	mov	esi, eax
	imul	esi, 18					; 00000012H
	add	eax, ecx
	mov	DWORD PTR tv3119[ebp], esi
	mov	DWORD PTR tv3121[ebp], eax
$LL98@Create1DSw:
; Line 10883
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN97@Create1DSw
; Line 10890
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN97@Create1DSw
	movzx	ebx, BYTE PTR _Dim1Knobs$[ebp]
	mov	edi, esi
	mov	DWORD PTR tv1852[ebp], ebx
$LL94@Create1DSw:
; Line 10891
	mov	eax, DWORD PTR tv3121[ebp]
	cmp	BYTE PTR [eax], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	SHORT $LN93@Create1DSw
$LL91@Create1DSw:
; Line 10892
	lea	eax, DWORD PTR _MaximumBits$[ebp]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN90@Create1DSw
; Line 10895
	movzx	eax, BYTE PTR _Element$[ebp]
	add	eax, edi
	lea	ecx, DWORD PTR _ResultsB0Backup$[ebp+eax*4]
	push	ecx
	mov	ecx, eax
	shl	ecx, 5
	add	ecx, DWORD PTR _Results$[ebp]
	push	ecx
	mov	ecx, eax
	movzx	eax, BYTE PTR _LowHighFlag$[ebp+eax]
	imul	ecx, 24					; 00000018H
	lea	ecx, DWORD PTR _PassFail$[ebp+ecx]
	push	ecx
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	8
	push	DWORD PTR _MrcData$[ebp]
	call	_SpreadBitResults
	add	esp, 28					; 0000001cH
$LN90@Create1DSw:
	inc	BYTE PTR _Element$[ebp]
	mov	eax, DWORD PTR tv3121[ebp]
	mov	cl, BYTE PTR _Element$[ebp]
	cmp	cl, BYTE PTR [eax]
	jb	SHORT $LL91@Create1DSw
$LN93@Create1DSw:
; Line 10890
	add	edi, 18					; 00000012H
	dec	DWORD PTR tv1852[ebp]
	jne	SHORT $LL94@Create1DSw
; Line 10907
	mov	DWORD PTR tv2995[ebp], esi
	mov	DWORD PTR tv875[ebp], ebx
$LL84@Create1DSw:
; Line 10908
	mov	eax, DWORD PTR tv3121[ebp]
	cmp	BYTE PTR [eax], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	$LN83@Create1DSw
$LL290@Create1DSw:
; Line 10909
	lea	eax, DWORD PTR _MaximumBits$[ebp]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN80@Create1DSw
; Line 10912
	movzx	eax, BYTE PTR _Element$[ebp]
	mov	ecx, DWORD PTR tv3119[ebp]
; Line 10916
	push	DWORD PTR _DitherVal$[ebp]
	lea	esi, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR tv2995[ebp]
	lea	edi, DWORD PTR [ecx+eax]
	mov	eax, edi
	imul	eax, 24					; 00000018H
	lea	eax, DWORD PTR _PassFail$[ebp+eax]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	lea	ebx, DWORD PTR _EdgeFound$[ebp+esi]
	push	DWORD PTR _MaximumBits$[ebp]
	mov	BYTE PTR [ebx], 1
	push	DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR tv3002[ebp], eax
	call	_FoundEdge
	add	esp, 20					; 00000014H
	test	al, al
	jne	$LN80@Create1DSw
	cmp	BYTE PTR _ElementDone$[ebp+edi], al
	jne	$LN80@Create1DSw
; Line 10920
	mov	BYTE PTR _TestFinished$[ebp], al
; Line 10921
	mov	BYTE PTR [ebx], al
; Line 10930
	cmp	BYTE PTR _LowHighFlag$[ebp+edi], al
	jne	SHORT $LN74@Create1DSw
	push	1
	push	DWORD PTR tv3002[ebp]
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _MaximumBits$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassFailPerStrobe
	add	esp, 20					; 00000014H
	test	al, al
	je	SHORT $LN75@Create1DSw
$LN74@Create1DSw:
	cmp	BYTE PTR _LowHighFlag$[ebp+edi], 1
	jne	SHORT $LN76@Create1DSw
	push	1
	push	DWORD PTR tv3002[ebp]
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _MaximumBits$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassFailPerStrobe
	add	esp, 20					; 00000014H
	cmp	al, 1
	jne	SHORT $LN76@Create1DSw
$LN75@Create1DSw:
; Line 10933
	movzx	ecx, BYTE PTR _LowHighFlag$[ebp+edi]
	mov	eax, edi
	shl	eax, 4
	add	eax, ecx
	mov	ecx, DWORD PTR _Results$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, WORD PTR _Dim1Step$[ebp]
	movzx	edx, WORD PTR [eax]
	sub	edx, ecx
	mov	DWORD PTR tv3074[ebp], edx
	mov	edx, DWORD PTR _Dim1Min$[ebp]
	add	esi, esi
	movzx	edx, WORD PTR [esi+edx]
	cmp	DWORD PTR tv3074[ebp], edx
	mov	DWORD PTR tv3859[ebp], esi
	jl	SHORT $LN68@Create1DSw
	mov	edx, esi
	mov	esi, DWORD PTR _Dim1Max$[ebp]
	movzx	edx, WORD PTR [edx+esi]
	cmp	DWORD PTR tv3074[ebp], edx
	jg	SHORT $LN68@Create1DSw
; Line 10940
	mov	dx, WORD PTR _Dim1Step$[ebp]
	sub	WORD PTR [eax], dx
; Line 10941
	neg	ecx
; Line 10943
	jmp	SHORT $LN333@Create1DSw
$LN76@Create1DSw:
; Line 10945
	movzx	ecx, BYTE PTR _LowHighFlag$[ebp+edi]
	mov	eax, edi
	shl	eax, 4
	add	eax, ecx
	mov	ecx, DWORD PTR _Results$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, WORD PTR _Dim1Step$[ebp]
	movzx	edx, WORD PTR [eax]
	add	edx, ecx
	mov	DWORD PTR tv3086[ebp], edx
	mov	edx, DWORD PTR _Dim1Max$[ebp]
	add	esi, esi
	movzx	edx, WORD PTR [esi+edx]
	cmp	DWORD PTR tv3086[ebp], edx
	mov	DWORD PTR tv3859[ebp], esi
	jg	SHORT $LN68@Create1DSw
	mov	edx, DWORD PTR _Dim1Min$[ebp]
	movzx	edx, WORD PTR [esi+edx]
	cmp	DWORD PTR tv3086[ebp], edx
	jl	SHORT $LN68@Create1DSw
; Line 10952
	mov	dx, WORD PTR _Dim1Step$[ebp]
	add	WORD PTR [eax], dx
$LN333@Create1DSw:
; Line 10953
	mov	DWORD PTR _Value$[ebp+edi*4], ecx
	jmp	SHORT $LN80@Create1DSw
$LN68@Create1DSw:
; Line 10950
	mov	BYTE PTR _LimitFound$[ebp], 1
	mov	BYTE PTR [ebx], 1
$LN80@Create1DSw:
	inc	BYTE PTR _Element$[ebp]
	mov	eax, DWORD PTR tv3121[ebp]
	mov	cl, BYTE PTR _Element$[ebp]
	cmp	cl, BYTE PTR [eax]
	jb	$LL290@Create1DSw
; Line 10908
	mov	esi, DWORD PTR tv3119[ebp]
$LN83@Create1DSw:
; Line 10907
	add	DWORD PTR tv2995[ebp], 18		; 00000012H
	dec	DWORD PTR tv875[ebp]
	jne	$LL84@Create1DSw
$LN97@Create1DSw:
; Line 10882
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv3121[ebp]
	add	esi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv3119[ebp], esi
	jb	$LL98@Create1DSw
$LN96@Create1DSw:
; Line 10961
	cmp	BYTE PTR tv2089[ebp], 0
; Line 10962
	mov	edi, DWORD PTR _NumberElements$[ebp]
	je	$LN63@Create1DSw
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN63@Create1DSw
$LL305@Create1DSw:
; Line 10963
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN64@Create1DSw
; Line 10966
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN64@Create1DSw
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	mov	DWORD PTR tv2015[ebp], eax
$LL61@Create1DSw:
; Line 10967
	movzx	esi, BYTE PTR _Channel$[ebp]
	xor	bl, bl
	mov	BYTE PTR _Element$[ebp], bl
	cmp	BYTE PTR [esi+edi], bl
	jbe	$LN60@Create1DSw
$LL58@Create1DSw:
; Line 10968
	push	0
	push	0
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN57@Create1DSw
; Line 10971
	imul	esi, 18					; 00000012H
	movzx	eax, bl
	lea	eax, DWORD PTR _EdgeFound$[ebp+eax]
	cmp	BYTE PTR [eax+esi], 0
	jne	SHORT $LN57@Create1DSw
; Line 10972
	and	DWORD PTR tv3176[ebp], 0
	mov	BYTE PTR _IndCh$[ebp], 0
	mov	esi, edi
$LL53@Create1DSw:
; Line 10973
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _IndCh$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN52@Create1DSw
; Line 10976
	xor	bl, bl
	mov	BYTE PTR _IndSt$[ebp], bl
	cmp	BYTE PTR [esi], bl
	jbe	SHORT $LN47@Create1DSw
$LL49@Create1DSw:
; Line 10977
	push	0
	push	0
	push	DWORD PTR _IndSt$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _IndCh$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN48@Create1DSw
; Line 10981
	movzx	eax, bl
	add	eax, DWORD PTR tv3176[ebp]
	cmp	BYTE PTR _LimitFound$[ebp], 0
	je	SHORT $LN45@Create1DSw
	mov	BYTE PTR _EdgeFound$[ebp+eax], 1
; Line 10982
	jmp	SHORT $LN48@Create1DSw
$LN45@Create1DSw:
; Line 10983
	mov	BYTE PTR _EdgeFound$[ebp+eax], 0
$LN48@Create1DSw:
; Line 10976
	inc	bl
	mov	BYTE PTR _IndSt$[ebp], bl
	cmp	bl, BYTE PTR [esi]
	jb	SHORT $LL49@Create1DSw
$LN47@Create1DSw:
; Line 10989
	mov	bl, 18					; 00000012H
; Line 10990
	mov	BYTE PTR _Channel$[ebp], 2
$LN52@Create1DSw:
	inc	BYTE PTR _IndCh$[ebp]
	add	DWORD PTR tv3176[ebp], 18		; 00000012H
	inc	esi
	cmp	BYTE PTR _IndCh$[ebp], 2
	jb	SHORT $LL53@Create1DSw
$LN57@Create1DSw:
; Line 10967
	movzx	esi, BYTE PTR _Channel$[ebp]
	inc	bl
	mov	BYTE PTR _Element$[ebp], bl
	cmp	bl, BYTE PTR [esi+edi]
	jb	$LL58@Create1DSw
$LN60@Create1DSw:
; Line 10966
	dec	DWORD PTR tv2015[ebp]
	jne	$LL61@Create1DSw
$LN64@Create1DSw:
; Line 10962
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL305@Create1DSw
$LN63@Create1DSw:
; Line 10997
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN296@Create1DSw
	movzx	eax, al
	mov	esi, eax
	imul	esi, 18					; 00000012H
	add	edi, eax
	mov	DWORD PTR tv3633[ebp], esi
	mov	DWORD PTR tv3635[ebp], edi
$LL43@Create1DSw:
; Line 10998
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN42@Create1DSw
; Line 11001
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN42@Create1DSw
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	mov	DWORD PTR tv3474[ebp], esi
	mov	DWORD PTR tv710[ebp], eax
$LL39@Create1DSw:
; Line 11002
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	$LN38@Create1DSw
$LL300@Create1DSw:
; Line 11003
	lea	eax, DWORD PTR _MaximumBits$[ebp]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN35@Create1DSw
; Line 11006
	movzx	eax, BYTE PTR _Element$[ebp]
	mov	ecx, DWORD PTR tv3633[ebp]
	lea	edi, DWORD PTR [ecx+eax]
	cmp	BYTE PTR _EdgeFound$[ebp+edi], 0
	je	$LN35@Create1DSw
; Line 11013
	mov	ecx, DWORD PTR tv3474[ebp]
	lea	esi, DWORD PTR [ecx+eax]
	lea	eax, DWORD PTR _ElementDone$[ebp+esi]
	cmp	BYTE PTR [eax], 0
	mov	DWORD PTR tv3479[ebp], eax
	jne	$LN294@Create1DSw
	mov	eax, esi
	imul	eax, 24					; 00000018H
	push	0
	lea	ebx, DWORD PTR _PassFail$[ebp+eax]
	push	ebx
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _MaximumBits$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassFailPerStrobe
	add	esp, 20					; 00000014H
	cmp	al, 1
	jne	$LN294@Create1DSw
; Line 11014
	mov	al, BYTE PTR _LowHighFlag$[ebp+esi]
; Line 11018
	movzx	edx, BYTE PTR _DitherVal$[ebp]
	mov	ecx, esi
	shl	ecx, 4
	test	al, al
	movzx	eax, al
	jne	SHORT $LN30@Create1DSw
	add	ecx, eax
	mov	eax, DWORD PTR _Results$[ebp]
	movzx	eax, WORD PTR [eax+ecx*2]
	movzx	ecx, WORD PTR _Dim1Step$[ebp]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, DWORD PTR _Dim1Max$[ebp]
	movzx	ecx, WORD PTR [ecx+edi*2]
	cmp	eax, ecx
	jg	$LN295@Create1DSw
; Line 11019
	mov	ecx, DWORD PTR _Results$[ebp]
	push	2
	push	ebx
	push	DWORD PTR _PerBitSweep$[ebp]
	mov	eax, esi
	push	DWORD PTR _MaximumBits$[ebp]
	shl	eax, 5
	push	DWORD PTR _MrcData$[ebp]
	lea	edi, DWORD PTR [eax+ecx]
	call	_DeterminePassFailPerStrobe
	movzx	ax, al
	imul	ax, WORD PTR _Dim1Step$[ebp]
	add	esp, 20					; 00000014H
	add	WORD PTR [edi], ax
; Line 11021
	jmp	$LN295@Create1DSw
$LN30@Create1DSw:
; Line 11025
	add	ecx, eax
	mov	eax, DWORD PTR _Results$[ebp]
	movzx	eax, WORD PTR [eax+ecx*2]
	movzx	ecx, WORD PTR _Dim1Step$[ebp]
	imul	ecx, edx
	sub	eax, ecx
	mov	ecx, DWORD PTR _Dim1Min$[ebp]
	movzx	ecx, WORD PTR [ecx+edi*2]
	cmp	eax, ecx
	jl	$LN295@Create1DSw
; Line 11026
	mov	ecx, DWORD PTR _Results$[ebp]
	push	2
	push	ebx
	push	DWORD PTR _PerBitSweep$[ebp]
	mov	eax, esi
	push	DWORD PTR _MaximumBits$[ebp]
	shl	eax, 5
	push	DWORD PTR _MrcData$[ebp]
	lea	edi, DWORD PTR [eax+ecx+2]
	call	_DeterminePassFailPerStrobe
	movzx	ax, al
	imul	ax, WORD PTR _Dim1Step$[ebp]
	add	esp, 20					; 00000014H
	sub	WORD PTR [edi], ax
; Line 11029
	jmp	SHORT $LN295@Create1DSw
$LN294@Create1DSw:
; Line 11037
	mov	eax, DWORD PTR tv3479[ebp]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN295@Create1DSw
	mov	eax, esi
	imul	eax, 24					; 00000018H
	push	2
	lea	eax, DWORD PTR _PassFail$[ebp+eax]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _MaximumBits$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassFailPerStrobe
	add	esp, 20					; 00000014H
	test	al, al
	je	SHORT $LN295@Create1DSw
; Line 11039
	mov	edx, DWORD PTR _Results$[ebp]
	mov	ecx, esi
	shl	ecx, 5
	cmp	BYTE PTR _LowHighFlag$[ebp+esi], 0
	movzx	ax, al
	jne	SHORT $LN24@Create1DSw
	add	ecx, edx
	dec	ax
	imul	ax, WORD PTR _Dim1Step$[ebp]
	sub	WORD PTR [ecx], ax
; Line 11041
	jmp	SHORT $LN295@Create1DSw
$LN24@Create1DSw:
; Line 11042
	dec	ax
	imul	ax, WORD PTR _Dim1Step$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+2]
	add	WORD PTR [ecx], ax
$LN295@Create1DSw:
; Line 11049
	lea	eax, DWORD PTR _LowHighFlag$[ebp+esi]
	cmp	BYTE PTR [eax], 1
	jne	SHORT $LN22@Create1DSw
; Line 11050
	mov	eax, DWORD PTR tv3479[ebp]
	mov	BYTE PTR [eax], 1
; Line 11051
	jmp	$LN35@Create1DSw
$LN22@Create1DSw:
; Line 11056
	mov	edi, DWORD PTR _Results$[ebp]
	mov	BYTE PTR [eax], 1
	mov	eax, DWORD PTR _Dim1Start$[ebp]
	lea	ecx, DWORD PTR [eax+esi*4+2]
	mov	dx, WORD PTR [ecx]
	mov	eax, esi
	shl	eax, 5
; Line 11061
	cmp	BYTE PTR _SkipInitialValueProgramming$[ebp], 0
	mov	WORD PTR [eax+edi+2], dx
	jne	SHORT $LN308@Create1DSw
; Line 11062
	movzx	ecx, WORD PTR [ecx]
	lea	eax, DWORD PTR _Value$[ebp+esi*4]
; Line 11063
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _Dim1Index$[ebp]
	mov	DWORD PTR [eax], ecx
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN308@Create1DSw:
; Line 11066
	cmp	BYTE PTR _MaximumBits$[ebp], 0
	mov	BYTE PTR _TestFinished$[ebp], 0
	jbe	SHORT $LN17@Create1DSw
	movzx	edi, BYTE PTR _MaximumBits$[ebp]
	imul	esi, 24					; 00000018H
	lea	esi, DWORD PTR _PassFail$[ebp+esi]
$LL19@Create1DSw:
; Line 11067
	push	3
	push	-1
	push	esi
	call	_MmrcMemset
	add	esp, 12					; 0000000cH
	add	esi, 3
	dec	edi
	jne	SHORT $LL19@Create1DSw
$LN17@Create1DSw:
; Line 11069
	cmp	BYTE PTR tv2089[ebp], 0
	je	SHORT $LN35@Create1DSw
; Line 11070
	mov	eax, DWORD PTR _MrcData$[ebp]
	or	WORD PTR [eax+65586], 64		; 00000040H
$LN35@Create1DSw:
	inc	BYTE PTR _Element$[ebp]
	mov	edi, DWORD PTR tv3635[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	$LL300@Create1DSw
$LN38@Create1DSw:
; Line 11001
	add	DWORD PTR tv3474[ebp], 18		; 00000012H
	dec	DWORD PTR tv710[ebp]
	jne	$LL39@Create1DSw
	mov	esi, DWORD PTR tv3633[ebp]
$LN42@Create1DSw:
; Line 10997
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	add	esi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv3635[ebp], edi
	mov	DWORD PTR tv3633[ebp], esi
	jb	$LL43@Create1DSw
$LN296@Create1DSw:
; Line 10847
	cmp	BYTE PTR _TestFinished$[ebp], 0
	je	$LL112@Create1DSw
; Line 11086
	cmp	BYTE PTR _PerBitSweep$[ebp], 0
	je	$LN297@Create1DSw
	test	BYTE PTR _Stage$[ebp], 2
	je	$LN297@Create1DSw
; Line 11087
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN297@Create1DSw
	mov	ecx, DWORD PTR _NumberElements$[ebp]
	movzx	eax, al
	mov	esi, eax
	imul	esi, 18					; 00000012H
	lea	ebx, DWORD PTR [eax+ecx]
$LL14@Create1DSw:
; Line 11088
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN13@Create1DSw
; Line 11091
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	SHORT $LN13@Create1DSw
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	mov	edi, esi
	mov	DWORD PTR tv641[ebp], eax
$LL10@Create1DSw:
; Line 11092
	cmp	BYTE PTR [ebx], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	SHORT $LN9@Create1DSw
$LL7@Create1DSw:
; Line 11093
	lea	eax, DWORD PTR _MaximumBits$[ebp]
	push	eax
	push	DWORD PTR _PerBitSweep$[ebp]
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN6@Create1DSw
; Line 11096
	movzx	eax, BYTE PTR _Element$[ebp]
	mov	edx, DWORD PTR _Results$[ebp]
	add	eax, edi
	mov	ecx, eax
	shl	ecx, 2
	shl	eax, 5
	add	eax, edx
	mov	dx, WORD PTR _ResultsB0Backup$[ebp+ecx]
; Line 11097
	mov	cx, WORD PTR _ResultsB0Backup$[ebp+ecx+2]
	mov	WORD PTR [eax], dx
	mov	WORD PTR [eax+2], cx
$LN6@Create1DSw:
	inc	BYTE PTR _Element$[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [ebx]
	jb	SHORT $LL7@Create1DSw
$LN9@Create1DSw:
; Line 11091
	add	edi, 18					; 00000012H
	dec	DWORD PTR tv641[ebp]
	jne	SHORT $LL10@Create1DSw
$LN13@Create1DSw:
; Line 11087
	inc	BYTE PTR _Channel$[ebp]
	inc	ebx
	add	esi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL14@Create1DSw
$LN297@Create1DSw:
; Line 11104
	push	DWORD PTR _PerBitSweep$[ebp]
	mov	ebx, DWORD PTR _Results$[ebp]
	mov	esi, DWORD PTR _ChannelBackup$[ebp]
	push	ebx
	push	DWORD PTR _Dim1Knobs$[ebp]
	push	DWORD PTR _Dim1Index$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_PrintFooter1DSweep
	add	esp, 28					; 0000001cH
; Line 11106
	cmp	BYTE PTR _PerBitSweepBackup$[ebp], 0
	je	$LN146@Create1DSw
	cmp	BYTE PTR tv2080[ebp], 1
	jne	$LN146@Create1DSw
	test	BYTE PTR _Stage$[ebp], 2
	je	$LN146@Create1DSw
; Line 11109
	push	DWORD PTR _Stage$[ebp]
	mov	edi, DWORD PTR _Dim1Start$[ebp]
	push	0
	push	edi
	push	ebx
	push	DWORD PTR _NumberElements$[ebp]
	push	DWORD PTR _Dim1Knobs$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_CalculateOrRestoreResults
	add	esp, 36					; 00000024H
; Line 11110
	test	eax, eax
; Line 11111
	jne	SHORT $LN146@Create1DSw
; Line 11123
	mov	al, BYTE PTR _LockStepRun$[ebp]
	or	al, 6
	movzx	eax, al
	push	eax
	push	DWORD PTR _DitherVal$[ebp]
	push	DWORD PTR _HeaderLabel$[ebp]
	push	ebx
	push	DWORD PTR _ExecuteTest$[ebp]
	push	DWORD PTR _NumberElements$[ebp]
	push	DWORD PTR _PerBitSweepBackup$[ebp]
	push	DWORD PTR _SkipInitialValueProgramming$[ebp]
	push	DWORD PTR _FullSweep$[ebp]
	push	DWORD PTR _Dim1Step$[ebp]
	push	DWORD PTR _Dim1Max$[ebp]
	push	DWORD PTR _Dim1Min$[ebp]
	push	edi
	push	DWORD PTR _Dim1Knobs$[ebp]
	push	DWORD PTR _Dim1Index$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_Create1DSweep
	add	esp, 72					; 00000048H
; Line 11127
	test	BYTE PTR _Stage$[ebp], 16		; 00000010H
	jne	SHORT $LN1@Create1DSw
; Line 11128
	push	DWORD PTR _Stage$[ebp]
	push	1
	push	edi
	push	ebx
	push	DWORD PTR _NumberElements$[ebp]
	push	DWORD PTR _Dim1Knobs$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_CalculateOrRestoreResults
	add	esp, 36					; 00000024H
$LN1@Create1DSw:
; Line 11130
	push	144					; 00000090H
	lea	eax, DWORD PTR _Dim1StartRestore$[ebp]
	push	eax
	push	edi
	call	_MmrcMemCopy
	add	esp, 12					; 0000000cH
$LN146@Create1DSw:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 11133
	add	ebp, 48					; 00000030H
	leave
	ret	0
_Create1DSweep ENDP
_TEXT	ENDS
PUBLIC	_ProgramInitialSettingsFor1DSweep
; Function compile flags: /Ogspy
;	COMDAT _ProgramInitialSettingsFor1DSweep
_TEXT	SEGMENT
_Absolute$ = -200					; size = 144
tv852 = -56						; size = 4
tv860 = -52						; size = 4
tv1038 = -48						; size = 4
tv933 = -44						; size = 4
tv891 = -40						; size = 4
tv899 = -36						; size = 4
tv681 = -32						; size = 4
_Strobe$ = -28						; size = 1
_Ranges$ = -24						; size = 4
_StartValue$ = -16					; size = 4
_TempValue$ = -8					; size = 4
_Channel$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_ControlKnobs$ = 12					; size = 45
_Low$ = 60						; size = 4
_High$ = 64						; size = 4
_Dim1StartPoint$ = 68					; size = 4
_Rank$ = 72						; size = 1
_Index$ = 72						; size = 1
_ProgramInitialSettingsFor1DSweep PROC			; COMDAT
; Line 14762
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
; Line 14778
	push	72					; 00000048H
	lea	eax, DWORD PTR _Absolute$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
; Line 14779
	push	72					; 00000048H
	lea	eax, DWORD PTR _Absolute$[ebp+72]
	push	0
	push	eax
	call	_MmrcMemset
; Line 14781
	mov	al, BYTE PTR _Index$[ebp]
	add	esp, 24					; 00000018H
	cmp	al, BYTE PTR _ControlKnobs$[ebp+43]
; Line 14782
	mov	ax, WORD PTR _ControlKnobs$[ebp+12]
	mov	WORD PTR _Ranges$[ebp], ax
; Line 14783
	mov	ax, WORD PTR _ControlKnobs$[ebp+14]
	mov	WORD PTR _Ranges$[ebp+2], ax
	jae	SHORT $LN35@ProgramIni
; Line 14784
	mov	ax, WORD PTR _ControlKnobs$[ebp+6]
	mov	WORD PTR _StartValue$[ebp], ax
; Line 14785
	mov	ax, WORD PTR _ControlKnobs$[ebp+8]
; Line 14786
	jmp	SHORT $LN66@ProgramIni
$LN35@ProgramIni:
; Line 14789
	mov	ax, WORD PTR _ControlKnobs$[ebp+32]
	mov	WORD PTR _StartValue$[ebp], ax
; Line 14790
	mov	ax, WORD PTR _ControlKnobs$[ebp+34]
$LN66@ProgramIni:
; Line 14796
	and	DWORD PTR tv899[ebp], 0
	push	ebx
	mov	WORD PTR _StartValue$[ebp+2], ax
	mov	eax, DWORD PTR _Low$[ebp]
	push	esi
	push	edi
	mov	BYTE PTR _Channel$[ebp], 0
	mov	DWORD PTR tv933[ebp], eax
$LL63@ProgramIni:
; Line 14797
	and	DWORD PTR tv891[ebp], 0
	mov	ebx, DWORD PTR _Channel$[ebp]
	mov	BYTE PTR _Rank$[ebp], 0
$LL64@ProgramIni:
; Line 14798
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN29@ProgramIni
; Line 14817
	mov	edi, DWORD PTR _High$[ebp]
	and	DWORD PTR tv681[ebp], 0
	mov	esi, DWORD PTR tv933[ebp]
	lea	eax, DWORD PTR _Absolute$[ebp+72]
	sub	eax, DWORD PTR _Low$[ebp]
	sub	edi, DWORD PTR _Low$[ebp]
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv852[ebp], eax
	mov	DWORD PTR tv860[ebp], edi
	jmp	SHORT $LN26@ProgramIni
$LL62@ProgramIni:
	mov	edi, DWORD PTR tv860[ebp]
$LN26@ProgramIni:
; Line 14804
	cmp	BYTE PTR _ControlKnobs$[ebp+22], 0
	jne	$LN23@ProgramIni
; Line 14805
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	DWORD PTR _ControlKnobs$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 14806
	push	DWORD PTR _Ranges$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_ConvertRange
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	mov	WORD PTR tv1038[ebp], ax
	call	_GetHalfClk
	movzx	ecx, WORD PTR tv1038[ebp]
	mov	edx, DWORD PTR _TempValue$[ebp]
	sub	edx, ecx
	movzx	ecx, ax
	add	esp, 48					; 00000030H
	cmp	edx, ecx
; Line 14808
	jl	SHORT $LN67@ProgramIni
; Line 14809
	mov	eax, DWORD PTR _TempValue$[ebp]
	sub	eax, DWORD PTR tv1038[ebp]
$LN67@ProgramIni:
; Line 14811
	push	DWORD PTR _Ranges$[ebp+2]
	mov	WORD PTR [esi], ax
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_ConvertRange
	add	ax, WORD PTR _TempValue$[ebp]
; Line 14813
	mov	ecx, DWORD PTR tv891[ebp]
	push	DWORD PTR _StartValue$[ebp]
	mov	WORD PTR [edi+esi], ax
	mov	eax, DWORD PTR tv899[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _Dim1StartPoint$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv681[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	lea	edi, DWORD PTR [ecx+eax*4]
	call	_ConvertRange
; Line 14814
	push	DWORD PTR _StartValue$[ebp+2]
	mov	cx, WORD PTR _TempValue$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	sub	cx, ax
	mov	WORD PTR [edi], cx
	call	_ConvertRange
	add	ax, WORD PTR _TempValue$[ebp]
	add	esp, 36					; 00000024H
	mov	WORD PTR [edi+2], ax
; Line 14816
	movzx	ecx, WORD PTR [esi]
	mov	eax, DWORD PTR tv852[ebp]
	add	eax, esi
	cmp	cx, WORD PTR [eax-72]
	jae	SHORT $LN17@ProgramIni
; Line 14817
	mov	WORD PTR [eax-72], cx
$LN17@ProgramIni:
; Line 14819
	mov	ecx, DWORD PTR tv860[ebp]
	movzx	ecx, WORD PTR [ecx+esi]
	cmp	cx, WORD PTR [eax]
	jbe	SHORT $LN25@ProgramIni
; Line 14820
	mov	WORD PTR [eax], cx
; Line 14822
	jmp	SHORT $LN25@ProgramIni
$LN23@ProgramIni:
; Line 14827
	push	DWORD PTR _Ranges$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_ConvertRange
; Line 14828
	push	DWORD PTR _Ranges$[ebp+2]
	mov	WORD PTR [esi], ax
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_ConvertRange
; Line 14830
	mov	ecx, DWORD PTR tv891[ebp]
	push	DWORD PTR _StartValue$[ebp]
	mov	WORD PTR [edi+esi], ax
	mov	eax, DWORD PTR tv899[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _Dim1StartPoint$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv681[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	lea	edi, DWORD PTR [ecx+eax*4]
	call	_ConvertRange
; Line 14831
	push	DWORD PTR _StartValue$[ebp+2]
	mov	WORD PTR [edi], ax
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_ConvertRange
	add	esp, 48					; 00000030H
	mov	WORD PTR [edi+2], ax
$LN25@ProgramIni:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv681[ebp]
	inc	esi
	inc	esi
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL62@ProgramIni
$LN29@ProgramIni:
; Line 14797
	inc	BYTE PTR _Rank$[ebp]
	add	DWORD PTR tv891[ebp], 2
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL64@ProgramIni
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv899[ebp]
	add	DWORD PTR tv933[ebp], 36		; 00000024H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL63@ProgramIni
; Line 14839
	mov	BYTE PTR _Channel$[ebp], 0
	xor	esi, esi
$LL65@ProgramIni:
; Line 14840
	mov	BYTE PTR _Rank$[ebp], 0
$LL8@ProgramIni:
; Line 14841
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN5@ProgramIni
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL8@ProgramIni
; Line 14812
	jmp	SHORT $LN10@ProgramIni
$LN5@ProgramIni:
; Line 14842
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
$LL4@ProgramIni:
; Line 14846
	cmp	BYTE PTR _ControlKnobs$[ebp+22], 0
	jne	SHORT $LN3@ProgramIni
; Line 14847
	mov	ebx, DWORD PTR _Low$[ebp]
	lea	eax, DWORD PTR [esi+ecx]
	add	eax, eax
	mov	di, WORD PTR _Absolute$[ebp+eax]
	mov	WORD PTR [eax+ebx], di
; Line 14848
	mov	di, WORD PTR _Absolute$[ebp+eax+72]
	mov	ebx, DWORD PTR _High$[ebp]
	mov	WORD PTR [eax+ebx], di
$LN3@ProgramIni:
	inc	ecx
	dec	edx
	jne	SHORT $LL4@ProgramIni
$LN10@ProgramIni:
; Line 14839
	inc	BYTE PTR _Channel$[ebp]
	add	esi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL65@ProgramIni
	pop	edi
	pop	esi
; Line 14861
	xor	eax, eax
	pop	ebx
; Line 14862
	leave
	ret	0
_ProgramInitialSettingsFor1DSweep ENDP
_TEXT	ENDS
PUBLIC	_CheckAndStoreEyeMasks
; Function compile flags: /Ogspy
;	COMDAT _CheckAndStoreEyeMasks
_TEXT	SEGMENT
_Value$ = -48						; size = 4
tv882 = -44						; size = 4
tv833 = -44						; size = 4
tv1182 = -40						; size = 4
tv686 = -36						; size = 4
tv811 = -32						; size = 4
tv1351 = -28						; size = 4
tv919 = -28						; size = 4
_Strobe$ = -24						; size = 1
_Channel$ = -20						; size = 1
_Rank$ = -16						; size = 1
tv1196 = -12						; size = 4
tv1004 = -8						; size = 4
_PowerIndex$ = -3					; size = 1
_Index$ = -3						; size = 1
_Timing$ = -2						; size = 1
_EMIndex$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_ControlKnobs$ = 12					; size = 4
_Results$ = 16						; size = 4
_ResultsV$ = 20						; size = 4
_ResultsS$ = 24						; size = 4
_Count$ = 28						; size = 4
_PowerKnobs$ = 32					; size = 4
_EyeMask$ = 36						; size = 4
_CheckAndStoreEyeMasks PROC				; COMDAT
; Line 15323
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 15338
	and	DWORD PTR tv1196[ebp], 0
	push	ebx
	push	esi
	mov	BYTE PTR _Channel$[ebp], 0
	push	edi
$LL54@CheckAndSt:
; Line 15339
	xor	ebx, ebx
	mov	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR tv1182[ebp], ebx
$LL55@CheckAndSt:
; Line 15340
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN27@CheckAndSt
; Line 15342
	and	DWORD PTR tv1004[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL53@CheckAndSt:
; Line 15343
	xor	esi, esi
	mov	DWORD PTR tv686[ebp], 8
$LL18@CheckAndSt:
; Line 15344
	mov	eax, DWORD PTR _ControlKnobs$[ebp]
	cmp	BYTE PTR [eax+43], 0
	mov	BYTE PTR _Timing$[ebp], 0
	jbe	$LN17@CheckAndSt
$LL15@CheckAndSt:
; Line 15347
	movzx	edi, BYTE PTR _Timing$[ebp]
	mov	BYTE PTR _EMIndex$[ebp], 0
$LL12@CheckAndSt:
; Line 15348
	movzx	eax, BYTE PTR _EMIndex$[ebp]
	mov	edx, DWORD PTR tv1196[ebp]
	lea	ecx, DWORD PTR [edi+eax*2]
	lea	ecx, DWORD PTR [edx+ecx*2]
	mov	edx, DWORD PTR _Count$[ebp]
	lea	ecx, DWORD PTR [ebx+ecx*4]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR tv1004[ebp]
	mov	DWORD PTR tv811[ebp], eax
	lea	ecx, DWORD PTR [esi+ecx*8]
	add	ecx, edx
; Line 15352
	mov	edx, DWORD PTR _EyeMask$[ebp]
	mov	DWORD PTR tv1351[ebp], ecx
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR _Index$[ebp], cl
	movzx	cx, cl
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv833[ebp], eax
	cmp	cx, WORD PTR [eax]
	je	$LN11@CheckAndSt
; Line 15357
	mov	eax, DWORD PTR tv1196[ebp]
	mov	ecx, DWORD PTR _Results$[ebp]
	lea	eax, DWORD PTR [eax+edi*2]
	lea	eax, DWORD PTR [ebx+eax*4]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv1004[ebp]
	lea	eax, DWORD PTR [esi+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	edx, WORD PTR [eax+2]
	movzx	ecx, WORD PTR [eax]
	cmp	dx, cx
	jbe	$LN8@CheckAndSt
	movzx	ecx, cx
	movzx	edx, dx
	sub	edx, ecx
	mov	ecx, DWORD PTR tv833[ebp]
	movzx	ecx, WORD PTR [ecx+2]
	cmp	edx, ecx
	jle	$LN8@CheckAndSt
; Line 15362
	cmp	BYTE PTR _EMIndex$[ebp], 0
	jne	SHORT $LN7@CheckAndSt
; Line 15363
	movzx	ecx, BYTE PTR _Index$[ebp]
	mov	edx, DWORD PTR tv1196[ebp]
	lea	ecx, DWORD PTR [edi+ecx*2]
	lea	ecx, DWORD PTR [edx+ecx*2]
	mov	edx, DWORD PTR _ResultsV$[ebp]
	lea	ecx, DWORD PTR [ebx+ecx*4]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR tv1004[ebp]
	lea	ecx, DWORD PTR [esi+ecx*8]
	lea	ecx, DWORD PTR [edx+ecx*4]
	movzx	edx, WORD PTR [eax+2]
	mov	WORD PTR [ecx+2], dx
; Line 15364
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx], ax
; Line 15365
	jmp	SHORT $LN6@CheckAndSt
$LN7@CheckAndSt:
; Line 15366
	mov	ecx, DWORD PTR tv811[ebp]
	movzx	edx, BYTE PTR _Index$[ebp]
	imul	ecx, 5
	add	ecx, edx
	mov	edx, DWORD PTR tv1196[ebp]
	mov	DWORD PTR tv882[ebp], ecx
	lea	ecx, DWORD PTR [edi+ecx*2]
	lea	ecx, DWORD PTR [edx+ecx*2]
	lea	ecx, DWORD PTR [ebx+ecx*4]
	mov	ebx, DWORD PTR _ResultsS$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR tv1004[ebp]
	lea	edx, DWORD PTR [esi+ecx*8]
	movzx	ecx, WORD PTR [eax+2]
	mov	WORD PTR [ebx+edx*4-46078], cx
; Line 15367
	mov	ecx, DWORD PTR tv882[ebp]
	mov	edx, DWORD PTR tv1196[ebp]
	mov	ebx, DWORD PTR tv1182[ebp]
	mov	ax, WORD PTR [eax]
	lea	ecx, DWORD PTR [edi+ecx*2-10]
	lea	ecx, DWORD PTR [edx+ecx*2]
	mov	edx, DWORD PTR _ResultsS$[ebp]
	lea	ecx, DWORD PTR [ebx+ecx*4]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR tv1004[ebp]
	lea	ecx, DWORD PTR [esi+ecx*8]
	mov	WORD PTR [edx+ecx*4], ax
$LN6@CheckAndSt:
; Line 15369
	mov	eax, DWORD PTR tv1351[ebp]
	inc	BYTE PTR [eax]
; Line 15373
	mov	eax, DWORD PTR _ControlKnobs$[ebp]
	movzx	eax, BYTE PTR [eax+31]
	dec	eax
	dec	eax
	mov	BYTE PTR _PowerIndex$[ebp], 0
	test	eax, eax
	jle	SHORT $LN11@CheckAndSt
	and	DWORD PTR tv919[ebp], 0
$LL50@CheckAndSt:
; Line 15374
	mov	ecx, DWORD PTR _ControlKnobs$[ebp]
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	mov	eax, DWORD PTR tv919[ebp]
	add	eax, 2
	imul	eax, 45					; 0000002dH
	movzx	eax, WORD PTR [eax+ecx]
	push	2
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 15375
	cmp	BYTE PTR _EMIndex$[ebp], 0
	je	SHORT $LN4@CheckAndSt
; Line 15376
	mov	ecx, DWORD PTR tv811[ebp]
	mov	eax, DWORD PTR tv919[ebp]
	mov	edx, DWORD PTR _PowerKnobs$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR tv1196[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	cl, BYTE PTR _Value$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4-8]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv1004[ebp]
	lea	eax, DWORD PTR [esi+eax*8]
	mov	BYTE PTR [eax+edx], cl
$LN4@CheckAndSt:
	mov	ecx, DWORD PTR _ControlKnobs$[ebp]
	movzx	ecx, BYTE PTR [ecx+31]
	inc	BYTE PTR _PowerIndex$[ebp]
	movzx	eax, BYTE PTR _PowerIndex$[ebp]
	dec	ecx
	dec	ecx
	cmp	eax, ecx
	mov	DWORD PTR tv919[ebp], eax
	jl	SHORT $LL50@CheckAndSt
; Line 15379
	jmp	SHORT $LN11@CheckAndSt
$LN8@CheckAndSt:
; Line 15383
	mov	eax, DWORD PTR tv1351[ebp]
	mov	BYTE PTR [eax], 0
$LN11@CheckAndSt:
	inc	BYTE PTR _EMIndex$[ebp]
	cmp	BYTE PTR _EMIndex$[ebp], 2
	jb	$LL12@CheckAndSt
	inc	BYTE PTR _Timing$[ebp]
	mov	eax, DWORD PTR _ControlKnobs$[ebp]
	mov	cl, BYTE PTR _Timing$[ebp]
	cmp	cl, BYTE PTR [eax+43]
	jb	$LL15@CheckAndSt
$LN17@CheckAndSt:
; Line 15343
	inc	esi
	dec	DWORD PTR tv686[ebp]
	jne	$LL18@CheckAndSt
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1004[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL53@CheckAndSt
$LN27@CheckAndSt:
; Line 15339
	inc	BYTE PTR _Rank$[ebp]
	inc	ebx
	cmp	BYTE PTR _Rank$[ebp], 4
	mov	DWORD PTR tv1182[ebp], ebx
	jb	$LL55@CheckAndSt
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1196[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL54@CheckAndSt
	pop	edi
	pop	esi
; Line 15394
	xor	eax, eax
	pop	ebx
; Line 15395
	leave
	ret	0
_CheckAndStoreEyeMasks ENDP
_TEXT	ENDS
PUBLIC	_ReAdjust2xRestriction
; Function compile flags: /Ogspy
;	COMDAT _ReAdjust2xRestriction
_TEXT	SEGMENT
_MissMatched2x$ = -52					; size = 18
_OrigValue$ = -32					; size = 4
tv462 = -28						; size = 4
tv389 = -28						; size = 4
_Channel$ = -24						; size = 1
_CacheValue$ = -20					; size = 4
_SumAverage$ = -16					; size = 4
_Strobe$ = -9						; size = 1
_Rank$ = -5						; size = 1
_NumOfRanks$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_ControlKnobs$ = 12					; size = 4
_Dim2Control$ = 16					; size = 2
_ReAdjust2xRestriction PROC				; COMDAT
; Line 15404
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	ebx
; Line 15415
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	push	edi
	mov	BYTE PTR _Channel$[ebp], 0
$LL34@ReAdjust2x:
; Line 15416
	xor	eax, eax
	lea	edi, DWORD PTR _MissMatched2x$[ebp]
	stosd
	stosd
	stosd
	stosd
	stosw
; Line 15418
	mov	edi, DWORD PTR _Channel$[ebp]
	mov	BYTE PTR _NumOfRanks$[ebp], 0
	mov	BYTE PTR _Rank$[ebp], 0
$LL31@ReAdjust2x:
; Line 15419
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN30@ReAdjust2x
; Line 15420
	inc	BYTE PTR _NumOfRanks$[ebp]
; Line 15422
	and	DWORD PTR tv389[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL62@ReAdjust2x:
; Line 15423
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN23@ReAdjust2x
; Line 15424
	movzx	eax, WORD PTR _Dim2Control$[ebp]
	mov	ecx, DWORD PTR _ControlKnobs$[ebp]
	imul	eax, 45					; 0000002dH
	lea	esi, DWORD PTR [eax+ecx]
	lea	eax, DWORD PTR _OrigValue$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	3
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_GetSetDdrioGroup2
; Line 15425
	lea	eax, DWORD PTR _CacheValue$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	2
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_GetSetDdrioGroup2
; Line 15426
	mov	eax, DWORD PTR _OrigValue$[ebp]
	add	esp, 56					; 00000038H
	cmp	eax, DWORD PTR _CacheValue$[ebp]
	je	SHORT $LN23@ReAdjust2x
; Line 15427
	mov	eax, DWORD PTR tv389[ebp]
	mov	BYTE PTR _MissMatched2x$[ebp+eax], 1
$LN23@ReAdjust2x:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv389[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL62@ReAdjust2x
$LN30@ReAdjust2x:
; Line 15418
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL31@ReAdjust2x
; Line 15434
	lea	eax, DWORD PTR _MissMatched2x$[ebp]
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv462[ebp], eax
$LL16@ReAdjust2x:
; Line 15436
	mov	eax, DWORD PTR tv462[ebp]
	xor	esi, esi
	cmp	BYTE PTR [eax], 0
	mov	DWORD PTR _SumAverage$[ebp], esi
	je	$LN15@ReAdjust2x
; Line 15437
	mov	BYTE PTR _Rank$[ebp], 0
$LL12@ReAdjust2x:
; Line 15438
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN11@ReAdjust2x
; Line 15439
	push	esi
	push	esi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN11@ReAdjust2x
; Line 15440
	mov	ecx, DWORD PTR _ControlKnobs$[ebp]
	lea	eax, DWORD PTR _CacheValue$[ebp]
	push	eax
	movzx	eax, WORD PTR _Dim2Control$[ebp]
	imul	eax, 45					; 0000002dH
	movzx	eax, WORD PTR [eax+ecx]
	push	2
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_GetSetDdrioGroup2
; Line 15441
	mov	eax, DWORD PTR _CacheValue$[ebp]
	add	esp, 28					; 0000001cH
	add	DWORD PTR _SumAverage$[ebp], eax
$LN11@ReAdjust2x:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL12@ReAdjust2x
; Line 15444
	cmp	BYTE PTR _NumOfRanks$[ebp], 0
	jbe	SHORT $LN7@ReAdjust2x
; Line 15445
	movzx	ecx, BYTE PTR _NumOfRanks$[ebp]
	mov	eax, DWORD PTR _SumAverage$[ebp]
	xor	edx, edx
	div	ecx
	mov	DWORD PTR _SumAverage$[ebp], eax
; Line 15446
	jmp	SHORT $LN6@ReAdjust2x
$LN7@ReAdjust2x:
; Line 15448
	call	_MrcDeadLoop
$LN6@ReAdjust2x:
; Line 15451
	mov	BYTE PTR _Rank$[ebp], 0
$LL5@ReAdjust2x:
; Line 15452
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN4@ReAdjust2x
; Line 15453
	push	esi
	push	esi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN4@ReAdjust2x
; Line 15454
	movzx	eax, WORD PTR _Dim2Control$[ebp]
	mov	ecx, DWORD PTR _ControlKnobs$[ebp]
	imul	eax, 45					; 0000002dH
	lea	esi, DWORD PTR [eax+ecx]
	lea	eax, DWORD PTR _CacheValue$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	2
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_GetSetDdrioGroup2
; Line 15455
	lea	eax, DWORD PTR _SumAverage$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	24					; 00000018H
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	edi
	push	ebx
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
	xor	esi, esi
$LN4@ReAdjust2x:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL5@ReAdjust2x
$LN15@ReAdjust2x:
; Line 15434
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv462[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL16@ReAdjust2x
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL34@ReAdjust2x
	pop	edi
	pop	esi
	pop	ebx
; Line 15462
	leave
	ret	0
_ReAdjust2xRestriction ENDP
_TEXT	ENDS
PUBLIC	_RestoreDim1Values
; Function compile flags: /Ogspy
;	COMDAT _RestoreDim1Values
_TEXT	SEGMENT
tv454 = -28						; size = 4
tv404 = -24						; size = 4
_Strobe$ = -20						; size = 1
_TempValue$ = -16					; size = 4
_Channel$ = -9						; size = 1
_Rank$ = -5						; size = 1
_Timing$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_ControlKnobs$ = 12					; size = 4
_Dim1Control$ = 16					; size = 2
_Dim2Loop$ = 20						; size = 1
_RestoreResultsPN$ = 24					; size = 4
_RestoreDim1Values PROC					; COMDAT
; Line 15472
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 15480
	and	DWORD PTR _TempValue$[ebp], 0
	push	edi
; Line 15482
	mov	edi, DWORD PTR _ControlKnobs$[ebp]
	cmp	BYTE PTR [edi+43], 0
	mov	BYTE PTR _Timing$[ebp], 0
	jbe	$LN20@RestoreDim
	push	ebx
	push	esi
$LL38@RestoreDim:
; Line 15483
	and	DWORD PTR tv454[ebp], 0
	mov	BYTE PTR _Channel$[ebp], 0
$LL39@RestoreDim:
; Line 15484
	mov	BYTE PTR _Rank$[ebp], 0
	xor	ebx, ebx
$LL40@RestoreDim:
; Line 15485
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN15@RestoreDim
; Line 15487
	and	DWORD PTR tv404[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL37@RestoreDim:
; Line 15488
	mov	esi, DWORD PTR _Strobe$[ebp]
	push	0
	push	0
	push	esi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN8@RestoreDim
; Line 15489
	movzx	ecx, WORD PTR _Dim1Control$[ebp]
	mov	eax, ecx
	imul	eax, 45					; 0000002dH
	add	eax, edi
	mov	edx, 16387				; 00004003H
	cmp	WORD PTR [eax], dx
	jne	SHORT $LN5@RestoreDim
	cmp	BYTE PTR [eax+22], 0
	jne	SHORT $LN5@RestoreDim
; Line 15490
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	57359					; 0000e00fH
	push	esi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 15491
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12305					; 00003011H
	push	esi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 15492
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12306					; 00003012H
	push	esi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
; Line 15493
	jmp	$LN8@RestoreDim
$LN5@RestoreDim:
; Line 15494
	cmp	BYTE PTR [eax+22], 1
	jne	$LN8@RestoreDim
	cmp	BYTE PTR [edi+43], 1
	jbe	$LN8@RestoreDim
	movzx	esi, BYTE PTR _Timing$[ebp]
	lea	eax, DWORD PTR [esi+ecx]
	imul	eax, 45					; 0000002dH
	add	edi, eax
	movzx	eax, WORD PTR [edi]
	mov	ecx, 57347				; 0000e003H
	cmp	ax, cx
	je	SHORT $LN2@RestoreDim
	inc	ecx
	cmp	ax, cx
	jne	SHORT $LN36@RestoreDim
$LN2@RestoreDim:
; Line 15495
	cmp	BYTE PTR _Dim2Loop$[ebp], 0
	jne	SHORT $LN35@RestoreDim
; Line 15499
	lea	ecx, DWORD PTR _TempValue$[ebp]
	push	ecx
	push	3
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 15500
	mov	ecx, DWORD PTR tv454[ebp]
	mov	edx, DWORD PTR _RestoreResultsPN$[ebp]
	lea	eax, DWORD PTR [ebx+esi*4]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	cx, WORD PTR _TempValue$[ebp]
	imul	eax, 18					; 00000012H
	add	esp, 28					; 0000001cH
	add	eax, DWORD PTR tv404[ebp]
	mov	WORD PTR [edx+eax*2], cx
$LN35@RestoreDim:
; Line 15502
	mov	ecx, DWORD PTR tv454[ebp]
	lea	eax, DWORD PTR [ebx+esi*4]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR _RestoreResultsPN$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv404[ebp]
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _TempValue$[ebp], eax
; Line 15503
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	eax, WORD PTR [edi]
	push	24					; 00000018H
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN36@RestoreDim:
	mov	edi, DWORD PTR _ControlKnobs$[ebp]
$LN8@RestoreDim:
; Line 15487
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv404[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL37@RestoreDim
$LN15@RestoreDim:
; Line 15484
	inc	BYTE PTR _Rank$[ebp]
	inc	ebx
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL40@RestoreDim
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv454[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL39@RestoreDim
	inc	BYTE PTR _Timing$[ebp]
	mov	al, BYTE PTR _Timing$[ebp]
	cmp	al, BYTE PTR [edi+43]
	jb	$LL38@RestoreDim
	pop	esi
	pop	ebx
$LN20@RestoreDim:
; Line 15511
	xor	eax, eax
	pop	edi
; Line 15512
	leave
	ret	0
_RestoreDim1Values ENDP
_TEXT	ENDS
PUBLIC	_SetPBDLinear
EXTRN	_DnvNibbleTrainingExitHook:PROC
EXTRN	_DnvNibbleTrainingHook:PROC
; Function compile flags: /Ogspy
;	COMDAT _SetPBDLinear
_TEXT	SEGMENT
_Param$ = -48						; size = 48
_MrcData$ = 8						; size = 4
_Value$ = 12						; size = 2
_PBIndex$ = 16						; size = 2
_PBFlags$ = 20						; size = 2
_AllBitsFlag$ = 24					; size = 1
_Done$ = 28						; size = 4
_SetPBDLinear PROC					; COMDAT
; Line 16175
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 16178
	movzx	eax, WORD PTR _Value$[ebp]
	push	esi
	mov	DWORD PTR _Param$[ebp], eax
; Line 16179
	mov	ax, WORD PTR _PBIndex$[ebp]
; Line 16185
	xor	esi, esi
	push	esi
	mov	WORD PTR _Param$[ebp+6], ax
	mov	al, BYTE PTR _AllBitsFlag$[ebp]
	push	esi
	mov	BYTE PTR _Param$[ebp+8], al
	mov	eax, DWORD PTR _Done$[ebp]
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _Param$[ebp+12], eax
	call	_DnvNibbleTrainingHook
; Line 16186
	push	OFFSET _ProgramSetGetLinear
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	esi
	push	esi
	push	esi
	push	1
	push	esi
	push	DWORD PTR _PBFlags$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 52					; 00000034H
; Line 16187
	test	DWORD PTR _PBFlags$[ebp], 1024		; 00000400H
	je	SHORT $LN1@SetPBDLine
; Line 16192
	push	esi
	push	esi
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_DnvNibbleTrainingExitHook
	add	esp, 16					; 00000010H
$LN1@SetPBDLine:
; Line 16194
	xor	eax, eax
	pop	esi
; Line 16195
	leave
	ret	0
_SetPBDLinear ENDP
_TEXT	ENDS
PUBLIC	_ReAdjust
; Function compile flags: /Ogspy
;	COMDAT _ReAdjust
_TEXT	SEGMENT
_CacheValue$ = -12					; size = 4
_OrigValue$ = -8					; size = 4
_DeltaOffset$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Param$ = 40						; size = 4
tv303 = 42						; size = 2
_ReAdjust PROC						; COMDAT
; Line 17197
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
; Line 17206
	mov	esi, DWORD PTR _Param$[ebp]
	movzx	eax, WORD PTR [esi+4]
; Line 17207
	test	al, al
	jns	SHORT $LN8@ReAdjust
	cmp	BYTE PTR _Strobe$[ebp], 8
	jbe	SHORT $LN8@ReAdjust
	mov	ecx, 65535				; 0000ffffH
	cmp	ax, cx
; Line 17208
	jne	$LN9@ReAdjust
$LN8@ReAdjust:
; Line 17213
	cmp	WORD PTR [esi+12], 1
; Line 17214
	je	$LN9@ReAdjust
; Line 17216
	movzx	ax, BYTE PTR _Knob$[ebp]
	push	ebx
	push	edi
	movzx	edi, BYTE PTR _Timing$[ebp]
	lea	ecx, DWORD PTR _OrigValue$[ebp]
	push	ecx
	lea	ebx, DWORD PTR [esi+edi*2+6]
	mov	cx, WORD PTR [ebx]
	add	cx, ax
	mov	WORD PTR tv303[ebp], ax
	push	3
	movzx	eax, cx
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 17217
	lea	eax, DWORD PTR _CacheValue$[ebp]
	push	eax
	mov	ax, WORD PTR [ebx]
	add	ax, WORD PTR tv303[ebp]
	push	2
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 17219
	movzx	eax, BYTE PTR _Channel$[ebp]
	movzx	ecx, BYTE PTR _Rank$[ebp]
	lea	eax, DWORD PTR [eax+edi*2]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Knob$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	movzx	ecx, BYTE PTR _Bit$[ebp]
	add	esp, 56					; 00000038H
	cmp	WORD PTR [esi+10], 0
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR [esi]
	movzx	eax, WORD PTR [ecx+eax*2]
	push	15					; 0000000fH
	pop	ecx
	jne	SHORT $LN3@ReAdjust
	imul	eax, -5					; fffffffbH
	cdq
	idiv	ecx
; Line 17220
	mov	ecx, DWORD PTR _OrigValue$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _DeltaOffset$[ebp], eax
	neg	eax
	cmp	eax, ecx
	jle	SHORT $LN1@ReAdjust
; Line 17221
	neg	ecx
	mov	DWORD PTR _DeltaOffset$[ebp], ecx
; Line 17223
	jmp	SHORT $LN1@ReAdjust
$LN3@ReAdjust:
; Line 17224
	imul	eax, 5
	cdq
	idiv	ecx
	movzx	ecx, WORD PTR [esi+12]
	dec	ecx
	cdq
	idiv	ecx
	mov	DWORD PTR _DeltaOffset$[ebp], eax
$LN1@ReAdjust:
; Line 17240
	lea	eax, DWORD PTR _DeltaOffset$[ebp]
	push	eax
	mov	ax, WORD PTR [ebx]
	add	ax, WORD PTR tv303[ebp]
	push	28					; 0000001cH
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 17241
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	DWORD PTR _MrcData$[ebp]
	call	_MmrcExecuteTask
	add	esp, 44					; 0000002cH
	pop	edi
	pop	ebx
$LN9@ReAdjust:
; Line 17242
	xor	eax, eax
	pop	esi
; Line 17243
	leave
	ret	0
_ReAdjust ENDP
_TEXT	ENDS
PUBLIC	_StoreDelay
; Function compile flags: /Ogspy
;	COMDAT _StoreDelay
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Value$ = 40						; size = 4
_Param$ = 40						; size = 4
_StoreDelay PROC					; COMDAT
; Line 17662
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 17666
	mov	esi, DWORD PTR _Param$[ebp]
	xor	bl, bl
	cmp	BYTE PTR [esi+4], bl
	jbe	SHORT $LN3@StoreDelay
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR _MrcData$[ebp]
	push	edi
	lea	edi, DWORD PTR [ecx+eax]
$LL10@StoreDelay:
; Line 17667
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	movzx	eax, bl
	movzx	eax, WORD PTR [esi+eax*2]
	push	3
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 17670
	mov	al, BYTE PTR _Value$[ebp]
	add	esp, 28					; 0000001cH
	test	bl, bl
	jne	SHORT $LN2@StoreDelay
	mov	BYTE PTR [edi+71167], al
; Line 17671
	jmp	SHORT $LN4@StoreDelay
$LN2@StoreDelay:
; Line 17672
	mov	BYTE PTR [edi+71311], al
$LN4@StoreDelay:
; Line 17666
	inc	bl
	cmp	bl, BYTE PTR [esi+4]
	jb	SHORT $LL10@StoreDelay
	pop	edi
$LN3@StoreDelay:
	pop	esi
; Line 17675
	xor	eax, eax
	pop	ebx
; Line 17676
	pop	ebp
	ret	0
_StoreDelay ENDP
_TEXT	ENDS
PUBLIC	_RestoreDelay
; Function compile flags: /Ogspy
;	COMDAT _RestoreDelay
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Range$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Knob$ = 24						; size = 1
_Strobe$ = 28						; size = 1
_Bit$ = 32						; size = 1
_Timing$ = 36						; size = 1
_Value$ = 40						; size = 4
_Param$ = 40						; size = 4
_RestoreDelay PROC					; COMDAT
; Line 17689
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 17693
	mov	esi, DWORD PTR _Param$[ebp]
	xor	bl, bl
	cmp	BYTE PTR [esi+4], bl
	jbe	SHORT $LN3@RestoreDel
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR _MrcData$[ebp]
	push	edi
	lea	edi, DWORD PTR [ecx+eax]
$LL10@RestoreDel:
; Line 17695
	test	bl, bl
	jne	SHORT $LN2@RestoreDel
; Line 17696
	movzx	eax, BYTE PTR [edi+71167]
; Line 17697
	jmp	SHORT $LN11@RestoreDel
$LN2@RestoreDel:
; Line 17698
	movzx	eax, BYTE PTR [edi+71311]
$LN11@RestoreDel:
	mov	DWORD PTR _Value$[ebp], eax
; Line 17700
	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	movzx	eax, bl
	movzx	eax, WORD PTR [esi+eax*2]
	push	24					; 00000018H
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	bl
	cmp	bl, BYTE PTR [esi+4]
	jb	SHORT $LL10@RestoreDel
	pop	edi
$LN3@RestoreDel:
	pop	esi
; Line 17702
	xor	eax, eax
	pop	ebx
; Line 17703
	pop	ebp
	ret	0
_RestoreDelay ENDP
_TEXT	ENDS
PUBLIC	_ReadDelayElements
; Function compile flags: /Ogspy
;	COMDAT _ReadDelayElements
_TEXT	SEGMENT
_Value32$ = -8						; size = 4
tv199 = -4						; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_Strobe$ = 20						; size = 1
_Type$ = 24						; size = 2
_LinearDelay$ = 24					; size = 4
_Cmd$ = 28						; size = 1
_Value$ = 32						; size = 4
_HeaderEn$ = 36						; size = 1
_ReadDelayElements PROC					; COMDAT
; Line 153
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 158
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	push	DWORD PTR _Type$[ebp]
	push	esi
	call	_GetOffsetIndex
	pop	ecx
	pop	ecx
; Line 159
	mov	ecx, 4096				; 00001000H
	sub	ax, cx
; Line 160
	movzx	cx, BYTE PTR _NumberOfElementsPerAlgoGenerated
	imul	ax, cx
; Line 167
	movzx	ecx, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	movzx	edi, ax
	movzx	eax, BYTE PTR _NumberOfCCElementsGenerated
	xor	ebx, ebx
	add	eax, ecx
	mov	DWORD PTR _LinearDelay$[ebp], ebx
	test	eax, eax
	jle	$LN12@ReadDelayE
	mov	DWORD PTR tv199[ebp], ebx
$LL6@ReadDelayE:
; Line 168
	lea	eax, DWORD PTR _Value32$[ebp]
	push	eax
	push	DWORD PTR _Cmd$[ebp]
	movzx	ax, bl
	add	ax, di
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	test	eax, eax
	mov	al, BYTE PTR _NumberOfDelayElementsPerAlgoGenerated
	jne	SHORT $LN5@ReadDelayE
; Line 170
	cmp	bl, al
	jae	SHORT $LN5@ReadDelayE
; Line 171
	movzx	edx, BYTE PTR [esi+65338]
	movzx	edx, BYTE PTR _ADdllGenerated[edx]
	movzx	ecx, BYTE PTR _Channel$[ebp]
	imul	edx, 5
	movzx	ecx, WORD PTR [esi+ecx*2+55494]
	add	ecx, edx
	imul	ecx, 3
	add	ecx, DWORD PTR tv199[ebp]
	movzx	ecx, WORD PTR _GranularityGenerated[ecx*2]
	imul	ecx, DWORD PTR _Value32$[ebp]
	add	DWORD PTR _LinearDelay$[ebp], ecx
$LN5@ReadDelayE:
	movzx	edx, BYTE PTR _NumberOfCCElementsGenerated
	inc	bl
	movzx	eax, al
	movzx	ecx, bl
	add	edx, eax
	cmp	ecx, edx
	mov	DWORD PTR tv199[ebp], ecx
	jl	SHORT $LL6@ReadDelayE
$LN12@ReadDelayE:
; Line 178
	mov	eax, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR _LinearDelay$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
	pop	ebx
; Line 180
	leave
	ret	0
_ReadDelayElements ENDP
_TEXT	ENDS
PUBLIC	_VrefValueToSwitchVOC
; Function compile flags: /Ogspy
;	COMDAT _VrefValueToSwitchVOC
_TEXT	SEGMENT
_BitNormal$ = -48					; size = 16
_BitSwizzling$ = -32					; size = 16
tv321 = -16						; size = 4
_BitArray$ = -12					; size = 4
_TempValue$ = -8					; size = 4
_Strobe$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
tv361 = 20						; size = 4
_NumberElements$ = 20					; size = 4
_Bit$ = 23						; size = 1
_NumberKnobs$ = 24					; size = 1
_PassFail$ = 28						; size = 4
_VrefValueToSwitchVOC PROC				; COMDAT
; Line 1518
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 1528
	and	DWORD PTR _TempValue$[ebp], 0
	push	ebx
; Line 1533
	mov	ebx, DWORD PTR _MrcData$[ebp]
	push	esi
	push	edi
	push	4
	pop	edx
	push	8
	pop	ecx
	xor	esi, esi
	inc	esi
	push	2
	pop	eax
	mov	DWORD PTR _BitSwizzling$[ebp+8], esi
	mov	DWORD PTR _BitNormal$[ebp], esi
	movzx	esi, BYTE PTR _Channel$[ebp]
	mov	DWORD PTR _BitSwizzling$[ebp+12], eax
	mov	DWORD PTR _BitNormal$[ebp+4], eax
	mov	eax, DWORD PTR _NumberElements$[ebp]
	add	eax, esi
	cmp	BYTE PTR [eax], 0
	mov	DWORD PTR _BitSwizzling$[ebp], edx
	mov	DWORD PTR _BitSwizzling$[ebp+4], ecx
	mov	DWORD PTR _BitNormal$[ebp+8], edx
	mov	DWORD PTR _BitNormal$[ebp+12], ecx
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv321[ebp], eax
	jbe	$LN25@VrefValueT
$LL42@VrefValueT:
; Line 1534
	xor	edi, edi
	push	edi
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN26@VrefValueT
; Line 1541
	cmp	BYTE PTR [ebx+71012], 1
	jne	SHORT $LN26@VrefValueT
; Line 1542
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	3
	push	20501					; 00005015H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 1543
	cmp	DWORD PTR _TempValue$[ebp], edi
	je	SHORT $LN26@VrefValueT
; Line 1544
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, ebx
	lea	edi, DWORD PTR [eax+esi*4+55462]
	cmp	BYTE PTR [edi], 1
	mov	BYTE PTR _Bit$[ebp], 1
	jbe	SHORT $LN26@VrefValueT
$LL43@VrefValueT:
; Line 1545
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	ax, BYTE PTR _Bit$[ebp]
	mov	ecx, 20501				; 00005015H
	add	ax, cx
	push	24					; 00000018H
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _Bit$[ebp]
	mov	al, BYTE PTR _Bit$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL43@VrefValueT
$LN26@VrefValueT:
; Line 1533
	inc	BYTE PTR _Strobe$[ebp]
	mov	eax, DWORD PTR tv321[ebp]
	mov	cl, BYTE PTR _Strobe$[ebp]
	cmp	cl, BYTE PTR [eax]
	jb	$LL42@VrefValueT
$LN25@VrefValueT:
; Line 1550
	cmp	BYTE PTR [eax], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	$LN16@VrefValueT
$LL45@VrefValueT:
; Line 1551
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN17@VrefValueT
; Line 1554
	push	1
	push	1
	call	_MspDelay
; Line 1555
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	3
	push	20500					; 00005014H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_GetSetDdrioGroup2
	add	esp, 36					; 00000024H
; Line 1556
	cmp	BYTE PTR [ebx+71012], 1
	jne	SHORT $LN41@VrefValueT
; Line 1557
	xor	DWORD PTR _TempValue$[ebp], 15		; 0000000fH
$LN41@VrefValueT:
; Line 1560
	cmp	BYTE PTR _Strobe$[ebp], 4
	jb	SHORT $LN11@VrefValueT
	cmp	BYTE PTR _Strobe$[ebp], 7
	jbe	SHORT $LN12@VrefValueT
$LN11@VrefValueT:
	mov	al, BYTE PTR _Strobe$[ebp]
	sub	al, 13					; 0000000dH
	cmp	al, 3
	ja	SHORT $LN13@VrefValueT
$LN12@VrefValueT:
; Line 1561
	lea	eax, DWORD PTR _BitSwizzling$[ebp]
; Line 1562
	jmp	SHORT $LN50@VrefValueT
$LN13@VrefValueT:
; Line 1563
	lea	eax, DWORD PTR _BitNormal$[ebp]
$LN50@VrefValueT:
	mov	DWORD PTR _BitArray$[ebp], eax
; Line 1565
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, ebx
	lea	ecx, DWORD PTR [eax+esi*4+55462]
	cmp	BYTE PTR [ecx], 0
	mov	BYTE PTR _Bit$[ebp], 0
	jbe	SHORT $LN17@VrefValueT
$LL46@VrefValueT:
; Line 1566
	movzx	eax, BYTE PTR _Bit$[ebp]
	mov	edx, DWORD PTR _TempValue$[ebp]
	mov	edi, DWORD PTR _BitArray$[ebp]
	test	DWORD PTR [edi+eax*4], edx
; Line 1567
	movzx	edi, BYTE PTR _Strobe$[ebp]
	mov	edx, esi
	je	SHORT $LN6@VrefValueT
	imul	edx, 18					; 00000012H
	add	edx, edi
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _PassFail$[ebp]
	imul	eax, 3
	mov	BYTE PTR [eax+edx], 1
; Line 1568
	mov	eax, 256				; 00000100H
	test	WORD PTR [ebx+65586], ax
	je	SHORT $LN8@VrefValueT
; Line 1569
	xor	al, al
	cmp	BYTE PTR [ecx], al
	jbe	SHORT $LN17@VrefValueT
	movzx	edi, BYTE PTR _Strobe$[ebp]
	mov	edx, esi
	imul	edx, 18					; 00000012H
	add	edx, edi
	shl	edx, 3
	mov	DWORD PTR tv361[ebp], edx
$LL49@VrefValueT:
; Line 1570
	mov	edi, DWORD PTR _PassFail$[ebp]
	movzx	edx, al
	add	edx, DWORD PTR tv361[ebp]
	imul	edx, 3
	inc	al
	mov	BYTE PTR [edx+edi], 1
	cmp	al, BYTE PTR [ecx]
	jb	SHORT $LL49@VrefValueT
$LN17@VrefValueT:
; Line 1550
	inc	BYTE PTR _Strobe$[ebp]
	mov	eax, DWORD PTR tv321[ebp]
	mov	cl, BYTE PTR _Strobe$[ebp]
	cmp	cl, BYTE PTR [eax]
	jb	$LL45@VrefValueT
$LN16@VrefValueT:
	pop	edi
	pop	esi
; Line 1580
	xor	eax, eax
	pop	ebx
; Line 1581
	leave
	ret	0
$LN6@VrefValueT:
; Line 1575
	imul	edx, 18					; 00000012H
	add	edx, edi
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _PassFail$[ebp]
	imul	eax, 3
	mov	BYTE PTR [eax+edx], 0
$LN8@VrefValueT:
	inc	BYTE PTR _Bit$[ebp]
	mov	al, BYTE PTR _Bit$[ebp]
	cmp	al, BYTE PTR [ecx]
	jb	$LL46@VrefValueT
; Line 1568
	jmp	SHORT $LN17@VrefValueT
_VrefValueToSwitchVOC ENDP
_TEXT	ENDS
PUBLIC	_ReInitializeFunction
; Function compile flags: /Ogspy
;	COMDAT _ReInitializeFunction
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_ExecuteBackup$ = 20					; size = 2
_Channel$ = 20						; size = 1
_ReInitializeFunction PROC				; COMDAT
; Line 1664
	push	ebp
	mov	ebp, esp
; Line 1666
	movzx	eax, BYTE PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+eax*2+55414], 1
	je	SHORT $LN1@ReInitiali@2
	cmp	BYTE PTR [esi+eax*2+55415], 1
	je	SHORT $LN1@ReInitiali@2
	cmp	BYTE PTR [esi+31274], 1
; Line 1668
	je	SHORT $LN4@ReInitiali@2
$LN1@ReInitiali@2:
; Line 1673
	mov	al, BYTE PTR [esi+55512]
	mov	BYTE PTR _ExecuteBackup$[ebp+1], al
; Line 1675
	mov	al, BYTE PTR [esi+28608]
	push	ebx
	mov	bl, BYTE PTR [esi+55511]
	push	edi
	mov	BYTE PTR [esi+55511], al
; Line 1676
	mov	al, BYTE PTR [esi+28609]
; Line 1677
	lea	edi, DWORD PTR [esi+71461]
; Line 1678
	push	esi
	mov	BYTE PTR [esi+55512], al
	mov	BYTE PTR [edi], 0
	call	_ReInitializeDramsAcrossChannels
; Line 1681
	mov	al, BYTE PTR _ExecuteBackup$[ebp+1]
	pop	ecx
	mov	BYTE PTR [edi], 1
	pop	edi
	mov	BYTE PTR [esi+55511], bl
	mov	BYTE PTR [esi+55512], al
	pop	ebx
$LN4@ReInitiali@2:
; Line 1683
	xor	eax, eax
	pop	esi
; Line 1684
	pop	ebp
	ret	0
_ReInitializeFunction ENDP
_TEXT	ENDS
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	_VocTraining
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _VocTraining
_TEXT	SEGMENT
_VocPerVref$ = -39212					; size = 32832
_VrefPerVoc$ = -6380					; size = 4608
_Results$ = -1772					; size = 1152
_Voc$ = -620						; size = 288
_Dim1StartPoint$ = -332					; size = 144
_Low$ = -188						; size = 72
_High$ = -116						; size = 72
_TargetVref$ = -44					; size = 36
tv1846 = -8						; size = 4
tv2718 = -4						; size = 4
tv2859 = 0						; size = 4
tv2713 = 4						; size = 4
tv2509 = 4						; size = 4
tv2715 = 8						; size = 4
tv2524 = 8						; size = 4
_NumberElements$ = 12					; size = 2
tv4262 = 16						; size = 4
tv4142 = 16						; size = 4
tv2967 = 16						; size = 4
_DebugLevel$ = 23					; size = 1
tv1768 = 24						; size = 4
_MaxBitCache$ = 28					; size = 2
tv1810 = 32						; size = 4
_MaxDqCache$ = 36					; size = 2
tv1813 = 40						; size = 4
_MaxThresholdBackup$ = 47				; size = 1
tv1307 = 48						; size = 4
tv1158 = 48						; size = 4
tv339 = 48						; size = 4
_MinVref$ = 52						; size = 2
tv3379 = 56						; size = 4
tv2958 = 56						; size = 4
tv1614 = 56						; size = 4
tv2573 = 60						; size = 4
_MaxVref$ = 60						; size = 2
_TempValue$ = 64					; size = 4
tv3988 = 68						; size = 4
tv3338 = 72						; size = 4
tv2909 = 72						; size = 4
_BackupEnable$ = 79					; size = 1
tv4137 = 80						; size = 4
tv3745 = 80						; size = 4
tv2861 = 80						; size = 4
tv2525 = 80						; size = 4
tv3781 = 84						; size = 4
tv3305 = 84						; size = 4
tv2546 = 84						; size = 4
_CurrentVoc$ = 84					; size = 2
tv3395 = 88						; size = 4
tv3307 = 88						; size = 4
tv3141 = 88						; size = 4
tv3123 = 88						; size = 4
tv2932 = 88						; size = 4
tv1324 = 88						; size = 4
_FirstAvailableRank$ = 92				; size = 2
_IndCh$ = 99						; size = 1
_i$ = 99						; size = 1
_Strobe$ = 100						; size = 1
tv3677 = 112						; size = 4
_MrcData$ = 112						; size = 4
_FirstAvailableChannel$ = 115				; size = 1
_CapsuleStartIndex$ = 116				; size = 2
_StringIndex$ = 120					; size = 2
_Channel$ = 124						; size = 1
_VocTraining PROC					; COMDAT
; Line 1865
	push	ebp
	lea	ebp, DWORD PTR [esp-104]
	sub	esp, 39316				; 00009994H
	push	esi
; Line 1891
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	xor	eax, eax
	lea	edi, DWORD PTR _MaxDqCache$[ebp+1]
	mov	BYTE PTR _MaxDqCache$[ebp], 0
	stosb
	lea	edi, DWORD PTR _MaxBitCache$[ebp+1]
	mov	BYTE PTR _MaxBitCache$[ebp], al
	stosb
	cmp	BYTE PTR [esi+71013], al
; Line 1893
	jne	$LN286@VocTrainin
; Line 1896
	mov	al, BYTE PTR [esi+55509]
	mov	BYTE PTR _BackupEnable$[ebp], al
; Line 1901
	mov	al, BYTE PTR [esi+55506]
	mov	BYTE PTR _DebugLevel$[ebp], al
; Line 1904
	mov	eax, 303174162				; 12121212H
	push	ebx
	mov	bl, BYTE PTR [esi+71458]
	lea	edi, DWORD PTR _NumberElements$[ebp]
	stosw
	mov	BYTE PTR _MaxThresholdBackup$[ebp], bl
	mov	BYTE PTR [esi+71013], 1
	mov	BYTE PTR [esi+71458], 1
; Line 1907
	mov	BYTE PTR _FirstAvailableRank$[ebp], 255	; 000000ffH
; Line 1908
	mov	BYTE PTR _FirstAvailableRank$[ebp+1], 255 ; 000000ffH
; Line 1909
	mov	BYTE PTR _FirstAvailableChannel$[ebp], 255 ; 000000ffH
; Line 1910
	mov	BYTE PTR _IndCh$[ebp], 0
	xor	edi, edi
	lea	eax, DWORD PTR [esi+55438]
$LL178@VocTrainin:
; Line 1911
	xor	dl, dl
$LL175@VocTrainin:
; Line 1912
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN174@VocTrainin
	cmp	BYTE PTR [edi+esi+28608], 0
	je	SHORT $LN174@VocTrainin
; Line 1913
	cmp	BYTE PTR _FirstAvailableRank$[ebp], 255	; 000000ffH
	jne	SHORT $LN171@VocTrainin
	cmp	BYTE PTR _FirstAvailableRank$[ebp+1], 255 ; 000000ffH
	jne	SHORT $LN171@VocTrainin
; Line 1914
	mov	cl, BYTE PTR _IndCh$[ebp]
	mov	BYTE PTR _FirstAvailableChannel$[ebp], cl
$LN171@VocTrainin:
; Line 1916
	lea	ecx, DWORD PTR _FirstAvailableRank$[ebp+edi]
	cmp	BYTE PTR [ecx], 255			; 000000ffH
	jne	SHORT $LN174@VocTrainin
; Line 1917
	mov	BYTE PTR [ecx], dl
$LN174@VocTrainin:
; Line 1911
	inc	dl
	inc	eax
	cmp	dl, 4
	jb	SHORT $LL175@VocTrainin
	inc	BYTE PTR _IndCh$[ebp]
	inc	edi
	cmp	BYTE PTR _IndCh$[ebp], 2
	jb	SHORT $LL178@VocTrainin
; Line 1925
	cmp	BYTE PTR _FirstAvailableRank$[ebp], 255	; 000000ffH
	jne	SHORT $LN167@VocTrainin
	cmp	BYTE PTR _FirstAvailableRank$[ebp+1], 255 ; 000000ffH
	je	SHORT $LN168@VocTrainin
$LN167@VocTrainin:
	cmp	BYTE PTR _FirstAvailableChannel$[ebp], 255 ; 000000ffH
	jne	SHORT $LN169@VocTrainin
$LN168@VocTrainin:
; Line 1926
	mov	BYTE PTR [esi+71458], bl
; Line 1927
	jmp	$LN283@VocTrainin
$LN169@VocTrainin:
; Line 1930
	push	2
	xor	eax, eax
	pop	edx
$LL166@VocTrainin:
; Line 1931
	mov	cl, BYTE PTR _FirstAvailableRank$[ebp+eax]
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN165@VocTrainin
; Line 1934
	movzx	ecx, cl
	add	ecx, esi
	lea	ecx, DWORD PTR [ecx+eax*4]
	lea	edi, DWORD PTR [ecx+55454]
	mov	bl, BYTE PTR [edi]
; Line 1935
	add	ecx, 55462				; 0000d8a6H
	mov	BYTE PTR _MaxDqCache$[ebp+eax], bl
	mov	bl, BYTE PTR [ecx]
; Line 1936
	mov	BYTE PTR [edi], 18			; 00000012H
	mov	BYTE PTR _MaxBitCache$[ebp+eax], bl
; Line 1937
	mov	BYTE PTR [ecx], 4
$LN165@VocTrainin:
	inc	eax
	dec	edx
	jne	SHORT $LL166@VocTrainin
; Line 1944
	mov	al, BYTE PTR _FirstAvailableChannel$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	BYTE PTR [esi+65337], dl
	jne	$LN162@VocTrainin
	cmp	al, 2
	jae	SHORT $LN159@VocTrainin
	movzx	eax, al
	lea	ebx, DWORD PTR _FirstAvailableRank$[ebp+eax]
	lea	edi, DWORD PTR [eax+esi+28608]
$LL161@VocTrainin:
; Line 1945
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN160@VocTrainin
	cmp	BYTE PTR [ebx], 255			; 000000ffH
	je	SHORT $LN160@VocTrainin
; Line 1948
	push	DWORD PTR _Channel$[ebp]
	push	17738					; 0000454aH
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	17738					; 0000454aH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN160@VocTrainin:
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	inc	ebx
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL161@VocTrainin
$LN159@VocTrainin:
; Line 1950
	cmp	BYTE PTR _FirstAvailableChannel$[ebp], 1
	jne	SHORT $LN156@VocTrainin
; Line 1951
	mov	BYTE PTR [esi+55509], 1
$LN156@VocTrainin:
; Line 1954
	push	0
	mov	edi, 17771				; 0000456bH
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 1956
	mov	al, BYTE PTR _FirstAvailableChannel$[ebp]
	add	esp, 16					; 00000010H
	cmp	al, 1
	jne	SHORT $LN155@VocTrainin
; Line 1957
	mov	cl, BYTE PTR _BackupEnable$[ebp]
	mov	BYTE PTR [esi+55509], cl
$LN155@VocTrainin:
; Line 1962
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	SHORT $LN272@VocTrainin
	movzx	eax, BYTE PTR _FirstAvailableChannel$[ebp]
	lea	ebx, DWORD PTR _FirstAvailableRank$[ebp+eax]
	lea	edi, DWORD PTR [eax+esi+28608]
$LL154@VocTrainin:
; Line 1963
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN153@VocTrainin
	cmp	BYTE PTR [ebx], 255			; 000000ffH
	je	SHORT $LN153@VocTrainin
; Line 1966
	push	DWORD PTR _Channel$[ebp]
	push	17836					; 000045acH
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	17836					; 000045acH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN153@VocTrainin:
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	inc	ebx
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL154@VocTrainin
$LN272@VocTrainin:
; Line 1968
	cmp	BYTE PTR _FirstAvailableChannel$[ebp], 1
	jne	SHORT $LN149@VocTrainin
; Line 1969
	mov	BYTE PTR [esi+55509], 1
$LN149@VocTrainin:
; Line 1971
	push	0
	mov	edi, 17851				; 000045bbH
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 1972
	mov	al, BYTE PTR _FirstAvailableChannel$[ebp]
	add	esp, 16					; 00000010H
	cmp	al, 1
	jne	SHORT $LN148@VocTrainin
; Line 1973
	mov	cl, BYTE PTR _BackupEnable$[ebp]
	mov	BYTE PTR [esi+55509], cl
$LN148@VocTrainin:
; Line 1975
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN145@VocTrainin
$LL147@VocTrainin:
; Line 1978
	movzx	ebx, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR [esi+55511], 0
	mov	BYTE PTR [esi+55512], 0
	cmp	BYTE PTR [ebx+esi+28608], 0
	je	$LN146@VocTrainin
	lea	eax, DWORD PTR _FirstAvailableRank$[ebp+ebx]
	mov	DWORD PTR tv1768[ebp], eax
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR tv3988[ebp], al
	cmp	al, 255					; 000000ffH
	je	$LN146@VocTrainin
; Line 1981
	mov	BYTE PTR [ebx+esi+55511], 1
; Line 1984
	mov	BYTE PTR _Strobe$[ebp], 0
$LL142@VocTrainin:
; Line 1989
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	20499					; 00005013H
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _TempValue$[ebp], 1
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL142@VocTrainin
; Line 1995
	mov	eax, DWORD PTR [esi+59502]
; Line 2002
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [esi+63838], eax
	mov	eax, DWORD PTR [esi+59506]
	mov	DWORD PTR [esi+63842], eax
	mov	eax, DWORD PTR [esi+59510]
	mov	DWORD PTR [esi+63846], eax
	mov	eax, DWORD PTR [esi+59514]
	mov	edi, 17944				; 00004618H
	push	edi
	mov	DWORD PTR [esi+63850], eax
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 2015
	movzx	ecx, BYTE PTR tv3988[ebp]
	mov	eax, ebx
	shl	eax, 2
	add	ecx, eax
	mov	DWORD PTR tv1810[ebp], eax
	lea	eax, DWORD PTR [ecx+esi+55462]
	add	esp, 16					; 00000010H
	and	DWORD PTR tv2573[ebp], 0
	mov	DWORD PTR tv1813[ebp], eax
	mov	DWORD PTR tv1614[ebp], 114		; 00000072H
$LL275@VocTrainin:
	and	DWORD PTR tv2525[ebp], 0
	lea	eax, DWORD PTR _Voc$[ebp]
	mov	DWORD PTR tv2546[ebp], eax
	mov	DWORD PTR tv1324[ebp], 18		; 00000012H
$LL276@VocTrainin:
	mov	eax, DWORD PTR tv1813[ebp]
	cmp	BYTE PTR [eax], 0
	jbe	SHORT $LN135@VocTrainin
	mov	ecx, DWORD PTR tv2525[ebp]
	mov	eax, DWORD PTR tv2573[ebp]
	add	eax, ecx
	shl	eax, 4
	lea	eax, DWORD PTR _VocPerVref$[ebp+eax]
	mov	DWORD PTR tv2509[ebp], eax
	mov	eax, DWORD PTR tv1768[ebp]
	movzx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR tv1810[ebp]
	mov	edi, DWORD PTR tv2546[ebp]
	movzx	ecx, BYTE PTR [eax+esi+55462]
	add	ecx, ecx
	mov	DWORD PTR tv2524[ebp], ecx
	shr	ecx, 1
	mov	eax, 255				; 000000ffH
	movzx	edx, ax
	mov	eax, edx
	shl	edx, 16					; 00000010H
	or	eax, edx
	shr	ecx, 1
	rep stosd
	adc	ecx, ecx
	rep stosw
	mov	ecx, DWORD PTR tv2524[ebp]
	mov	edi, DWORD PTR tv2509[ebp]
	mov	eax, 255				; 000000ffH
	movzx	edx, ax
	shr	ecx, 1
	mov	eax, edx
	shl	edx, 16					; 00000010H
	or	eax, edx
	shr	ecx, 1
	rep stosd
	adc	ecx, ecx
	rep stosw
$LN135@VocTrainin:
	inc	DWORD PTR tv2525[ebp]
	add	DWORD PTR tv2546[ebp], 16		; 00000010H
	dec	DWORD PTR tv1324[ebp]
	jne	SHORT $LL276@VocTrainin
	add	DWORD PTR tv2573[ebp], 18		; 00000012H
	dec	DWORD PTR tv1614[ebp]
	jne	$LL275@VocTrainin
; Line 2016
	mov	eax, 255				; 000000ffH
	movzx	edx, ax
; Line 2019
	and	DWORD PTR _MaxVref$[ebp], 0
; Line 2028
	and	DWORD PTR _CurrentVoc$[ebp], 0
	mov	eax, edx
	shl	edx, 16					; 00000010H
	or	eax, edx
	push	9
	pop	ecx
	lea	edi, DWORD PTR _TargetVref$[ebp]
	rep stosd
	mov	eax, ebx
	imul	eax, 36					; 00000024H
	lea	ecx, DWORD PTR _High$[ebp+eax]
	lea	eax, DWORD PTR _Low$[ebp+eax]
	mov	DWORD PTR tv2715[ebp], eax
	mov	eax, ebx
	imul	eax, 72					; 00000048H
	imul	ebx, 576				; 00000240H
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp+eax+2]
	mov	DWORD PTR tv2718[ebp], eax
	lea	eax, DWORD PTR _Results$[ebp+ebx]
	mov	DWORD PTR _MinVref$[ebp], 113		; 00000071H
	mov	DWORD PTR tv2713[ebp], ecx
; Line 2036
	mov	DWORD PTR tv2967[ebp], eax
$LL127@VocTrainin:
	movzx	eax, WORD PTR _CurrentVoc$[ebp]
	mov	DWORD PTR tv1846[ebp], eax
	mov	DWORD PTR _TempValue$[ebp], eax
	mov	BYTE PTR _Strobe$[ebp], 0
$LL124@VocTrainin:
	mov	eax, DWORD PTR tv1813[ebp]
	xor	bl, bl
	cmp	BYTE PTR [eax], bl
	jbe	SHORT $LN123@VocTrainin
	mov	eax, DWORD PTR tv1768[ebp]
	movzx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR tv1810[ebp]
	lea	edi, DWORD PTR [eax+esi+55462]
$LL268@VocTrainin:
	mov	eax, DWORD PTR tv1846[ebp]
	mov	DWORD PTR _TempValue$[ebp], eax
; Line 2037
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	movzx	ax, bl
	mov	ecx, 20501				; 00005015H
	add	ax, cx
	movzx	eax, ax
	push	eax
	movzx	eax, BYTE PTR [esi+55392]
	push	255					; 000000ffH
	push	eax
	xor	eax, eax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	eax
	push	esi
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
	inc	bl
	cmp	bl, BYTE PTR [edi]
	jb	SHORT $LL268@VocTrainin
$LN123@VocTrainin:
; Line 2034
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL124@VocTrainin
; Line 2045
	mov	edi, DWORD PTR tv2713[ebp]
	push	9
	pop	ecx
	mov	edx, DWORD PTR tv2718[ebp]
	push	112					; 00000070H
	pop	eax
	movzx	ebx, ax
	mov	eax, ebx
	shl	ebx, 16					; 00000010H
	or	eax, ebx
	rep stosd
	mov	edi, DWORD PTR tv2715[ebp]
	xor	eax, eax
	movzx	ebx, ax
	push	9
	mov	eax, ebx
	pop	ecx
	shl	ebx, 16					; 00000010H
	or	eax, ebx
	push	18					; 00000012H
	rep stosd
	pop	eax
$LL118@VocTrainin:
	xor	ecx, ecx
	mov	WORD PTR [edx-2], cx
	push	113					; 00000071H
	pop	ecx
	mov	WORD PTR [edx], cx
	add	edx, 4
	dec	eax
	jne	SHORT $LL118@VocTrainin
; Line 2061
	push	27					; 0000001bH
	push	3
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	mov	BYTE PTR [esi+71012], al
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _VrefValueToSwitchVOC
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	1
	xor	edi, edi
	push	edi
	push	edi
	push	1
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	57349					; 0000e005H
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_Create1DSweep
	mov	eax, DWORD PTR tv2967[ebp]
	add	esp, 72					; 00000048H
; Line 2065
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv2909[ebp], edi
	mov	DWORD PTR tv2932[ebp], edi
	mov	DWORD PTR tv2958[ebp], eax
	jmp	SHORT $LN115@VocTrainin
$LL280@VocTrainin:
; Line 2047
	xor	edi, edi
$LN115@VocTrainin:
; Line 2066
	push	edi
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN114@VocTrainin
; Line 2070
	mov	eax, DWORD PTR tv1813[ebp]
	cmp	BYTE PTR [eax], 0
	jbe	$LN114@VocTrainin
	mov	eax, DWORD PTR tv1846[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2909[ebp]
	xor	ecx, ecx
	shl	eax, 4
	lea	eax, DWORD PTR _VrefPerVoc$[ebp+eax]
	mov	DWORD PTR tv2859[ebp], eax
	mov	eax, DWORD PTR tv2958[ebp]
	mov	DWORD PTR tv2861[ebp], eax
	mov	eax, DWORD PTR tv1768[ebp]
	movzx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR tv1810[ebp]
	movzx	eax, BYTE PTR [eax+esi+55462]
	mov	DWORD PTR tv339[ebp], eax
$LL279@VocTrainin:
; Line 2071
	mov	eax, DWORD PTR tv2861[ebp]
	movzx	eax, WORD PTR [eax]
	mov	edx, DWORD PTR tv2859[ebp]
	mov	WORD PTR [edx], ax
; Line 2072
	cmp	ax, 113					; 00000071H
	ja	SHORT $LN110@VocTrainin
; Line 2076
	movzx	eax, ax
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2909[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _CurrentVoc$[ebp]
	mov	WORD PTR _VocPerVref$[ebp+edx*2], ax
; Line 2083
	test	ax, ax
	jne	SHORT $LN270@VocTrainin
	mov	eax, DWORD PTR tv2909[ebp]
	cdq
	push	9
	pop	edi
	idiv	edi
	lea	eax, DWORD PTR _TargetVref$[ebp+edx*2]
	mov	edx, DWORD PTR tv2932[ebp]
	movzx	edi, WORD PTR [eax]
	add	edx, ecx
	movzx	edx, WORD PTR _VrefPerVoc$[ebp+edx*2]
	cmp	di, dx
	jb	SHORT $LN105@VocTrainin
	mov	ebx, 255				; 000000ffH
	cmp	di, bx
	jne	SHORT $LN270@VocTrainin
$LN105@VocTrainin:
; Line 2084
	mov	WORD PTR [eax], dx
$LN270@VocTrainin:
; Line 2086
	mov	eax, DWORD PTR tv2861[ebp]
	movzx	eax, WORD PTR [eax]
	cmp	WORD PTR _MinVref$[ebp], ax
	jbe	SHORT $LN104@VocTrainin
; Line 2087
	movzx	edx, ax
	mov	DWORD PTR _MinVref$[ebp], edx
$LN104@VocTrainin:
; Line 2089
	cmp	WORD PTR _MaxVref$[ebp], ax
	jae	SHORT $LN110@VocTrainin
; Line 2090
	movzx	eax, ax
	mov	DWORD PTR _MaxVref$[ebp], eax
$LN110@VocTrainin:
	add	DWORD PTR tv2861[ebp], 4
	add	DWORD PTR tv2859[ebp], 2
	inc	ecx
	dec	DWORD PTR tv339[ebp]
	jne	$LL279@VocTrainin
$LN114@VocTrainin:
; Line 2065
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv2909[ebp]
	add	DWORD PTR tv2958[ebp], 32		; 00000020H
	add	DWORD PTR tv2932[ebp], 8
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL280@VocTrainin
	inc	DWORD PTR _CurrentVoc$[ebp]
	cmp	WORD PTR _CurrentVoc$[ebp], 7
	jbe	$LL127@VocTrainin
; Line 2107
	and	DWORD PTR tv3123[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL95@VocTrainin:
; Line 2108
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN94@VocTrainin
; Line 2111
	mov	eax, DWORD PTR tv1813[ebp]
	cmp	BYTE PTR [eax], 0
	jbe	SHORT $LN94@VocTrainin
	mov	eax, DWORD PTR tv1768[ebp]
	movzx	eax, BYTE PTR [eax]
	xor	edi, edi
	add	eax, DWORD PTR tv1810[ebp]
	movzx	ebx, BYTE PTR [eax+esi+55462]
$LL91@VocTrainin:
; Line 2112
	mov	al, BYTE PTR _MaxVref$[ebp]
	cmp	BYTE PTR _MinVref$[ebp], al
	ja	SHORT $LN90@VocTrainin
	movzx	eax, BYTE PTR _MinVref$[ebp]
	mov	cl, BYTE PTR _MaxVref$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv3123[ebp]
	sub	cl, BYTE PTR _MinVref$[ebp]
	lea	eax, DWORD PTR [edi+eax*8]
	inc	cl
	lea	eax, DWORD PTR _VocPerVref$[ebp+eax*2]
	movzx	ecx, cl
$LL88@VocTrainin:
; Line 2113
	movzx	edx, WORD PTR [eax]
	cmp	dx, 5
	jb	SHORT $LN87@VocTrainin
	cmp	dx, 9
	ja	SHORT $LN87@VocTrainin
; Line 2114
	mov	edx, 255				; 000000ffH
	mov	WORD PTR [eax], dx
$LN87@VocTrainin:
	add	eax, 288				; 00000120H
	dec	ecx
	jne	SHORT $LL88@VocTrainin
$LN90@VocTrainin:
; Line 2111
	inc	edi
	dec	ebx
	jne	SHORT $LL91@VocTrainin
$LN94@VocTrainin:
; Line 2107
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv3123[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL95@VocTrainin
; Line 2123
	mov	al, BYTE PTR _MaxVref$[ebp]
	cmp	BYTE PTR _MinVref$[ebp], al
	ja	$LN265@VocTrainin
	movzx	ebx, BYTE PTR _MinVref$[ebp]
	sub	al, BYTE PTR _MinVref$[ebp]
	imul	ebx, 18					; 00000012H
	inc	al
	movzx	eax, al
	mov	DWORD PTR tv1307[ebp], eax
$LL84@VocTrainin:
; Line 2125
	and	DWORD PTR tv3141[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL81@VocTrainin:
; Line 2126
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN80@VocTrainin
; Line 2129
	mov	eax, DWORD PTR tv1813[ebp]
	xor	cl, cl
	cmp	BYTE PTR [eax], cl
	jbe	SHORT $LN80@VocTrainin
	mov	eax, DWORD PTR tv3141[ebp]
	lea	edi, DWORD PTR [ebx+eax]
	mov	eax, DWORD PTR tv1768[ebp]
	movzx	eax, BYTE PTR [eax]
	shl	edi, 3
	add	eax, DWORD PTR tv1810[ebp]
	lea	eax, DWORD PTR [eax+esi+55462]
$LL77@VocTrainin:
; Line 2130
	movzx	edx, cl
	add	edx, edi
	movzx	edx, WORD PTR _VocPerVref$[ebp+edx*2]
	inc	cl
	mov	DWORD PTR _TempValue$[ebp], edx
	cmp	cl, BYTE PTR [eax]
	jb	SHORT $LL77@VocTrainin
$LN80@VocTrainin:
; Line 2125
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv3141[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL81@VocTrainin
	add	ebx, 18					; 00000012H
	dec	DWORD PTR tv1307[ebp]
	jne	SHORT $LL84@VocTrainin
$LN265@VocTrainin:
; Line 2143
	and	DWORD PTR tv3338[ebp], 0
	lea	eax, DWORD PTR _Voc$[ebp]
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv3379[ebp], eax
$LL72@VocTrainin:
; Line 2144
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN71@VocTrainin
; Line 2147
	mov	eax, DWORD PTR tv1813[ebp]
	cmp	BYTE PTR [eax], 0
	jbe	$LN71@VocTrainin
	mov	eax, DWORD PTR tv3338[ebp]
	cdq
	push	9
	pop	ecx
	idiv	ecx
	mov	edi, DWORD PTR tv3379[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv3305[ebp], edi
	movzx	eax, WORD PTR _TargetVref$[ebp+edx*2]
	mov	edx, eax
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv3338[ebp]
	shl	edx, 4
	lea	edx, DWORD PTR _VocPerVref$[ebp+edx]
	mov	DWORD PTR tv3307[ebp], edx
	mov	edx, DWORD PTR tv1768[ebp]
	movzx	edx, BYTE PTR [edx]
	add	edx, DWORD PTR tv1810[ebp]
	movzx	edx, BYTE PTR [edx+esi+55462]
	mov	DWORD PTR tv1158[ebp], edx
$LL68@VocTrainin:
; Line 2148
	mov	edx, DWORD PTR tv3307[ebp]
	movzx	edx, WORD PTR [edx]
	mov	ebx, 255				; 000000ffH
	cmp	dx, bx
; Line 2150
	jne	$LN284@VocTrainin
; Line 2151
	movzx	edx, WORD PTR _MinVref$[ebp]
	mov	DWORD PTR tv4137[ebp], eax
	sub	DWORD PTR tv4137[ebp], edx
	cmp	DWORD PTR tv4137[ebp], 1
	mov	BYTE PTR _i$[ebp], 1
	jl	$LN271@VocTrainin
	movzx	edx, WORD PTR _MaxVref$[ebp]
	sub	edx, eax
	mov	DWORD PTR tv4142[ebp], edx
	xor	edx, edx
	inc	edx
$LL269@VocTrainin:
	cmp	edx, DWORD PTR tv4142[ebp]
	jg	SHORT $LN271@VocTrainin
; Line 2152
	lea	edi, DWORD PTR [edx+eax]
	imul	edi, 18					; 00000012H
	add	edi, DWORD PTR tv3338[ebp]
	mov	ebx, 255				; 000000ffH
	lea	edi, DWORD PTR [ecx+edi*8]
	cmp	WORD PTR _VocPerVref$[ebp+edi*2], bx
	jne	SHORT $LN224@VocTrainin
; Line 2155
	mov	edi, eax
	sub	edi, edx
	imul	edi, 18					; 00000012H
	add	edi, DWORD PTR tv3338[ebp]
	lea	edx, DWORD PTR [ecx+edi*8]
	mov	edi, ebx
	cmp	WORD PTR _VocPerVref$[ebp+edx*2], di
	jne	SHORT $LN225@VocTrainin
	inc	BYTE PTR _i$[ebp]
	movzx	edx, BYTE PTR _i$[ebp]
	cmp	edx, DWORD PTR tv4137[ebp]
	jle	SHORT $LL269@VocTrainin
	jmp	SHORT $LN271@VocTrainin
$LN224@VocTrainin:
; Line 2153
	movzx	edx, BYTE PTR _i$[ebp]
	add	edx, eax
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR tv3338[ebp]
	lea	edx, DWORD PTR [ecx+edx*8]
	jmp	SHORT $LN285@VocTrainin
$LN225@VocTrainin:
; Line 2156
	movzx	edx, BYTE PTR _i$[ebp]
	mov	edi, eax
	sub	edi, edx
	imul	edi, 18					; 00000012H
	add	edi, DWORD PTR tv3338[ebp]
	lea	edx, DWORD PTR [ecx+edi*8]
$LN285@VocTrainin:
	mov	edi, DWORD PTR tv3305[ebp]
	mov	dx, WORD PTR _VocPerVref$[ebp+edx*2]
	mov	WORD PTR [edi], dx
$LN271@VocTrainin:
; Line 2160
	mov	edi, DWORD PTR tv3305[ebp]
	mov	edx, 255				; 000000ffH
	cmp	WORD PTR [edi], dx
	jne	SHORT $LN67@VocTrainin
; Line 2162
	xor	edx, edx
$LN284@VocTrainin:
	mov	WORD PTR [edi], dx
$LN67@VocTrainin:
; Line 2147
	add	DWORD PTR tv3307[ebp], 2
	inc	ecx
	inc	edi
	inc	edi
	dec	DWORD PTR tv1158[ebp]
	mov	DWORD PTR tv3305[ebp], edi
	jne	$LL68@VocTrainin
$LN71@VocTrainin:
; Line 2143
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv3338[ebp]
	add	DWORD PTR tv3379[ebp], 16		; 00000010H
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL72@VocTrainin
; Line 2171
	and	DWORD PTR tv3395[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL281@VocTrainin:
; Line 2172
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN55@VocTrainin
; Line 2176
	mov	eax, DWORD PTR tv1813[ebp]
	xor	bl, bl
	cmp	BYTE PTR [eax], bl
	jbe	SHORT $LN55@VocTrainin
	mov	eax, DWORD PTR tv1768[ebp]
	movzx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR tv1810[ebp]
	lea	edi, DWORD PTR [eax+esi+55462]
$LL52@VocTrainin:
; Line 2177
	movzx	eax, bl
	add	eax, DWORD PTR tv3395[ebp]
; Line 2178
	mov	ecx, 20501				; 00005015H
	movzx	eax, WORD PTR _Voc$[ebp+eax*2]
	mov	DWORD PTR _TempValue$[ebp], eax
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	movzx	ax, bl
	add	ax, cx
	push	24					; 00000018H
	movzx	eax, ax
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	bl
	cmp	bl, BYTE PTR [edi]
	jb	SHORT $LL52@VocTrainin
$LN55@VocTrainin:
; Line 2171
	inc	BYTE PTR _Strobe$[ebp]
	add	DWORD PTR tv3395[ebp], 8
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL281@VocTrainin
; Line 2195
	mov	edi, DWORD PTR tv2713[ebp]
	push	9
	pop	ecx
	mov	edx, DWORD PTR tv2718[ebp]
	push	112					; 00000070H
	pop	eax
	movzx	ebx, ax
	mov	eax, ebx
	shl	ebx, 16					; 00000010H
	or	eax, ebx
	rep stosd
	mov	edi, DWORD PTR tv2715[ebp]
	xor	eax, eax
	movzx	ebx, ax
	push	9
	mov	eax, ebx
	pop	ecx
	shl	ebx, 16					; 00000010H
	or	eax, ebx
	push	18					; 00000012H
	rep stosd
	pop	eax
$LL45@VocTrainin:
	xor	ecx, ecx
	mov	WORD PTR [edx-2], cx
	push	113					; 00000071H
	pop	ecx
	mov	WORD PTR [edx], cx
	add	edx, 4
	dec	eax
	jne	SHORT $LL45@VocTrainin
; Line 2211
	push	27					; 0000001bH
	push	3
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	mov	BYTE PTR [esi+71012], al
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _VrefValueToSwitchVOC
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	1
	xor	edi, edi
	push	edi
	push	edi
	push	1
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	57349					; 0000e005H
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_Create1DSweep
	add	esp, 72					; 00000048H
; Line 2216
	mov	BYTE PTR _Strobe$[ebp], 0
$LL42@VocTrainin:
; Line 2217
	push	edi
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR tv3988[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL42@VocTrainin
; Line 2233
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 17966				; 0000462eH
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN146@VocTrainin:
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL147@VocTrainin
$LN145@VocTrainin:
; Line 2235
	mov	al, BYTE PTR _FirstAvailableChannel$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	SHORT $LN29@VocTrainin
	movzx	eax, al
	lea	ebx, DWORD PTR _FirstAvailableRank$[ebp+eax]
	lea	edi, DWORD PTR [eax+esi+28608]
$LL31@VocTrainin:
; Line 2236
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN30@VocTrainin
	cmp	BYTE PTR [ebx], 255			; 000000ffH
	je	SHORT $LN30@VocTrainin
; Line 2239
	push	DWORD PTR _Channel$[ebp]
	push	17988					; 00004644H
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	17988					; 00004644H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN30@VocTrainin:
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	inc	ebx
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL31@VocTrainin
$LN29@VocTrainin:
; Line 2241
	cmp	BYTE PTR _FirstAvailableChannel$[ebp], 1
	jne	SHORT $LN26@VocTrainin
; Line 2242
	mov	BYTE PTR [esi+55509], 1
$LN26@VocTrainin:
; Line 2244
	push	0
	mov	edi, 18003				; 00004653H
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 2245
	cmp	BYTE PTR _FirstAvailableChannel$[ebp], 1
	jne	$LN21@VocTrainin
; Line 2246
	mov	al, BYTE PTR _BackupEnable$[ebp]
	mov	BYTE PTR [esi+55509], al
; Line 2248
	jmp	$LN21@VocTrainin
$LN162@VocTrainin:
; Line 2249
	cmp	al, 2
	jae	$LN21@VocTrainin
	movzx	eax, al
	lea	ecx, DWORD PTR _FirstAvailableRank$[ebp+eax]
	mov	DWORD PTR tv3677[ebp], ecx
	mov	ecx, eax
	shl	ecx, 2
	lea	eax, DWORD PTR [eax+esi+55511]
	mov	DWORD PTR tv3745[ebp], ecx
	mov	DWORD PTR tv3781[ebp], eax
$LL267@VocTrainin:
; Line 2252
	mov	eax, DWORD PTR tv3781[ebp]
	mov	BYTE PTR [esi+55511], 0
	mov	BYTE PTR [esi+55512], 0
	cmp	BYTE PTR [eax-26903], 0
	je	$LN22@VocTrainin
	mov	eax, DWORD PTR tv3677[ebp]
	cmp	BYTE PTR [eax], 255			; 000000ffH
	je	$LN22@VocTrainin
; Line 2255
	mov	eax, DWORD PTR tv3781[ebp]
	mov	BYTE PTR [eax], 1
; Line 2260
	mov	BYTE PTR _Strobe$[ebp], 0
$LL18@VocTrainin:
; Line 2265
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	mov	eax, DWORD PTR tv3677[ebp]
	movzx	eax, BYTE PTR [eax]
	push	24					; 00000018H
	push	20499					; 00005013H
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _TempValue$[ebp], 1
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL18@VocTrainin
; Line 2269
	mov	BYTE PTR _Strobe$[ebp], 0
$LL15@VocTrainin:
; Line 2270
	mov	eax, DWORD PTR tv3677[ebp]
	movzx	eax, BYTE PTR [eax]
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN14@VocTrainin
; Line 2274
	mov	eax, DWORD PTR tv3677[ebp]
	movzx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR tv3745[ebp]
	xor	bl, bl
	cmp	BYTE PTR [eax+esi+55462], bl
	jbe	SHORT $LN14@VocTrainin
	mov	eax, DWORD PTR tv3677[ebp]
	movzx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR tv3745[ebp]
	lea	eax, DWORD PTR [eax+esi+55462]
	mov	DWORD PTR tv4262[ebp], eax
$LL11@VocTrainin:
; Line 2275
	movzx	di, bl
	mov	eax, 20501				; 00005015H
	add	di, ax
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	mov	eax, DWORD PTR tv3677[ebp]
	movzx	eax, BYTE PTR [eax]
	push	2
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 2276
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	mov	eax, DWORD PTR tv3677[ebp]
	movzx	eax, BYTE PTR [eax]
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	mov	eax, DWORD PTR tv4262[ebp]
	add	esp, 56					; 00000038H
	inc	bl
	cmp	bl, BYTE PTR [eax]
	jb	SHORT $LL11@VocTrainin
$LN14@VocTrainin:
; Line 2269
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL15@VocTrainin
$LN22@VocTrainin:
; Line 2249
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv3745[ebp], 4
	inc	DWORD PTR tv3781[ebp]
	inc	DWORD PTR tv3677[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL267@VocTrainin
$LN21@VocTrainin:
; Line 2287
	push	2
	xor	eax, eax
	pop	edi
$LL4@VocTrainin:
; Line 2288
	mov	cl, BYTE PTR _FirstAvailableRank$[ebp+eax]
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN3@VocTrainin
; Line 2291
	mov	dl, BYTE PTR _MaxDqCache$[ebp+eax]
	movzx	ecx, cl
	add	ecx, esi
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [ecx+55454], dl
; Line 2292
	mov	dl, BYTE PTR _MaxBitCache$[ebp+eax]
	mov	BYTE PTR [ecx+55462], dl
$LN3@VocTrainin:
	inc	eax
	dec	edi
	jne	SHORT $LL4@VocTrainin
; Line 2294
	mov	al, BYTE PTR _DebugLevel$[ebp]
	mov	BYTE PTR [esi+55506], al
; Line 2295
	mov	al, BYTE PTR _MaxThresholdBackup$[ebp]
	mov	BYTE PTR [esi+71458], al
$LN283@VocTrainin:
	pop	ebx
$LN286@VocTrainin:
	pop	edi
; Line 2297
	xor	eax, eax
	pop	esi
; Line 2298
	add	ebp, 104				; 00000068H
	leave
	ret	0
_VocTraining ENDP
_TEXT	ENDS
PUBLIC	_SampleDqs
; Function compile flags: /Ogspy
;	COMDAT _SampleDqs
_TEXT	SEGMENT
_Results$ = -76						; size = 36
_FinishBL$ = -40					; size = 8
tv554 = -32						; size = 4
_TotalFinishStrobes$ = -28				; size = 4
_TempValue$ = -24					; size = 4
tv463 = -20						; size = 4
tv466 = -16						; size = 4
_ChannelBackup$ = -9					; size = 1
_Strobe$ = -5						; size = 1
_SampleIndex$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_NumberElements$ = 20					; size = 4
_NumberKnobs$ = 24					; size = 1
_PassFail$ = 28						; size = 4
_SampleDqs PROC						; COMDAT
; Line 2649
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
; Line 2661
	mov	al, BYTE PTR _Channel$[ebp]
; Line 2665
	movzx	ecx, BYTE PTR _Rank$[ebp]
	add	ecx, DWORD PTR _MrcData$[ebp]
; Line 2666
	and	DWORD PTR _TempValue$[ebp], 0
	push	ebx
	push	esi
	mov	BYTE PTR _ChannelBackup$[ebp], al
	movzx	eax, al
	mov	cl, BYTE PTR [ecx+eax*4+55454]
	push	edi
	xor	esi, esi
	mov	DWORD PTR tv554[ebp], eax
	inc	esi
	shl	esi, cl
; Line 2667
	xor	eax, eax
	lea	edi, DWORD PTR _FinishBL$[ebp]
	stosd
	stosd
	dec	esi
; Line 2671
	push	9
	pop	ecx
	xor	eax, eax
	lea	edi, DWORD PTR _Results$[ebp]
	rep stosd
	mov	DWORD PTR _TotalFinishStrobes$[ebp], esi
; Line 2679
	mov	BYTE PTR _SampleIndex$[ebp], 8
	mov	edi, 65535				; 0000ffffH
$LL24@SampleDqs:
; Line 2693
	push	DWORD PTR _ChannelBackup$[ebp]
	dec	BYTE PTR _SampleIndex$[ebp]
	push	edi
	push	13608					; 00003528H
	push	DWORD PTR _MrcData$[ebp]
	call	_MmrcExecuteTask
; Line 2694
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	push	13625					; 00003539H
	push	DWORD PTR _MrcData$[ebp]
	call	_MmrcExecuteTask
; Line 2695
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	push	13638					; 00003546H
	push	DWORD PTR _MrcData$[ebp]
	call	_MmrcExecuteTask
; Line 2697
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 48					; 00000030H
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN55@SampleDqs
$LL57@SampleDqs:
; Line 2698
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN21@SampleDqs
; Line 2704
	and	DWORD PTR tv463[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
$LL54@SampleDqs:
; Line 2705
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN17@SampleDqs
; Line 2711
	movzx	esi, BYTE PTR _Channel$[ebp]
	mov	ecx, DWORD PTR tv463[ebp]
	lea	ebx, DWORD PTR _FinishBL$[ebp+esi*4]
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR tv466[ebp], 1
	shl	DWORD PTR tv466[ebp], cl
	test	DWORD PTR tv466[ebp], eax
	jne	SHORT $LN52@SampleDqs
; Line 2717
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	mov	eax, DWORD PTR _MrcData$[ebp]
	movzx	ecx, WORD PTR [eax+65548]
	push	3
	push	ecx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	eax
	call	_GetSetDdrioGroup2
; Line 2722
	imul	esi, 18					; 00000012H
	add	esi, DWORD PTR tv463[ebp]
	mov	cl, BYTE PTR _TempValue$[ebp]
	add	cl, cl
	add	esp, 28					; 0000001cH
	lea	eax, DWORD PTR _Results$[ebp+esi]
	dec	cl
	add	BYTE PTR [eax], cl
; Line 2726
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 4
	jge	SHORT $LN12@SampleDqs
	cmp	eax, -4					; fffffffcH
	jg	SHORT $LN52@SampleDqs
$LN12@SampleDqs:
; Line 2727
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR tv466[ebp]
	or	eax, ecx
	mov	DWORD PTR [ebx], eax
$LN52@SampleDqs:
	mov	esi, DWORD PTR _TotalFinishStrobes$[ebp]
$LN17@SampleDqs:
; Line 2704
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv463[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL54@SampleDqs
; Line 2733
	movzx	eax, BYTE PTR _Channel$[ebp]
	cmp	DWORD PTR _FinishBL$[ebp+eax*4], esi
	je	SHORT $LN55@SampleDqs
$LN21@SampleDqs:
; Line 2697
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL57@SampleDqs
$LN55@SampleDqs:
; Line 2685
	cmp	BYTE PTR _SampleIndex$[ebp], 0
	jne	$LL24@SampleDqs
; Line 2739
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	SHORT $LN8@SampleDqs
	mov	edi, DWORD PTR tv554[ebp]
	mov	ebx, DWORD PTR _PassFail$[ebp]
	imul	edi, 18					; 00000012H
$LL10@SampleDqs:
; Line 2740
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN9@SampleDqs
; Line 2746
	mov	BYTE PTR _Strobe$[ebp], 0
	xor	esi, esi
$LL53@SampleDqs:
; Line 2747
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN5@SampleDqs
; Line 2750
	lea	eax, DWORD PTR [edi+esi]
	cmp	BYTE PTR _Results$[ebp+eax], 0
	jl	SHORT $LN2@SampleDqs
; Line 2751
	imul	eax, 24					; 00000018H
	mov	BYTE PTR [eax+ebx], 0
; Line 2752
	jmp	SHORT $LN5@SampleDqs
$LN2@SampleDqs:
; Line 2753
	imul	eax, 24					; 00000018H
	mov	BYTE PTR [eax+ebx], 1
$LN5@SampleDqs:
	inc	BYTE PTR _Strobe$[ebp]
	inc	esi
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL53@SampleDqs
$LN9@SampleDqs:
; Line 2739
	inc	BYTE PTR _Channel$[ebp]
	add	edi, 18					; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL10@SampleDqs
$LN8@SampleDqs:
	pop	edi
	pop	esi
; Line 2758
	xor	eax, eax
	pop	ebx
; Line 2760
	leave
	ret	0
_SampleDqs ENDP
_TEXT	ENDS
PUBLIC	??_C@_03PJMGGCMA@VRF?$AA@			; `string'
PUBLIC	??_C@_03DDIOFFCB@?5PI?$AA@			; `string'
PUBLIC	_CpgcExecuteRmtTest
;	COMDAT ??_C@_03PJMGGCMA@VRF?$AA@
CONST	SEGMENT
??_C@_03PJMGGCMA@VRF?$AA@ DB 'VRF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIOFFCB@?5PI?$AA@
CONST	SEGMENT
??_C@_03DDIOFFCB@?5PI?$AA@ DB ' PI', 00H		; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _CpgcExecuteRmtTest
_TEXT	SEGMENT
tv1215 = -48						; size = 4
tv1287 = -44						; size = 4
tv1228 = -40						; size = 4
tv1178 = -36						; size = 4
tv1325 = -32						; size = 4
tv749 = -28						; size = 4
tv706 = -24						; size = 4
_Strobe$ = -20						; size = 1
tv1037 = -16						; size = 4
_GroupOffset$ = -16					; size = 2
_DynamicMask$ = -16					; size = 4
_SignalsToRestore$ = -10				; size = 1
_DevWidthIndex$ = -6					; size = 1
_BreakStrobeLoop$ = -5					; size = 1
_ConsoleElements$ = -4					; size = 1
_IndBit$ = -3						; size = 1
_DynamicShift$ = -3					; size = 1
_IndStrobeTarget$ = -2					; size = 1
_BreakBitLoop$ = -2					; size = 1
_Knob$ = -1						; size = 1
_ChannelBackup$ = 8					; size = 1
_MrcData$ = 8						; size = 4
_MaxBits$ = 11						; size = 1
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_NumberElements$ = 20					; size = 4
_NumberKnobs$ = 24					; size = 1
_PassFail$ = 28						; size = 4
_CpgcExecuteRmtTest PROC				; COMDAT
; Line 5599
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 5632
	movzx	eax, BYTE PTR _Rank$[ebp]
	push	ebx
	mov	bl, BYTE PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	movzx	ecx, bl
	mov	DWORD PTR tv706[ebp], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	movzx	eax, BYTE PTR [eax+esi+55454]
	push	edi
	push	18					; 00000012H
	cdq
	pop	edi
	idiv	edi
; Line 5633
	mov	BYTE PTR _ChannelBackup$[ebp], bl
	mov	BYTE PTR _DevWidthIndex$[ebp], al
; Line 5636
	cmp	bl, 2
	jae	SHORT $LN69@CpgcExecut@3
; Line 5632
	lea	edi, DWORD PTR [ecx+esi+28608]
$LL71@CpgcExecut@3:
; Line 5637
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN70@CpgcExecut@3
; Line 5640
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN70@CpgcExecut@3:
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL71@CpgcExecut@3
$LN69@CpgcExecut@3:
; Line 5643
	mov	BYTE PTR _Channel$[ebp], bl
	cmp	bl, 2
	jae	SHORT $LN65@CpgcExecut@3
$LL67@CpgcExecut@3:
; Line 5644
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN66@CpgcExecut@3
; Line 5650
	test	BYTE PTR [esi+65586], 1
	je	SHORT $LN63@CpgcExecut@3
; Line 5651
	push	esi
	call	_ReInitializeDramsAcrossChannels
	pop	ecx
$LN63@CpgcExecut@3:
; Line 5656
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN66@CpgcExecut@3:
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL67@CpgcExecut@3
$LN65@CpgcExecut@3:
; Line 5665
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_CpgcExecuteParallel
	add	esp, 12					; 0000000cH
; Line 5667
	mov	BYTE PTR _Channel$[ebp], bl
	cmp	bl, 2
	jae	$LN60@CpgcExecut@3
	movzx	ebx, bl
	mov	eax, ebx
	imul	eax, 542				; 0000021eH
	mov	edi, ebx
	imul	edi, 432				; 000001b0H
	add	edi, DWORD PTR _PassFail$[ebp]
	mov	DWORD PTR tv1228[ebp], eax
	mov	eax, DWORD PTR tv706[ebp]
	mov	ecx, ebx
	shl	ecx, 2
	add	eax, ecx
	lea	eax, DWORD PTR [eax+esi+55454]
	mov	DWORD PTR tv1178[ebp], ebx
	mov	DWORD PTR tv1215[ebp], ecx
	mov	DWORD PTR tv1287[ebp], edi
	mov	DWORD PTR tv1325[ebp], eax
$LL62@CpgcExecut@3:
; Line 5668
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN61@CpgcExecut@3
; Line 5681
	test	BYTE PTR [esi+65586], 64		; 00000040H
	mov	eax, DWORD PTR _NumberElements$[ebp]
	mov	al, BYTE PTR [ebx+eax]
	mov	BYTE PTR _ConsoleElements$[ebp], al
	je	SHORT $LN58@CpgcExecut@3
; Line 5685
	mov	eax, DWORD PTR tv1325[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR _ConsoleElements$[ebp], al
$LN58@CpgcExecut@3:
; Line 5687
	cmp	BYTE PTR _NumberKnobs$[ebp], 0
	mov	BYTE PTR _Knob$[ebp], 0
	jbe	$LN55@CpgcExecut@3
$LL57@CpgcExecut@3:
; Line 5691
	cmp	BYTE PTR _NumberKnobs$[ebp], 1
	jbe	SHORT $LN52@CpgcExecut@3
	cmp	BYTE PTR _Knob$[ebp], 0
	jne	SHORT $LN54@CpgcExecut@3
; Line 5692
	mov	BYTE PTR [esi+65584], 0
	jmp	SHORT $LN51@CpgcExecut@3
$LN54@CpgcExecut@3:
; Line 5693
	cmp	BYTE PTR _Knob$[ebp], 1
	jne	SHORT $LN52@CpgcExecut@3
; Line 5694
	mov	BYTE PTR [esi+65584], 1
; Line 5695
	jmp	SHORT $LN51@CpgcExecut@3
$LN52@CpgcExecut@3:
; Line 5696
	mov	BYTE PTR [esi+65584], 255		; 000000ffH
$LN51@CpgcExecut@3:
; Line 5699
	cmp	BYTE PTR _ConsoleElements$[ebp], 0
	mov	BYTE PTR _BreakStrobeLoop$[ebp], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	$LN56@CpgcExecut@3
$LL50@CpgcExecut@3:
; Line 5700
	lea	eax, DWORD PTR _MaxBits$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN49@CpgcExecut@3
; Line 5703
	cmp	BYTE PTR _MaxBits$[ebp], 8
	je	SHORT $LN45@CpgcExecut@3
	cmp	BYTE PTR _MaxBits$[ebp], 4
	je	SHORT $LN45@CpgcExecut@3
	cmp	BYTE PTR _MaxBits$[ebp], 1
	je	SHORT $LN45@CpgcExecut@3
; Line 5708
	mov	DWORD PTR [esi+65333], 41		; 00000029H
; Line 5709
	call	_MrcDeadLoop
$LN45@CpgcExecut@3:
; Line 5711
	movzx	eax, BYTE PTR _DevWidthIndex$[ebp]
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	imul	eax, 7
	mov	DWORD PTR tv749[ebp], ecx
	movzx	cx, BYTE PTR _Knob$[ebp]
	add	cx, cx
	add	cx, WORD PTR _StrobeToErrorMask[eax]
	movzx	edi, cx
; Line 5712
	mov	ecx, DWORD PTR _StrobeToErrorMask[eax+2]
; Line 5713
	mov	al, BYTE PTR _StrobeToErrorMask[eax+6]
	mov	BYTE PTR _DynamicShift$[ebp], al
; Line 5715
	mov	eax, 542				; 0000021eH
	mov	DWORD PTR _DynamicMask$[ebp], ecx
	cmp	di, ax
	jae	SHORT $LN42@CpgcExecut@3
	mov	eax, 65535				; 0000ffffH
	cmp	di, ax
	jne	SHORT $LN74@CpgcExecut@3
$LN42@CpgcExecut@3:
; Line 5716
	mov	DWORD PTR [esi+65333], 40		; 00000028H
	call	_MrcDeadLoop
$LN74@CpgcExecut@3:
; Line 5723
	mov	cl, BYTE PTR _DynamicShift$[ebp]
	movzx	eax, di
	add	eax, DWORD PTR tv1228[ebp]
; Line 5725
	mov	BYTE PTR _BreakBitLoop$[ebp], 0
	mov	edi, DWORD PTR [esi+eax*8+55526]
	and	edi, DWORD PTR _DynamicMask$[ebp]
; Line 5726
	mov	BYTE PTR _IndBit$[ebp], 0
	shr	edi, cl
	cmp	BYTE PTR _MaxBits$[ebp], 0
	jbe	$LN89@CpgcExecut@3
$LL41@CpgcExecut@3:
; Line 5728
	movzx	ecx, BYTE PTR _IndBit$[ebp]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	test	eax, edi
	je	SHORT $LN111@CpgcExecut@3
	cmp	BYTE PTR _MaxBits$[ebp], 1
	ja	SHORT $LN37@CpgcExecut@3
$LN111@CpgcExecut@3:
	test	edi, edi
	je	$LN38@CpgcExecut@3
	cmp	BYTE PTR _MaxBits$[ebp], 1
	jne	$LN38@CpgcExecut@3
$LN37@CpgcExecut@3:
; Line 5729
	movzx	eax, BYTE PTR _Knob$[ebp]
	mov	edx, DWORD PTR tv749[ebp]
	add	eax, ebx
	mov	ebx, DWORD PTR _PassFail$[ebp]
	imul	eax, 18					; 00000012H
	add	edx, eax
	lea	ecx, DWORD PTR [ecx+edx*8]
	imul	ecx, 3
	mov	BYTE PTR [ecx+ebx], 1
; Line 5731
	test	BYTE PTR [esi+65586], 128		; 00000080H
	je	SHORT $LN108@CpgcExecut@3
; Line 5736
	mov	ecx, edx
	imul	ecx, 24					; 00000018H
	mov	BYTE PTR [ecx+ebx], 1
; Line 5737
	mov	BYTE PTR _BreakBitLoop$[ebp], 1
$LN108@CpgcExecut@3:
; Line 5739
	mov	ecx, 256				; 00000100H
	test	WORD PTR [esi+65586], cx
	je	SHORT $LN109@CpgcExecut@3
; Line 5740
	movzx	ecx, BYTE PTR _MaxBits$[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR _PassFail$[ebp]
$LL33@CpgcExecut@3:
; Line 5745
	mov	BYTE PTR [edx], 1
	add	edx, 3
	dec	ecx
	jne	SHORT $LL33@CpgcExecut@3
; Line 5747
	mov	BYTE PTR _BreakBitLoop$[ebp], 1
$LN109@CpgcExecut@3:
; Line 5749
	test	BYTE PTR [esi+65586], 64		; 00000040H
	je	SHORT $LN110@CpgcExecut@3
; Line 5750
	mov	edx, DWORD PTR tv1215[ebp]
	mov	ecx, DWORD PTR tv706[ebp]
	add	ecx, edx
	lea	edx, DWORD PTR [ecx+esi+55454]
	cmp	BYTE PTR [edx], 0
	mov	BYTE PTR _IndStrobeTarget$[ebp], 0
	jbe	SHORT $LN27@CpgcExecut@3
	movzx	ecx, BYTE PTR _MaxBits$[ebp]
	mov	DWORD PTR tv1037[ebp], ecx
$LL112@CpgcExecut@3:
; Line 5751
	movzx	ecx, BYTE PTR _IndStrobeTarget$[ebp]
	mov	ebx, DWORD PTR tv1037[ebp]
	add	ecx, eax
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR _PassFail$[ebp]
$LL26@CpgcExecut@3:
; Line 5756
	mov	BYTE PTR [ecx], 1
	add	ecx, 3
	dec	ebx
	jne	SHORT $LL26@CpgcExecut@3
	inc	BYTE PTR _IndStrobeTarget$[ebp]
	mov	cl, BYTE PTR _IndStrobeTarget$[ebp]
	cmp	cl, BYTE PTR [edx]
	jb	SHORT $LL112@CpgcExecut@3
$LN27@CpgcExecut@3:
; Line 5759
	mov	BYTE PTR _BreakStrobeLoop$[ebp], 1
; Line 5760
	mov	BYTE PTR _BreakBitLoop$[ebp], 1
$LN110@CpgcExecut@3:
; Line 5762
	mov	ebx, DWORD PTR tv1178[ebp]
$LN23@CpgcExecut@3:
; Line 5765
	cmp	BYTE PTR _BreakBitLoop$[ebp], 0
	jne	SHORT $LN89@CpgcExecut@3
	inc	BYTE PTR _IndBit$[ebp]
	mov	al, BYTE PTR _IndBit$[ebp]
	cmp	al, BYTE PTR _MaxBits$[ebp]
	jb	$LL41@CpgcExecut@3
$LN89@CpgcExecut@3:
; Line 5770
	mov	eax, 1024				; 00000400H
	test	WORD PTR [esi+65586], ax
	je	$LN13@CpgcExecut@3
; Line 5771
	and	DWORD PTR [esi+70799], 0
; Line 5773
	and	DWORD PTR _GroupOffset$[ebp], 0
	xor	cl, cl
; Line 5774
	cmp	BYTE PTR _MaxBits$[ebp], cl
	jbe	SHORT $LN104@CpgcExecut@3
	movzx	eax, BYTE PTR _Knob$[ebp]
	movzx	edi, BYTE PTR _MaxBits$[ebp]
	add	eax, ebx
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv749[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR _PassFail$[ebp]
$LL20@CpgcExecut@3:
; Line 5775
	cmp	BYTE PTR [eax], 1
	je	SHORT $LN19@CpgcExecut@3
; Line 5776
	mov	cl, 1
$LN19@CpgcExecut@3:
; Line 5774
	add	eax, 3
	dec	edi
	jne	SHORT $LL20@CpgcExecut@3
; Line 5780
	test	cl, cl
	jne	$LN13@CpgcExecut@3
$LN104@CpgcExecut@3:
; Line 5787
	mov	ecx, DWORD PTR tv749[ebp]
	xor	eax, eax
	inc	eax
	shl	eax, cl
; Line 5788
	cmp	BYTE PTR [esi+65590], 0
	mov	BYTE PTR _SignalsToRestore$[ebp], 0
	mov	DWORD PTR [esi+70799], eax
	jbe	SHORT $LN13@CpgcExecut@3
$LL105@CpgcExecut@3:
; Line 5789
	movzx	eax, WORD PTR [esi+65588]
	push	eax
	push	esi
	call	_GetOffsetIndex
; Line 5800
	mov	ecx, DWORD PTR tv706[ebp]
	movzx	edi, ax
	movzx	eax, BYTE PTR _SignalsToRestore$[ebp]
	lea	eax, DWORD PTR [ebx+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]
	imul	eax, 72					; 00000048H
	push	OFFSET ??_C@_03DDIOFFCB@?5PI?$AA@
	lea	eax, DWORD PTR [eax+esi+65591]
	push	eax
	push	DWORD PTR _GroupOffset$[ebp]
	push	edi
	push	DWORD PTR _SignalsToRestore$[ebp]
	push	DWORD PTR _NumberElements$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_PrintAndRestoreAfterFailureValues
; Line 5801
	mov	eax, DWORD PTR _GroupOffset$[ebp]
	add	edi, eax
	push	edi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _GroupOffset$[ebp], ax
	add	esp, 48					; 00000030H
	inc	BYTE PTR _SignalsToRestore$[ebp]
	mov	al, BYTE PTR _SignalsToRestore$[ebp]
	cmp	al, BYTE PTR [esi+65590]
	jb	SHORT $LL105@CpgcExecut@3
$LN13@CpgcExecut@3:
; Line 5806
	cmp	BYTE PTR _BreakStrobeLoop$[ebp], 0
	jne	SHORT $LN56@CpgcExecut@3
$LN49@CpgcExecut@3:
; Line 5699
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR _ConsoleElements$[ebp]
	jb	$LL50@CpgcExecut@3
$LN56@CpgcExecut@3:
; Line 5687
	inc	BYTE PTR _Knob$[ebp]
	mov	al, BYTE PTR _Knob$[ebp]
	cmp	al, BYTE PTR _NumberKnobs$[ebp]
	jb	$LL57@CpgcExecut@3
$LN55@CpgcExecut@3:
; Line 5812
	mov	eax, DWORD PTR tv1287[ebp]
	cmp	BYTE PTR [eax], 1
	jne	$LN1@CpgcExecut@3
; Line 5813
	test	BYTE PTR [esi+65586], 32		; 00000020H
	je	$LN4@CpgcExecut@3
; Line 5820
	mov	ecx, DWORD PTR tv1325[ebp]
; Line 5821
	and	DWORD PTR _GroupOffset$[ebp], 0
	xor	edx, edx
	lea	eax, DWORD PTR [esi+70799]
	and	DWORD PTR [eax], 0
	mov	cl, BYTE PTR [ecx]
	inc	edx
	shl	edx, cl
; Line 5822
	mov	BYTE PTR _SignalsToRestore$[ebp], 0
	dec	edx
	cmp	BYTE PTR [esi+65590], 0
	mov	DWORD PTR [eax], edx
	jbe	SHORT $LN7@CpgcExecut@3
$LL106@CpgcExecut@3:
; Line 5823
	movzx	eax, WORD PTR [esi+65588]
	push	eax
	push	esi
	call	_GetOffsetIndex
; Line 5834
	mov	ecx, DWORD PTR tv706[ebp]
	movzx	edi, ax
	movzx	eax, BYTE PTR _SignalsToRestore$[ebp]
	lea	eax, DWORD PTR [ebx+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]
	imul	eax, 72					; 00000048H
	push	OFFSET ??_C@_03DDIOFFCB@?5PI?$AA@
	lea	eax, DWORD PTR [eax+esi+65591]
	push	eax
	push	DWORD PTR _GroupOffset$[ebp]
	push	edi
	push	DWORD PTR _SignalsToRestore$[ebp]
	push	DWORD PTR _NumberElements$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_PrintAndRestoreAfterFailureValues
; Line 5835
	mov	eax, DWORD PTR _GroupOffset$[ebp]
	add	edi, eax
	push	edi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _GroupOffset$[ebp], ax
	add	esp, 48					; 00000030H
	inc	BYTE PTR _SignalsToRestore$[ebp]
	mov	al, BYTE PTR _SignalsToRestore$[ebp]
	cmp	al, BYTE PTR [esi+65590]
	jb	SHORT $LL106@CpgcExecut@3
$LN7@CpgcExecut@3:
; Line 5838
	and	DWORD PTR _GroupOffset$[ebp], 0
; Line 5839
	cmp	BYTE PTR [esi+70203], 0
	mov	BYTE PTR _SignalsToRestore$[ebp], 0
	jbe	SHORT $LN4@CpgcExecut@3
$LL107@CpgcExecut@3:
; Line 5840
	movzx	eax, WORD PTR [esi+70201]
	push	eax
	push	esi
	call	_GetOffsetIndex
; Line 5851
	mov	ecx, DWORD PTR tv706[ebp]
	movzx	edi, ax
	movzx	eax, BYTE PTR _SignalsToRestore$[ebp]
	lea	eax, DWORD PTR [ebx+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]
	imul	eax, 72					; 00000048H
	push	OFFSET ??_C@_03PJMGGCMA@VRF?$AA@
	lea	eax, DWORD PTR [eax+esi+70204]
	push	eax
	push	DWORD PTR _GroupOffset$[ebp]
	lea	eax, DWORD PTR [esi+70199]
	push	edi
	push	DWORD PTR _SignalsToRestore$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_PrintAndRestoreAfterFailureValues
; Line 5852
	mov	eax, DWORD PTR _GroupOffset$[ebp]
	add	edi, eax
	push	edi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _GroupOffset$[ebp], ax
	add	esp, 48					; 00000030H
	inc	BYTE PTR _SignalsToRestore$[ebp]
	mov	al, BYTE PTR _SignalsToRestore$[ebp]
	cmp	al, BYTE PTR [esi+70203]
	jb	SHORT $LL107@CpgcExecut@3
$LN4@CpgcExecut@3:
; Line 5855
	movzx	eax, WORD PTR [esi+65586]
	test	al, 4
	je	SHORT $LN1@CpgcExecut@3
; Line 5857
	push	esi
; Line 5859
	call	_ReInitializeDramsAcrossChannels
	pop	ecx
$LN1@CpgcExecut@3:
; Line 5863
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
	mov	edi, DWORD PTR tv1287[ebp]
	add	esp, 16					; 00000010H
$LN61@CpgcExecut@3:
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1228[ebp], 542		; 0000021eH
	add	DWORD PTR tv1215[ebp], 4
	add	DWORD PTR tv1325[ebp], 4
	inc	ebx
	add	edi, 432				; 000001b0H
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv1178[ebp], ebx
	mov	DWORD PTR tv1287[ebp], edi
	jb	$LL62@CpgcExecut@3
$LN60@CpgcExecut@3:
	pop	edi
	pop	esi
; Line 5866
	xor	eax, eax
	pop	ebx
; Line 5867
	leave
	ret	0
$LN38@CpgcExecut@3:
; Line 5763
	movzx	eax, BYTE PTR _Knob$[ebp]
	add	eax, ebx
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv749[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _PassFail$[ebp]
	imul	eax, 3
	mov	BYTE PTR [eax+ecx], 0
	jmp	$LN23@CpgcExecut@3
_CpgcExecuteRmtTest ENDP
_TEXT	ENDS
PUBLIC	??_C@_03CMNHHLCM@TxV?$AA@			; `string'
PUBLIC	??_C@_03FFLCKFFM@Tx?5?$AA@			; `string'
PUBLIC	??_C@_03JLMCEPA@RxV?$AA@			; `string'
PUBLIC	??_C@_03HANJPKIA@Rx?5?$AA@			; `string'
PUBLIC	_FastBootChecker
EXTRN	_SignalUpperBound:PROC
;	COMDAT ??_C@_03CMNHHLCM@TxV?$AA@
CONST	SEGMENT
??_C@_03CMNHHLCM@TxV?$AA@ DB 'TxV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFLCKFFM@Tx?5?$AA@
CONST	SEGMENT
??_C@_03FFLCKFFM@Tx?5?$AA@ DB 'Tx ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JLMCEPA@RxV?$AA@
CONST	SEGMENT
??_C@_03JLMCEPA@RxV?$AA@ DB 'RxV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HANJPKIA@Rx?5?$AA@
CONST	SEGMENT
??_C@_03HANJPKIA@Rx?5?$AA@ DB 'Rx ', 00H		; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _FastBootChecker
_TEXT	SEGMENT
_Results$ = -7304					; size = 5760
_Dim1StartPoint$ = -1544				; size = 720
_Low$ = -824						; size = 360
_High$ = -464						; size = 360
_lowOffset$ = -104					; size = 2
tv2559 = -100						; size = 4
tv2487 = -100						; size = 4
_highOffset$ = -96					; size = 2
_dim1Index$ = -92					; size = 2
tv2645 = -88						; size = 4
_marginHigh$ = -84					; size = 5
_marginLow$ = -76					; size = 5
tv1795 = -68						; size = 4
tv1039 = -68						; size = 4
tv2495 = -64						; size = 4
tv961 = -64						; size = 4
tv2415 = -60						; size = 4
tv2792 = -53						; size = 1
_avgTxVref$ = -52					; size = 4
_msgBackup$ = -45					; size = 1
tv2373 = -44						; size = 4
tv2240 = -44						; size = 4
tv1703 = -40						; size = 4
tv2161 = -36						; size = 4
tv2094 = -36						; size = 4
tv2418 = -32						; size = 4
tv2145 = -32						; size = 4
tv2785 = -28						; size = 4
_centerPoint$ = -28					; size = 4
tv2388 = -24						; size = 4
tv2256 = -24						; size = 4
_maxHighTxVref$ = -17					; size = 1
_fastBootParameter$ = -16				; size = 1
_ElementsGenerated$ = -12				; size = 2
_Rank$ = -8						; size = 1
_Strobe$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_minLowTxVref$ = 11					; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_FastBootChecker PROC					; COMDAT
; Line 7260
	push	ebp
	mov	ebp, esp
	sub	esp, 7304				; 00001c88H
	push	ebx
	push	esi
; Line 7282
	mov	esi, DWORD PTR _MrcData$[ebp]
	xor	ebx, ebx
	mov	BYTE PTR _marginLow$[ebp], -128		; ffffff80H
	mov	BYTE PTR _marginLow$[ebp+1], -128	; ffffff80H
	mov	BYTE PTR _marginLow$[ebp+2], -128	; ffffff80H
	mov	BYTE PTR _marginLow$[ebp+3], -128	; ffffff80H
	mov	BYTE PTR _marginLow$[ebp+4], -128	; ffffff80H
	mov	BYTE PTR _marginHigh$[ebp], 127		; 0000007fH
	mov	BYTE PTR _marginHigh$[ebp+1], 127	; 0000007fH
	mov	BYTE PTR _marginHigh$[ebp+2], 127	; 0000007fH
	mov	BYTE PTR _marginHigh$[ebp+3], 127	; 0000007fH
	mov	BYTE PTR _marginHigh$[ebp+4], 127	; 0000007fH
	cmp	BYTE PTR [esi+71463], bl
; Line 7283
	je	$LN123@FastBootCh
; Line 7286
	mov	al, BYTE PTR [esi+55506]
	mov	BYTE PTR _msgBackup$[ebp], al
; Line 7289
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	DWORD PTR tv1703[ebp], eax
	imul	eax, 4336				; 000010f0H
; Line 7291
	push	2
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR [esi+55506], bl
	push	esi
	mov	DWORD PTR [eax+esi+58134], 1
	mov	DWORD PTR [eax+esi+58138], ebx
	call	_CpgcSetup
; Line 7293
	mov	al, BYTE PTR [esi+65344]
	mov	BYTE PTR [esi+65583], al
; Line 7294
	mov	al, BYTE PTR [esi+65345]
	mov	BYTE PTR [esi+65582], al
; Line 7295
	mov	eax, 255				; 000000ffH
	mov	ecx, eax
	add	esp, 12					; 0000000cH
	mov	WORD PTR [esi+70201], cx
; Line 7297
	xor	ecx, ecx
; Line 7298
	mov	WORD PTR [esi+65588], ax
	lea	eax, DWORD PTR [esi+55458]
	mov	BYTE PTR [esi+65570], 2
	mov	BYTE PTR [esi+70203], bl
	mov	WORD PTR [esi+65586], cx
; Line 7299
	mov	BYTE PTR [esi+65590], cl
; Line 7301
	mov	BYTE PTR _Rank$[ebp], cl
	mov	DWORD PTR tv2415[ebp], ebx
	mov	DWORD PTR tv2645[ebp], eax
	push	edi
$LL71@FastBootCh:
; Line 7302
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN70@FastBootCh
; Line 7306
	push	5760					; 00001680H
	lea	eax, DWORD PTR _Results$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
; Line 7312
	push	DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR _Rank$[ebp]
	push	esi
	mov	DWORD PTR _avgTxVref$[ebp], ebx
	mov	BYTE PTR _minLowTxVref$[ebp], 0
	mov	BYTE PTR _maxHighTxVref$[ebp], 0
	mov	BYTE PTR [esi+65585], al
	call	_CpgcReconfig
; Line 7317
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_DnvNibbleTrainingExitHook
	lea	eax, DWORD PTR [esi+71475]
	add	esp, 36					; 00000024H
; Line 7319
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv2094[ebp], ebx
	mov	DWORD PTR tv2145[ebp], eax
$LL67@FastBootCh:
; Line 7320
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN66@FastBootCh
; Line 7332
	mov	eax, DWORD PTR tv2415[ebp]
	mov	ecx, DWORD PTR tv1703[ebp]
	lea	ebx, DWORD PTR [eax+ecx*4]
	mov	eax, ebx
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR tv2094[ebp]
	lea	edi, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR [edi+65591]
	push	eax
	push	3
	push	57348					; 0000e004H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7339
	lea	eax, DWORD PTR [edi+66167]
	push	eax
	push	3
	push	57347					; 0000e003H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7340
	mov	al, BYTE PTR [edi+65591]
	sub	al, BYTE PTR [edi+66167]
	mov	ecx, DWORD PTR tv2145[ebp]
	mov	BYTE PTR [ecx], al
; Line 7350
	lea	eax, DWORD PTR [edi+66743]
	push	eax
	push	3
	push	57349					; 0000e005H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
; Line 7360
	lea	eax, DWORD PTR [edi+67319]
	push	eax
	push	3
	push	12305					; 00003011H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 7361
	cmp	BYTE PTR [ebx+esi+55470], 9
	jne	SHORT $LN112@FastBootCh
	cmp	BYTE PTR _Strobe$[ebp], 9
	jae	SHORT $LN112@FastBootCh
; Line 7369
	lea	eax, DWORD PTR [edi+67355]
	push	eax
	mov	al, BYTE PTR _Strobe$[ebp]
	push	3
	add	al, 9
	push	12305					; 00003011H
	movzx	eax, al
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN112@FastBootCh:
; Line 7381
	add	edi, 67895				; 00010937H
	push	edi
	push	3
	push	57360					; 0000e010H
	push	DWORD PTR _Strobe$[ebp]
	mov	BYTE PTR [esi+71022], 1
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7385
	mov	eax, DWORD PTR [edi]
	add	DWORD PTR _avgTxVref$[ebp], eax
	add	esp, 28					; 0000001cH
	xor	ebx, ebx
$LN66@FastBootCh:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv2094[ebp]
	inc	DWORD PTR tv2145[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL67@FastBootCh
; Line 7411
	mov	ecx, DWORD PTR tv2415[ebp]
	mov	eax, DWORD PTR tv1703[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	movzx	ecx, BYTE PTR [eax+esi+55470]
	mov	DWORD PTR tv2418[ebp], eax
	mov	eax, DWORD PTR _avgTxVref$[ebp]
	xor	edx, edx
	div	ecx
; Line 7417
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv2256[ebp], ebx
	mov	DWORD PTR _avgTxVref$[ebp], eax
$LL61@FastBootCh:
; Line 7418
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN60@FastBootCh
; Line 7421
	mov	BYTE PTR _fastBootParameter$[ebp], 0
$LL57@FastBootCh:
; Line 7423
	cmp	BYTE PTR _fastBootParameter$[ebp], 0
	je	$LN56@FastBootCh
; Line 7425
	push	DWORD PTR _fastBootParameter$[ebp]
	call	_GetIndexBasedOnFastBootParameter
	movzx	eax, ax
	mov	DWORD PTR _dim1Index$[ebp], eax
; Line 7427
	mov	eax, DWORD PTR tv2418[ebp]
	add	esp, 4
	cmp	BYTE PTR [eax+esi+55454], 9
	jne	SHORT $LN53@FastBootCh
	cmp	BYTE PTR _fastBootParameter$[ebp], 3
; Line 7428
	mov	al, 2
	je	SHORT $LN52@FastBootCh
$LN53@FastBootCh:
; Line 7430
	mov	al, 1
$LN52@FastBootCh:
; Line 7432
	mov	ecx, DWORD PTR tv2256[ebp]
	movzx	eax, al
	mov	DWORD PTR tv2161[ebp], ebx
	mov	DWORD PTR tv2240[ebp], ecx
	mov	DWORD PTR tv1039[ebp], eax
$LL118@FastBootCh:
; Line 7433
	cmp	DWORD PTR tv2240[ebp], 18		; 00000012H
	jl	SHORT $LN48@FastBootCh
; Line 7434
	mov	DWORD PTR [esi+65333], 40		; 00000028H
	call	_MrcDeadLoop
; Line 7435
	jmp	$LN50@FastBootCh
$LN48@FastBootCh:
; Line 7438
	movzx	edi, BYTE PTR _fastBootParameter$[ebp]
	mov	eax, DWORD PTR tv1703[ebp]
	mov	ecx, DWORD PTR tv2415[ebp]
	mov	edx, DWORD PTR tv2161[ebp]
	lea	eax, DWORD PTR [eax+edi*2]
	lea	ecx, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*2]
	mov	edx, DWORD PTR tv2256[ebp]
	imul	ecx, 9
	add	ecx, edx
	mov	DWORD PTR tv2785[ebp], ecx
	add	ecx, esi
	mov	dl, BYTE PTR [ecx+27168]
	mov	BYTE PTR tv2792[ebp], dl
	test	dl, dl
	je	SHORT $LN47@FastBootCh
	mov	cl, BYTE PTR [ecx+27888]
	test	cl, cl
	je	SHORT $LN47@FastBootCh
; Line 7439
	movsx	dx, dl
; Line 7440
	movsx	cx, cl
; Line 7441
	jmp	SHORT $LN124@FastBootCh
$LN47@FastBootCh:
; Line 7442
	cmp	BYTE PTR _fastBootParameter$[ebp], 4
	jne	SHORT $LN45@FastBootCh
; Line 7443
	mov	DWORD PTR _lowOffset$[ebp], ebx
; Line 7444
	mov	DWORD PTR _highOffset$[ebp], ebx
; Line 7445
	jmp	SHORT $LN44@FastBootCh
$LN45@FastBootCh:
; Line 7446
	mov	cl, BYTE PTR [edi+esi+71469]
	shr	cl, 1
	movzx	cx, cl
	mov	edx, ecx
	neg	edx
$LN124@FastBootCh:
; Line 7447
	movzx	ecx, cx
	movzx	edx, dx
	mov	DWORD PTR _highOffset$[ebp], ecx
	mov	DWORD PTR _lowOffset$[ebp], edx
$LN44@FastBootCh:
; Line 7451
	mov	ecx, DWORD PTR tv2161[ebp]
; Line 7452
	push	DWORD PTR _dim1Index$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR tv2256[ebp]
	imul	eax, 9
	push	DWORD PTR _Rank$[ebp]
	add	eax, ecx
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR tv2487[ebp], eax
	shl	eax, 2
	lea	edi, DWORD PTR _Dim1StartPoint$[ebp+eax]
	xor	ecx, ecx
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp+eax+2]
	push	esi
	mov	WORD PTR [edi], cx
	mov	DWORD PTR tv2495[ebp], eax
	call	_SignalUpperBound
	mov	ecx, DWORD PTR tv2495[ebp]
	add	esp, 16					; 00000010H
; Line 7453
	cmp	BYTE PTR _fastBootParameter$[ebp], 4
	mov	WORD PTR [ecx], ax
	jne	SHORT $LN43@FastBootCh
; Line 7454
	mov	eax, DWORD PTR _avgTxVref$[ebp]
	mov	DWORD PTR _centerPoint$[ebp], eax
; Line 7455
	jmp	SHORT $LN42@FastBootCh
$LN43@FastBootCh:
; Line 7456
	mov	eax, DWORD PTR tv2785[ebp]
	mov	eax, DWORD PTR [esi+eax*4+65591]
	mov	DWORD PTR _centerPoint$[ebp], eax
$LN42@FastBootCh:
; Line 7459
	mov	ecx, DWORD PTR _lowOffset$[ebp]
	movsx	edx, cx
	add	edx, eax
	test	edx, edx
	jle	SHORT $LN41@FastBootCh
; Line 7460
	add	eax, ecx
	mov	WORD PTR [edi], ax
$LN41@FastBootCh:
; Line 7463
	push	DWORD PTR _dim1Index$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SignalUpperBound
	mov	edx, DWORD PTR _highOffset$[ebp]
	mov	ecx, DWORD PTR _centerPoint$[ebp]
	movsx	edi, dx
	add	edi, ecx
	add	esp, 16					; 00000010H
	cmp	edi, eax
	jae	SHORT $LN40@FastBootCh
; Line 7464
	mov	eax, DWORD PTR tv2495[ebp]
	add	ecx, edx
	mov	WORD PTR [eax], cx
$LN40@FastBootCh:
; Line 7467
	push	DWORD PTR _dim1Index$[ebp]
	mov	edi, DWORD PTR tv2487[ebp]
	push	DWORD PTR _Rank$[ebp]
	xor	eax, eax
	push	DWORD PTR _Channel$[ebp]
	add	edi, edi
	push	esi
	mov	WORD PTR _Low$[ebp+edi], ax
	call	_SignalUpperBound
	add	esp, 16					; 00000010H
	mov	WORD PTR _High$[ebp+edi], ax
$LN50@FastBootCh:
	inc	DWORD PTR tv2161[ebp]
	add	DWORD PTR tv2240[ebp], 9
	dec	DWORD PTR tv1039[ebp]
	jne	$LL118@FastBootCh
$LN56@FastBootCh:
; Line 7421
	inc	BYTE PTR _fastBootParameter$[ebp]
	cmp	BYTE PTR _fastBootParameter$[ebp], 5
	jb	$LL57@FastBootCh
$LN60@FastBootCh:
; Line 7417
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv2256[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL61@FastBootCh
; Line 7480
	mov	edi, DWORD PTR tv2645[ebp]
	mov	al, BYTE PTR [edi-4]
	mov	BYTE PTR _ElementsGenerated$[ebp], al
; Line 7481
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR _ElementsGenerated$[ebp+1], al
; Line 7496
	xor	eax, eax
	inc	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_03HANJPKIA@Rx?5?$AA@
	lea	ecx, DWORD PTR _Results$[ebp+1152]
	push	ecx
	push	OFFSET _CpgcExecuteRmtTest
	lea	ecx, DWORD PTR _ElementsGenerated$[ebp]
	push	ecx
	push	ebx
	push	ebx
	push	ebx
	push	eax
	lea	ecx, DWORD PTR _High$[ebp+72]
	push	ecx
	lea	ecx, DWORD PTR _Low$[ebp+72]
	push	ecx
	lea	ecx, DWORD PTR _Dim1StartPoint$[ebp+144]
	push	ecx
	push	eax
	push	20498					; 00005012H
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_Create1DSweep
; Line 7497
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RestoreFastBootParameters
	add	esp, 88					; 00000058H
; Line 7498
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RestoreFastBootParameters
; Line 7503
	mov	eax, DWORD PTR tv2418[ebp]
	mov	BYTE PTR [eax+esi+55454], 9
; Line 7504
	mov	BYTE PTR [eax+esi+55462], 8
; Line 7505
	mov	al, BYTE PTR [edi-4]
	mov	BYTE PTR _ElementsGenerated$[ebp], al
; Line 7506
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR _ElementsGenerated$[ebp+1], al
; Line 7520
	xor	eax, eax
	inc	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_03JLMCEPA@RxV?$AA@
	lea	ecx, DWORD PTR _Results$[ebp+2304]
	push	ecx
	push	OFFSET _CpgcExecuteRmtTest
	lea	ecx, DWORD PTR _ElementsGenerated$[ebp]
	push	ecx
	push	ebx
	push	ebx
	push	ebx
	push	eax
	lea	ecx, DWORD PTR _High$[ebp+144]
	push	ecx
	lea	ecx, DWORD PTR _Low$[ebp+144]
	push	ecx
	lea	ecx, DWORD PTR _Dim1StartPoint$[ebp+288]
	push	ecx
	push	eax
	push	57349					; 0000e005H
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_Create1DSweep
	add	esp, 88					; 00000058H
; Line 7521
	push	2
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RestoreFastBootParameters
	add	esp, 16					; 00000010H
; Line 7523
	mov	BYTE PTR _Strobe$[ebp], 0
$LL39@FastBootCh:
	mov	eax, DWORD PTR tv2418[ebp]
	cmp	BYTE PTR [eax+esi+55470], 18		; 00000012H
	jne	SHORT $LN37@FastBootCh
; Line 7524
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN38@FastBootCh
; Line 7527
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	lea	eax, DWORD PTR [ecx+9]
	cmp	eax, 18					; 00000012H
	jl	SHORT $LN35@FastBootCh
; Line 7528
	mov	DWORD PTR [esi+65333], 40		; 00000028H
	call	_MrcDeadLoop
; Line 7529
	jmp	SHORT $LN38@FastBootCh
$LN35@FastBootCh:
; Line 7542
	mov	eax, DWORD PTR tv1703[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ecx
	shl	eax, 5
	lea	ecx, DWORD PTR _Results$[ebp+eax+2304]
	push	32					; 00000020H
	push	ecx
	lea	eax, DWORD PTR _Results$[ebp+eax+2592]
	push	eax
	call	_MmrcMemCopy
	add	esp, 12					; 0000000cH
$LN38@FastBootCh:
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL39@FastBootCh
$LN37@FastBootCh:
; Line 7547
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_DnvNibbleTrainingHook
; Line 7548
	mov	al, BYTE PTR [edi-4]
	mov	BYTE PTR _ElementsGenerated$[ebp], al
; Line 7549
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR _ElementsGenerated$[ebp+1], al
; Line 7564
	xor	eax, eax
	inc	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_03FFLCKFFM@Tx?5?$AA@
	lea	ecx, DWORD PTR _Results$[ebp+3456]
	push	ecx
	push	OFFSET _CpgcExecuteRmtTest
	lea	ecx, DWORD PTR _ElementsGenerated$[ebp]
	push	ecx
	push	ebx
	push	ebx
	push	ebx
	push	eax
	lea	ecx, DWORD PTR _High$[ebp+216]
	push	ecx
	lea	ecx, DWORD PTR _Low$[ebp+216]
	push	ecx
	lea	ecx, DWORD PTR _Dim1StartPoint$[ebp+432]
	push	ecx
	push	eax
	push	16387					; 00004003H
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_Create1DSweep
	add	esp, 88					; 00000058H
; Line 7565
	push	3
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RestoreFastBootParameters
; Line 7570
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_DnvNibbleTrainingExitHook
; Line 7571
	mov	al, BYTE PTR [edi-4]
; Line 7589
	push	9
	push	1
	push	OFFSET ??_C@_03CMNHHLCM@TxV?$AA@
	mov	BYTE PTR _ElementsGenerated$[ebp], al
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR _ElementsGenerated$[ebp+1], al
	lea	eax, DWORD PTR _Results$[ebp+4608]
	push	eax
	push	OFFSET _CpgcExecuteRmtTest
	lea	eax, DWORD PTR _ElementsGenerated$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	push	1
	lea	eax, DWORD PTR _High$[ebp+288]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp+288]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp+576]
	push	eax
	push	1
	push	57360					; 0000e010H
	push	DWORD PTR _Rank$[ebp]
	mov	BYTE PTR [esi+71022], 0
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_Create1DSweep
	add	esp, 104				; 00000068H
; Line 7591
	push	4
	push	DWORD PTR _Rank$[ebp]
	mov	BYTE PTR [esi+71022], 1
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RestoreFastBootParameters
	add	esp, 16					; 00000010H
; Line 7593
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv2388[ebp], ebx
$LL34@FastBootCh:
; Line 7594
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN33@FastBootCh
; Line 7601
	mov	BYTE PTR _fastBootParameter$[ebp], 0
$LL30@FastBootCh:
; Line 7603
	cmp	BYTE PTR _fastBootParameter$[ebp], 0
	je	$LN29@FastBootCh
; Line 7606
	mov	eax, DWORD PTR tv2418[ebp]
	cmp	BYTE PTR [eax+esi+55454], 9
	jne	SHORT $LN26@FastBootCh
	cmp	BYTE PTR _fastBootParameter$[ebp], 3
; Line 7607
	mov	al, 2
	je	SHORT $LN25@FastBootCh
$LN26@FastBootCh:
; Line 7609
	mov	al, 1
$LN25@FastBootCh:
; Line 7611
	mov	ecx, DWORD PTR tv2388[ebp]
	movzx	eax, al
	xor	edi, edi
	mov	DWORD PTR tv2373[ebp], ecx
	mov	DWORD PTR tv961[ebp], eax
$LL121@FastBootCh:
; Line 7612
	cmp	DWORD PTR tv2373[ebp], 18		; 00000012H
	jl	SHORT $LN21@FastBootCh
; Line 7613
	mov	DWORD PTR [esi+65333], 40		; 00000028H
	call	_MrcDeadLoop
; Line 7614
	jmp	$LN23@FastBootCh
$LN21@FastBootCh:
; Line 7624
	movzx	eax, BYTE PTR _fastBootParameter$[ebp]
	mov	ecx, DWORD PTR tv1703[ebp]
	mov	edx, DWORD PTR tv2388[ebp]
	mov	DWORD PTR tv1795[ebp], eax
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR tv2415[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
; Line 7626
	lea	eax, DWORD PTR [edi+eax*2]
	imul	eax, 9
	lea	ecx, DWORD PTR [edi+ecx*2]
	imul	ecx, 9
	add	eax, edx
	add	ecx, edx
	mov	ebx, DWORD PTR [esi+ecx*4+65591]
	shl	eax, 5
	lea	edx, DWORD PTR _Results$[ebp+eax+2]
	lea	eax, DWORD PTR _Results$[ebp+eax]
	mov	DWORD PTR _centerPoint$[ebp], ebx
	movzx	ebx, WORD PTR [eax]
	mov	DWORD PTR tv2559[ebp], edx
	movzx	edx, WORD PTR [edx]
	cmp	bx, dx
	jae	$LN117@FastBootCh
; Line 7627
	movzx	edx, bx
	cmp	edx, DWORD PTR _centerPoint$[ebp]
	jae	SHORT $LN114@FastBootCh
; Line 7629
	mov	al, BYTE PTR [eax]
	sub	al, BYTE PTR _centerPoint$[ebp]
; Line 7631
	cmp	BYTE PTR _fastBootParameter$[ebp], 4
	mov	BYTE PTR [ecx+esi+27168], al
	jne	SHORT $LN113@FastBootCh
; Line 7633
	mov	edx, DWORD PTR tv1703[ebp]
	lea	edx, DWORD PTR [edi+edx*2]
	imul	edx, 9
	add	edx, DWORD PTR tv2388[ebp]
	shl	edx, 5
	mov	dl, BYTE PTR _Results$[ebp+edx+4608]
	sub	dl, BYTE PTR _avgTxVref$[ebp]
	cmp	BYTE PTR _minLowTxVref$[ebp], dl
	jle	SHORT $LN113@FastBootCh
; Line 7634
	mov	BYTE PTR _minLowTxVref$[ebp], dl
$LN113@FastBootCh:
; Line 7638
	mov	edx, DWORD PTR tv1795[ebp]
	lea	edx, DWORD PTR _marginLow$[ebp+edx]
	cmp	al, BYTE PTR [edx]
	jle	SHORT $LN114@FastBootCh
; Line 7639
	mov	BYTE PTR [edx], al
$LN114@FastBootCh:
; Line 7642
	mov	eax, DWORD PTR tv2559[ebp]
	movzx	edx, WORD PTR [eax]
	cmp	edx, DWORD PTR _centerPoint$[ebp]
	jbe	SHORT $LN117@FastBootCh
; Line 7644
	mov	al, BYTE PTR [eax]
	sub	al, BYTE PTR _centerPoint$[ebp]
	mov	BYTE PTR [ecx+esi+27888], al
; Line 7646
	mov	ecx, DWORD PTR tv1795[ebp]
	lea	ecx, DWORD PTR _marginHigh$[ebp+ecx]
	cmp	al, BYTE PTR [ecx]
	jge	SHORT $LN14@FastBootCh
; Line 7647
	mov	BYTE PTR [ecx], al
$LN14@FastBootCh:
; Line 7650
	cmp	BYTE PTR _fastBootParameter$[ebp], 4
	jne	SHORT $LN117@FastBootCh
; Line 7652
	mov	eax, DWORD PTR tv1703[ebp]
	lea	eax, DWORD PTR [edi+eax*2]
	imul	eax, 9
	add	eax, DWORD PTR tv2388[ebp]
; Line 7653
	xor	ebx, ebx
	shl	eax, 5
	mov	al, BYTE PTR _Results$[ebp+eax+4610]
	sub	al, BYTE PTR _avgTxVref$[ebp]
	cmp	BYTE PTR _maxHighTxVref$[ebp], al
	jge	SHORT $LN23@FastBootCh
	mov	BYTE PTR _maxHighTxVref$[ebp], al
	jmp	SHORT $LN23@FastBootCh
$LN117@FastBootCh:
	xor	ebx, ebx
$LN23@FastBootCh:
; Line 7611
	add	DWORD PTR tv2373[ebp], 9
	inc	edi
	dec	DWORD PTR tv961[ebp]
	jne	$LL121@FastBootCh
$LN29@FastBootCh:
; Line 7601
	inc	BYTE PTR _fastBootParameter$[ebp]
	cmp	BYTE PTR _fastBootParameter$[ebp], 5
	jb	$LL30@FastBootCh
$LN33@FastBootCh:
; Line 7593
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv2388[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL34@FastBootCh
; Line 7674
	mov	BYTE PTR _Strobe$[ebp], 0
	xor	edi, edi
$LL11@FastBootCh:
; Line 7675
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN10@FastBootCh
; Line 7678
	mov	eax, DWORD PTR tv2418[ebp]
	mov	cl, BYTE PTR _minLowTxVref$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, edi
	add	eax, esi
	mov	BYTE PTR [eax+27744], cl
; Line 7679
	mov	cl, BYTE PTR _maxHighTxVref$[ebp]
	mov	BYTE PTR [eax+28464], cl
$LN10@FastBootCh:
	inc	BYTE PTR _Strobe$[ebp]
	inc	edi
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL11@FastBootCh
$LN70@FastBootCh:
; Line 7301
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv2415[ebp]
	inc	DWORD PTR tv2645[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL71@FastBootCh
; Line 7686
	mov	al, BYTE PTR _msgBackup$[ebp]
	mov	BYTE PTR [esi+55506], al
; Line 7687
	xor	dl, dl
	lea	ecx, DWORD PTR [esi+71469]
$LL7@FastBootCh:
; Line 7689
	test	dl, dl
	je	SHORT $LN6@FastBootCh
; Line 7695
	mov	al, BYTE PTR _marginHigh$[ebp+ebx]
	sub	al, BYTE PTR _marginLow$[ebp+ebx]
; Line 7697
	cmp	al, BYTE PTR [ecx-5]
	jae	SHORT $LN3@FastBootCh
	lea	edi, DWORD PTR [esi+71474]
	cmp	BYTE PTR [edi], 2
	jae	SHORT $LN3@FastBootCh
; Line 7698
	mov	BYTE PTR [edi], 2
; Line 7705
	jmp	SHORT $LN6@FastBootCh
$LN3@FastBootCh:
; Line 7706
	cmp	al, BYTE PTR [ecx]
	jae	SHORT $LN6@FastBootCh
	lea	eax, DWORD PTR [esi+71474]
	cmp	BYTE PTR [eax], 1
	jae	SHORT $LN6@FastBootCh
; Line 7707
	mov	BYTE PTR [eax], 1
$LN6@FastBootCh:
; Line 7687
	inc	dl
	inc	ebx
	inc	ecx
	cmp	dl, 5
	jb	SHORT $LL7@FastBootCh
	pop	edi
$LN123@FastBootCh:
	pop	esi
; Line 7722
	xor	eax, eax
	pop	ebx
; Line 7723
	leave
	ret	0
_FastBootChecker ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_SearchRmt
EXTRN	_RmtTable:BYTE
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _SearchRmt
_TEXT	SEGMENT
_Results$ = -2720					; size = 1152
_RestoreValue$ = -1568					; size = 1152
_Low$ = -416						; size = 72
_Dim1StartPoint$ = -344					; size = 144
_High$ = -200						; size = 72
_TempValue$ = -128					; size = 144
tv2969 = 16						; size = 4
_GroupId$ = 20						; size = 2
tv1177 = 24						; size = 4
tv2598 = 28						; size = 4
tv2750 = 32						; size = 4
tv2622 = 32						; size = 4
_MarginRunType$ = 36					; size = 1
_SignalTrainingDelay$ = 40				; size = 2
_DimmStartAvg$ = 44					; size = 2
_SignalGroupOffset$ = 48				; size = 2
tv2738 = 52						; size = 4
tv2350 = 52						; size = 4
tv2601 = 56						; size = 4
_ChannelBackup$ = 60					; size = 1
tv2509 = 64						; size = 4
tv2239 = 64						; size = 4
_Limit$ = 68						; size = 2
tv2566 = 72						; size = 4
tv2235 = 72						; size = 4
tv2640 = 76						; size = 4
tv2610 = 76						; size = 4
tv1351 = 76						; size = 4
tv388 = 76						; size = 4
tv2614 = 80						; size = 4
tv2515 = 80						; size = 4
tv2095 = 80						; size = 4
tv2760 = 84						; size = 4
tv2608 = 84						; size = 4
_ChannelTested$ = 84					; size = 2
_DebugMsgLevel$ = 91					; size = 1
tv3019 = 92						; size = 4
tv2606 = 92						; size = 4
tv2165 = 92						; size = 4
tv2513 = 96						; size = 4
tv2231 = 96						; size = 4
tv1947 = 96						; size = 4
_DimmStartElements$ = 103				; size = 1
_Rank$ = 104						; size = 1
_Strobe$ = 108						; size = 1
_MrcData$ = 120						; size = 4
_NumSignalGroups$ = 123					; size = 1
_Channel$ = 124						; size = 1
_SearchRmt PROC						; COMDAT
; Line 7807
	push	ebp
	lea	ebp, DWORD PTR [esp-112]
	sub	esp, 2832				; 00000b10H
	push	esi
; Line 7836
	mov	esi, DWORD PTR _MrcData$[ebp]
	test	BYTE PTR [esi+65339], 1
; Line 7837
	je	$LN160@SearchRmt
	push	edi
; Line 7844
	push	esi
	call	_ReInitializeDramsAcrossChannels
; Line 7846
	mov	al, BYTE PTR _Channel$[ebp]
; Line 7847
	and	DWORD PTR _DimmStartAvg$[ebp], 0
; Line 7851
	and	DWORD PTR _GroupId$[ebp], 0
	mov	BYTE PTR _ChannelBackup$[ebp], al
; Line 7855
	mov	al, BYTE PTR [esi+55506]
	mov	BYTE PTR _DebugMsgLevel$[ebp], al
; Line 7856
	xor	eax, eax
; Line 7861
	test	BYTE PTR [esi+65339], 1
	lea	edi, DWORD PTR _Limit$[ebp]
	pop	ecx
	mov	BYTE PTR _DimmStartElements$[ebp], 0
	mov	BYTE PTR _NumSignalGroups$[ebp], 0
	stosw
	je	$LN94@SearchRmt
; Line 7866
	mov	BYTE PTR [esi+55506], al
; Line 7867
	mov	BYTE PTR _Rank$[ebp], al
	push	ebx
$LL93@SearchRmt:
; Line 7868
	push	1152					; 00000480H
	lea	eax, DWORD PTR _Results$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 7870
	xor	ebx, ebx
	mov	DWORD PTR tv2598[ebp], ebx
	mov	DWORD PTR tv1177[ebp], 7
$LL90@SearchRmt:
; Line 7871
	mov	ecx, DWORD PTR tv2598[ebp]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	mov	DWORD PTR tv2601[ebp], eax
	test	eax, DWORD PTR [esi+65340]
	je	$LN89@SearchRmt
; Line 7874
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN151@SearchRmt
	movzx	eax, al
	lea	ecx, DWORD PTR _ChannelTested$[ebp+eax]
	imul	eax, 4336				; 000010f0H
	mov	DWORD PTR tv1947[ebp], ecx
	lea	edi, DWORD PTR [eax+esi+58134]
$LL86@SearchRmt:
; Line 7875
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN85@SearchRmt
; Line 7878
	mov	eax, DWORD PTR tv1947[ebp]
; Line 7880
	and	DWORD PTR [edi+4], 0
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [edi], 1
; Line 7881
	movzx	eax, BYTE PTR _RmtTable[ebx+7]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_CpgcSetup
; Line 7888
	push	DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR _Rank$[ebp]
	push	esi
	mov	BYTE PTR [esi+65585], al
	mov	BYTE PTR [esi+65570], 2
	call	_CpgcReconfig
; Line 7889
	and	DWORD PTR [edi], 0
	add	esp, 20					; 00000014H
	and	DWORD PTR [edi+4], 0
$LN85@SearchRmt:
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1947[ebp]
	add	edi, 4336				; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL86@SearchRmt
$LN151@SearchRmt:
; Line 7893
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN80@SearchRmt
	movzx	eax, al
	mov	ecx, eax
	shl	ecx, 2
	mov	DWORD PTR tv2235[ebp], ecx
	mov	ecx, eax
	imul	ecx, 18					; 00000012H
	lea	edi, DWORD PTR _Limit$[ebp+eax]
	lea	eax, DWORD PTR [eax+esi+30686]
	mov	DWORD PTR tv2231[ebp], edi
	mov	DWORD PTR tv2239[ebp], ecx
	mov	DWORD PTR tv2350[ebp], eax
$LL155@SearchRmt:
; Line 7894
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN81@SearchRmt
; Line 7897
	movzx	ecx, WORD PTR _RmtTable[ebx]
	mov	eax, 57349				; 0000e005H
	cmp	cx, ax
	jne	SHORT $LN152@SearchRmt
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, DWORD PTR tv2235[ebp]
	cmp	BYTE PTR [eax+esi+55470], 18		; 00000012H
	jne	SHORT $LN152@SearchRmt
; Line 7898
	mov	eax, DWORD PTR tv2350[ebp]
	cmp	BYTE PTR [eax], 1
	sete	al
	add	al, 8
; Line 7903
	jmp	SHORT $LN74@SearchRmt
$LN152@SearchRmt:
; Line 7904
	mov	al, BYTE PTR _RmtTable[ebx+10]
	test	al, al
	jne	SHORT $LN74@SearchRmt
; Line 7905
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, DWORD PTR tv2235[ebp]
	mov	al, BYTE PTR [eax+esi+55454]
$LN74@SearchRmt:
; Line 7911
	push	ecx
	push	esi
	mov	BYTE PTR [edi], al
	call	_GetOffsetIndex
	movzx	eax, ax
; Line 7912
	push	eax
	mov	DWORD PTR _SignalTrainingDelay$[ebp], eax
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	mov	al, BYTE PTR _SignalInfoGenerated[eax]
	add	esp, 12					; 0000000cH
; Line 7913
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _NumSignalGroups$[ebp], al
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	$LN70@SearchRmt
$LL72@SearchRmt:
; Line 7914
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN71@SearchRmt
; Line 7924
	movzx	edi, BYTE PTR _Strobe$[ebp]
	mov	eax, DWORD PTR tv2239[ebp]
	and	DWORD PTR _SignalGroupOffset$[ebp], 0
	add	edi, eax
	mov	eax, edi
	shl	eax, 2
	mov	DWORD PTR tv2608[ebp], eax
	lea	eax, DWORD PTR _TempValue$[ebp+eax]
	push	eax
	mov	DWORD PTR tv2610[ebp], eax
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	3
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR tv2606[ebp], edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7925
	mov	eax, DWORD PTR tv2610[ebp]
	mov	eax, DWORD PTR [eax]
; Line 7932
	mov	ecx, DWORD PTR tv2235[ebp]
	shl	edi, 5
	mov	DWORD PTR _RestoreValue$[ebp+edi], eax
	movzx	eax, BYTE PTR _Rank$[ebp]
	mov	DWORD PTR tv2614[ebp], edi
	lea	edi, DWORD PTR [eax+ecx]
	lea	eax, DWORD PTR [edi+esi+55462]
	add	esp, 28					; 0000001cH
	cmp	BYTE PTR [eax], 8
	mov	DWORD PTR tv2622[ebp], eax
	jne	SHORT $LN68@SearchRmt
	mov	eax, DWORD PTR tv2601[ebp]
	and	eax, DWORD PTR [esi+65340]
	cmp	eax, 8
	jne	SHORT $LN68@SearchRmt
; Line 7933
	mov	eax, DWORD PTR tv2608[ebp]
	lea	eax, DWORD PTR _TempValue$[ebp+eax+36]
	push	eax
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	3
	push	eax
	mov	al, BYTE PTR _Strobe$[ebp]
	add	al, 9
	movzx	eax, al
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7934
	mov	eax, DWORD PTR tv2608[ebp]
	mov	ecx, DWORD PTR tv2614[ebp]
	lea	eax, DWORD PTR _TempValue$[ebp+eax+36]
	mov	eax, DWORD PTR [eax]
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _RestoreValue$[ebp+ecx+288], eax
$LN68@SearchRmt:
; Line 7940
	movzx	eax, BYTE PTR _Strobe$[ebp]
	imul	edi, 18					; 00000012H
	add	edi, eax
	lea	edi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR tv2640[ebp], edi
	add	edi, 65591				; 00010037H
	push	edi
	push	3
	push	DWORD PTR _SignalTrainingDelay$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7942
	mov	edi, DWORD PTR tv2606[ebp]
	xor	eax, eax
	add	edi, edi
	mov	WORD PTR _Low$[ebp+edi], ax
; Line 7943
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SignalUpperBound
	mov	WORD PTR _High$[ebp+edi], ax
; Line 7950
	mov	eax, DWORD PTR [esi+65340]
	and	eax, DWORD PTR tv2601[ebp]
	add	esp, 44					; 0000002cH
	cmp	eax, 32					; 00000020H
	je	SHORT $LN66@SearchRmt
	cmp	eax, 16					; 00000010H
	je	SHORT $LN66@SearchRmt
; Line 7954
	mov	ecx, DWORD PTR tv2608[ebp]
	movzx	eax, WORD PTR _TempValue$[ebp+ecx]
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx], ax
; Line 7955
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx+2], ax
	jmp	SHORT $LN65@SearchRmt
$LN66@SearchRmt:
; Line 7951
	mov	eax, DWORD PTR tv2608[ebp]
	lea	eax, DWORD PTR _TempValue$[ebp+eax]
	mov	ax, WORD PTR [eax]
	add	WORD PTR _DimmStartAvg$[ebp], ax
; Line 7952
	inc	BYTE PTR _DimmStartElements$[ebp]
$LN65@SearchRmt:
; Line 7959
	cmp	BYTE PTR _RmtTable[ebx+2], 1
	jne	$LN71@SearchRmt
; Line 7960
	cmp	BYTE PTR _NumSignalGroups$[ebp], 1
	jbe	$LN71@SearchRmt
	mov	eax, DWORD PTR tv2606[ebp]
	movzx	edi, WORD PTR _SignalTrainingDelay$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _RestoreValue$[ebp+eax+292]
	mov	DWORD PTR tv2095[ebp], eax
	mov	eax, DWORD PTR tv2640[ebp]
	add	eax, 66203				; 0001029bH
	mov	DWORD PTR tv2165[ebp], eax
	mov	al, BYTE PTR _NumSignalGroups$[ebp]
	dec	al
	movzx	eax, al
	mov	DWORD PTR tv388[ebp], eax
$LL63@SearchRmt:
; Line 7965
	push	edi
	call	_GetSignalInfoIndex
; Line 7966
	mov	ecx, DWORD PTR _SignalTrainingDelay$[ebp]
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _SignalGroupOffset$[ebp], ax
	mov	eax, DWORD PTR _SignalGroupOffset$[ebp]
	lea	edi, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR tv2608[ebp]
	lea	eax, DWORD PTR _TempValue$[ebp+eax]
	push	eax
	push	3
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7967
	mov	eax, DWORD PTR tv2608[ebp]
	mov	ecx, DWORD PTR tv2095[ebp]
	lea	eax, DWORD PTR _TempValue$[ebp+eax]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx-288], eax
; Line 7972
	mov	eax, DWORD PTR tv2165[ebp]
	add	eax, -36				; ffffffdcH
	push	eax
	push	3
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7979
	mov	eax, DWORD PTR tv2622[ebp]
	add	esp, 60					; 0000003cH
	cmp	BYTE PTR [eax], 8
	jne	SHORT $LN62@SearchRmt
	mov	eax, DWORD PTR tv2601[ebp]
	and	eax, DWORD PTR [esi+65340]
	cmp	eax, 8
	jne	SHORT $LN62@SearchRmt
; Line 7980
	movzx	eax, BYTE PTR _Strobe$[ebp]
	mov	ecx, DWORD PTR tv2608[ebp]
	lea	ecx, DWORD PTR _TempValue$[ebp+ecx+36]
	push	ecx
	movzx	ecx, WORD PTR _RmtTable[ebx]
	add	al, 9
	push	3
	push	ecx
	mov	BYTE PTR tv2969[ebp], al
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 7983
	push	DWORD PTR tv2165[ebp]
	mov	eax, DWORD PTR tv2608[ebp]
	mov	ecx, DWORD PTR tv2095[ebp]
	push	3
	push	edi
	push	DWORD PTR tv2969[ebp]
	lea	eax, DWORD PTR _TempValue$[ebp+eax+36]
	push	DWORD PTR _Rank$[ebp]
	mov	eax, DWORD PTR [eax]
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [ecx], eax
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
$LN62@SearchRmt:
	add	DWORD PTR tv2095[ebp], 4
	add	DWORD PTR tv2165[ebp], 576		; 00000240H
	dec	DWORD PTR tv388[ebp]
	jne	$LL63@SearchRmt
$LN71@SearchRmt:
; Line 7913
	inc	BYTE PTR _Strobe$[ebp]
	mov	eax, DWORD PTR tv2231[ebp]
	mov	cl, BYTE PTR _Strobe$[ebp]
	cmp	cl, BYTE PTR [eax]
	jb	$LL72@SearchRmt
$LN70@SearchRmt:
; Line 7992
	mov	eax, DWORD PTR [esi+65340]
	and	eax, DWORD PTR tv2601[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN58@SearchRmt
	cmp	eax, 16					; 00000010H
	jne	SHORT $LN81@SearchRmt
$LN58@SearchRmt:
; Line 7993
	cmp	BYTE PTR _DimmStartElements$[ebp], 0
	jbe	SHORT $LN57@SearchRmt
; Line 7994
	movzx	eax, WORD PTR _DimmStartAvg$[ebp]
	movzx	ecx, BYTE PTR _DimmStartElements$[ebp]
	cdq
	idiv	ecx
	movzx	eax, ax
	mov	DWORD PTR _DimmStartAvg$[ebp], eax
; Line 7995
	jmp	SHORT $LN56@SearchRmt
$LN57@SearchRmt:
; Line 7997
	call	_MrcDeadLoop
$LN56@SearchRmt:
; Line 7999
	mov	edi, DWORD PTR tv2231[ebp]
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	SHORT $LN156@SearchRmt
$LL55@SearchRmt:
; Line 8000
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN54@SearchRmt
; Line 8003
	movzx	eax, BYTE PTR _Strobe$[ebp]
	add	eax, DWORD PTR tv2239[ebp]
	mov	cx, WORD PTR _DimmStartAvg$[ebp]
	shl	eax, 2
	mov	WORD PTR _Dim1StartPoint$[ebp+eax], cx
; Line 8004
	mov	WORD PTR _Dim1StartPoint$[ebp+eax+2], cx
$LN54@SearchRmt:
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL55@SearchRmt
$LN156@SearchRmt:
; Line 8006
	and	DWORD PTR _DimmStartAvg$[ebp], 0
; Line 8007
	mov	BYTE PTR _DimmStartElements$[ebp], 0
$LN81@SearchRmt:
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv2239[ebp], 18		; 00000012H
	mov	edi, DWORD PTR tv2231[ebp]
	inc	DWORD PTR tv2350[ebp]
	add	DWORD PTR tv2235[ebp], 4
	inc	edi
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv2231[ebp], edi
	jb	$LL155@SearchRmt
$LN80@SearchRmt:
; Line 8013
	lea	eax, DWORD PTR _RmtTable[ebx+4]
	mov	cx, WORD PTR [eax+8]
	mov	WORD PTR [esi+65586], cx
; Line 8014
	mov	cx, WORD PTR _RmtTable[ebx]
	mov	WORD PTR [esi+65588], cx
; Line 8019
	cmp	BYTE PTR _RmtTable[ebx+2], 1
	jne	SHORT $LN51@SearchRmt
; Line 8020
	movzx	eax, WORD PTR [eax]
	mov	DWORD PTR _GroupId$[ebp], eax
$LN51@SearchRmt:
; Line 8029
	mov	eax, 255				; 000000ffH
	mov	WORD PTR [esi+70201], ax
; Line 8031
	xor	eax, eax
	mov	BYTE PTR [esi+65590], 0
	lea	edi, DWORD PTR [esi+70199]
	stosw
; Line 8033
	mov	BYTE PTR [esi+70203], al
; Line 8038
	cmp	BYTE PTR _RmtTable[ebx+6], al
	setne	al
	inc	al
	mov	BYTE PTR _MarginRunType$[ebp], al
; Line 8049
	mov	eax, DWORD PTR [esi+65340]
	and	eax, DWORD PTR tv2601[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN45@SearchRmt
; Line 8051
	or	BYTE PTR _MarginRunType$[ebp], 8
	mov	BYTE PTR [esi+71022], 0
	jmp	SHORT $LN43@SearchRmt
$LN45@SearchRmt:
; Line 8052
	cmp	eax, 16					; 00000010H
	je	SHORT $LN42@SearchRmt
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN43@SearchRmt
$LN42@SearchRmt:
; Line 8053
	and	BYTE PTR _MarginRunType$[ebp], 247	; 000000f7H
$LN43@SearchRmt:
; Line 8059
	cmp	BYTE PTR _RmtTable[ebx+2], 1
; Line 8061
	push	DWORD PTR _MarginRunType$[ebp]
	push	1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	jne	SHORT $LN41@SearchRmt
	mov	al, BYTE PTR _NumSignalGroups$[ebp]
	mov	BYTE PTR [esi+65590], al
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _CpgcExecuteRmtTest
	lea	eax, DWORD PTR _Limit$[ebp]
	push	eax
	movzx	eax, BYTE PTR _RmtTable[ebx+6]
	push	eax
	movzx	ax, BYTE PTR _RmtTable[ebx+11]
	push	1
	push	0
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	DWORD PTR _GroupId$[ebp]
; Line 8062
	jmp	SHORT $LN161@SearchRmt
$LN41@SearchRmt:
; Line 8064
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _CpgcExecuteRmtTest
	lea	eax, DWORD PTR _Limit$[ebp]
	push	eax
	mov	BYTE PTR [esi+65590], 1
	movzx	eax, BYTE PTR _RmtTable[ebx+6]
	push	eax
	movzx	ax, BYTE PTR _RmtTable[ebx+11]
	push	0
	movzx	eax, ax
	push	0
	push	eax
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	1
	push	eax
$LN161@SearchRmt:
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_Create1DSweep
; Line 8072
	mov	eax, DWORD PTR tv2601[ebp]
	and	eax, DWORD PTR [esi+65340]
	add	esp, 72					; 00000048H
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN39@SearchRmt
; Line 8073
	mov	BYTE PTR [esi+71022], 1
$LN39@SearchRmt:
; Line 8076
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN89@SearchRmt
	movzx	eax, al
	lea	ecx, DWORD PTR _Limit$[ebp+eax]
	mov	DWORD PTR tv2509[ebp], ecx
	mov	ecx, eax
	imul	ecx, 18					; 00000012H
	mov	DWORD PTR tv2513[ebp], ecx
	mov	ecx, eax
	shl	ecx, 2
	imul	eax, 72					; 00000048H
	lea	eax, DWORD PTR _TempValue$[ebp+eax]
	mov	DWORD PTR tv2515[ebp], ecx
	mov	DWORD PTR tv2566[ebp], eax
$LL157@SearchRmt:
; Line 8077
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN37@SearchRmt
; Line 8080
	mov	edi, DWORD PTR tv2509[ebp]
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	SHORT $LN158@SearchRmt
$LL34@SearchRmt:
; Line 8081
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN33@SearchRmt
; Line 8084
	movzx	eax, BYTE PTR _Strobe$[ebp]
	mov	ecx, DWORD PTR tv2513[ebp]
	add	eax, ecx
	mov	ecx, eax
	shl	ecx, 5
	mov	ecx, DWORD PTR _RestoreValue$[ebp+ecx]
	mov	DWORD PTR _TempValue$[ebp+eax*4], ecx
$LN33@SearchRmt:
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL34@SearchRmt
$LN158@SearchRmt:
; Line 8086
	movzx	eax, BYTE PTR _RmtTable[ebx+9]
	push	eax
	movzx	eax, BYTE PTR _RmtTable[ebx+8]
	push	eax
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	eax
	push	DWORD PTR tv2566[ebp]
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetLowHighMarginPerStrobe
; Line 8100
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	eax
	push	esi
	call	_GetOffsetIndex
	movzx	eax, ax
; Line 8101
	push	eax
	mov	DWORD PTR _SignalTrainingDelay$[ebp], eax
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	mov	al, BYTE PTR _SignalInfoGenerated[eax]
	add	esp, 44					; 0000002cH
; Line 8102
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _NumSignalGroups$[ebp], al
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	$LN37@SearchRmt
$LL30@SearchRmt:
; Line 8103
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN29@SearchRmt
; Line 8111
	movzx	eax, BYTE PTR _Strobe$[ebp]
	mov	ecx, DWORD PTR tv2513[ebp]
	lea	edi, DWORD PTR [eax+ecx]
	and	DWORD PTR _SignalGroupOffset$[ebp], 0
	mov	ecx, edi
	shl	ecx, 5
	mov	eax, edi
	shl	eax, 2
	mov	DWORD PTR tv2738[ebp], eax
	lea	eax, DWORD PTR _TempValue$[ebp+eax]
; Line 8113
	push	eax
	mov	DWORD PTR tv2750[ebp], ecx
	mov	ecx, DWORD PTR _RestoreValue$[ebp+ecx]
	mov	DWORD PTR [eax], ecx
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	24					; 00000018H
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 8119
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, DWORD PTR tv2515[ebp]
	add	esp, 28					; 0000001cH
	lea	eax, DWORD PTR [eax+esi+55462]
	cmp	BYTE PTR [eax], 8
	mov	DWORD PTR tv2760[ebp], eax
	jne	SHORT $LN26@SearchRmt
	mov	eax, DWORD PTR tv2601[ebp]
	and	eax, DWORD PTR [esi+65340]
	cmp	eax, 8
	jne	SHORT $LN26@SearchRmt
; Line 8120
	mov	eax, DWORD PTR tv2738[ebp]
	mov	ecx, DWORD PTR tv2750[ebp]
	mov	ecx, DWORD PTR _RestoreValue$[ebp+ecx+288]
	lea	eax, DWORD PTR _TempValue$[ebp+eax+36]
; Line 8122
	push	eax
	mov	DWORD PTR [eax], ecx
	movzx	eax, WORD PTR _RmtTable[ebx]
	push	24					; 00000018H
	push	eax
	mov	al, BYTE PTR _Strobe$[ebp]
	add	al, 9
	movzx	eax, al
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN26@SearchRmt:
; Line 8125
	cmp	BYTE PTR _RmtTable[ebx+2], 1
	jne	$LN29@SearchRmt
; Line 8126
	cmp	BYTE PTR _NumSignalGroups$[ebp], 1
	jbe	$LN29@SearchRmt
	movzx	eax, WORD PTR _SignalTrainingDelay$[ebp]
	mov	DWORD PTR tv3019[ebp], eax
	mov	al, BYTE PTR _NumSignalGroups$[ebp]
	shl	edi, 5
	dec	al
	movzx	eax, al
	lea	edi, DWORD PTR _RestoreValue$[ebp+edi+292]
	mov	DWORD PTR tv1351[ebp], eax
$LL24@SearchRmt:
; Line 8131
	push	DWORD PTR tv3019[ebp]
	call	_GetSignalInfoIndex
; Line 8132
	mov	ecx, DWORD PTR [edi-288]
; Line 8135
	mov	edx, DWORD PTR _SignalTrainingDelay$[ebp]
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _SignalGroupOffset$[ebp], ax
	mov	eax, DWORD PTR tv2738[ebp]
	lea	eax, DWORD PTR _TempValue$[ebp+eax]
	push	eax
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _SignalGroupOffset$[ebp]
	push	24					; 00000018H
	add	ecx, edx
	push	ecx
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR tv3019[ebp], ecx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 8142
	mov	eax, DWORD PTR tv2760[ebp]
	add	esp, 32					; 00000020H
	cmp	BYTE PTR [eax], 8
	jne	SHORT $LN23@SearchRmt
	mov	eax, DWORD PTR tv2601[ebp]
	and	eax, DWORD PTR [esi+65340]
	cmp	eax, 8
	jne	SHORT $LN23@SearchRmt
; Line 8143
	mov	eax, DWORD PTR tv2738[ebp]
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR _TempValue$[ebp+eax+36]
; Line 8146
	push	eax
	mov	DWORD PTR [eax], ecx
	mov	al, BYTE PTR _Strobe$[ebp]
	push	24					; 00000018H
	push	DWORD PTR tv3019[ebp]
	add	al, 9
	movzx	eax, al
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN23@SearchRmt:
	add	edi, 4
	dec	DWORD PTR tv1351[ebp]
	jne	$LL24@SearchRmt
$LN29@SearchRmt:
; Line 8102
	inc	BYTE PTR _Strobe$[ebp]
	mov	eax, DWORD PTR tv2509[ebp]
	mov	cl, BYTE PTR _Strobe$[ebp]
	cmp	cl, BYTE PTR [eax]
	jb	$LL30@SearchRmt
$LN37@SearchRmt:
; Line 8076
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv2515[ebp], 4
	add	DWORD PTR tv2513[ebp], 18		; 00000012H
	add	DWORD PTR tv2566[ebp], 72		; 00000048H
	inc	DWORD PTR tv2509[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL157@SearchRmt
$LN89@SearchRmt:
; Line 7870
	inc	DWORD PTR tv2598[ebp]
	add	ebx, 14					; 0000000eH
	dec	DWORD PTR tv1177[ebp]
	jne	$LL90@SearchRmt
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL93@SearchRmt
; Line 8156
	mov	al, BYTE PTR _DebugMsgLevel$[ebp]
	pop	ebx
	test	al, al
	je	SHORT $LN20@SearchRmt
; Line 8157
	or	BYTE PTR [esi+55506], 1
$LN20@SearchRmt:
; Line 8214
	mov	BYTE PTR [esi+55506], al
$LN94@SearchRmt:
; Line 8254
	mov	al, BYTE PTR _DebugMsgLevel$[ebp]
; Line 8260
	push	esi
	mov	BYTE PTR [esi+55506], al
	call	_ReInitializeDramsAcrossChannels
	pop	ecx
	pop	edi
$LN160@SearchRmt:
; Line 8262
	xor	eax, eax
	pop	esi
; Line 8263
	add	ebp, 112				; 00000070H
	leave
	ret	0
_SearchRmt ENDP
_TEXT	ENDS
PUBLIC	_CommandRestore
; Function compile flags: /Ogspy
;	COMDAT _CommandRestore
_TEXT	SEGMENT
tv129 = -4						; size = 4
_CommandGroupOffset$ = 8				; size = 2
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_CommandRestore PROC					; COMDAT
; Line 8547
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 8553
	mov	ebx, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [ebx+71020], 0
; Line 8555
	jne	SHORT $LN10@CommandRes
	push	esi
	push	edi
; Line 8557
	push	DWORD PTR _Channel$[ebp]
	xor	esi, esi
	push	esi
	push	esi
	push	ebx
	call	_CommandClockEntry
; Line 8558
	push	57373					; 0000e01dH
	push	ebx
	call	_GetOffsetIndex
	add	esp, 24					; 00000018H
	movzx	edi, ax
; Line 8559
	mov	DWORD PTR _CommandGroupOffset$[ebp], esi
	mov	DWORD PTR tv129[ebp], 8
$LL9@CommandRes:
; Line 8562
	mov	eax, DWORD PTR _CommandGroupOffset$[ebp]
	push	0
	lea	esi, DWORD PTR [eax+edi]
	push	esi
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_DisplayOrRestoreTrainingResults
; Line 8563
	push	esi
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _CommandGroupOffset$[ebp], ax
	add	esp, 20					; 00000014H
	dec	DWORD PTR tv129[ebp]
	jne	SHORT $LL9@CommandRes
	pop	edi
	pop	esi
$LN10@CommandRes:
; Line 8566
	xor	eax, eax
	pop	ebx
; Line 8567
	leave
	ret	0
_CommandRestore ENDP
_TEXT	ENDS
PUBLIC	_GroupSaveRestore
; Function compile flags: /Ogspy
;	COMDAT _GroupSaveRestore
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_GroupSaveRestore PROC					; COMDAT
; Line 8587
	push	esi
; Line 8589
	mov	esi, DWORD PTR _Channel$[esp]
	push	edi
	mov	edi, DWORD PTR _MrcData$[esp+4]
	push	1
	push	57377					; 0000e021H
	push	esi
	push	edi
	call	_DisplayOrRestoreTrainingResults
; Line 8590
	push	1
	push	57378					; 0000e022H
	push	esi
	push	edi
	call	_DisplayOrRestoreTrainingResults
; Line 8591
	push	1
	push	57379					; 0000e023H
	push	esi
	push	edi
	call	_DisplayOrRestoreTrainingResults
; Line 8592
	push	1
	push	57384					; 0000e028H
	push	esi
	push	edi
	call	_DisplayOrRestoreTrainingResults
	add	esp, 64					; 00000040H
	pop	edi
; Line 8594
	xor	eax, eax
	pop	esi
; Line 8595
	ret	0
_GroupSaveRestore ENDP
_TEXT	ENDS
PUBLIC	_Create2DSweep
; Function compile flags: /Ogspy
;	COMDAT _Create2DSweep
_TEXT	SEGMENT
_Dim1StartPoint$ = -492					; size = 144
_Dim1Min$ = -348					; size = 72
_Dim1Max$ = -276					; size = 72
_Dim2Max$ = -204					; size = 72
_Dim2Min$ = -132					; size = 72
tv1897 = -60						; size = 4
tv1577 = -56						; size = 4
tv1895 = -52						; size = 4
tv1456 = -48						; size = 4
tv1453 = -44						; size = 4
_Dim2PhyValue$ = -40					; size = 4
_DimYOffset$ = -36					; size = 4
_NumberElements$ = -32					; size = 2
_ChannelBackup$ = -28					; size = 1
tv1434 = -24						; size = 4
_TestDone$ = -24					; size = 2
_HighSideDone$ = -17					; size = 1
tv1770 = -16						; size = 4
tv1493 = -16						; size = 4
tv1399 = -16						; size = 4
tv1489 = -12						; size = 4
tv1285 = -12						; size = 4
tv982 = -12						; size = 4
tv534 = -12						; size = 4
tv433 = -12						; size = 4
_Strobe$ = -8						; size = 1
_FirstValidChannel$ = -4				; size = 1
tv1021 = -3						; size = 1
_LowHighFlag$ = -2					; size = 1
_AllChannelsTestDone$ = -1				; size = 1
_AtLeastOneChannelUnderTest$ = -1			; size = 1
_MrcData$ = 8						; size = 4
_Results$ = 12						; size = 4
_Channel$ = 16						; size = 1
_Rank$ = 20						; size = 1
_Dim1Index$ = 24					; size = 2
_Dim1Knobs$ = 28					; size = 1
_Dim1Start$ = 32					; size = 2
_Dim1End$ = 36						; size = 2
_Dim1Step$ = 40						; size = 2
_Dim1Flag$ = 44						; size = 1
_Dim2Index$ = 48					; size = 2
_Dim2Start$ = 52					; size = 2
_Dim2End$ = 56						; size = 2
_Dim2Step$ = 60						; size = 2
_Dim2Flag$ = 64						; size = 1
_Create2DSweep PROC					; COMDAT
; Line 11420
	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
; Line 11431
	xor	eax, eax
; Line 11439
	and	DWORD PTR _Dim2PhyValue$[ebp], eax
; Line 11440
	mov	bl, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR _NumberElements$[ebp], 0
	lea	edi, DWORD PTR _NumberElements$[ebp+1]
	stosb
	mov	WORD PTR _DimYOffset$[ebp], ax
	lea	edi, DWORD PTR _DimYOffset$[ebp+2]
	stosw
; Line 11442
	mov	BYTE PTR _HighSideDone$[ebp], al
; Line 11447
	lea	eax, DWORD PTR _Dim2Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim2Min$[ebp]
	push	eax
	push	DWORD PTR _Dim2Flag$[ebp]
	mov	BYTE PTR _ChannelBackup$[ebp], bl
	push	DWORD PTR _Dim2End$[ebp]
	mov	BYTE PTR _FirstValidChannel$[ebp], 255	; 000000ffH
	push	DWORD PTR _Dim2Start$[ebp]
	push	DWORD PTR _Dim2Index$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetMinMaxRelativeAbsolute
; Line 11448
	lea	eax, DWORD PTR _Dim1Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1Min$[ebp]
	push	eax
	push	DWORD PTR _Dim1Flag$[ebp]
	push	DWORD PTR _Dim1End$[ebp]
	push	DWORD PTR _Dim1Start$[ebp]
	push	DWORD PTR _Dim1Index$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetMinMaxRelativeAbsolute
	add	esp, 72					; 00000048H
; Line 11450
	mov	BYTE PTR _AtLeastOneChannelUnderTest$[ebp], 0
; Line 11452
	cmp	bl, 2
	jae	SHORT $LN84@Create2DSw
	movzx	eax, bl
	lea	edi, DWORD PTR _DimYOffset$[ebp+eax*2]
; Line 11467
	imul	eax, 36					; 00000024H
	mov	DWORD PTR tv1285[ebp], edi
	mov	esi, eax
$LL128@Create2DSw:
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN85@Create2DSw
; Line 11456
	cmp	BYTE PTR _FirstValidChannel$[ebp], 255	; 000000ffH
	jne	SHORT $LN82@Create2DSw
; Line 11457
	mov	BYTE PTR _FirstValidChannel$[ebp], bl
$LN82@Create2DSw:
; Line 11463
	test	BYTE PTR _Dim2Flag$[ebp], 32		; 00000020H
	je	SHORT $LN81@Create2DSw
; Line 11464
	movzx	ecx, WORD PTR _Dim2Min$[ebp+esi]
	movzx	eax, WORD PTR _Dim2Max$[ebp+esi]
; Line 11465
	movzx	edi, WORD PTR _Dim2Step$[ebp]
	sub	eax, ecx
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	movzx	eax, cx
	cdq
	idiv	edi
	mov	edi, DWORD PTR tv1285[ebp]
	sub	ecx, edx
	mov	WORD PTR [edi], cx
; Line 11466
	jmp	SHORT $LN85@Create2DSw
$LN81@Create2DSw:
; Line 11467
	xor	eax, eax
	mov	WORD PTR [edi], ax
$LN85@Create2DSw:
	inc	bl
	add	esi, 36					; 00000024H
	inc	edi
	inc	edi
	mov	BYTE PTR _Channel$[ebp], bl
	mov	DWORD PTR tv1285[ebp], edi
	cmp	bl, 2
	jb	SHORT $LL128@Create2DSw
$LN84@Create2DSw:
; Line 11471
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN111@Create2DSw
	movzx	ebx, al
	mov	eax, ebx
	imul	eax, 18					; 00000012H
	mov	DWORD PTR tv1453[ebp], ebx
	mov	DWORD PTR tv1399[ebp], ebx
	mov	DWORD PTR tv1456[ebp], eax
	mov	DWORD PTR tv1434[ebp], eax
$LL79@Create2DSw:
; Line 11472
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN78@Create2DSw
; Line 11481
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	mov	BYTE PTR _AtLeastOneChannelUnderTest$[ebp], 1
	jbe	SHORT $LN78@Create2DSw
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	xor	edi, edi
	mov	DWORD PTR tv534[ebp], eax
$LL75@Create2DSw:
; Line 11482
	mov	BYTE PTR _Strobe$[ebp], 0
	xor	esi, esi
$LL72@Create2DSw:
; Line 11483
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN71@Create2DSw
; Line 11486
	mov	ecx, DWORD PTR tv1399[ebp]
	mov	eax, DWORD PTR tv1434[ebp]
	add	ecx, edi
	imul	ecx, 18					; 00000012H
	add	eax, esi
	add	eax, eax
	mov	dx, WORD PTR _Dim1Min$[ebp+eax]
; Line 11487
	mov	ax, WORD PTR _Dim1Max$[ebp+eax]
	add	ecx, esi
	shl	ecx, 2
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx], dx
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx+2], ax
$LN71@Create2DSw:
	inc	BYTE PTR _Strobe$[ebp]
	inc	esi
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL72@Create2DSw
	inc	edi
	dec	DWORD PTR tv534[ebp]
	jne	SHORT $LL75@Create2DSw
$LN78@Create2DSw:
; Line 11471
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1399[ebp]
	add	DWORD PTR tv1434[ebp], 18		; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL79@Create2DSw
; Line 11492
	cmp	BYTE PTR _AtLeastOneChannelUnderTest$[ebp], 0
; Line 11493
	je	$LN111@Create2DSw
; Line 11500
	movzx	eax, BYTE PTR _Rank$[ebp]
	add	eax, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _LowHighFlag$[ebp], 0
	lea	eax, DWORD PTR [eax+ebx*4+55454]
	mov	DWORD PTR tv1577[ebp], eax
	mov	al, BYTE PTR _Dim2Flag$[ebp]
	and	al, 16					; 00000010H
	mov	BYTE PTR tv1021[ebp], al
$LL64@Create2DSw:
; Line 11521
	mov	esi, DWORD PTR tv1453[ebp]
	xor	eax, eax
	cmp	BYTE PTR tv1021[ebp], al
	lea	edi, DWORD PTR _TestDone$[ebp]
	stosw
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	edi, DWORD PTR tv1577[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	lea	eax, DWORD PTR _NumberElements$[ebp+esi]
	mov	DWORD PTR tv1489[ebp], eax
	lea	eax, DWORD PTR [esi+esi]
	mov	ebx, eax
	mov	eax, DWORD PTR tv1456[ebp]
	sete	BYTE PTR _AllChannelsTestDone$[ebp]
	mov	DWORD PTR tv1493[ebp], eax
$LL59@Create2DSw:
; Line 11523
	push	DWORD PTR _Rank$[ebp]
	mov	al, BYTE PTR [edi]
	push	DWORD PTR _Channel$[ebp]
	mov	ecx, DWORD PTR tv1489[ebp]
	push	DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR [ecx], al
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN58@Create2DSw
; Line 11529
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	SHORT $LN58@Create2DSw
$LL55@Create2DSw:
; Line 11530
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN54@Create2DSw
; Line 11533
	movzx	eax, BYTE PTR _Strobe$[ebp]
	add	eax, DWORD PTR tv1493[ebp]
	movzx	ecx, WORD PTR _DimYOffset$[ebp+ebx]
	movzx	eax, WORD PTR _Dim2Min$[ebp+eax*2]
	add	eax, ecx
	mov	DWORD PTR _Dim2PhyValue$[ebp], eax
; Line 11534
	lea	eax, DWORD PTR _Dim2PhyValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	DWORD PTR _Dim2Index$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN54@Create2DSw:
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL55@Create2DSw
$LN58@Create2DSw:
; Line 11521
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1493[ebp], 18		; 00000012H
	inc	ebx
	inc	ebx
	inc	DWORD PTR tv1489[ebp]
	add	edi, 4
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL59@Create2DSw
; Line 11545
	cmp	BYTE PTR _FirstValidChannel$[ebp], 2
	jae	$LN109@Create2DSw
; Line 11553
	movzx	eax, BYTE PTR _FirstValidChannel$[ebp]
	movzx	edi, WORD PTR _DimYOffset$[ebp+eax*2]
	push	3
	push	1
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	mov	eax, edi
	imul	eax, 1152				; 00000480H
	add	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _CpgcExecuteRmtTest
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	push	DWORD PTR _Dim1Step$[ebp]
	lea	eax, DWORD PTR _Dim1Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1Min$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	DWORD PTR _Dim1Knobs$[ebp]
	push	DWORD PTR _Dim1Index$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_Create1DSweep
; Line 11557
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 72					; 00000048H
	mov	BYTE PTR _Channel$[ebp], al
$LL132@Create2DSw:
; Line 11558
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN49@Create2DSw
; Line 11561
	cmp	BYTE PTR _Dim1Knobs$[ebp], 0
	jbe	$LN49@Create2DSw
	movzx	eax, BYTE PTR _Dim1Knobs$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR tv433[ebp], eax
$LL46@Create2DSw:
; Line 11562
	mov	BYTE PTR _Strobe$[ebp], 0
$LL43@Create2DSw:
; Line 11563
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN42@Create2DSw
; Line 11571
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	mov	edx, DWORD PTR _Results$[ebp]
	lea	eax, DWORD PTR [esi+edi*2]
	add	eax, ebx
	imul	eax, 18					; 00000012H
	add	eax, ecx
	shl	eax, 5
	add	eax, edx
	mov	dx, WORD PTR [eax+2]
	cmp	dx, WORD PTR [eax]
	jbe	SHORT $LN39@Create2DSw
; Line 11572
	lea	edx, DWORD PTR [esi+ebx]
	imul	edx, 18					; 00000012H
	add	edx, ecx
	mov	ecx, edx
	mov	dx, WORD PTR [eax]
	shl	ecx, 2
; Line 11574
	cmp	BYTE PTR tv1021[ebp], 0
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx], dx
	mov	ax, WORD PTR [eax+2]
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx+2], ax
	jne	SHORT $LN42@Create2DSw
; Line 11582
	mov	BYTE PTR _TestDone$[ebp+esi], 0
; Line 11588
	jmp	SHORT $LN45@Create2DSw
$LN39@Create2DSw:
; Line 11591
	cmp	BYTE PTR tv1021[ebp], 0
	jne	SHORT $LN108@Create2DSw
; Line 11598
	test	BYTE PTR _Dim2Flag$[ebp], 64		; 00000040H
	jne	SHORT $LN42@Create2DSw
; Line 11599
	mov	BYTE PTR _TestDone$[ebp+esi], 1
$LN42@Create2DSw:
; Line 11562
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL43@Create2DSw
; Line 11706
	jmp	SHORT $LN45@Create2DSw
$LN108@Create2DSw:
; Line 11592
	mov	BYTE PTR _TestDone$[ebp+esi], 1
$LN45@Create2DSw:
; Line 11561
	inc	ebx
	dec	DWORD PTR tv433[ebp]
	jne	$LL46@Create2DSw
$LN49@Create2DSw:
; Line 11557
	inc	BYTE PTR _Channel$[ebp]
	inc	esi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL132@Create2DSw
; Line 11612
	mov	ebx, DWORD PTR tv1453[ebp]
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	lea	esi, DWORD PTR _DimYOffset$[ebp+ebx*2]
	lea	edi, DWORD PTR _TestDone$[ebp+ebx]
; Line 11639
	imul	ebx, 36					; 00000024H
	mov	BYTE PTR _Channel$[ebp], al
	mov	DWORD PTR tv1895[ebp], esi
	mov	DWORD PTR tv1897[ebp], ebx
	mov	DWORD PTR tv1770[ebp], ebx
$LL32@Create2DSw:
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN31@Create2DSw
	cmp	BYTE PTR _LowHighFlag$[ebp], 0
	movzx	eax, WORD PTR [esi]
	jne	$LN28@Create2DSw
	movzx	ecx, WORD PTR _Dim2Step$[ebp]
	movzx	edx, ax
	sub	edx, ecx
	mov	DWORD PTR tv982[ebp], ecx
	js	SHORT $LN26@Create2DSw
; Line 11618
	cmp	BYTE PTR [edi], 0
	jne	SHORT $LN26@Create2DSw
; Line 11632
	test	BYTE PTR _Dim2Flag$[ebp], 64		; 00000040H
	jne	SHORT $LN22@Create2DSw
; Line 11633
	sub	eax, DWORD PTR _Dim2Step$[ebp]
; Line 11634
	jmp	$LN134@Create2DSw
$LN22@Create2DSw:
; Line 11635
	movzx	edx, WORD PTR _Dim2Min$[ebp+ebx]
	movzx	ebx, WORD PTR _Dim2Max$[ebp+ebx]
	sub	ebx, edx
	movzx	edx, ax
	add	ecx, edx
	cmp	ecx, ebx
; Line 11640
	mov	ebx, DWORD PTR tv1770[ebp]
	jg	SHORT $LN136@Create2DSw
; Line 11642
	mov	BYTE PTR [edi], 0
	jmp	SHORT $LN135@Create2DSw
$LN26@Create2DSw:
; Line 11623
	test	BYTE PTR _Dim2Flag$[ebp], 32		; 00000020H
	mov	BYTE PTR [edi], 1
	je	SHORT $LN25@Create2DSw
; Line 11624
	movzx	ecx, WORD PTR _Dim2Min$[ebp+ebx]
	movzx	eax, WORD PTR _Dim2Max$[ebp+ebx]
	sub	eax, ecx
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
; Line 11625
	movzx	eax, cx
	cdq
	idiv	DWORD PTR tv982[ebp]
; Line 11627
	mov	ebx, DWORD PTR tv1770[ebp]
	sub	ecx, edx
	mov	WORD PTR [esi], cx
	jmp	SHORT $LN24@Create2DSw
$LN25@Create2DSw:
; Line 11628
	xor	eax, eax
	mov	WORD PTR [esi], ax
$LN24@Create2DSw:
; Line 11630
	mov	ax, WORD PTR _Dim2Step$[ebp]
	add	WORD PTR [esi], ax
; Line 11647
	jmp	SHORT $LN16@Create2DSw
$LN28@Create2DSw:
; Line 11648
	movzx	ecx, WORD PTR _Dim2Min$[ebp+ebx]
	movzx	edx, WORD PTR _Dim2Max$[ebp+ebx]
	sub	edx, ecx
	movzx	ecx, WORD PTR _Dim2Step$[ebp]
	movzx	eax, ax
	add	eax, ecx
	cmp	eax, edx
	jle	SHORT $LN17@Create2DSw
$LN136@Create2DSw:
; Line 11652
	mov	BYTE PTR [edi], 1
; Line 11653
	jmp	SHORT $LN16@Create2DSw
$LN17@Create2DSw:
; Line 11654
	movzx	eax, WORD PTR [esi]
$LN135@Create2DSw:
	mov	ecx, DWORD PTR _Dim2Step$[ebp]
	add	eax, ecx
$LN134@Create2DSw:
	mov	WORD PTR [esi], ax
$LN16@Create2DSw:
; Line 11658
	cmp	BYTE PTR tv1021[ebp], 0
	je	SHORT $LN15@Create2DSw
; Line 11659
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN31@Create2DSw
; Line 11660
	mov	BYTE PTR _AllChannelsTestDone$[ebp], 1
; Line 11661
	jmp	SHORT $LN31@Create2DSw
$LN15@Create2DSw:
; Line 11662
	cmp	BYTE PTR [edi], 0
	jne	SHORT $LN31@Create2DSw
; Line 11663
	mov	BYTE PTR _AllChannelsTestDone$[ebp], 0
$LN31@Create2DSw:
; Line 11612
	inc	BYTE PTR _Channel$[ebp]
; Line 11639
	add	ebx, 36					; 00000024H
	inc	esi
	inc	esi
	inc	edi
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv1770[ebp], ebx
	jb	$LL32@Create2DSw
; Line 11676
	mov	bl, BYTE PTR _ChannelBackup$[ebp]
$LL131@Create2DSw:
	cmp	BYTE PTR _AllChannelsTestDone$[ebp], 0
	je	$LL64@Create2DSw
	cmp	BYTE PTR tv1021[ebp], 0
	je	SHORT $LN63@Create2DSw
	cmp	BYTE PTR _LowHighFlag$[ebp], 0
	jne	SHORT $LN63@Create2DSw
; Line 11677
	test	BYTE PTR _Dim2Flag$[ebp], 32		; 00000020H
; Line 11678
	movzx	ecx, bl
	je	SHORT $LN8@Create2DSw
	mov	eax, ecx
	imul	eax, 36					; 00000024H
	movzx	edx, WORD PTR _Dim2Min$[ebp+eax]
	movzx	eax, WORD PTR _Dim2Max$[ebp+eax]
; Line 11679
	movzx	edi, WORD PTR _Dim2Step$[ebp]
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	movzx	eax, si
	cdq
	idiv	edi
	lea	ecx, DWORD PTR _DimYOffset$[ebp+ecx*2]
	sub	esi, edx
	mov	WORD PTR [ecx], si
; Line 11681
	jmp	SHORT $LN7@Create2DSw
$LN8@Create2DSw:
; Line 11682
	lea	ecx, DWORD PTR _DimYOffset$[ebp+ecx*2]
	xor	eax, eax
	mov	WORD PTR [ecx], ax
$LN7@Create2DSw:
; Line 11684
	mov	ax, WORD PTR _Dim2Step$[ebp]
	add	WORD PTR [ecx], ax
	inc	bl
	cmp	bl, 2
	jb	SHORT $LL131@Create2DSw
$LN63@Create2DSw:
; Line 11694
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	edi, DWORD PTR tv1895[ebp]
	mov	esi, DWORD PTR tv1897[ebp]
	mov	BYTE PTR _Channel$[ebp], al
$LL6@Create2DSw:
; Line 11695
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN5@Create2DSw
; Line 11698
	movzx	eax, WORD PTR _Dim2Min$[ebp+esi]
	movzx	ecx, WORD PTR _Dim2Max$[ebp+esi]
	sub	ecx, eax
	movzx	eax, WORD PTR [edi]
	cmp	eax, ecx
	jle	SHORT $LN5@Create2DSw
; Line 11702
	mov	BYTE PTR _HighSideDone$[ebp], 1
$LN5@Create2DSw:
; Line 11694
	inc	BYTE PTR _Channel$[ebp]
	add	esi, 36					; 00000024H
	inc	edi
	inc	edi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL6@Create2DSw
; Line 11706
	cmp	BYTE PTR _HighSideDone$[ebp], 0
	jne	SHORT $LN111@Create2DSw
	inc	BYTE PTR _LowHighFlag$[ebp]
	cmp	BYTE PTR _LowHighFlag$[ebp], 1
	jbe	$LL64@Create2DSw
$LN111@Create2DSw:
; Line 11711
	xor	eax, eax
$LN87@Create2DSw:
	pop	edi
	pop	esi
	pop	ebx
; Line 11712
	leave
	ret	0
$LN109@Create2DSw:
; Line 11546
	mov	eax, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR [eax+65333], 44		; 0000002cH
; Line 11547
	call	_MrcDeadLoop
; Line 11548
	or	eax, -1
	jmp	SHORT $LN87@Create2DSw
_Create2DSweep ENDP
_TEXT	ENDS
PUBLIC	_TestMrcTrainingSteps
; Function compile flags: /Ogspy
;	COMDAT _TestMrcTrainingSteps
_TEXT	SEGMENT
_PassFail$ = -904					; size = 864
tv330 = -40						; size = 4
_TempValue$ = -36					; size = 4
tv582 = -32						; size = 4
tv561 = -28						; size = 4
tv521 = -24						; size = 4
_DelayType$ = -20					; size = 2
_NumberOfElements$ = -20				; size = 2
_ErrorsDetected$ = -16					; size = 4
_MaxBits$ = -9						; size = 1
_Strobe$ = -8						; size = 1
_Rank$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
tv502 = 16						; size = 4
_SetupType$ = 16					; size = 1
_CmdSequence$ = 20					; size = 1
_PostTestFlag$ = 24					; size = 2
_LoopCount$ = 28					; size = 1
_NumBurst$ = 32						; size = 1
_TestMrcTrainingSteps PROC				; COMDAT
; Line 12055
	push	ebp
	mov	ebp, esp
	sub	esp, 904				; 00000388H
	push	ebx
	push	esi
; Line 12073
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	mov	DWORD PTR _DelayType$[ebp], 57344	; 0000e000H
	mov	BYTE PTR _Rank$[ebp], 0
$LL36@TestMrcTra:
; Line 12074
	push	DWORD PTR _Rank$[ebp]
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN33@TestMrcTra
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL36@TestMrcTra
; Line 12073
	jmp	SHORT $LN62@TestMrcTra
$LN33@TestMrcTra:
; Line 12078
	movzx	ecx, BYTE PTR _Rank$[ebp]
	movzx	eax, bl
	add	ecx, esi
	lea	edi, DWORD PTR [ecx+eax*4+55454]
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	SHORT $LN62@TestMrcTra
$LL32@TestMrcTra:
; Line 12079
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL32@TestMrcTra
$LN62@TestMrcTra:
; Line 12089
	mov	al, BYTE PTR _SetupType$[ebp]
	add	al, 56					; 00000038H
	cmp	al, 1
	ja	$LN28@TestMrcTra
; Line 12090
	cmp	BYTE PTR _SetupType$[ebp], 200		; 000000c8H
	jne	SHORT $LN27@TestMrcTra
; Line 12093
	mov	DWORD PTR _DelayType$[ebp], 57344	; 0000e000H
	jmp	SHORT $LN25@TestMrcTra
$LN27@TestMrcTra:
; Line 12094
	cmp	BYTE PTR _SetupType$[ebp], 201		; 000000c9H
	jne	SHORT $LN25@TestMrcTra
; Line 12097
	mov	DWORD PTR _DelayType$[ebp], 57358	; 0000e00eH
$LN25@TestMrcTra:
; Line 12099
	and	DWORD PTR _ErrorsDetected$[ebp], 0
	and	DWORD PTR tv502[ebp], 0
; Line 12100
	mov	BYTE PTR _Rank$[ebp], 0
$LL24@TestMrcTra:
; Line 12101
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN23@TestMrcTra
; Line 12105
	mov	ecx, DWORD PTR tv502[ebp]
	movzx	eax, bl
	lea	eax, DWORD PTR [ecx+eax*4]
	lea	edi, DWORD PTR [eax+esi+55454]
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	SHORT $LN23@TestMrcTra
$LL20@TestMrcTra:
; Line 12106
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN19@TestMrcTra
; Line 12109
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	3
	push	DWORD PTR _DelayType$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 12111
	cmp	DWORD PTR _TempValue$[ebp], 900		; 00000384H
	ja	SHORT $LN15@TestMrcTra
	cmp	DWORD PTR _TempValue$[ebp], 70		; 00000046H
	jae	SHORT $LN19@TestMrcTra
$LN15@TestMrcTra:
; Line 12112
	mov	cl, BYTE PTR _Strobe$[ebp]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	or	DWORD PTR _ErrorsDetected$[ebp], eax
$LN19@TestMrcTra:
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL20@TestMrcTra
$LN23@TestMrcTra:
; Line 12100
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv502[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL24@TestMrcTra
; Line 12117
	jmp	$LN65@TestMrcTra
$LN28@TestMrcTra:
; Line 12119
	push	864					; 00000360H
	xor	edi, edi
	lea	eax, DWORD PTR _PassFail$[ebp]
	push	edi
	push	eax
	call	_memset
; Line 12120
	mov	al, BYTE PTR _LoopCount$[ebp]
; Line 12122
	push	DWORD PTR _SetupType$[ebp]
	mov	BYTE PTR [esi+65583], al
	mov	al, BYTE PTR _NumBurst$[ebp]
	push	ebx
	push	esi
	mov	BYTE PTR [esi+65582], al
	call	_CpgcSetup
; Line 12124
	push	18					; 00000012H
	lea	eax, DWORD PTR [esi+70780]
	push	edi
	push	eax
	mov	DWORD PTR _ErrorsDetected$[ebp], edi
	call	_MmrcMemset
	add	esp, 36					; 00000024H
; Line 12125
	mov	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR tv582[ebp], edi
$LL14@TestMrcTra:
; Line 12126
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN13@TestMrcTra
; Line 12129
	cmp	BYTE PTR _SetupType$[ebp], 4
	jne	SHORT $LN10@TestMrcTra
; Line 12130
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_PrechargeAll
; Line 12131
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_MprWrite
	add	esp, 24					; 00000018H
$LN10@TestMrcTra:
; Line 12134
	mov	eax, DWORD PTR tv582[ebp]
; Line 12139
	push	DWORD PTR _Channel$[ebp]
	movzx	ebx, bl
	lea	eax, DWORD PTR [eax+ebx*4]
	lea	edi, DWORD PTR [eax+esi+55454]
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR _NumberOfElements$[ebp], al
	mov	BYTE PTR _NumberOfElements$[ebp+1], al
	mov	al, BYTE PTR _Rank$[ebp]
	mov	BYTE PTR [esi+65585], al
	mov	al, BYTE PTR _CmdSequence$[ebp]
	push	esi
	mov	BYTE PTR [esi+65570], al
	call	_CpgcReconfig
; Line 12140
	mov	ax, WORD PTR _PostTestFlag$[ebp]
	mov	WORD PTR [esi+65586], ax
; Line 12141
	lea	eax, DWORD PTR _PassFail$[ebp]
	push	eax
	push	1
	lea	eax, DWORD PTR _NumberOfElements$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_CpgcExecuteRmtTest
	add	esp, 32					; 00000020H
; Line 12144
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Strobe$[ebp], 0
	jbe	SHORT $LN7@TestMrcTra
$LL9@TestMrcTra:
; Line 12145
	lea	eax, DWORD PTR _MaxBits$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN8@TestMrcTra
; Line 12149
	cmp	BYTE PTR _MaxBits$[ebp], 0
	jbe	SHORT $LN8@TestMrcTra
	movzx	eax, BYTE PTR _Strobe$[ebp]
	and	DWORD PTR tv521[ebp], 0
	mov	ecx, ebx
	imul	ecx, 18					; 00000012H
	add	ecx, eax
	imul	ecx, 24					; 00000018H
	lea	ecx, DWORD PTR _PassFail$[ebp+ecx]
	mov	DWORD PTR tv561[ebp], ecx
	movzx	ecx, BYTE PTR _MaxBits$[ebp]
	mov	DWORD PTR tv330[ebp], ecx
$LL5@TestMrcTra:
; Line 12150
	mov	ecx, DWORD PTR tv561[ebp]
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $LN4@TestMrcTra
; Line 12151
	xor	edx, edx
	inc	edx
	mov	ecx, eax
	shl	edx, cl
; Line 12153
	mov	ecx, DWORD PTR tv521[ebp]
	or	DWORD PTR _ErrorsDetected$[ebp], edx
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR [eax+esi+70780], dl
$LN4@TestMrcTra:
	inc	DWORD PTR tv521[ebp]
	add	DWORD PTR tv561[ebp], 3
	dec	DWORD PTR tv330[ebp]
	jne	SHORT $LL5@TestMrcTra
$LN8@TestMrcTra:
; Line 12144
	inc	BYTE PTR _Strobe$[ebp]
	mov	al, BYTE PTR _Strobe$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL9@TestMrcTra
$LN7@TestMrcTra:
; Line 12159
	cmp	BYTE PTR _SetupType$[ebp], 4
	jne	SHORT $LN61@TestMrcTra
; Line 12160
	push	0
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprMode
	add	esp, 16					; 00000010H
$LN61@TestMrcTra:
	mov	ebx, DWORD PTR _Channel$[ebp]
$LN13@TestMrcTra:
; Line 12125
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv582[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL14@TestMrcTra
$LN65@TestMrcTra:
; Line 12163
	mov	eax, DWORD PTR _ErrorsDetected$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 12164
	leave
	ret	0
_TestMrcTrainingSteps ENDP
_TEXT	ENDS
PUBLIC	_GenericMemoryTest
; Function compile flags: /Ogspy
;	COMDAT _GenericMemoryTest
_TEXT	SEGMENT
_IndCh$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_NumberElements$ = 20					; size = 4
_NumberKnobs$ = 24					; size = 1
_PassFail$ = 28						; size = 4
_GenericMemoryTest PROC					; COMDAT
; Line 17533
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 17537
	mov	ebx, DWORD PTR _Rank$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _IndCh$[ebp], 0
$LL4@GenericMem:
; Line 17538
	push	ebx
	push	DWORD PTR _IndCh$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN3@GenericMem
; Line 17542
	push	DWORD PTR _IndCh$[ebp]
	mov	BYTE PTR [esi+65585], bl
	push	esi
	call	_CpgcReconfig
	pop	ecx
	pop	ecx
$LN3@GenericMem:
	inc	BYTE PTR _IndCh$[ebp]
	cmp	BYTE PTR _IndCh$[ebp], 2
	jb	SHORT $LL4@GenericMem
; Line 17545
	push	DWORD PTR _PassFail$[ebp]
	push	DWORD PTR _NumberKnobs$[ebp]
	push	DWORD PTR _NumberElements$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_CpgcExecuteRmtTest
	add	esp, 24					; 00000018H
	pop	esi
; Line 17547
	xor	eax, eax
	pop	ebx
; Line 17548
	leave
	ret	0
_GenericMemoryTest ENDP
_TEXT	ENDS
PUBLIC	_ReceiveEnable
EXTRN	_ReceiveEnableExit:PROC
; Function compile flags: /Ogspy
;	COMDAT _ReceiveEnable
_TEXT	SEGMENT
_Results$ = -1492					; size = 1152
_Low$ = -340						; size = 72
_Dim1StartPoint$ = -268					; size = 144
_High$ = -124						; size = 72
_HalfClock$ = -52					; size = 8
_TempValue$ = -44					; size = 4
tv1002 = -40						; size = 4
tv759 = -40						; size = 4
tv678 = -33						; size = 1
_NumberElements$ = -32					; size = 2
tv1381 = -28						; size = 4
tv1135 = -28						; size = 4
tv899 = -28						; size = 4
_ChannelBackup$ = -24					; size = 1
tv1300 = -20						; size = 4
tv1196 = -20						; size = 4
tv1053 = -20						; size = 4
tv1025 = -20						; size = 4
tv1354 = -16						; size = 4
tv1265 = -16						; size = 4
tv1178 = -16						; size = 4
tv957 = -16						; size = 4
_Rank$ = -9						; size = 1
_DecreaseRdCmd2RcvEn$ = -5				; size = 1
_Strobe$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_FirstValidChannel$ = 11				; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_ReceiveEnable PROC					; COMDAT
; Line 2322
	push	ebp
	mov	ebp, esp
	sub	esp, 1492				; 000005d4H
	push	ebx
	push	esi
; Line 2351
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	xor	ebx, ebx
	xor	eax, eax
	lea	edi, DWORD PTR _HalfClock$[ebp+4]
	mov	DWORD PTR _HalfClock$[ebp], ebx
	stosd
	cmp	BYTE PTR [esi+71014], al
; Line 2353
	jne	$LN127@ReceiveEna@2
; Line 2356
	mov	al, BYTE PTR [esi+55506]
; Line 2357
	mov	cl, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR tv678[ebp], al
	mov	BYTE PTR _ChannelBackup$[ebp], cl
; Line 2358
	mov	BYTE PTR _FirstValidChannel$[ebp], 255	; 000000ffH
; Line 2362
	test	al, 4
	je	SHORT $LN52@ReceiveEna@2
; Line 2363
	or	al, 32					; 00000020H
	mov	BYTE PTR [esi+55506], al
$LN52@ReceiveEna@2:
; Line 2373
	push	DWORD PTR _Channel$[ebp]
	mov	eax, 20495				; 0000500fH
	push	65535					; 0000ffffH
	push	14110					; 0000371eH
	push	esi
	mov	WORD PTR [esi+65548], ax
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 2375
	cmp	BYTE PTR [esi+65337], bl
	jne	$LN114@ReceiveEna@2
; Line 2377
	mov	BYTE PTR [esi+65583], 1
; Line 2378
	mov	BYTE PTR [esi+65582], bl
	jmp	SHORT $LN128@ReceiveEna@2
$LL112@ReceiveEna@2:
; Line 2380
	push	3
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_CpgcSetup
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Channel$[ebp]
$LN128@ReceiveEna@2:
; Line 2379
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL112@ReceiveEna@2
$LL47@ReceiveEna@2:
; Line 2388
	mov	BYTE PTR _DecreaseRdCmd2RcvEn$[ebp], 0
; Line 2392
	mov	BYTE PTR _Rank$[ebp], 0
$LL44@ReceiveEna@2:
; Line 2398
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN37@ReceiveEna@2
	movzx	eax, al
	lea	ecx, DWORD PTR _NumberElements$[ebp+eax]
	mov	DWORD PTR tv957[ebp], ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	mov	edi, eax
	shl	eax, 2
	imul	edi, 18					; 00000012H
	lea	ebx, DWORD PTR _HalfClock$[ebp+eax]
	add	ecx, eax
	lea	eax, DWORD PTR [ecx+esi+55454]
	mov	DWORD PTR tv1002[ebp], ebx
	mov	DWORD PTR tv1025[ebp], eax
$LL39@ReceiveEna@2:
; Line 2399
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetHalfClk
; Line 2401
	cmp	BYTE PTR _FirstValidChannel$[ebp], 255	; 000000ffH
	movzx	eax, ax
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR tv1025[ebp]
	mov	al, BYTE PTR [eax]
	pop	ecx
	pop	ecx
	mov	ecx, DWORD PTR tv957[ebp]
	mov	BYTE PTR [ecx], al
	jne	SHORT $LN36@ReceiveEna@2
; Line 2402
	mov	al, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR _FirstValidChannel$[ebp], al
$LN36@ReceiveEna@2:
; Line 2404
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN38@ReceiveEna@2
; Line 2415
	push	DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR _Rank$[ebp]
	push	esi
	mov	BYTE PTR [esi+65585], al
	mov	BYTE PTR [esi+65570], 1
	call	_CpgcReconfig
; Line 2420
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReceiveEnableDramEntryExit
	add	esp, 24					; 00000018H
	and	DWORD PTR tv899[ebp], 0
; Line 2424
	mov	BYTE PTR _Strobe$[ebp], 0
$LL113@ReceiveEna@2:
; Line 2425
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN33@ReceiveEna@2
; Line 2432
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	17731					; 00004543H
	push	esi
	call	_MmrcExecuteTask
; Line 2433
	movzx	edx, WORD PTR [ebx]
	mov	ecx, DWORD PTR tv899[ebp]
	mov	eax, edx
	imul	eax, 6
; Line 2434
	mov	ebx, edx
	imul	ebx, 9
	add	ecx, edi
	add	ebx, eax
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx*4+2], bx
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx*4], ax
; Line 2435
	add	ecx, ecx
	add	esp, 16					; 00000010H
	xor	ebx, ebx
; Line 2436
	lea	eax, DWORD PTR [eax+edx*8]
	mov	WORD PTR _Low$[ebp+ecx], bx
	mov	ebx, DWORD PTR tv1002[ebp]
	mov	WORD PTR _High$[ebp+ecx], ax
$LN33@ReceiveEna@2:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv899[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL113@ReceiveEna@2
$LN38@ReceiveEna@2:
; Line 2398
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1025[ebp], 4
	add	edi, 18					; 00000012H
	inc	DWORD PTR tv957[ebp]
	add	ebx, 4
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv1002[ebp], ebx
	jb	$LL39@ReceiveEna@2
	xor	ebx, ebx
$LN37@ReceiveEna@2:
; Line 2449
	push	1
	push	4
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _SampleDqs
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	push	1
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	mov	edi, 57344				; 0000e000H
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_Create1DSweep
; Line 2451
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 72					; 00000048H
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN28@ReceiveEna@2
	movzx	eax, al
	mov	ecx, eax
	imul	ecx, 18					; 00000012H
	lea	eax, DWORD PTR _HalfClock$[ebp+eax*4]
	mov	DWORD PTR tv1135[ebp], ecx
	mov	DWORD PTR tv1178[ebp], eax
$LL30@ReceiveEna@2:
; Line 2452
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN29@ReceiveEna@2
; Line 2468
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv1053[ebp], ebx
$LL26@ReceiveEna@2:
; Line 2469
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN25@ReceiveEna@2
; Line 2472
	mov	eax, DWORD PTR tv1135[ebp]
	mov	ecx, DWORD PTR tv1053[ebp]
	mov	edx, DWORD PTR tv1178[ebp]
	mov	edx, DWORD PTR [edx]
	add	ecx, eax
	mov	eax, ecx
	shl	eax, 5
	movzx	eax, WORD PTR _Results$[ebp+eax]
	shr	edx, 1
	add	eax, edx
	mov	DWORD PTR _TempValue$[ebp], eax
; Line 2473
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx*4], ax
; Line 2474
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx*4+2], ax
; Line 2478
	mov	WORD PTR _High$[ebp+ecx*2], ax
$LN25@ReceiveEna@2:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1053[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL26@ReceiveEna@2
$LN29@ReceiveEna@2:
; Line 2451
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1178[ebp], 4
	add	DWORD PTR tv1135[ebp], 18		; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL30@ReceiveEna@2
$LN28@ReceiveEna@2:
; Line 2489
	cmp	BYTE PTR _FirstValidChannel$[ebp], 2
	jae	$LN67@ReceiveEna@2
; Line 2496
	movzx	eax, BYTE PTR _FirstValidChannel$[ebp]
	push	1
	push	1
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	lea	eax, DWORD PTR _HalfClock$[ebp+eax*4]
	mov	DWORD PTR tv759[ebp], eax
	mov	ax, WORD PTR [eax]
	lea	ecx, DWORD PTR _Results$[ebp]
	push	ecx
	push	OFFSET _SampleDqs
	lea	ecx, DWORD PTR _NumberElements$[ebp]
	push	ecx
	push	ebx
	push	ebx
	push	ebx
	add	ax, ax
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_Create1DSweep
; Line 2498
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 72					; 00000048H
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN19@ReceiveEna@2
	movzx	eax, al
	imul	eax, 18					; 00000012H
	mov	DWORD PTR tv1265[ebp], eax
$LL21@ReceiveEna@2:
; Line 2499
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN20@ReceiveEna@2
; Line 2502
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv1196[ebp], ebx
$LL17@ReceiveEna@2:
; Line 2503
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN16@ReceiveEna@2
; Line 2506
	mov	eax, DWORD PTR tv1265[ebp]
	mov	ecx, DWORD PTR tv1196[ebp]
; Line 2510
	mov	edx, DWORD PTR tv759[ebp]
	mov	edx, DWORD PTR [edx]
	add	ecx, eax
	mov	eax, ecx
	shl	eax, 5
	movzx	eax, WORD PTR _Results$[ebp+eax]
	lea	edx, DWORD PTR [edx+edx+36]
	mov	DWORD PTR _TempValue$[ebp], eax
	cmp	eax, edx
	jae	SHORT $LN13@ReceiveEna@2
; Line 2511
	mov	BYTE PTR _DecreaseRdCmd2RcvEn$[ebp], 1
$LN13@ReceiveEna@2:
; Line 2514
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx*4], ax
; Line 2515
	mov	WORD PTR _Dim1StartPoint$[ebp+ecx*4+2], ax
; Line 2519
	mov	WORD PTR _High$[ebp+ecx*2], ax
$LN16@ReceiveEna@2:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1196[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL17@ReceiveEna@2
$LN20@ReceiveEna@2:
; Line 2498
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1265[ebp], 18		; 00000012H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL21@ReceiveEna@2
$LN19@ReceiveEna@2:
; Line 2530
	cmp	BYTE PTR _DecreaseRdCmd2RcvEn$[ebp], 1
	jne	SHORT $LN10@ReceiveEna@2
; Line 2531
	push	DWORD PTR _ChannelBackup$[ebp]
	push	65535					; 0000ffffH
	push	14153					; 00003749H
	push	esi
	call	_MmrcExecuteTask
; Line 2532
	movzx	eax, BYTE PTR _ChannelBackup$[ebp]
	imul	eax, 4336				; 000010f0H
	add	eax, esi
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [eax+58474], ebx
	ja	SHORT $LN100@ReceiveEna@2
	cmp	DWORD PTR [eax+58470], ebx
	jbe	SHORT $LN101@ReceiveEna@2
$LN100@ReceiveEna@2:
	cmp	DWORD PTR [eax+58482], ebx
	ja	$LN68@ReceiveEna@2
	jb	SHORT $LN101@ReceiveEna@2
	cmp	DWORD PTR [eax+58478], ebx
	ja	$LN68@ReceiveEna@2
$LN101@ReceiveEna@2:
; Line 2542
	mov	BYTE PTR _DecreaseRdCmd2RcvEn$[ebp], 0
$LN10@ReceiveEna@2:
; Line 2550
	push	1
	push	4
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _SampleDqs
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	push	1
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_Create1DSweep
; Line 2552
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 72					; 00000048H
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN7@ReceiveEna@2
	movzx	eax, al
	mov	ecx, eax
	imul	ecx, 18					; 00000012H
	lea	eax, DWORD PTR _HalfClock$[ebp+eax*4]
	mov	DWORD PTR tv1354[ebp], ecx
	mov	DWORD PTR tv1381[ebp], eax
$LL9@ReceiveEna@2:
; Line 2553
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN8@ReceiveEna@2
; Line 2560
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv1300[ebp], ebx
$LL5@ReceiveEna@2:
; Line 2561
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN4@ReceiveEna@2
; Line 2564
	mov	ecx, DWORD PTR tv1300[ebp]
	mov	eax, DWORD PTR tv1354[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR tv1381[ebp]
	mov	ecx, DWORD PTR [ecx]
	shl	eax, 5
	movzx	eax, WORD PTR _Results$[ebp+eax]
	shl	ecx, 3
	shr	ecx, 3
	sub	eax, ecx
	mov	DWORD PTR _TempValue$[ebp], eax
; Line 2571
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN4@ReceiveEna@2:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1300[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL5@ReceiveEna@2
; Line 2576
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ReceiveEnableDramEntryExit
	add	esp, 16					; 00000010H
$LN8@ReceiveEna@2:
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv1354[ebp], 18		; 00000012H
	add	DWORD PTR tv1381[ebp], 4
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL9@ReceiveEna@2
$LN7@ReceiveEna@2:
; Line 2392
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL44@ReceiveEna@2
; Line 2584
	jmp	SHORT $LN46@ReceiveEna@2
$LN68@ReceiveEna@2:
; Line 2533
	movzx	eax, BYTE PTR _ChannelBackup$[ebp]
; Line 2535
	push	DWORD PTR _ChannelBackup$[ebp]
	imul	eax, 4336				; 000010f0H
	lea	ecx, DWORD PTR [eax+esi]
	or	edx, -1
	lea	eax, DWORD PTR [ecx+58470]
	add	DWORD PTR [eax], edx
	push	65535					; 0000ffffH
	push	14170					; 0000375aH
	adc	DWORD PTR [eax+4], edx
	lea	eax, DWORD PTR [ecx+58478]
	add	DWORD PTR [eax], edx
	push	esi
	adc	DWORD PTR [eax+4], edx
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN46@ReceiveEna@2:
; Line 2584
	cmp	BYTE PTR _DecreaseRdCmd2RcvEn$[ebp], 1
	je	$LL47@ReceiveEna@2
; Line 2609
	push	1
	push	edi
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_AverageGroups
	add	esp, 16					; 00000010H
	jmp	SHORT $LN51@ReceiveEna@2
$LN67@ReceiveEna@2:
; Line 2490
	mov	DWORD PTR [esi+65333], 44		; 0000002cH
; Line 2491
	call	_MrcDeadLoop
; Line 2492
	or	eax, -1
	jmp	SHORT $LN54@ReceiveEna@2
$LN114@ReceiveEna@2:
; Line 2609
	mov	edi, 57344				; 0000e000H
$LN51@ReceiveEna@2:
; Line 2622
	push	ebx
	push	edi
	mov	edi, DWORD PTR _ChannelBackup$[ebp]
	push	edi
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 2627
	push	edi
	push	65535					; 0000ffffH
	push	14256					; 000037b0H
	push	esi
	call	_MmrcExecuteTask
; Line 2629
	push	edi
	push	esi
	call	_ReceiveEnableExit
; Line 2630
	mov	al, BYTE PTR tv678[ebp]
; Line 2632
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	200					; 000000c8H
	push	edi
	push	esi
	mov	BYTE PTR [esi+55506], al
	call	_TestMrcTrainingSteps
	add	esp, 68					; 00000044H
$LN127@ReceiveEna@2:
; Line 2636
	xor	eax, eax
$LN54@ReceiveEna@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 2637
	leave
	ret	0
_ReceiveEnable ENDP
_TEXT	ENDS
PUBLIC	_FineWriteLeveling
; Function compile flags: /Ogspy
;	COMDAT _FineWriteLeveling
_TEXT	SEGMENT
_Results$ = -1488					; size = 1152
_Dim1StartPoint$ = -336					; size = 144
_Low$ = -192						; size = 72
_High$ = -120						; size = 72
tv630 = -48						; size = 4
tv731 = -44						; size = 4
_NumberElements$ = -40					; size = 2
tv634 = -36						; size = 4
tv898 = -32						; size = 4
tv857 = -28						; size = 4
tv727 = -28						; size = 4
tv486 = -21						; size = 1
_TempValue$ = -20					; size = 4
tv885 = -16						; size = 4
tv786 = -16						; size = 4
_ChannelBackup$ = -12					; size = 1
_Strobe$ = -8						; size = 1
_Rank$ = -4						; size = 1
tv810 = 8						; size = 4
tv675 = 8						; size = 4
_MrcData$ = 8						; size = 4
_ExecuteMode$43609 = 11					; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_FineWriteLeveling PROC					; COMDAT
; Line 4198
	push	ebp
	mov	ebp, esp
	sub	esp, 1488				; 000005d0H
; Line 4212
	mov	al, BYTE PTR _Channel$[ebp]
	push	esi
; Line 4214
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+71016], 0
	mov	BYTE PTR _ChannelBackup$[ebp], al
; Line 4216
	jne	$LN65@FineWriteL@2
; Line 4227
	mov	al, BYTE PTR [esi+55506]
	mov	BYTE PTR tv486[ebp], al
; Line 4231
	test	al, 4
	je	SHORT $LN34@FineWriteL@2
; Line 4232
	or	al, 32					; 00000020H
	mov	BYTE PTR [esi+55506], al
$LN34@FineWriteL@2:
	push	ebx
	push	edi
; Line 4239
	push	DWORD PTR _Channel$[ebp]
	mov	edi, 65535				; 0000ffffH
	push	edi
	mov	eax, 20522				; 0000502aH
	push	14303					; 000037dfH
	push	esi
	mov	WORD PTR [esi+65548], ax
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 4241
	cmp	BYTE PTR [esi+65337], 0
	jne	$LN61@FineWriteL@2
; Line 4243
	mov	BYTE PTR [esi+65583], 1
; Line 4244
	mov	BYTE PTR [esi+65582], 0
	jmp	SHORT $LN66@FineWriteL@2
$LL59@FineWriteL@2:
; Line 4246
	push	3
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_CpgcSetup
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Channel$[ebp]
$LN66@FineWriteL@2:
; Line 4245
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL59@FineWriteL@2
; Line 4258
	movzx	ecx, BYTE PTR _ChannelBackup$[ebp]
	mov	eax, ecx
	imul	eax, 4336				; 000010f0H
	add	eax, esi
	xor	ebx, ebx
	mov	BYTE PTR _Rank$[ebp], 0
	mov	DWORD PTR tv630[ebp], ecx
	mov	DWORD PTR tv634[ebp], eax
	mov	DWORD PTR tv898[ebp], ebx
	jmp	SHORT $LN29@FineWriteL@2
$LL64@FineWriteL@2:
	mov	ecx, DWORD PTR tv630[ebp]
	mov	eax, DWORD PTR tv634[ebp]
$LN29@FineWriteL@2:
; Line 4264
	mov	dl, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], dl
	cmp	dl, 2
	jae	$LN60@FineWriteL@2
	mov	edi, ecx
	imul	edi, 18					; 00000012H
	lea	eax, DWORD PTR _NumberElements$[ebp+ecx]
	mov	DWORD PTR tv727[ebp], eax
	mov	eax, DWORD PTR tv898[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+esi+55454]
	mov	DWORD PTR tv731[ebp], edi
	mov	DWORD PTR tv786[ebp], eax
$LL62@FineWriteL@2:
; Line 4266
	push	DWORD PTR _Rank$[ebp]
	mov	eax, DWORD PTR tv786[ebp]
	mov	ebx, DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR [eax]
	mov	ecx, DWORD PTR tv727[ebp]
	push	ebx
	push	esi
	mov	BYTE PTR [ecx], al
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN23@FineWriteL@2
; Line 4274
	mov	al, BYTE PTR _Rank$[ebp]
; Line 4276
	push	ebx
	push	esi
	mov	BYTE PTR [esi+65585], al
	mov	BYTE PTR [esi+65570], 0
	call	_CpgcReconfig
; Line 4281
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_FineWriteLevelingDramEntryExit
	add	esp, 24					; 00000018H
	and	DWORD PTR tv675[ebp], 0
; Line 4298
	mov	BYTE PTR _Strobe$[ebp], 0
$LL63@FineWriteL@2:
; Line 4299
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN19@FineWriteL@2
; Line 4302
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	19					; 00000013H
	push	57384					; 0000e028H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 4309
	push	ebx
	push	esi
	call	_GetHalfClk
	add	ax, ax
	movzx	eax, ax
	add	DWORD PTR _TempValue$[ebp], eax
; Line 4310
	mov	eax, DWORD PTR tv675[ebp]
	add	edi, eax
	mov	ax, WORD PTR _TempValue$[ebp]
; Line 4311
	push	ebx
	push	esi
	mov	WORD PTR _Dim1StartPoint$[ebp+edi*4], ax
	call	_GetHalfClk
	add	ax, 5
	add	ax, ax
	add	ax, WORD PTR _TempValue$[ebp]
; Line 4313
	push	ebx
	mov	WORD PTR _Dim1StartPoint$[ebp+edi*4+2], ax
	xor	eax, eax
	add	edi, edi
	push	esi
	mov	WORD PTR _Low$[ebp+edi], ax
	call	_GetHalfClk
	add	ax, ax
	add	esp, 52					; 00000034H
	add	ax, WORD PTR _TempValue$[ebp]
	mov	WORD PTR _High$[ebp+edi], ax
	mov	edi, DWORD PTR tv731[ebp]
$LN19@FineWriteL@2:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv675[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL63@FineWriteL@2
; Line 4318
	push	1
	push	ebx
	push	esi
	call	_WriteLevelingMode
	add	esp, 12					; 0000000cH
$LN23@FineWriteL@2:
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv786[ebp], 4
	add	edi, 18					; 00000012H
	inc	DWORD PTR tv727[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv731[ebp], edi
	jb	$LL62@FineWriteL@2
	mov	eax, DWORD PTR tv634[ebp]
	xor	ebx, ebx
	mov	edi, 65535				; 0000ffffH
$LN60@FineWriteL@2:
; Line 4328
	mov	ecx, DWORD PTR tv898[ebp]
	sub	ecx, ebx
	je	SHORT $LN14@FineWriteL@2
	dec	ecx
	je	SHORT $LN13@FineWriteL@2
	dec	ecx
	je	SHORT $LN12@FineWriteL@2
	dec	ecx
; Line 4343
	jne	SHORT $LN14@FineWriteL@2
	mov	ecx, DWORD PTR [eax+56014]
	mov	DWORD PTR [eax+58542], ecx
	mov	ecx, DWORD PTR [eax+56018]
	jmp	SHORT $LN67@FineWriteL@2
$LN12@FineWriteL@2:
; Line 4336
	mov	ecx, DWORD PTR [eax+56022]
	mov	DWORD PTR [eax+58542], ecx
	mov	ecx, DWORD PTR [eax+56026]
; Line 4337
	jmp	SHORT $LN67@FineWriteL@2
$LN13@FineWriteL@2:
; Line 4333
	mov	ecx, DWORD PTR [eax+56030]
	mov	DWORD PTR [eax+58542], ecx
	mov	ecx, DWORD PTR [eax+56034]
; Line 4334
	jmp	SHORT $LN67@FineWriteL@2
$LN14@FineWriteL@2:
; Line 4330
	mov	ecx, DWORD PTR [eax+56038]
	mov	DWORD PTR [eax+58542], ecx
	mov	ecx, DWORD PTR [eax+56042]
$LN67@FineWriteL@2:
; Line 4346
	push	DWORD PTR _ChannelBackup$[ebp]
	mov	DWORD PTR [eax+58546], ecx
	push	edi
	push	14442					; 0000386aH
	push	esi
	call	_MmrcExecuteTask
; Line 4352
	push	1
	push	4
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _SampleDqs
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	ebx
	push	1
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	57358					; 0000e00eH
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_Create1DSweep
; Line 4354
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 88					; 00000058H
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN7@FineWriteL@2
	mov	eax, DWORD PTR tv630[ebp]
	imul	eax, 18					; 00000012H
	mov	DWORD PTR tv857[ebp], eax
	mov	eax, DWORD PTR tv634[ebp]
	add	eax, 58534				; 0000e4a6H
	mov	DWORD PTR tv885[ebp], eax
$LL9@FineWriteL@2:
; Line 4355
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN8@FineWriteL@2
; Line 4361
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv810[ebp], ebx
$LL5@FineWriteL@2:
; Line 4362
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN4@FineWriteL@2
; Line 4365
	mov	ecx, DWORD PTR tv810[ebp]
	mov	eax, DWORD PTR tv857[ebp]
	add	eax, ecx
	shl	eax, 5
	movzx	eax, WORD PTR _Results$[ebp+eax]
	mov	DWORD PTR _TempValue$[ebp], eax
; Line 4366
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	57358					; 0000e00eH
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN4@FineWriteL@2:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv810[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL5@FineWriteL@2
; Line 4371
	mov	al, BYTE PTR [esi+55508]
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR _ExecuteMode$43609[ebp], al
	mov	eax, DWORD PTR tv885[ebp]
	push	edi
	mov	BYTE PTR [esi+55508], 0
	push	14420					; 00003854H
	push	esi
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	call	_MmrcExecuteTask
	mov	al, BYTE PTR _ExecuteMode$43609[ebp]
; Line 4375
	push	ebx
	push	DWORD PTR _Rank$[ebp]
	mov	BYTE PTR [esi+55508], al
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_FineWriteLevelingDramEntryExit
	add	esp, 32					; 00000020H
$LN8@FineWriteL@2:
	inc	BYTE PTR _Channel$[ebp]
	add	DWORD PTR tv857[ebp], 18		; 00000012H
	add	DWORD PTR tv885[ebp], 4336		; 000010f0H
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL9@FineWriteL@2
$LN7@FineWriteL@2:
; Line 4385
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	push	14480					; 00003890H
	push	esi
	call	_MmrcExecuteTask
; Line 4389
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 16					; 00000010H
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv898[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	mov	BYTE PTR _Channel$[ebp], al
	jb	$LL64@FineWriteL@2
; Line 4258
	jmp	SHORT $LN27@FineWriteL@2
$LN61@FineWriteL@2:
	xor	ebx, ebx
$LN27@FineWriteL@2:
; Line 4395
	push	ebx
	push	57358					; 0000e00eH
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 4400
	push	DWORD PTR _Channel$[ebp]
	push	edi
	push	14384					; 00003830H
	push	esi
	call	_MmrcExecuteTask
; Line 4402
	mov	al, BYTE PTR tv486[ebp]
; Line 4404
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	201					; 000000c9H
	push	DWORD PTR _ChannelBackup$[ebp]
	mov	BYTE PTR [esi+55506], al
	push	esi
	call	_TestMrcTrainingSteps
	add	esp, 60					; 0000003cH
	pop	edi
	pop	ebx
$LN65@FineWriteL@2:
; Line 4408
	xor	eax, eax
	pop	esi
; Line 4409
	leave
	ret	0
_FineWriteLeveling ENDP
_TEXT	ENDS
PUBLIC	_CoarseWLTest
; Function compile flags: /Ogspy
;	COMDAT _CoarseWLTest
_TEXT	SEGMENT
_Results$ = -1460					; size = 1152
_Dim1StartPoint$ = -308					; size = 144
_Dim1Max$ = -164					; size = 72
_Dim1Min$ = -92						; size = 72
tv559 = -20						; size = 4
tv558 = -16						; size = 4
_Center$ = -12						; size = 4
tv495 = -8						; size = 4
_DQValue$ = -4						; size = 4
_Element$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_AllPassFlag$ = 15					; size = 1
_Rank$ = 16						; size = 1
_NumberElements$ = 20					; size = 4
_NumberKnobs$ = 24					; size = 1
_PassFail$ = 28						; size = 4
_CoarseWLTest PROC					; COMDAT
; Line 4666
	push	ebp
	mov	ebp, esp
; Line 4684
	movzx	ecx, BYTE PTR _Rank$[ebp]
	sub	esp, 1460				; 000005b4H
	push	ebx
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	movzx	eax, bl
	add	ecx, esi
	cmp	BYTE PTR [ecx+eax*4+55438], 0
; Line 4685
	je	$LN42@CoarseWLTe
; Line 4713
	mov	cl, BYTE PTR [eax+esi+31272]
	cmp	cl, 7
	je	SHORT $LN21@CoarseWLTe
	cmp	cl, 3
	ja	$LN2@CoarseWLTe
$LN21@CoarseWLTe:
; Line 4717
	mov	ecx, DWORD PTR _NumberElements$[ebp]
	push	edi
	lea	edi, DWORD PTR [eax+ecx]
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Element$[ebp], 0
	mov	DWORD PTR tv495[ebp], edi
	jbe	$LN38@CoarseWLTe
$LL37@CoarseWLTe:
; Line 4718
	push	0
	push	0
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN19@CoarseWLTe
; Line 4724
	lea	eax, DWORD PTR _DQValue$[ebp]
	push	eax
	push	19					; 00000013H
	push	57358					; 0000e00eH
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	movzx	ecx, BYTE PTR _Element$[ebp]
	movzx	eax, bl
	imul	eax, 18					; 00000012H
; Line 4726
	push	ebx
	push	esi
	lea	edi, DWORD PTR [eax+ecx]
	call	_GetHalfClk
	mov	cx, WORD PTR _DQValue$[ebp]
	sub	cx, ax
; Line 4727
	push	ebx
	push	esi
	mov	WORD PTR _Dim1Min$[ebp+edi*2], cx
	call	_GetHalfClk
	add	ax, WORD PTR _DQValue$[ebp]
; Line 4728
	push	ebx
	mov	WORD PTR _Dim1Max$[ebp+edi*2], ax
	push	esi
	shl	edi, 2
	call	_GetHalfClk
	mov	cx, WORD PTR _DQValue$[ebp]
	sub	cx, ax
; Line 4729
	push	ebx
	push	esi
	mov	WORD PTR _Dim1StartPoint$[ebp+edi], cx
	call	_GetHalfClk
	add	esp, 60					; 0000003cH
	add	ax, WORD PTR _DQValue$[ebp]
	mov	WORD PTR _Dim1StartPoint$[ebp+edi+2], ax
	mov	edi, DWORD PTR tv495[ebp]
$LN19@CoarseWLTe:
	inc	BYTE PTR _Element$[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	$LL37@CoarseWLTe
$LN38@CoarseWLTe:
; Line 4735
	mov	al, BYTE PTR [esi+55506]
	test	al, 4
	je	SHORT $LN13@CoarseWLTe
; Line 4736
	and	al, 223					; 000000dfH
	mov	BYTE PTR [esi+55506], al
$LN13@CoarseWLTe:
; Line 4753
	push	1
	push	5
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	OFFSET _CpgcExecuteRmtTest
	push	DWORD PTR _NumberElements$[ebp]
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	push	2
	lea	eax, DWORD PTR _Dim1Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1Min$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	16387					; 00004003H
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_Create1DSweep
; Line 4757
	mov	al, BYTE PTR [esi+55506]
	add	esp, 72					; 00000048H
	test	al, 4
	je	SHORT $LN12@CoarseWLTe
; Line 4758
	or	al, 32					; 00000020H
	mov	BYTE PTR [esi+55506], al
$LN12@CoarseWLTe:
; Line 4762
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _AllPassFlag$[ebp], 1
	mov	BYTE PTR _Element$[ebp], 0
	jbe	$LN36@CoarseWLTe
$LL11@CoarseWLTe:
; Line 4763
	push	0
	push	0
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN10@CoarseWLTe
; Line 4766
	movzx	ecx, BYTE PTR _Element$[ebp]
	movzx	eax, bl
	imul	eax, 18					; 00000012H
	lea	edi, DWORD PTR [eax+ecx]
	mov	eax, edi
	shl	eax, 5
	movzx	ecx, WORD PTR _Results$[ebp+eax+2]
	movzx	eax, WORD PTR _Results$[ebp+eax]
	mov	DWORD PTR tv558[ebp], ecx
	mov	DWORD PTR tv559[ebp], eax
	cmp	cx, ax
	jbe	SHORT $LN39@CoarseWLTe
	push	ebx
	push	esi
	call	_GetHalfClk
	movzx	edx, WORD PTR tv558[ebp]
	pop	ecx
	pop	ecx
	movzx	ecx, WORD PTR tv559[ebp]
	movzx	eax, ax
	shr	eax, 3
	sub	edx, ecx
	cmp	edx, eax
	jle	SHORT $LN39@CoarseWLTe
; Line 4767
	mov	eax, DWORD PTR _PassFail$[ebp]
	imul	edi, 24					; 00000018H
	mov	BYTE PTR [edi+eax], 0
; Line 4768
	jmp	SHORT $LN43@CoarseWLTe
$LN39@CoarseWLTe:
; Line 4769
	mov	eax, DWORD PTR _PassFail$[ebp]
	imul	edi, 24					; 00000018H
	mov	BYTE PTR [edi+eax], 1
; Line 4770
	mov	BYTE PTR _AllPassFlag$[ebp], 0
$LN43@CoarseWLTe:
	mov	edi, DWORD PTR tv495[ebp]
$LN10@CoarseWLTe:
; Line 4762
	inc	BYTE PTR _Element$[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	$LL11@CoarseWLTe
; Line 4773
	cmp	BYTE PTR _AllPassFlag$[ebp], 1
	jne	$LN41@CoarseWLTe
$LN36@CoarseWLTe:
; Line 4774
	cmp	BYTE PTR [edi], 0
	mov	BYTE PTR _Element$[ebp], 0
	jbe	SHORT $LN41@CoarseWLTe
$LL4@CoarseWLTe:
; Line 4775
	push	0
	push	0
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN3@CoarseWLTe
; Line 4778
	movzx	eax, BYTE PTR _Element$[ebp]
	movzx	ecx, bl
	imul	ecx, 18					; 00000012H
	add	ecx, eax
	shl	ecx, 5
	movzx	eax, WORD PTR _Results$[ebp+ecx+2]
	movzx	ecx, WORD PTR _Results$[ebp+ecx]
	add	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Center$[ebp], eax
; Line 4780
	lea	eax, DWORD PTR _Center$[ebp]
	push	eax
	push	24					; 00000018H
	push	57359					; 0000e00fH
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 4781
	lea	eax, DWORD PTR _Center$[ebp]
	push	eax
	push	24					; 00000018H
	push	12308					; 00003014H
	push	DWORD PTR _Element$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
$LN3@CoarseWLTe:
	inc	BYTE PTR _Element$[ebp]
	mov	al, BYTE PTR _Element$[ebp]
	cmp	al, BYTE PTR [edi]
	jb	SHORT $LL4@CoarseWLTe
$LN41@CoarseWLTe:
	pop	edi
$LN2@CoarseWLTe:
; Line 4790
	push	ebx
	push	65535					; 0000ffffH
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN42@CoarseWLTe:
	pop	esi
; Line 4792
	xor	eax, eax
	pop	ebx
; Line 4793
	leave
	ret	0
_CoarseWLTest ENDP
_TEXT	ENDS
PUBLIC	_CtleTunning
; Function compile flags: /Ogspy
;	COMDAT _CtleTunning
_TEXT	SEGMENT
_BestCoef$ = -124					; size = 144
_TotalMarginRx$ = 20					; size = 36
_RmtFlag$ = 56						; size = 4
tv736 = 60						; size = 4
tv555 = 64						; size = 4
tv869 = 68						; size = 4
tv839 = 68						; size = 4
tv965 = 72						; size = 4
tv777 = 72						; size = 4
tv938 = 76						; size = 4
tv827 = 76						; size = 4
tv848 = 80						; size = 4
tv829 = 80						; size = 4
_DebugFlag$ = 87					; size = 1
_Bias$ = 88						; size = 4
_Cap$ = 92						; size = 4
_Rank$ = 96						; size = 1
_Strobe$ = 100						; size = 1
_MrcData$ = 112						; size = 4
_RmtEnFlag$ = 115					; size = 1
_CapsuleStartIndex$ = 116				; size = 2
_StringIndex$ = 120					; size = 2
_Channel$ = 124						; size = 1
_CtleTunning PROC					; COMDAT
; Line 6290
	push	ebp
	lea	ebp, DWORD PTR [esp-104]
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
; Line 6306
	push	9
	pop	ecx
	xor	eax, eax
	lea	edi, DWORD PTR _TotalMarginRx$[ebp]
; Line 6307
	push	72					; 00000048H
	rep stosd
	xor	ebx, ebx
	lea	eax, DWORD PTR _BestCoef$[ebp]
	push	ebx
	push	eax
	call	_memset
; Line 6308
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	288					; 00000120H
	lea	eax, DWORD PTR [esi+65006]
	push	-1
	push	eax
	call	_MmrcMemset
; Line 6310
	movzx	edi, BYTE PTR _Channel$[ebp]
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [edi+esi+31272], 7
	mov	DWORD PTR tv555[ebp], edi
	jne	$LN35@CtleTunnin
	cmp	BYTE PTR [edi+esi+28608], bl
	je	$LN35@CtleTunnin
; Line 6313
	mov	al, BYTE PTR [esi+55506]
	mov	BYTE PTR _DebugFlag$[ebp], al
; Line 6314
	cmp	BYTE PTR [esi+65337], bl
	jne	$LN77@CtleTunnin
; Line 6315
	mov	eax, DWORD PTR [esi+65340]
	mov	DWORD PTR _RmtFlag$[ebp], eax
; Line 6316
	mov	al, BYTE PTR [esi+65339]
	mov	BYTE PTR _RmtEnFlag$[ebp], al
; Line 6320
	mov	al, BYTE PTR [esi+65346]
	inc	al
	mov	BYTE PTR [esi+65583], al
; Line 6321
	mov	al, BYTE PTR [esi+65347]
	mov	BYTE PTR [esi+65582], al
; Line 6326
	mov	eax, edi
	imul	eax, 72					; 00000048H
	mov	BYTE PTR [esi+65339], 1
	mov	DWORD PTR [esi+65340], 16		; 00000010H
	mov	BYTE PTR [esi+65570], 2
	mov	BYTE PTR [esi+55506], bl
	mov	DWORD PTR _Cap$[ebp], ebx
; Line 6346
	mov	DWORD PTR tv839[ebp], eax
$LL69@CtleTunnin:
; Line 6327
	mov	DWORD PTR _Bias$[ebp], 5
$LL70@CtleTunnin:
; Line 6328
	mov	BYTE PTR _Rank$[ebp], bl
$LL71@CtleTunnin:
; Line 6329
	mov	BYTE PTR _Strobe$[ebp], bl
$LL72@CtleTunnin:
; Line 6330
	lea	eax, DWORD PTR _Bias$[ebp]
	push	eax
	push	24					; 00000018H
	push	20481					; 00005001H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6331
	lea	eax, DWORD PTR _Cap$[ebp]
	push	eax
	push	24					; 00000018H
	push	20482					; 00005002H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6332
	lea	eax, DWORD PTR _Cap$[ebp]
	push	eax
	push	24					; 00000018H
	push	20483					; 00005003H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 9
	jb	SHORT $LL72@CtleTunnin
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL71@CtleTunnin
; Line 6335
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SearchRmt
	mov	eax, DWORD PTR tv839[ebp]
	mov	DWORD PTR tv827[ebp], eax
	pop	ecx
	lea	eax, DWORD PTR [esi+edi*4+55438]
	pop	ecx
; Line 6336
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv777[ebp], ebx
	mov	DWORD PTR tv829[ebp], eax
$LL21@CtleTunnin:
; Line 6337
	mov	eax, DWORD PTR tv829[ebp]
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN20@CtleTunnin
; Line 6340
	mov	BYTE PTR _Strobe$[ebp], bl
	mov	DWORD PTR tv736[ebp], ebx
$LL17@CtleTunnin:
; Line 6341
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN16@CtleTunnin
; Line 6345
	mov	eax, DWORD PTR tv777[ebp]
	mov	edi, DWORD PTR tv736[ebp]
	mov	edx, DWORD PTR tv827[ebp]
	shr	eax, 1
	mov	ecx, eax
	imul	ecx, 9
	add	edx, edi
	movzx	edx, WORD PTR [esi+edx*2+65006]
	add	ecx, edi
	lea	ecx, DWORD PTR _TotalMarginRx$[ebp+ecx*2]
	cmp	WORD PTR [ecx], dx
	jg	SHORT $LN75@CtleTunnin
; Line 6347
	imul	eax, 18					; 00000012H
	mov	WORD PTR [ecx], dx
	mov	ecx, DWORD PTR _Bias$[ebp]
	add	eax, edi
	shl	eax, 2
	mov	DWORD PTR _BestCoef$[ebp+eax], ecx
; Line 6348
	mov	ecx, DWORD PTR _Cap$[ebp]
	mov	DWORD PTR _BestCoef$[ebp+eax+36], ecx
$LN75@CtleTunnin:
	mov	edi, DWORD PTR tv555[ebp]
$LN16@CtleTunnin:
; Line 6340
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv736[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 9
	jb	SHORT $LL17@CtleTunnin
$LN20@CtleTunnin:
; Line 6336
	add	BYTE PTR _Rank$[ebp], 2
	add	DWORD PTR tv777[ebp], 2
	add	DWORD PTR tv827[ebp], 36		; 00000024H
	add	DWORD PTR tv829[ebp], 2
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL21@CtleTunnin
	inc	DWORD PTR _Bias$[ebp]
	cmp	DWORD PTR _Bias$[ebp], 7
	jle	$LL70@CtleTunnin
	inc	DWORD PTR _Cap$[ebp]
	cmp	DWORD PTR _Cap$[ebp], 4
	jl	$LL69@CtleTunnin
; Line 6358
	mov	ecx, edi
	imul	ecx, 36					; 00000024H
	lea	eax, DWORD PTR _TotalMarginRx$[ebp+18]
	lea	ecx, DWORD PTR [ecx+esi+27064]
	mov	BYTE PTR _Strobe$[ebp], bl
	mov	DWORD PTR tv848[ebp], ebx
	mov	DWORD PTR tv938[ebp], eax
	mov	DWORD PTR tv965[ebp], ecx
	jmp	SHORT $LN12@CtleTunnin
$LL73@CtleTunnin:
	mov	edi, DWORD PTR tv555[ebp]
	mov	eax, DWORD PTR tv938[ebp]
$LN12@CtleTunnin:
; Line 6359
	movzx	ecx, WORD PTR [eax]
	cmp	WORD PTR [eax-18], cx
	jle	SHORT $LN9@CtleTunnin
	cmp	BYTE PTR [esi+edi*4+55440], bl
; Line 6360
	jne	SHORT $LN78@CtleTunnin
$LN9@CtleTunnin:
; Line 6361
	cmp	cx, bx
	jle	SHORT $LN7@CtleTunnin
	cmp	BYTE PTR [esi+edi*4+55440], bl
	je	SHORT $LN7@CtleTunnin
	lea	eax, DWORD PTR [esi+edi*4+55438]
	cmp	BYTE PTR [eax], bl
	jne	SHORT $LN7@CtleTunnin
$LN78@CtleTunnin:
; Line 6362
	mov	al, 1
; Line 6363
	jmp	SHORT $LN6@CtleTunnin
$LN7@CtleTunnin:
; Line 6364
	xor	al, al
$LN6@CtleTunnin:
; Line 6366
	movzx	edi, al
	imul	edi, 18					; 00000012H
	add	edi, DWORD PTR tv848[ebp]
	shl	edi, 2
	lea	eax, DWORD PTR _BestCoef$[ebp+edi]
	push	eax
	push	24					; 00000018H
	push	20481					; 00005001H
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR tv869[ebp], eax
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6367
	lea	edi, DWORD PTR _BestCoef$[ebp+edi+36]
	push	edi
	push	24					; 00000018H
	push	20482					; 00005002H
	push	DWORD PTR _Strobe$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6368
	push	edi
	push	24					; 00000018H
	push	20483					; 00005003H
	push	DWORD PTR _Strobe$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6372
	mov	eax, DWORD PTR tv869[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR tv965[ebp]
	add	DWORD PTR tv938[ebp], 2
	mov	DWORD PTR [eax-72], ecx
; Line 6373
	mov	ecx, DWORD PTR [edi]
	add	esp, 84					; 00000054H
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv848[ebp]
	mov	DWORD PTR [eax], ecx
	add	eax, 4
	cmp	BYTE PTR _Strobe$[ebp], 9
	mov	DWORD PTR tv965[ebp], eax
	jb	$LL73@CtleTunnin
; Line 6376
	mov	al, BYTE PTR _RmtEnFlag$[ebp]
	mov	BYTE PTR [esi+65339], al
; Line 6377
	mov	eax, DWORD PTR _RmtFlag$[ebp]
	mov	DWORD PTR [esi+65340], eax
; Line 6381
	mov	BYTE PTR [esi+71013], bl
; Line 6384
	cmp	BYTE PTR [esi+65337], bl
	je	$LN2@CtleTunnin
$LN77@CtleTunnin:
; Line 6388
	mov	DWORD PTR _Cap$[ebp], 1
; Line 6389
	mov	BYTE PTR _Strobe$[ebp], bl
	mov	edi, 20485				; 00005005H
$LL74@CtleTunnin:
; Line 6390
	push	ebx
	push	ebx
	push	DWORD PTR _Strobe$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN3@CtleTunnin
; Line 6392
	lea	eax, DWORD PTR _Bias$[ebp]
	push	eax
	push	3
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _Bias$[ebp], ebx
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6393
	lea	eax, DWORD PTR _Cap$[ebp]
	push	eax
	push	3
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6396
	lea	eax, DWORD PTR _Bias$[ebp]
	push	eax
	push	24					; 00000018H
	push	20481					; 00005001H
	push	DWORD PTR _Strobe$[ebp]
	mov	BYTE PTR [esi+55506], 1
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
; Line 6397
	lea	eax, DWORD PTR _Cap$[ebp]
	push	eax
	push	24					; 00000018H
	push	20482					; 00005002H
	push	DWORD PTR _Strobe$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6398
	lea	eax, DWORD PTR _Cap$[ebp]
	push	eax
	push	24					; 00000018H
	push	20483					; 00005003H
	push	DWORD PTR _Strobe$[ebp]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
$LN3@CtleTunnin:
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 9
	jb	$LL74@CtleTunnin
$LN2@CtleTunnin:
; Line 6401
	mov	al, BYTE PTR _DebugFlag$[ebp]
	mov	BYTE PTR [esi+55506], al
$LN35@CtleTunnin:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 6404
	add	ebp, 104				; 00000068H
	leave
	ret	0
_CtleTunning ENDP
_TEXT	ENDS
PUBLIC	_TxeqTunning
; Function compile flags: /Ogspy
;	COMDAT _TxeqTunning
_TEXT	SEGMENT
_RmtFlag$ = -40						; size = 4
tv785 = -36						; size = 4
tv632 = -32						; size = 4
tv347 = -28						; size = 4
_TotalMarginTx$ = -24					; size = 4
tv803 = -20						; size = 4
tv185 = -20						; size = 4
tv643 = -16						; size = 4
tv752 = -12						; size = 4
tv619 = -12						; size = 4
_TxeqCoef$ = -8						; size = 4
_DebugFlag$ = -2					; size = 1
_LowMargin$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_RmtEnFlag$ = 11					; size = 1
_Channel$ = 12						; size = 1
_TxeqTunning PROC					; COMDAT
; Line 6719
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
; Line 6733
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	xor	eax, eax
	lea	edi, DWORD PTR _TotalMarginTx$[ebp]
	stosd
	movzx	edi, BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR [edi+esi+31272], 7
	mov	DWORD PTR _TxeqCoef$[ebp], 1
	mov	BYTE PTR _LowMargin$[ebp], 0
	jne	$LN17@TxeqTunnin
	cmp	BYTE PTR [edi+esi+28608], al
	je	$LN17@TxeqTunnin
; Line 6737
	mov	eax, DWORD PTR [esi+65340]
	mov	DWORD PTR _RmtFlag$[ebp], eax
; Line 6738
	mov	al, BYTE PTR [esi+65339]
	mov	BYTE PTR _RmtEnFlag$[ebp], al
; Line 6742
	mov	al, BYTE PTR [esi+65346]
	add	al, 2
	mov	BYTE PTR [esi+65583], al
; Line 6743
	mov	al, BYTE PTR [esi+65347]
	push	ebx
; Line 6746
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR [esi+65582], al
	mov	al, BYTE PTR [esi+55506]
	push	esi
	mov	BYTE PTR [esi+65339], 1
	mov	DWORD PTR [esi+65340], 32		; 00000020H
	mov	BYTE PTR _DebugFlag$[ebp], al
	mov	BYTE PTR [esi+55506], 0
	call	_SearchRmt
	pop	ecx
	mov	ebx, edi
	pop	ecx
	xor	ecx, ecx
	imul	ebx, 56					; 00000038H
	lea	edi, DWORD PTR [esi+edi*4+55438]
	mov	eax, ebx
	mov	DWORD PTR tv632[ebp], edi
	mov	DWORD PTR tv619[ebp], edi
	mov	DWORD PTR tv185[ebp], 2
$LL16@TxeqTunnin:
; Line 6749
	mov	edx, DWORD PTR tv619[ebp]
	cmp	BYTE PTR [edx], 0
	je	SHORT $LN15@TxeqTunnin
; Line 6755
	movzx	edi, BYTE PTR _RmtTable+79
	movzx	edx, BYTE PTR _RmtTable+78
	add	edi, eax
	mov	di, WORD PTR [esi+edi*2+64782]
	add	edx, eax
	sub	di, WORD PTR [esi+edx*2+64782]
	mov	edx, ecx
	shr	edx, 1
	mov	WORD PTR _TotalMarginTx$[ebp+edx*2], di
$LN15@TxeqTunnin:
	push	2
	pop	edi
	add	DWORD PTR tv619[ebp], edi
	add	ecx, edi
	add	eax, 28					; 0000001cH
	dec	DWORD PTR tv185[ebp]
	jne	SHORT $LL16@TxeqTunnin
$LL12@TxeqTunnin:
; Line 6762
	lea	eax, DWORD PTR _TxeqCoef$[ebp]
	push	eax
	push	24					; 00000018H
	push	20515					; 00005023H
	push	0
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6763
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SearchRmt
	mov	eax, DWORD PTR tv632[ebp]
	add	esp, 36					; 00000024H
	and	DWORD PTR tv643[ebp], 0
	mov	DWORD PTR tv752[ebp], ebx
	mov	DWORD PTR tv803[ebp], eax
	mov	DWORD PTR tv347[ebp], edi
$LL9@TxeqTunnin:
; Line 6765
	mov	eax, DWORD PTR tv803[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN8@TxeqTunnin
	cmp	BYTE PTR _LowMargin$[ebp], 1
	je	SHORT $LN8@TxeqTunnin
; Line 6771
	movzx	eax, BYTE PTR _RmtTable+78
	add	eax, DWORD PTR tv752[ebp]
	mov	ecx, DWORD PTR tv643[ebp]
	movzx	edx, WORD PTR [esi+eax*2+64782]
	movzx	eax, BYTE PTR _RmtTable+79
	add	eax, DWORD PTR tv752[ebp]
	mov	DWORD PTR tv785[ebp], edx
	movzx	eax, WORD PTR [esi+eax*2+64782]
	movsx	edx, dx
	shr	ecx, 1
	movsx	edi, ax
	lea	ecx, DWORD PTR _TotalMarginTx$[ebp+ecx*2]
	sub	edi, edx
	movsx	edx, WORD PTR [ecx]
	cmp	edx, edi
	jle	SHORT $LN4@TxeqTunnin
; Line 6773
	dec	DWORD PTR _TxeqCoef$[ebp]
	mov	BYTE PTR _LowMargin$[ebp], 1
; Line 6774
	jmp	SHORT $LN8@TxeqTunnin
$LN4@TxeqTunnin:
; Line 6776
	sub	eax, DWORD PTR tv785[ebp]
	mov	WORD PTR [ecx], ax
$LN8@TxeqTunnin:
	add	DWORD PTR tv752[ebp], 28		; 0000001cH
	push	2
	pop	edi
	add	DWORD PTR tv643[ebp], edi
	add	DWORD PTR tv803[ebp], edi
	dec	DWORD PTR tv347[ebp]
	jne	SHORT $LL9@TxeqTunnin
; Line 6780
	cmp	BYTE PTR _LowMargin$[ebp], 0
	jne	SHORT $LN11@TxeqTunnin
; Line 6781
	inc	DWORD PTR _TxeqCoef$[ebp]
$LN11@TxeqTunnin:
; Line 6783
	cmp	DWORD PTR _TxeqCoef$[ebp], 8
	jg	SHORT $LN1@TxeqTunnin
	cmp	BYTE PTR _LowMargin$[ebp], 0
	je	$LL12@TxeqTunnin
$LN1@TxeqTunnin:
; Line 6785
	lea	eax, DWORD PTR _TxeqCoef$[ebp]
	push	eax
	push	24					; 00000018H
	push	20515					; 00005023H
	push	0
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6786
	mov	al, BYTE PTR _RmtEnFlag$[ebp]
	mov	BYTE PTR [esi+65339], al
; Line 6787
	mov	eax, DWORD PTR _RmtFlag$[ebp]
	mov	DWORD PTR [esi+65340], eax
; Line 6790
	mov	al, BYTE PTR _DebugFlag$[ebp]
	add	esp, 28					; 0000001cH
	mov	BYTE PTR [esi+55506], al
	pop	ebx
$LN17@TxeqTunnin:
	pop	edi
	xor	eax, eax
	pop	esi
; Line 6793
	leave
	ret	0
_TxeqTunning ENDP
_TEXT	ENDS
PUBLIC	_SearchRmtWrapper
; Function compile flags: /Ogspy
;	COMDAT _SearchRmtWrapper
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_BackupEnable$ = 11					; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_SearchRmtWrapper PROC					; COMDAT
; Line 7741
	push	ebp
	mov	ebp, esp
	push	esi
; Line 7744
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+55509]
	mov	BYTE PTR _BackupEnable$[ebp], al
; Line 7745
	mov	al, BYTE PTR [esi+65344]
	mov	BYTE PTR [esi+65583], al
; Line 7746
	mov	al, BYTE PTR [esi+65345]
	mov	BYTE PTR [esi+65582], al
; Line 7748
	mov	al, BYTE PTR [esi+65339]
	test	al, 16					; 00000010H
	je	SHORT $LN15@SearchRmtW
; Line 7749
	mov	cl, BYTE PTR [esi+65346]
	mov	BYTE PTR [esi+65583], cl
; Line 7750
	mov	cl, BYTE PTR [esi+65347]
	mov	BYTE PTR [esi+65582], cl
$LN15@SearchRmtW:
; Line 7753
	test	al, 4
	je	$LN12@SearchRmtW
	push	ebx
	push	edi
	mov	edi, 65535				; 0000ffffH
	mov	ebx, 15194				; 00003b5aH
$LL13@SearchRmtW:
; Line 7757
	push	0
	push	edi
	push	15175					; 00003b47H
	push	esi
	mov	BYTE PTR [esi+55509], 1
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LL11@SearchRmtW:
; Line 7759
	push	0
	push	edi
	push	ebx
	push	esi
	call	_MmrcExecuteTask
; Line 7760
	mov	eax, DWORD PTR [esi+58710]
	add	esp, 16					; 00000010H
	or	eax, DWORD PTR [esi+58714]
	je	SHORT $LL11@SearchRmtW
; Line 7764
	push	0
	push	edi
	push	ebx
	push	esi
	call	_MmrcExecuteTask
; Line 7765
	mov	al, BYTE PTR _BackupEnable$[ebp]
	add	esp, 16					; 00000010H
; Line 7766
	cmp	DWORD PTR [esi+58714], 0
	mov	BYTE PTR [esi+55509], al
	mov	eax, DWORD PTR [esi+58710]
	ja	SHORT $LL13@SearchRmtW
	jb	SHORT $LN20@SearchRmtW
	cmp	eax, 5
	ja	SHORT $LL13@SearchRmtW
$LN20@SearchRmtW:
	dec	eax
	je	SHORT $LN6@SearchRmtW
	dec	eax
	je	SHORT $LN5@SearchRmtW
	dec	eax
	je	SHORT $LN4@SearchRmtW
	dec	eax
	je	SHORT $LN3@SearchRmtW
	dec	eax
	jne	SHORT $LL13@SearchRmtW
; Line 7782
	mov	eax, DWORD PTR [esi+58718]
	mov	DWORD PTR [esi+65340], eax
; Line 7784
	jmp	SHORT $LL13@SearchRmtW
$LN3@SearchRmtW:
; Line 7779
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SearchRmt
	pop	ecx
	pop	ecx
; Line 7780
	jmp	$LL13@SearchRmtW
$LN5@SearchRmtW:
; Line 7772
	mov	al, BYTE PTR [esi+58718]
	mov	BYTE PTR [esi+65582], al
; Line 7774
	jmp	$LL13@SearchRmtW
$LN6@SearchRmtW:
; Line 7768
	mov	al, BYTE PTR [esi+58718]
	mov	BYTE PTR [esi+65583], al
; Line 7788
	jmp	$LL13@SearchRmtW
$LN4@SearchRmtW:
	pop	edi
; Line 7776
	xor	eax, eax
	pop	ebx
	jmp	SHORT $LN16@SearchRmtW
$LN12@SearchRmtW:
; Line 7791
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SearchRmt
	pop	ecx
	pop	ecx
$LN16@SearchRmtW:
	pop	esi
; Line 7792
	pop	ebp
	ret	0
_SearchRmtWrapper ENDP
_TEXT	ENDS
PUBLIC	_SampleAndVerifyCmdStress
; Function compile flags: /Ogspy
;	COMDAT _SampleAndVerifyCmdStress
_TEXT	SEGMENT
_LowLimit$ = -12					; size = 4
_HighLimit$ = -8					; size = 4
_FirstPass$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_SampleIndex$ = 11					; size = 1
_Channel$ = 12						; size = 1
_Mode$ = 16						; size = 1
_SafeValue$ = 20					; size = 4
_SampleAndVerifyCmdStress PROC				; COMDAT
; Line 8676
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 8689
	or	DWORD PTR _LowLimit$[ebp], -1
; Line 8690
	or	DWORD PTR _HighLimit$[ebp], -1
; Line 8691
	and	DWORD PTR _FirstPass$[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	bl, BYTE PTR [esi+55506]
	push	edi
; Line 8692
	mov	BYTE PTR _SampleIndex$[ebp], 0
$LL24@SampleAndV:
; Line 8693
	movzx	edi, BYTE PTR _SampleIndex$[ebp]
	push	DWORD PTR _Mode$[ebp]
	lea	edi, DWORD PTR _Samples[edi*4]
	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR _SafeValue$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_BlastCommandGroups
; Line 8694
	push	DWORD PTR _Mode$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ChangeCmdMode
; Line 8701
	movzx	eax, BYTE PTR [esi+65582]
	push	eax
	movzx	eax, BYTE PTR [esi+65583]
	push	eax
	push	0
	push	2
	push	7
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR [esi+55506], 0
	push	esi
	call	_TestMrcTrainingSteps
; Line 8703
	xor	ecx, ecx
	add	esp, 56					; 00000038H
	mov	BYTE PTR [esi+55506], bl
	cmp	eax, ecx
	je	SHORT $LN15@SampleAndV
; Line 8705
	movzx	eax, BYTE PTR _Channel$[ebp]
	imul	eax, 288				; 00000120H
	lea	edi, DWORD PTR [eax+esi+30752]
	movzx	eax, BYTE PTR [edi]
	push	eax
	push	DWORD PTR _SafeValue$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_BlastCommandGroups
; Line 8707
	movzx	eax, BYTE PTR [edi]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ChangeCmdMode
; Line 8709
	push	esi
	call	_ReInitializeDramsAcrossChannels
	add	esp, 32					; 00000020H
; Line 8710
	jmp	SHORT $LN17@SampleAndV
$LN15@SampleAndV:
; Line 8711
	cmp	DWORD PTR _FirstPass$[ebp], ecx
	jne	SHORT $LN13@SampleAndV
; Line 8712
	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR _SafeValue$[ebp]
	mov	DWORD PTR _FirstPass$[ebp], eax
$LN13@SampleAndV:
; Line 8714
	cmp	BYTE PTR _SampleIndex$[ebp], 0
	jne	SHORT $LN12@SampleAndV
; Line 8715
	mov	DWORD PTR _LowLimit$[ebp], ecx
; Line 8716
	mov	DWORD PTR _HighLimit$[ebp], ecx
	jmp	SHORT $LN17@SampleAndV
$LN12@SampleAndV:
; Line 8717
	cmp	BYTE PTR _SampleIndex$[ebp], 10		; 0000000aH
; Line 8718
	mov	eax, DWORD PTR [edi]
	ja	SHORT $LN10@SampleAndV
	mov	DWORD PTR _LowLimit$[ebp], eax
; Line 8719
	jmp	SHORT $LN17@SampleAndV
$LN10@SampleAndV:
; Line 8720
	mov	DWORD PTR _HighLimit$[ebp], eax
$LN17@SampleAndV:
; Line 8692
	inc	BYTE PTR _SampleIndex$[ebp]
	cmp	BYTE PTR _SampleIndex$[ebp], 21		; 00000015H
	jb	$LL24@SampleAndV
; Line 8728
	mov	edi, DWORD PTR _FirstPass$[ebp]
; Line 8729
	mov	edx, DWORD PTR _HighLimit$[ebp]
	mov	eax, edi
	sub	eax, DWORD PTR _SafeValue$[ebp]
	or	ebx, -1
	cmp	edx, ebx
	je	SHORT $LN8@SampleAndV
; Line 8730
	sub	edx, eax
$LN8@SampleAndV:
; Line 8732
	mov	ecx, DWORD PTR _LowLimit$[ebp]
	cmp	ecx, ebx
	je	SHORT $LN23@SampleAndV
; Line 8733
	sub	ecx, eax
; Line 8735
	cmp	ecx, ebx
	je	SHORT $LN23@SampleAndV
	cmp	edx, ebx
	je	SHORT $LN6@SampleAndV
; Line 8736
	lea	eax, DWORD PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, edi
	jmp	SHORT $LN1@SampleAndV
$LN6@SampleAndV:
; Line 8738
	lea	eax, DWORD PTR [ecx+edi*2]
	jmp	SHORT $LN25@SampleAndV
$LN23@SampleAndV:
; Line 8739
	cmp	edx, ebx
	je	SHORT $LN2@SampleAndV
; Line 8740
	lea	eax, DWORD PTR [edx+edi*2]
$LN25@SampleAndV:
	shr	eax, 1
$LN1@SampleAndV:
; Line 8746
	push	DWORD PTR _Mode$[ebp]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_BlastCommandGroups
	add	esp, 16					; 00000010H
; Line 8749
	xor	eax, eax
	jmp	SHORT $LN19@SampleAndV
$LN2@SampleAndV:
; Line 8743
	mov	eax, ebx
$LN19@SampleAndV:
	pop	edi
	pop	esi
	pop	ebx
; Line 8750
	leave
	ret	0
_SampleAndVerifyCmdStress ENDP
_TEXT	ENDS
PUBLIC	_SweepCenterEye2D
; Function compile flags: /Ogspy
;	COMDAT _SweepCenterEye2D
_TEXT	SEGMENT
_Results$ = -110744					; size = 110592
_Dim2Max$ = -152					; size = 72
_Dim1Min$ = -80						; size = 72
_Dim2Min$ = -8						; size = 72
_Dim1Max$ = -8						; size = 72
_ConsolidateFlag$ = 64					; size = 1
_MrcData$ = 76						; size = 4
_Channel$ = 80						; size = 1
_Rank$ = 84						; size = 1
_Dim1Index$ = 88					; size = 2
_Dim1Start$ = 92					; size = 2
_Dim1End$ = 96						; size = 2
_Dim1Step$ = 100					; size = 2
_Dim1Flag$ = 104					; size = 1
_Dim2Index$ = 108					; size = 2
_Dim2Start$ = 112					; size = 2
_Dim2End$ = 116						; size = 2
_Dim2Step$ = 120					; size = 2
_Dim2Flag$ = 124					; size = 1
_SweepCenterEye2D PROC					; COMDAT
; Line 11367
	push	ebp
	lea	ebp, DWORD PTR [esp-68]
	sub	esp, 110812				; 0001b0dcH
	push	ebx
	push	esi
	push	edi
; Line 11377
	push	110592					; 0001b000H
	lea	eax, DWORD PTR _Results$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
; Line 11378
	mov	al, BYTE PTR _Dim2Flag$[ebp]
; Line 11386
	mov	esi, DWORD PTR _Rank$[ebp]
	mov	edi, DWORD PTR _Channel$[ebp]
	mov	ebx, DWORD PTR _MrcData$[ebp]
	shr	al, 2
	and	al, 1
	mov	BYTE PTR _ConsolidateFlag$[ebp], al
	lea	eax, DWORD PTR _Dim1Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1Min$[ebp]
	push	eax
	push	DWORD PTR _Dim1Flag$[ebp]
	push	DWORD PTR _Dim1End$[ebp]
	push	DWORD PTR _Dim1Start$[ebp]
	push	DWORD PTR _Dim1Index$[ebp]
	push	esi
	push	edi
	push	ebx
	call	_GetMinMaxRelativeAbsolute
; Line 11387
	lea	eax, DWORD PTR _Dim2Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim2Min$[ebp]
	push	eax
	push	DWORD PTR _Dim2Flag$[ebp]
	push	DWORD PTR _Dim2End$[ebp]
	push	DWORD PTR _Dim2Start$[ebp]
	push	DWORD PTR _Dim2Index$[ebp]
	push	esi
	push	edi
	push	ebx
	call	_GetMinMaxRelativeAbsolute
	add	esp, 84					; 00000054H
; Line 11390
	push	DWORD PTR _Dim2Flag$[ebp]
	lea	eax, DWORD PTR _Results$[ebp]
	push	DWORD PTR _Dim2Step$[ebp]
	push	DWORD PTR _Dim2End$[ebp]
	push	DWORD PTR _Dim2Start$[ebp]
	push	DWORD PTR _Dim2Index$[ebp]
	push	DWORD PTR _Dim1Flag$[ebp]
	push	DWORD PTR _Dim1Step$[ebp]
	push	DWORD PTR _Dim1End$[ebp]
	push	DWORD PTR _Dim1Start$[ebp]
	push	1
	push	DWORD PTR _Dim1Index$[ebp]
	push	esi
	push	edi
	push	eax
	push	ebx
	call	_Create2DSweep
; Line 11394
	push	DWORD PTR _ConsolidateFlag$[ebp]
	lea	eax, DWORD PTR _Dim2Min$[ebp]
	push	DWORD PTR _Dim2Step$[ebp]
	push	eax
	push	DWORD PTR _Dim2Index$[ebp]
	lea	eax, DWORD PTR _Dim1Min$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Dim1Index$[ebp]
	lea	eax, DWORD PTR _Results$[ebp]
	push	esi
	push	edi
	push	eax
	push	ebx
	call	_Center2D
	add	esp, 104				; 00000068H
; Line 11395
	push	DWORD PTR _Dim2Step$[ebp]
	lea	eax, DWORD PTR _Dim2Min$[ebp]
	push	eax
	push	DWORD PTR _Dim2Index$[ebp]
	lea	eax, DWORD PTR _Dim1Min$[ebp]
	push	DWORD PTR _Dim1Step$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Dim1Index$[ebp]
	lea	eax, DWORD PTR _Results$[ebp]
	push	esi
	push	edi
	push	eax
	push	ebx
	call	_Create2DEye
	add	esp, 44					; 0000002cH
	pop	edi
	pop	esi
; Line 11397
	xor	eax, eax
	pop	ebx
; Line 11398
	add	ebp, 68					; 00000044H
	leave
	ret	0
_SweepCenterEye2D ENDP
_TEXT	ENDS
PUBLIC	_TestRankMrcTrainingSteps
; Function compile flags: /Ogspy
;	COMDAT _TestRankMrcTrainingSteps
_TEXT	SEGMENT
_RankBackup$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_SetupType$ = 20					; size = 1
_CmdSequence$ = 24					; size = 1
_PostTestFlag$ = 28					; size = 2
_LoopCount$ = 32					; size = 1
_NumBurst$ = 36						; size = 1
_TestRankMrcTrainingSteps PROC				; COMDAT
; Line 12020
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 12025
	movzx	ecx, BYTE PTR _Channel$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	edi
	lea	edi, DWORD PTR [esi+ecx*4+55438]
	xor	dl, dl
	lea	eax, DWORD PTR _RankBackup$[ebp]
	mov	ecx, edi
$LL8@TestRankMr:
; Line 12026
	mov	bl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], bl
; Line 12027
	cmp	dl, BYTE PTR _Rank$[ebp]
	je	SHORT $LN7@TestRankMr
; Line 12028
	mov	BYTE PTR [ecx], 0
$LN7@TestRankMr:
; Line 12025
	inc	dl
	inc	eax
	inc	ecx
	cmp	dl, 4
	jb	SHORT $LL8@TestRankMr
; Line 12034
	push	DWORD PTR _NumBurst$[ebp]
	push	DWORD PTR _LoopCount$[ebp]
	push	DWORD PTR _PostTestFlag$[ebp]
	push	DWORD PTR _CmdSequence$[ebp]
	push	DWORD PTR _SetupType$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TestMrcTrainingSteps
	add	esp, 28					; 0000001cH
; Line 12037
	lea	esi, DWORD PTR _RankBackup$[ebp]
	movsd
	pop	edi
	pop	esi
	pop	ebx
; Line 12044
	leave
	ret	0
_TestRankMrcTrainingSteps ENDP
_TEXT	ENDS
PUBLIC	_CompleteSweep
; Function compile flags: /Ogspy
;	COMDAT _CompleteSweep
_TEXT	SEGMENT
_ResultsTemp$ = -4632					; size = 4608
_ParalellCh$ = -24					; size = 1
_RunType$ = -20						; size = 1
tv1655 = -16						; size = 4
tv1212 = -16						; size = 4
tv1030 = -16						; size = 4
tv1864 = -12						; size = 4
tv1334 = -12						; size = 4
tv1032 = -12						; size = 4
tv747 = -12						; size = 4
_NumberElements$ = -8					; size = 2
_Channel$ = -4						; size = 1
_MrcData$ = 8						; size = 4
tv871 = 11						; size = 1
_Rank$ = 12						; size = 1
_ControlKnobs$ = 12					; size = 4
tv1760 = 16						; size = 4
tv1288 = 16						; size = 4
tv1193 = 16						; size = 4
_ControlIndex$ = 16					; size = 2
_FoundOneActiveChannel$ = 19				; size = 1
_High$ = 20						; size = 4
_Low$ = 24						; size = 4
tv1971 = 28						; size = 4
tv1866 = 28						; size = 4
tv1709 = 28						; size = 4
tv1336 = 28						; size = 4
tv1262 = 28						; size = 4
_LastPassInValid$ = 28					; size = 1
_Dim1StartPoint$ = 32					; size = 4
_Results$ = 36						; size = 4
_CompleteSweep PROC					; COMDAT
; Line 17323
	push	ebp
	mov	ebp, esp
	sub	esp, 4632				; 00001218H
	push	ebx
	push	esi
	push	edi
; Line 17330
	xor	ebx, ebx
	xor	eax, eax
	lea	edi, DWORD PTR _NumberElements$[ebp+1]
; Line 17336
	push	4608					; 00001200H
	mov	BYTE PTR _NumberElements$[ebp], bl
	stosb
	lea	eax, DWORD PTR _ResultsTemp$[ebp]
	push	ebx
	push	eax
	call	_memset
; Line 17340
	movzx	ecx, WORD PTR _ControlIndex$[ebp]
	mov	edi, DWORD PTR _MrcData$[ebp]
	imul	ecx, 45					; 0000002dH
	mov	edx, DWORD PTR _ControlKnobs$[ebp]
	mov	al, BYTE PTR [edi+55506]
	lea	esi, DWORD PTR [ecx+edx]
	mov	cl, BYTE PTR [esi+42]
	mov	BYTE PTR tv871[ebp], al
	mov	BYTE PTR _RunType$[ebp], cl
; Line 17341
	mov	cx, WORD PTR [esi+40]
; Line 17342
	and	al, 251					; 000000fbH
	add	esp, 12					; 0000000cH
	mov	WORD PTR [edi+65586], cx
	mov	BYTE PTR [edi+55506], al
; Line 17348
	cmp	WORD PTR [esi+16], bx
	je	$LN75@CompleteSw
; Line 17352
	mov	BYTE PTR _Channel$[ebp], bl
$LL94@CompleteSw:
; Line 17353
	mov	BYTE PTR _Rank$[ebp], bl
$LL91@CompleteSw:
; Line 17354
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN90@CompleteSw
; Line 17358
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	movzx	eax, WORD PTR [esi+23]
	push	DWORD PTR _Channel$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	push	edi
	call	_Supportx4withByteLevelSignals
	add	esp, 24					; 00000018H
$LN90@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL91@CompleteSw
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL94@CompleteSw
; Line 17363
	mov	BYTE PTR _FoundOneActiveChannel$[ebp], bl
; Line 17364
	mov	BYTE PTR _Channel$[ebp], bl
$LL87@CompleteSw:
; Line 17365
	mov	eax, DWORD PTR _Dim1StartPoint$[ebp]
	mov	DWORD PTR tv1030[ebp], eax
	lea	eax, DWORD PTR _ResultsTemp$[ebp]
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv1032[ebp], eax
$LL84@CompleteSw:
; Line 17366
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN83@CompleteSw
; Line 17377
	push	DWORD PTR _RunType$[ebp]
	cmp	BYTE PTR [edi+55508], bl
	push	1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR tv1032[ebp]
	setne	al
	push	OFFSET _GenericMemoryTest
	dec	al
	and	al, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR _FoundOneActiveChannel$[ebp], 1
	mov	BYTE PTR _ParalellCh$[ebp], al
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi+16]
	push	1
	push	ebx
	push	ebx
	push	eax
	push	DWORD PTR _High$[ebp]
	movzx	eax, WORD PTR [esi]
	push	DWORD PTR _Low$[ebp]
	push	DWORD PTR tv1030[ebp]
	push	1
	push	eax
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ParalellCh$[ebp]
	push	edi
	call	_Create1DSweep
	add	esp, 72					; 00000048H
$LN83@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	add	DWORD PTR tv1032[ebp], 1152		; 00000480H
	add	DWORD PTR tv1030[ebp], 144		; 00000090H
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL84@CompleteSw
; Line 17380
	cmp	BYTE PTR [edi+55508], bl
	je	SHORT $LN86@CompleteSw
	cmp	BYTE PTR _FoundOneActiveChannel$[ebp], bl
	jne	SHORT $LN127@CompleteSw
$LN86@CompleteSw:
; Line 17364
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL87@CompleteSw
$LN127@CompleteSw:
; Line 17384
	mov	BYTE PTR _Channel$[ebp], bl
	mov	DWORD PTR tv1212[ebp], ebx
$LL77@CompleteSw:
; Line 17385
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv1193[ebp], ebx
$LL74@CompleteSw:
; Line 17386
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN73@CompleteSw
; Line 17390
	push	DWORD PTR _Rank$[ebp]
	movzx	eax, WORD PTR [esi+23]
	push	DWORD PTR _Channel$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	push	edi
	call	_Restorex4withByteLevelSignals
; Line 17395
	mov	eax, DWORD PTR tv1212[ebp]
	mov	ecx, DWORD PTR tv1193[ebp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, 72					; 00000048H
	add	eax, DWORD PTR _Dim1StartPoint$[ebp]
	add	esp, 20					; 00000014H
	imul	ecx, 576				; 00000240H
	lea	ecx, DWORD PTR _ResultsTemp$[ebp+ecx+2]
	mov	DWORD PTR tv747[ebp], 18		; 00000012H
$LL67@CompleteSw:
; Line 17396
	mov	dx, WORD PTR [ecx-2]
	mov	WORD PTR [eax], dx
; Line 17397
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax+2], dx
	add	ecx, 32					; 00000020H
	add	eax, 4
	dec	DWORD PTR tv747[ebp]
	jne	SHORT $LL67@CompleteSw
$LN73@CompleteSw:
; Line 17385
	inc	BYTE PTR _Rank$[ebp]
	add	DWORD PTR tv1193[ebp], 2
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL74@CompleteSw
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1212[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL77@CompleteSw
$LN75@CompleteSw:
; Line 17409
	cmp	BYTE PTR _LastPassInValid$[ebp], 1
	jne	$LN12@CompleteSw
; Line 17413
	cmp	WORD PTR [esi+18], bx
	je	$LN43@CompleteSw
; Line 17417
	lea	eax, DWORD PTR _NumberElements$[ebp]
	mov	DWORD PTR tv1288[ebp], eax
	mov	BYTE PTR _Channel$[ebp], bl
	lea	eax, DWORD PTR [edi+55454]
$LL62@CompleteSw:
; Line 17418
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv1262[ebp], eax
$LL59@CompleteSw:
; Line 17420
	push	DWORD PTR _Rank$[ebp]
	mov	eax, DWORD PTR tv1262[ebp]
	push	DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR [eax]
	mov	ecx, DWORD PTR tv1288[ebp]
	push	edi
	mov	BYTE PTR [ecx], al
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN58@CompleteSw
; Line 17424
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	movzx	eax, WORD PTR [esi+23]
	push	DWORD PTR _Channel$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	push	edi
	call	_Supportx4withByteLevelSignals
	add	esp, 24					; 00000018H
$LN58@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	inc	DWORD PTR tv1262[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL59@CompleteSw
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1288[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	eax, DWORD PTR tv1262[ebp]
	jb	SHORT $LL62@CompleteSw
; Line 17429
	mov	BYTE PTR _FoundOneActiveChannel$[ebp], bl
; Line 17430
	mov	BYTE PTR _Channel$[ebp], bl
$LL55@CompleteSw:
; Line 17431
	mov	eax, DWORD PTR _Dim1StartPoint$[ebp]
	mov	DWORD PTR tv1334[ebp], eax
	lea	eax, DWORD PTR _ResultsTemp$[ebp]
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv1336[ebp], eax
$LL52@CompleteSw:
; Line 17432
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN51@CompleteSw
; Line 17435
	push	DWORD PTR _RunType$[ebp]
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR tv1336[ebp]
	mov	BYTE PTR _FoundOneActiveChannel$[ebp], 1
	push	OFFSET _GenericMemoryTest
	push	eax
	movzx	eax, WORD PTR [esi+18]
	push	1
	push	ebx
	push	ebx
	push	eax
	push	DWORD PTR _High$[ebp]
	movzx	eax, WORD PTR [esi]
	push	DWORD PTR _Low$[ebp]
	push	DWORD PTR tv1334[ebp]
	push	1
	push	eax
	push	DWORD PTR _Rank$[ebp]
	cmp	BYTE PTR [edi+55508], bl
	je	SHORT $LN48@CompleteSw
	push	ebx
; Line 17436
	jmp	SHORT $LN156@CompleteSw
$LN48@CompleteSw:
; Line 17437
	push	DWORD PTR _Channel$[ebp]
$LN156@CompleteSw:
	push	edi
	call	_Create1DSweep
	add	esp, 72					; 00000048H
$LN51@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	add	DWORD PTR tv1336[ebp], 1152		; 00000480H
	add	DWORD PTR tv1334[ebp], 144		; 00000090H
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL52@CompleteSw
; Line 17441
	cmp	BYTE PTR [edi+55508], bl
	je	SHORT $LN54@CompleteSw
	cmp	BYTE PTR _FoundOneActiveChannel$[ebp], bl
	jne	SHORT $LN128@CompleteSw
$LN54@CompleteSw:
; Line 17430
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL55@CompleteSw
$LN128@CompleteSw:
; Line 17445
	mov	BYTE PTR _Channel$[ebp], bl
	mov	DWORD PTR tv1760[ebp], ebx
$LL45@CompleteSw:
; Line 17446
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv1709[ebp], ebx
$LL42@CompleteSw:
; Line 17447
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN41@CompleteSw
; Line 17448
	push	DWORD PTR _Rank$[ebp]
	movzx	eax, WORD PTR [esi+23]
	push	DWORD PTR _Channel$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	push	edi
	call	_Restorex4withByteLevelSignals
; Line 17453
	mov	eax, DWORD PTR tv1760[ebp]
	mov	ecx, DWORD PTR tv1709[ebp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, 72					; 00000048H
	add	eax, DWORD PTR _Dim1StartPoint$[ebp]
	add	esp, 20					; 00000014H
	imul	ecx, 576				; 00000240H
	lea	ecx, DWORD PTR _ResultsTemp$[ebp+ecx+2]
	mov	DWORD PTR tv1655[ebp], 18		; 00000012H
$LL35@CompleteSw:
; Line 17454
	mov	dx, WORD PTR [ecx-2]
	mov	WORD PTR [eax], dx
; Line 17455
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax+2], dx
	add	ecx, 32					; 00000020H
	add	eax, 4
	dec	DWORD PTR tv1655[ebp]
	jne	SHORT $LL35@CompleteSw
$LN41@CompleteSw:
; Line 17446
	inc	BYTE PTR _Rank$[ebp]
	add	DWORD PTR tv1709[ebp], 2
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL42@CompleteSw
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1760[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL45@CompleteSw
$LN43@CompleteSw:
; Line 17465
	cmp	WORD PTR [esi+20], bx
	je	$LN12@CompleteSw
; Line 17469
	mov	BYTE PTR _Channel$[ebp], bl
$LL31@CompleteSw:
; Line 17470
	mov	BYTE PTR _Rank$[ebp], bl
$LL28@CompleteSw:
; Line 17471
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN27@CompleteSw
; Line 17475
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	DWORD PTR _Rank$[ebp]
	movzx	eax, WORD PTR [esi+23]
	push	DWORD PTR _Channel$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	push	edi
	call	_Supportx4withByteLevelSignals
	add	esp, 24					; 00000018H
$LN27@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL28@CompleteSw
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL31@CompleteSw
; Line 17479
	mov	BYTE PTR _FoundOneActiveChannel$[ebp], bl
; Line 17480
	mov	BYTE PTR _Channel$[ebp], bl
$LL24@CompleteSw:
; Line 17481
	mov	eax, DWORD PTR _Dim1StartPoint$[ebp]
	mov	DWORD PTR tv1864[ebp], eax
	lea	eax, DWORD PTR _ResultsTemp$[ebp]
	mov	BYTE PTR _Rank$[ebp], bl
	mov	DWORD PTR tv1866[ebp], eax
$LL21@CompleteSw:
; Line 17482
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN20@CompleteSw
; Line 17485
	push	DWORD PTR _RunType$[ebp]
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	DWORD PTR tv1866[ebp]
	mov	BYTE PTR _FoundOneActiveChannel$[ebp], 1
	push	OFFSET _GenericMemoryTest
	push	eax
	movzx	eax, WORD PTR [esi+20]
	push	1
	push	ebx
	push	ebx
	push	eax
	push	DWORD PTR _High$[ebp]
	movzx	eax, WORD PTR [esi]
	push	DWORD PTR _Low$[ebp]
	push	DWORD PTR tv1864[ebp]
	push	1
	push	eax
	push	DWORD PTR _Rank$[ebp]
	cmp	BYTE PTR [edi+55508], bl
	je	SHORT $LN17@CompleteSw
	push	ebx
; Line 17486
	jmp	SHORT $LN157@CompleteSw
$LN17@CompleteSw:
; Line 17487
	push	DWORD PTR _Channel$[ebp]
$LN157@CompleteSw:
	push	edi
	call	_Create1DSweep
	add	esp, 72					; 00000048H
$LN20@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	add	DWORD PTR tv1866[ebp], 1152		; 00000480H
	add	DWORD PTR tv1864[ebp], 144		; 00000090H
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL21@CompleteSw
; Line 17491
	cmp	BYTE PTR [edi+55508], bl
	je	SHORT $LN23@CompleteSw
	cmp	BYTE PTR _FoundOneActiveChannel$[ebp], bl
	jne	SHORT $LN129@CompleteSw
$LN23@CompleteSw:
; Line 17480
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL24@CompleteSw
$LN129@CompleteSw:
; Line 17495
	mov	BYTE PTR _Channel$[ebp], bl
$LL14@CompleteSw:
; Line 17496
	mov	BYTE PTR _Rank$[ebp], bl
$LL11@CompleteSw:
; Line 17497
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN10@CompleteSw
; Line 17498
	push	DWORD PTR _Rank$[ebp]
	movzx	eax, WORD PTR [esi+23]
	push	DWORD PTR _Channel$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	push	edi
	call	_Restorex4withByteLevelSignals
	add	esp, 20					; 00000014H
$LN10@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL11@CompleteSw
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL14@CompleteSw
$LN12@CompleteSw:
; Line 17509
	mov	BYTE PTR _Channel$[ebp], bl
	mov	DWORD PTR tv1971[ebp], ebx
$LL7@CompleteSw:
; Line 17510
	mov	BYTE PTR _Rank$[ebp], bl
	xor	esi, esi
$LL4@CompleteSw:
; Line 17511
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN3@CompleteSw
; Line 17512
	mov	eax, DWORD PTR tv1971[ebp]
	lea	ecx, DWORD PTR [eax+esi*2]
	lea	eax, DWORD PTR [esi+eax*4]
	imul	ecx, 576				; 00000240H
	imul	eax, 576				; 00000240H
	add	eax, DWORD PTR _Results$[ebp]
	push	576					; 00000240H
	lea	ecx, DWORD PTR _ResultsTemp$[ebp+ecx]
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@CompleteSw:
	inc	BYTE PTR _Rank$[ebp]
	inc	esi
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL4@CompleteSw
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1971[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	SHORT $LL7@CompleteSw
; Line 17517
	mov	al, BYTE PTR tv871[ebp]
	mov	BYTE PTR [edi+55506], al
	pop	edi
	pop	esi
; Line 17521
	xor	eax, eax
	pop	ebx
; Line 17522
	leave
	ret	0
_CompleteSweep ENDP
_TEXT	ENDS
PUBLIC	_EarlyMprRead
EXTRN	_DisplayOrRestoreTrainingResultsRxDqsWrapper:PROC
EXTRN	_GetJedecResetTypeForRd:PROC
; Function compile flags: /Ogspy
;	COMDAT _EarlyMprRead
_TEXT	SEGMENT
_ChannelBackup$ = -8					; size = 1
_Rank$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_DebugLevel$ = 11					; size = 1
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_EarlyMprRead PROC					; COMDAT
; Line 4493
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 4500
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+71015], 0
; Line 4502
	jne	$LN31@EarlyMprRe
	push	edi
; Line 4506
	call	_GetJedecResetTypeForRd
; Line 4516
	push	DWORD PTR _Channel$[ebp]
	mov	WORD PTR [esi+65586], ax
	mov	al, BYTE PTR [esi+55506]
	mov	edi, 65535				; 0000ffffH
	push	edi
	mov	BYTE PTR _DebugLevel$[ebp], al
	mov	al, BYTE PTR _Channel$[ebp]
	push	14523					; 000038bbH
	push	esi
	mov	BYTE PTR _ChannelBackup$[ebp], al
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 4517
	cmp	BYTE PTR [esi+65337], 0
	jne	$LN30@EarlyMprRe
	push	ebx
; Line 4521
	push	2
	mov	BYTE PTR [esi+65583], 1
	mov	BYTE PTR [esi+65582], 0
	pop	ebx
	jmp	SHORT $LN32@EarlyMprRe
$LL29@EarlyMprRe:
; Line 4522
	push	4
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_CpgcSetup
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Channel$[ebp]
$LN32@EarlyMprRe:
; Line 4521
	cmp	BYTE PTR _Channel$[ebp], bl
	jb	SHORT $LL29@EarlyMprRe
; Line 4532
	mov	BYTE PTR _Rank$[ebp], 0
$LL13@EarlyMprRe:
; Line 4538
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, bl
	jae	SHORT $LN6@EarlyMprRe
$LL8@EarlyMprRe:
; Line 4539
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN7@EarlyMprRe
; Line 4549
	push	DWORD PTR _Channel$[ebp]
	mov	al, BYTE PTR _Rank$[ebp]
	push	esi
	mov	BYTE PTR [esi+65585], al
	mov	BYTE PTR [esi+65570], 1
	call	_CpgcReconfig
; Line 4551
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_PrechargeAll
; Line 4555
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_MprWrite
	add	esp, 32					; 00000020H
$LN7@EarlyMprRe:
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], bl
	jb	SHORT $LL8@EarlyMprRe
$LN6@EarlyMprRe:
; Line 4561
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
; Line 4585
	push	65					; 00000041H
	push	ebx
	push	95					; 0000005fH
	push	0
	push	57349					; 0000e005H
	push	1
	push	ebx
	push	63					; 0000003fH
	push	0
	push	57345					; 0000e001H
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_SweepCenterEye2D
; Line 4586
	mov	al, BYTE PTR _DebugLevel$[ebp]
	mov	BYTE PTR [esi+55506], al
; Line 4587
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 68					; 00000044H
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, bl
	jae	SHORT $LN2@EarlyMprRe
$LL4@EarlyMprRe:
; Line 4588
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN3@EarlyMprRe
; Line 4594
	push	0
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ToggleMprMode
	add	esp, 16					; 00000010H
$LN3@EarlyMprRe:
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], bl
	jb	SHORT $LL4@EarlyMprRe
$LN2@EarlyMprRe:
; Line 4532
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL13@EarlyMprRe
; Line 4628
	push	1
	push	57348					; 0000e004H
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_AverageGroups
	add	esp, 16					; 00000010H
	pop	ebx
$LN30@EarlyMprRe:
; Line 4646
	push	1
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResultsRxDqsWrapper
; Line 4650
	push	DWORD PTR _ChannelBackup$[ebp]
	push	edi
	push	14524					; 000038bcH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 28					; 0000001cH
	pop	edi
$LN31@EarlyMprRe:
; Line 4653
	xor	eax, eax
	pop	esi
; Line 4654
	leave
	ret	0
_EarlyMprRead ENDP
_TEXT	ENDS
PUBLIC	_ExecuteCwlVerificationTest
; Function compile flags: /Ogspy
;	COMDAT _ExecuteCwlVerificationTest
_TEXT	SEGMENT
_Retry$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_Channel$ = 12						; size = 1
_Rank$ = 16						; size = 1
_LoopCount$ = 20					; size = 1
_NumBurst$ = 24						; size = 1
_FullFailureOnStrobe$ = 28				; size = 4
_PartialFailureOnStrobe$ = 32				; size = 4
_Strobe$ = 36						; size = 1
_FailingStrobes$ = 36					; size = 4
_ErrBitsPerStrobe$ = 40					; size = 4
_ExecuteCwlVerificationTest PROC			; COMDAT
; Line 4830
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 4836
	mov	edi, DWORD PTR _ErrBitsPerStrobe$[ebp]
	mov	eax, 252645135				; 0f0f0f0fH
	stosd
	stosd
	stosd
	stosd
	stosw
; Line 4838
	mov	edi, DWORD PTR _FailingStrobes$[ebp]
	mov	BYTE PTR _Retry$[ebp], 2
	test	edi, edi
	je	SHORT $LN39@ExecuteCwl
; Line 4839
	or	DWORD PTR [edi], -1
$LN39@ExecuteCwl:
	mov	ebx, DWORD PTR _MrcData$[ebp]
$LL23@ExecuteCwl:
; Line 4843
	push	DWORD PTR _NumBurst$[ebp]
	push	DWORD PTR _LoopCount$[ebp]
	push	0
	push	2
	push	3
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	call	_TestRankMrcTrainingSteps
	add	esp, 32					; 00000020H
; Line 4844
	test	edi, edi
	je	SHORT $LN20@ExecuteCwl
; Line 4845
	and	DWORD PTR [edi], eax
$LN20@ExecuteCwl:
; Line 4847
	mov	eax, DWORD PTR _ErrBitsPerStrobe$[ebp]
	push	18					; 00000012H
	lea	ecx, DWORD PTR [ebx+70780]
	pop	esi
$LL19@ExecuteCwl:
; Line 4848
	mov	dl, BYTE PTR [ecx]
	and	BYTE PTR [eax], dl
	inc	ecx
	inc	eax
	dec	esi
	jne	SHORT $LL19@ExecuteCwl
; Line 4850
	mov	al, BYTE PTR _Retry$[ebp]
	dec	BYTE PTR _Retry$[ebp]
	test	al, al
	jne	SHORT $LL23@ExecuteCwl
; Line 4853
	mov	edi, DWORD PTR _FullFailureOnStrobe$[ebp]
	mov	edx, DWORD PTR _PartialFailureOnStrobe$[ebp]
	mov	ecx, edi
	push	18					; 00000012H
	mov	eax, edx
	sub	ecx, edx
	pop	esi
$LL16@ExecuteCwl:
; Line 4852
	test	edi, edi
	je	SHORT $LN13@ExecuteCwl
; Line 4853
	mov	BYTE PTR [ecx+eax], 0
$LN13@ExecuteCwl:
; Line 4855
	test	edx, edx
	je	SHORT $LN15@ExecuteCwl
; Line 4856
	mov	BYTE PTR [eax], 0
$LN15@ExecuteCwl:
; Line 4851
	inc	eax
	dec	esi
	jne	SHORT $LL16@ExecuteCwl
; Line 4860
	mov	esi, DWORD PTR _ErrBitsPerStrobe$[ebp]
; Line 4866
	mov	ebx, edx
	sub	edi, esi
	mov	BYTE PTR _Strobe$[ebp], 0
	sub	ebx, esi
$LL11@ExecuteCwl:
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN10@ExecuteCwl
	push	esi
	call	_CountOnes
	pop	ecx
	cmp	al, 3
	jbe	SHORT $LN7@ExecuteCwl
; Line 4865
	cmp	DWORD PTR _FullFailureOnStrobe$[ebp], 0
	je	SHORT $LN10@ExecuteCwl
; Line 4866
	mov	BYTE PTR [edi+esi], 1
; Line 4867
	jmp	SHORT $LN10@ExecuteCwl
$LN7@ExecuteCwl:
; Line 4868
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN10@ExecuteCwl
; Line 4869
	cmp	DWORD PTR _PartialFailureOnStrobe$[ebp], 0
	je	SHORT $LN10@ExecuteCwl
; Line 4870
	mov	BYTE PTR [ebx+esi], 1
$LN10@ExecuteCwl:
; Line 4860
	inc	BYTE PTR _Strobe$[ebp]
	inc	esi
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL11@ExecuteCwl
	pop	edi
	pop	esi
	pop	ebx
; Line 4890
	leave
	ret	0
_ExecuteCwlVerificationTest ENDP
_TEXT	ENDS
PUBLIC	_CoarseWriteLeveling
; Function compile flags: /Ogspy
;	COMDAT _CoarseWriteLeveling
_TEXT	SEGMENT
_Results$ = -1484					; size = 1152
_Dim1StartPoint$ = -332					; size = 144
_High$ = -188						; size = 72
_Low$ = -116						; size = 72
_ErrBitsPerStrobeSecondTry$ = -44			; size = 18
_PartialFailureOnStrobeSecondTry$ = -24			; size = 18
_ErrBitsPerStrobe$ = -4					; size = 18
_PartialFailureOnStrobe$ = 16				; size = 18
_FullFailureOnStrobe$ = 36				; size = 18
tv804 = 56						; size = 4
tv1127 = 60						; size = 4
tv1072 = 64						; size = 4
_NumberElements$ = 68					; size = 2
tv816 = 75						; size = 1
_FailingStrobes$ = 76					; size = 4
_FullFailureOnAnyStrobe$ = 83				; size = 1
_ChannelBackup$ = 84					; size = 1
tv1195 = 88						; size = 4
tv1152 = 88						; size = 4
tv1016 = 88						; size = 4
_TempValue$ = 92					; size = 4
_Rank$ = 96						; size = 1
_Strobe$ = 100						; size = 1
tv1048 = 112						; size = 4
_MrcData$ = 112						; size = 4
tv1099 = 115						; size = 1
_ReExecuteVerificationTest$ = 115			; size = 1
_CapsuleStartIndex$ = 116				; size = 2
_StringIndex$ = 120					; size = 2
_Channel$ = 124						; size = 1
_CoarseWriteLeveling PROC				; COMDAT
; Line 5019
	push	ebp
	lea	ebp, DWORD PTR [esp-104]
	sub	esp, 1588				; 00000634H
; Line 5044
	mov	al, BYTE PTR _Channel$[ebp]
	push	esi
; Line 5046
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+71017], 0
	mov	BYTE PTR _ChannelBackup$[ebp], al
	je	SHORT $LN75@CoarseWrit
; Line 5048
	xor	eax, eax
	jmp	$LN76@CoarseWrit
$LN75@CoarseWrit:
; Line 5051
	movzx	eax, al
	cmp	BYTE PTR [eax+esi+31272], 7
	mov	DWORD PTR tv804[ebp], eax
	jne	SHORT $LN74@CoarseWrit
; Line 5052
	mov	BYTE PTR [esi+71455], 1
; Line 5053
	jmp	SHORT $LN73@CoarseWrit
$LN74@CoarseWrit:
; Line 5054
	mov	BYTE PTR [esi+71455], 0
$LN73@CoarseWrit:
	push	ebx
; Line 5062
	mov	bl, BYTE PTR [esi+55506]
	mov	eax, 128				; 00000080H
	mov	WORD PTR [esi+65586], ax
	mov	BYTE PTR tv816[ebp], bl
; Line 5066
	test	bl, 4
	je	SHORT $LN72@CoarseWrit
; Line 5067
	mov	al, bl
	or	al, 32					; 00000020H
	mov	BYTE PTR [esi+55506], al
$LN72@CoarseWrit:
	push	edi
; Line 5073
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	14506					; 000038aaH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 5075
	cmp	BYTE PTR [esi+65337], 0
	mov	edi, 57358				; 0000e00eH
	jne	$LN71@CoarseWrit
; Line 5079
	mov	BYTE PTR _Rank$[ebp], 0
$LL70@CoarseWrit:
; Line 5085
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LL55@CoarseWrit
	mov	eax, DWORD PTR tv804[ebp]
	mov	ecx, eax
	imul	ecx, 18					; 00000012H
	mov	DWORD PTR tv1072[ebp], ecx
	movzx	ecx, BYTE PTR _Rank$[ebp]
	add	ecx, esi
	mov	DWORD PTR tv1048[ebp], eax
	lea	eax, DWORD PTR [ecx+eax*4+55454]
	mov	DWORD PTR tv1127[ebp], eax
$LL153@CoarseWrit:
; Line 5087
	push	DWORD PTR _Rank$[ebp]
	mov	al, BYTE PTR [eax]
	push	DWORD PTR _Channel$[ebp]
	mov	ecx, DWORD PTR tv1048[ebp]
	push	esi
	mov	BYTE PTR _NumberElements$[ebp+ecx], al
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN64@CoarseWrit
; Line 5091
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_EarlyCwlSetup
	add	esp, 12					; 0000000cH
	and	DWORD PTR tv1016[ebp], 0
; Line 5096
	mov	BYTE PTR _Strobe$[ebp], 0
$LL151@CoarseWrit:
; Line 5097
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN60@CoarseWrit
; Line 5100
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 5101
	mov	eax, DWORD PTR tv1048[ebp]
	add	esp, 28					; 0000001cH
	cmp	BYTE PTR [eax+esi+31272], 3
; Line 5102
	push	ebx
	push	esi
	ja	SHORT $LN57@CoarseWrit
	call	_GetHalfClk
	add	ax, ax
	pop	ecx
	movzx	eax, ax
	pop	ecx
	mov	ecx, DWORD PTR _TempValue$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _TempValue$[ebp], eax
; Line 5103
	jmp	SHORT $LN56@CoarseWrit
$LN57@CoarseWrit:
; Line 5104
	call	_GetHalfClk
	add	ax, ax
	movzx	eax, ax
	imul	eax, 3
	add	DWORD PTR _TempValue$[ebp], eax
	pop	ecx
	pop	ecx
$LN56@CoarseWrit:
; Line 5106
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 5112
	mov	ecx, DWORD PTR tv1072[ebp]
	mov	eax, DWORD PTR tv1016[ebp]
	mov	ebx, DWORD PTR _TempValue$[ebp]
; Line 5116
	push	DWORD PTR _Channel$[ebp]
	add	eax, ecx
	mov	WORD PTR _Dim1StartPoint$[ebp+eax*4], bx
	mov	WORD PTR _Dim1StartPoint$[ebp+eax*4+2], bx
	add	eax, eax
	xor	ecx, ecx
	push	esi
	mov	WORD PTR _Low$[ebp+eax], cx
	mov	WORD PTR _High$[ebp+eax], bx
	call	_GetHalfClk
	movzx	eax, ax
	shr	eax, 1
	sub	ebx, eax
; Line 5117
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	57359					; 0000e00fH
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _TempValue$[ebp], ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 64					; 00000040H
; Line 5119
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12308					; 00003014H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN60@CoarseWrit:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1016[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL151@CoarseWrit
$LN64@CoarseWrit:
; Line 5085
	mov	eax, DWORD PTR tv1127[ebp]
	inc	BYTE PTR _Channel$[ebp]
	inc	DWORD PTR tv1048[ebp]
	add	DWORD PTR tv1072[ebp], 18		; 00000012H
	add	eax, 4
	cmp	BYTE PTR _Channel$[ebp], 2
	mov	DWORD PTR tv1127[ebp], eax
	jb	$LL153@CoarseWrit
$LL55@CoarseWrit:
; Line 5144
	cmp	BYTE PTR [esi+71455], 1
; Line 5168
	lea	eax, DWORD PTR _Results$[ebp]
	jne	$LN52@CoarseWrit
	push	1
	push	1
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	push	eax
	push	OFFSET _CoarseWLTest
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_GetHalfClk
	pop	ecx
	pop	ecx
	add	ax, ax
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	push	edi
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_Create1DSweep
; Line 5175
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	add	esp, 72					; 00000048H
	mov	BYTE PTR _FullFailureOnAnyStrobe$[ebp], 0
	mov	BYTE PTR _ReExecuteVerificationTest$[ebp], 0
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN33@CoarseWrit
$LL51@CoarseWrit:
; Line 5176
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN50@CoarseWrit
; Line 5185
	lea	eax, DWORD PTR _ErrBitsPerStrobe$[ebp]
	push	eax
	lea	eax, DWORD PTR _FailingStrobes$[ebp]
	push	eax
	lea	eax, DWORD PTR _PartialFailureOnStrobe$[ebp]
	push	eax
	lea	eax, DWORD PTR _FullFailureOnStrobe$[ebp]
	push	eax
	push	6
	push	10					; 0000000aH
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ExecuteCwlVerificationTest
	add	esp, 36					; 00000024H
	and	DWORD PTR tv1152[ebp], 0
; Line 5187
	mov	BYTE PTR _Strobe$[ebp], 0
$LL150@CoarseWrit:
; Line 5188
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN46@CoarseWrit
; Line 5194
	mov	eax, DWORD PTR tv1152[ebp]
	lea	ebx, DWORD PTR _PartialFailureOnStrobe$[ebp+eax]
	cmp	BYTE PTR [ebx], 0
	jne	SHORT $LN42@CoarseWrit
	cmp	BYTE PTR _FullFailureOnStrobe$[ebp+eax], 0
	je	SHORT $LN46@CoarseWrit
$LN42@CoarseWrit:
; Line 5195
	cmp	BYTE PTR _FullFailureOnStrobe$[ebp+eax], 0
	je	SHORT $LN41@CoarseWrit
; Line 5196
	mov	BYTE PTR _FullFailureOnAnyStrobe$[ebp], 1
$LN41@CoarseWrit:
; Line 5202
	lea	eax, DWORD PTR _ErrBitsPerStrobe$[ebp]
	push	eax
	push	DWORD PTR _FailingStrobes$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsPairStrobeHealthy
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN40@CoarseWrit
; Line 5203
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsCurrentStrobeWithinLimit
	add	esp, 16					; 00000010H
	test	al, al
	je	SHORT $LN40@CoarseWrit
; Line 5204
	mov	ecx, DWORD PTR tv1152[ebp]
	xor	eax, eax
	inc	eax
	shl	eax, cl
; Line 5206
	mov	BYTE PTR [ebx], 0
	not	eax
	and	DWORD PTR _FailingStrobes$[ebp], eax
; Line 5207
	jmp	SHORT $LN46@CoarseWrit
$LN40@CoarseWrit:
; Line 5211
	mov	BYTE PTR _ReExecuteVerificationTest$[ebp], 1
$LN46@CoarseWrit:
; Line 5187
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1152[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL150@CoarseWrit
$LN50@CoarseWrit:
; Line 5175
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL51@CoarseWrit
; Line 5221
	cmp	BYTE PTR _ReExecuteVerificationTest$[ebp], 0
	je	$LN33@CoarseWrit
; Line 5222
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
$LL35@CoarseWrit:
; Line 5223
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN34@CoarseWrit
; Line 5231
	lea	eax, DWORD PTR _ErrBitsPerStrobeSecondTry$[ebp]
	push	eax
	xor	ebx, ebx
	push	ebx
	lea	eax, DWORD PTR _PartialFailureOnStrobeSecondTry$[ebp]
	push	eax
	push	ebx
	push	3
	push	1
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ExecuteCwlVerificationTest
	add	esp, 36					; 00000024H
; Line 5232
	mov	BYTE PTR _Strobe$[ebp], bl
	mov	DWORD PTR tv1195[ebp], ebx
$LL31@CoarseWrit:
; Line 5233
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN30@CoarseWrit
; Line 5240
	mov	eax, DWORD PTR tv1195[ebp]
	cmp	BYTE PTR _PartialFailureOnStrobe$[ebp+eax], 0
	je	SHORT $LN30@CoarseWrit
; Line 5243
	cmp	BYTE PTR _PartialFailureOnStrobeSecondTry$[ebp+eax], 0
	je	SHORT $LN148@CoarseWrit
	mov	ebx, eax
	lea	eax, DWORD PTR _ErrBitsPerStrobeSecondTry$[ebp+ebx]
	push	eax
	call	_CountOnes
	lea	ecx, DWORD PTR _ErrBitsPerStrobe$[ebp+ebx]
	push	ecx
	mov	BYTE PTR tv1099[ebp], al
	call	_CountOnes
	pop	ecx
	pop	ecx
	mov	cl, BYTE PTR tv1099[ebp]
	cmp	cl, al
	jae	SHORT $LN30@CoarseWrit
$LN148@CoarseWrit:
; Line 5244
	mov	ecx, DWORD PTR tv1195[ebp]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	not	eax
	and	DWORD PTR _FailingStrobes$[ebp], eax
$LN30@CoarseWrit:
	inc	BYTE PTR _Strobe$[ebp]
	inc	DWORD PTR tv1195[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	SHORT $LL31@CoarseWrit
$LN34@CoarseWrit:
; Line 5222
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL35@CoarseWrit
$LN33@CoarseWrit:
; Line 5252
	cmp	DWORD PTR _FailingStrobes$[ebp], 0
	je	$LN54@CoarseWrit
	cmp	BYTE PTR _FullFailureOnAnyStrobe$[ebp], 0
	je	$LN54@CoarseWrit
; Line 5258
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LL55@CoarseWrit
$LL23@CoarseWrit:
; Line 5259
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN22@CoarseWrit
; Line 5263
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_EarlyCwlSetup
	add	esp, 12					; 0000000cH
; Line 5268
	mov	BYTE PTR _Strobe$[ebp], 0
$LL152@CoarseWrit:
; Line 5269
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN18@CoarseWrit
; Line 5272
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 5273
	movzx	ebx, BYTE PTR _Strobe$[ebp]
	xor	eax, eax
	inc	eax
	mov	ecx, ebx
	shl	eax, cl
	mov	ecx, DWORD PTR _FailingStrobes$[ebp]
	add	esp, 28					; 0000001cH
	test	eax, ecx
	je	SHORT $LN15@CoarseWrit
; Line 5274
	cmp	DWORD PTR _TempValue$[ebp], 128		; 00000080H
	jb	$LN106@CoarseWrit
; Line 5281
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetHalfClk
	add	ax, ax
	movzx	eax, ax
	sub	DWORD PTR _TempValue$[ebp], eax
	pop	ecx
	pop	ecx
$LN15@CoarseWrit:
; Line 5283
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 5285
	movzx	eax, BYTE PTR _Channel$[ebp]
; Line 5290
	push	DWORD PTR _Channel$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, ebx
	mov	ebx, DWORD PTR _TempValue$[ebp]
	mov	WORD PTR _Dim1StartPoint$[ebp+eax*4], bx
	mov	WORD PTR _Dim1StartPoint$[ebp+eax*4+2], bx
	add	eax, eax
	push	esi
	mov	WORD PTR _Low$[ebp+eax], bx
	mov	WORD PTR _High$[ebp+eax], bx
	call	_GetHalfClk
	movzx	eax, ax
	shr	eax, 1
	sub	ebx, eax
; Line 5291
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	57359					; 0000e00fH
	push	DWORD PTR _Strobe$[ebp]
	mov	DWORD PTR _TempValue$[ebp], ebx
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 64					; 00000040H
; Line 5292
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12308					; 00003014H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN18@CoarseWrit:
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL152@CoarseWrit
$LN22@CoarseWrit:
; Line 5258
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL23@CoarseWrit
; Line 5298
	jmp	$LL55@CoarseWrit
$LN52@CoarseWrit:
; Line 5322
	xor	ebx, ebx
	inc	ebx
	push	ebx
	push	ebx
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	push	eax
	push	OFFSET _CpgcExecuteRmtTest
	lea	eax, DWORD PTR _NumberElements$[ebp]
	push	eax
	push	0
	push	ebx
	push	0
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_GetHalfClk
	pop	ecx
	pop	ecx
	add	ax, ax
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	ebx
	push	57357					; 0000e00dH
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_Create1DSweep
	add	esp, 72					; 00000048H
$LN54@CoarseWrit:
; Line 5326
	cmp	BYTE PTR [esi+71455], 0
	jne	$LN149@CoarseWrit
; Line 5327
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	cmp	al, 2
	jae	$LN149@CoarseWrit
$LL11@CoarseWrit:
; Line 5328
	push	DWORD PTR _Rank$[ebp]
	mov	ebx, DWORD PTR _Channel$[ebp]
	push	ebx
	push	esi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN10@CoarseWrit
; Line 5331
	mov	BYTE PTR _Strobe$[ebp], 0
$LL7@CoarseWrit:
; Line 5332
	push	0
	push	0
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN6@CoarseWrit
; Line 5338
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	19					; 00000013H
	push	edi
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 5339
	push	ebx
	push	esi
	call	_GetHalfClk
	movzx	eax, ax
	shr	eax, 1
	sub	DWORD PTR _TempValue$[ebp], eax
; Line 5340
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	16387					; 00004003H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 64					; 00000040H
; Line 5341
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	57359					; 0000e00fH
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
; Line 5343
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12308					; 00003014H
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	ebx
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
$LN6@CoarseWrit:
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 18		; 00000012H
	jb	$LL7@CoarseWrit
$LN10@CoarseWrit:
; Line 5327
	inc	BYTE PTR _Channel$[ebp]
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL11@CoarseWrit
$LN149@CoarseWrit:
; Line 5079
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
; Line 5359
	mov	al, BYTE PTR _ChannelBackup$[ebp]
	mov	BYTE PTR _Channel$[ebp], al
	jb	$LL70@CoarseWrit
; Line 5362
	xor	ebx, ebx
	push	ebx
	push	edi
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_AverageGroups
; Line 5363
	push	ebx
	push	57359					; 0000e00fH
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_AverageGroups
; Line 5365
	push	ebx
	push	12308					; 00003014H
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_AverageGroups
	mov	bl, BYTE PTR tv816[ebp]
	add	esp, 48					; 00000030H
$LN71@CoarseWrit:
; Line 5378
	push	0
	push	edi
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 5379
	push	1
	push	57359					; 0000e00fH
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 5381
	push	0
	push	12308					; 00003014H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 5388
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	14514					; 000038b2H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 64					; 00000040H
; Line 5392
	cmp	BYTE PTR [esi+65478], 0
	mov	BYTE PTR [esi+55506], bl
	je	SHORT $LN3@CoarseWrit
	mov	al, BYTE PTR [esi+31274]
	cmp	al, 1
	je	SHORT $LN2@CoarseWrit
	cmp	al, 16					; 00000010H
; Line 5397
	je	SHORT $LN2@CoarseWrit
$LN3@CoarseWrit:
; Line 5400
	push	1
	push	1
	push	0
	push	2
	push	3
	push	DWORD PTR _ChannelBackup$[ebp]
	push	esi
	call	_TestMrcTrainingSteps
	add	esp, 28					; 0000001cH
$LN2@CoarseWrit:
; Line 5404
	xor	eax, eax
$LN164@CoarseWrit:
	pop	edi
	pop	ebx
$LN76@CoarseWrit:
	pop	esi
; Line 5405
	add	ebp, 104				; 00000068H
	leave
	ret	0
$LN106@CoarseWrit:
; Line 5276
	xor	eax, eax
	inc	eax
	jmp	SHORT $LN164@CoarseWrit
_CoarseWriteLeveling ENDP
_TEXT	ENDS
PUBLIC	_DeterminePassingVref1
; Function compile flags: /Ogspy
;	COMDAT _DeterminePassingVref1
_TEXT	SEGMENT
_Param$ = -68						; size = 48
tv706 = -20						; size = 4
tv705 = -20						; size = 4
_TempValue$ = -16					; size = 4
tv645 = -12						; size = 4
tv759 = -8						; size = 4
tv704 = -8						; size = 4
tv702 = -8						; size = 4
_st$ = -8						; size = 1
tv707 = -4						; size = 4
_ch$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_EyeMask$ = 12						; size = 4
tv701 = 16						; size = 4
tv648 = 16						; size = 4
_rk$ = 16						; size = 1
_ControlValue$ = 16					; size = 2
_ControlKnobs$ = 16					; size = 4
_ControlIndex$ = 20					; size = 1
_UnknownLastPass$ = 24					; size = 1
_Dim1StartPoint$ = 28					; size = 4
_Low$ = 32						; size = 4
_High$ = 36						; size = 4
_ResultsV$ = 40						; size = 4
_ResultsS$ = 44						; size = 4
_Results$ = 48						; size = 4
_Count$ = 52						; size = 4
_PowerKnobs$ = 56					; size = 4
_AllDoneFlag$ = 60					; size = 4
_DeterminePassingVref1 PROC				; COMDAT
; Line 14525
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
; Line 14538
	mov	ebx, DWORD PTR _ControlKnobs$[ebp]
	mov	al, BYTE PTR [ebx+43]
	push	esi
	movzx	ecx, al
	push	edi
	movzx	edi, BYTE PTR _ControlIndex$[ebp]
	dec	ecx
	cmp	edi, ecx
	mov	DWORD PTR tv645[ebp], edi
	jle	$LN28@DetermineP@2
; Line 14546
	mov	esi, DWORD PTR _EyeMask$[ebp]
	imul	edi, 45					; 0000002dH
	add	edi, ebx
	movzx	eax, WORD PTR [edi+6]
	mov	DWORD PTR _ControlValue$[ebp], eax
	cmp	ax, WORD PTR [edi+14]
	ja	$LN45@DetermineP@2
	mov	al, BYTE PTR _ControlIndex$[ebp]
	dec	al
	mov	BYTE PTR tv759[ebp], al
$LL43@DetermineP@2:
; Line 14551
	mov	al, BYTE PTR _ControlIndex$[ebp]
	mov	BYTE PTR _Param$[ebp+4], al
; Line 14552
	movzx	eax, WORD PTR _ControlValue$[ebp]
; Line 14556
	push	OFFSET _SetCriteria2
	mov	DWORD PTR _Param$[ebp+8], eax
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi]
	push	0
	push	DWORD PTR _Count$[ebp]
	mov	DWORD PTR _Param$[ebp+12], ebx
	push	eax
	movzx	eax, WORD PTR [edi+23]
	push	1
	push	1
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _Param$[ebp], esi
	call	_BuildComposite
; Line 14560
	push	DWORD PTR _AllDoneFlag$[ebp]
	push	DWORD PTR _PowerKnobs$[ebp]
	push	DWORD PTR _Count$[ebp]
	push	DWORD PTR _Results$[ebp]
	push	DWORD PTR _ResultsS$[ebp]
	push	DWORD PTR _ResultsV$[ebp]
	push	DWORD PTR _High$[ebp]
	push	DWORD PTR _Low$[ebp]
	push	DWORD PTR _Dim1StartPoint$[ebp]
	push	1
	push	DWORD PTR tv759[ebp]
	push	ebx
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassingVref1
; Line 14562
	mov	al, BYTE PTR _ControlIndex$[ebp]
	add	esp, 92					; 0000005cH
	cmp	al, BYTE PTR [ebx+43]
	jne	$LN24@DetermineP@2
; Line 14566
	mov	eax, 65535				; 0000ffffH
	cmp	WORD PTR [ebx+25], ax
	jne	SHORT $LN44@DetermineP@2
; Line 14567
	push	-1
	push	0
	push	DWORD PTR _Results$[ebp]
	push	0
	push	1
	push	2
	push	6
	push	8
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 36					; 00000024H
$LN44@DetermineP@2:
; Line 14573
	push	esi
	push	DWORD PTR _PowerKnobs$[ebp]
	push	DWORD PTR _Count$[ebp]
	push	DWORD PTR _ResultsS$[ebp]
	push	DWORD PTR _ResultsV$[ebp]
	push	DWORD PTR _Results$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_CheckAndStoreEyeMasks
; Line 14575
	movzx	eax, WORD PTR [edi+23]
	push	-1
	push	0
	push	0
	push	DWORD PTR _Count$[ebp]
	push	1
	push	2
	push	5
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
; Line 14581
	mov	al, BYTE PTR _ControlIndex$[ebp]
	add	esp, 68					; 00000044H
; Line 14585
	push	OFFSET _PrintCount
	mov	BYTE PTR _Param$[ebp+4], al
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	DWORD PTR _Results$[ebp]
	movzx	eax, BYTE PTR [esi]
	push	DWORD PTR _Count$[ebp]
	mov	BYTE PTR _Param$[ebp+12], 1
	push	eax
	movzx	eax, WORD PTR [ebx+23]
	push	2
	push	3
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _Param$[ebp], ebx
	mov	BYTE PTR _Param$[ebp+5], 0
	mov	DWORD PTR _Param$[ebp+8], esi
	call	_BuildComposite
; Line 14586
	mov	al, BYTE PTR _Param$[ebp+12]
	mov	ecx, DWORD PTR _AllDoneFlag$[ebp]
	add	esp, 36					; 00000024H
	mov	BYTE PTR [ecx], al
; Line 14587
	cmp	al, 1
	jne	SHORT $LN26@DetermineP@2
$LN36@DetermineP@2:
; Line 14588
	xor	eax, eax
	jmp	$LN29@DetermineP@2
$LN24@DetermineP@2:
; Line 14595
	mov	eax, DWORD PTR _AllDoneFlag$[ebp]
	cmp	BYTE PTR [eax], 1
	je	SHORT $LN36@DetermineP@2
; Line 14598
	movzx	eax, BYTE PTR [esi]
	push	OFFSET _CheckCount
	push	0
	push	0
	push	DWORD PTR _Count$[ebp]
	push	eax
	movzx	eax, WORD PTR [edi+23]
	push	2
	push	5
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
; Line 14599
	mov	eax, DWORD PTR _AllDoneFlag$[ebp]
	add	esp, 36					; 00000024H
	mov	BYTE PTR [eax], 1
$LN26@DetermineP@2:
	movsx	ax, BYTE PTR [edi+38]
	add	WORD PTR _ControlValue$[ebp], ax
	mov	ax, WORD PTR _ControlValue$[ebp]
	cmp	ax, WORD PTR [edi+14]
	jbe	$LL43@DetermineP@2
$LN45@DetermineP@2:
; Line 14605
	mov	ax, WORD PTR [edi+6]
	sub	ax, WORD PTR [edi+16]
	movzx	eax, ax
	cmp	ax, WORD PTR [edi+12]
	mov	DWORD PTR _ControlValue$[ebp], eax
	jle	$LN14@DetermineP@2
	mov	al, BYTE PTR _ControlIndex$[ebp]
	dec	al
	mov	BYTE PTR tv759[ebp], al
$LL46@DetermineP@2:
; Line 14610
	mov	al, BYTE PTR _ControlIndex$[ebp]
	mov	BYTE PTR _Param$[ebp+4], al
; Line 14611
	movzx	eax, WORD PTR _ControlValue$[ebp]
; Line 14615
	push	OFFSET _SetCriteria2
	mov	DWORD PTR _Param$[ebp+8], eax
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi]
	push	0
	push	DWORD PTR _Count$[ebp]
	mov	DWORD PTR _Param$[ebp+12], ebx
	push	eax
	movzx	eax, WORD PTR [edi+23]
	push	1
	push	1
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _Param$[ebp], esi
	call	_BuildComposite
; Line 14619
	push	DWORD PTR _AllDoneFlag$[ebp]
	push	DWORD PTR _PowerKnobs$[ebp]
	push	DWORD PTR _Count$[ebp]
	push	DWORD PTR _Results$[ebp]
	push	DWORD PTR _ResultsS$[ebp]
	push	DWORD PTR _ResultsV$[ebp]
	push	DWORD PTR _High$[ebp]
	push	DWORD PTR _Low$[ebp]
	push	DWORD PTR _Dim1StartPoint$[ebp]
	push	1
	push	DWORD PTR tv759[ebp]
	push	ebx
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassingVref1
; Line 14620
	mov	al, BYTE PTR _ControlIndex$[ebp]
	add	esp, 92					; 0000005cH
	cmp	al, BYTE PTR [ebx+43]
	jne	SHORT $LN16@DetermineP@2
; Line 14625
	push	esi
	push	DWORD PTR _PowerKnobs$[ebp]
	push	DWORD PTR _Count$[ebp]
	push	DWORD PTR _ResultsS$[ebp]
	push	DWORD PTR _ResultsV$[ebp]
	push	DWORD PTR _Results$[ebp]
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_CheckAndStoreEyeMasks
	add	esp, 32					; 00000020H
; Line 14626
	jmp	SHORT $LN18@DetermineP@2
$LN16@DetermineP@2:
; Line 14630
	movzx	eax, BYTE PTR [esi]
	push	OFFSET _CheckCount
	push	0
	push	0
	push	DWORD PTR _Count$[ebp]
	push	eax
	movzx	eax, WORD PTR [edi+23]
	push	1
	push	5
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 36					; 00000024H
$LN18@DetermineP@2:
	mov	ax, WORD PTR _ControlValue$[ebp]
	sub	ax, WORD PTR [edi+16]
	cmp	ax, WORD PTR [edi+12]
	mov	WORD PTR _ControlValue$[ebp], ax
	jg	$LL46@DetermineP@2
; Line 14633
	jmp	$LN14@DetermineP@2
$LN28@DetermineP@2:
; Line 14636
	mov	BYTE PTR _Param$[ebp+4], al
	mov	cx, WORD PTR [ebx]
; Line 14637
	mov	eax, edi
	imul	eax, 45					; 0000002dH
	push	OFFSET _StoreDelay
	lea	esi, DWORD PTR [eax+ebx]
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	push	1
	push	eax
	movzx	eax, WORD PTR [esi-22]
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	mov	WORD PTR _Param$[ebp], cx
	mov	cx, WORD PTR [ebx+45]
	mov	WORD PTR _Param$[ebp+2], cx
	mov	DWORD PTR tv648[ebp], esi
	call	_BuildComposite
	add	esp, 36					; 00000024H
; Line 14638
	cmp	BYTE PTR [ebx+43], 1
	jbe	$LN13@DetermineP@2
; Line 14639
	mov	ecx, DWORD PTR _Dim1StartPoint$[ebp]
	mov	edx, DWORD PTR _High$[ebp]
	mov	eax, edi
	imul	eax, 576				; 00000240H
	lea	ecx, DWORD PTR [eax+ecx-576]
	mov	eax, edi
	mov	edi, DWORD PTR _Low$[ebp]
	imul	eax, 72					; 00000048H
	push	0
	push	ecx
	lea	edx, DWORD PTR [eax+edx-72]
	lea	eax, DWORD PTR [eax+edi-72]
	push	edx
	push	eax
	sub	esp, 48					; 00000030H
	mov	DWORD PTR tv702[ebp], ecx
	push	11					; 0000000bH
	pop	ecx
	add	esi, -45				; ffffffd3H
	mov	edi, esp
	push	DWORD PTR _MrcData$[ebp]
	rep movsd
	mov	DWORD PTR tv705[ebp], edx
	mov	DWORD PTR tv707[ebp], eax
	movsb
	call	_ProgramInitialSettingsFor1DSweep
; Line 14640
	mov	eax, DWORD PTR tv645[ebp]
	mov	ecx, DWORD PTR _Results$[ebp]
	imul	eax, 4608				; 00001200H
	lea	eax, DWORD PTR [eax+ecx-4608]
	push	eax
	push	DWORD PTR tv702[ebp]
	movzx	ax, BYTE PTR _ControlIndex$[ebp]
	push	DWORD PTR _UnknownLastPass$[ebp]
	dec	ax
	push	DWORD PTR tv707[ebp]
	movzx	eax, ax
	push	DWORD PTR tv705[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_CompleteSweep
	add	esp, 100				; 00000064H
; Line 14641
	push	OFFSET _RestoreDelay
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	push	1
	push	eax
	mov	eax, DWORD PTR tv648[ebp]
	movzx	eax, WORD PTR [eax-22]
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	mov	esi, DWORD PTR tv648[ebp]
	mov	edi, DWORD PTR tv645[ebp]
	add	esp, 36					; 00000024H
$LN13@DetermineP@2:
; Line 14643
	mov	eax, 16387				; 00004003H
	cmp	WORD PTR [ebx], ax
	jne	$LN9@DetermineP@2
	cmp	BYTE PTR [ebx+22], 0
	jne	$LN9@DetermineP@2
; Line 14647
	mov	BYTE PTR _ch$[ebp], 0
$LL11@DetermineP@2:
; Line 14648
	mov	BYTE PTR _rk$[ebp], 0
$LL8@DetermineP@2:
; Line 14649
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN7@DetermineP@2
; Line 14650
	mov	BYTE PTR _st$[ebp], 0
$LL4@DetermineP@2:
; Line 14651
	push	0
	push	0
	push	DWORD PTR _st$[ebp]
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN3@DetermineP@2
; Line 14654
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	2
	push	57359					; 0000e00fH
	push	DWORD PTR _st$[ebp]
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 14655
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12305					; 00003011H
	push	DWORD PTR _st$[ebp]
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
; Line 14656
	lea	eax, DWORD PTR _TempValue$[ebp]
	push	eax
	push	24					; 00000018H
	push	12306					; 00003012H
	push	DWORD PTR _st$[ebp]
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
$LN3@DetermineP@2:
	inc	BYTE PTR _st$[ebp]
	cmp	BYTE PTR _st$[ebp], 18			; 00000012H
	jb	SHORT $LL4@DetermineP@2
$LN7@DetermineP@2:
; Line 14648
	inc	BYTE PTR _rk$[ebp]
	cmp	BYTE PTR _rk$[ebp], 4
	jb	$LL8@DetermineP@2
	inc	BYTE PTR _ch$[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	$LL11@DetermineP@2
$LN9@DetermineP@2:
; Line 14661
	mov	ecx, DWORD PTR _Dim1StartPoint$[ebp]
	mov	edx, DWORD PTR _High$[ebp]
	mov	eax, edi
	imul	eax, 576				; 00000240H
	add	ecx, eax
	mov	eax, edi
	mov	edi, DWORD PTR _Low$[ebp]
	imul	eax, 72					; 00000048H
	push	0
	push	ecx
	add	edx, eax
	add	eax, edi
	push	edx
	push	eax
	sub	esp, 48					; 00000030H
	mov	DWORD PTR tv701[ebp], ecx
	push	11					; 0000000bH
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _MrcData$[ebp]
	rep movsd
	mov	DWORD PTR tv704[ebp], edx
	mov	DWORD PTR tv706[ebp], eax
	movsb
	call	_ProgramInitialSettingsFor1DSweep
; Line 14662
	mov	eax, DWORD PTR tv645[ebp]
	imul	eax, 4608				; 00001200H
	add	eax, DWORD PTR _Results$[ebp]
	push	eax
	push	DWORD PTR tv701[ebp]
	movzx	ax, BYTE PTR _ControlIndex$[ebp]
	push	DWORD PTR _UnknownLastPass$[ebp]
	movzx	eax, ax
	push	DWORD PTR tv706[ebp]
	push	DWORD PTR tv704[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_CompleteSweep
	add	esp, 100				; 00000064H
$LN14@DetermineP@2:
; Line 14665
	xor	eax, eax
	inc	eax
$LN29@DetermineP@2:
; Line 14666
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_DeterminePassingVref1 ENDP
_TEXT	ENDS
PUBLIC	_DeterminePassingVref2
; Function compile flags: /Ogspy
;	COMDAT _DeterminePassingVref2
_TEXT	SEGMENT
_ResultsVTemp$ = -62560					; size = 46080
_Count$ = -16480					; size = 4608
_Results$ = -11872					; size = 9216
_Dim1StartPoint$ = -2656				; size = 1152
_PowerKnobs$ = -1504					; size = 1152
_Low$ = -352						; size = 144
_High$ = -208						; size = 144
_Param$ = -64						; size = 48
tv270 = -16						; size = 4
tv453 = -12						; size = 4
tv437 = -8						; size = 4
_NumberOfTiming$ = -2					; size = 1
_AllDoneFlag$ = -1					; size = 1
_MrcData$ = 8						; size = 4
tv459 = 12						; size = 4
_ControlKnobs$ = 12					; size = 4
_count$39866 = 15					; size = 1
_loop$ = 15						; size = 1
_ControlIndex$ = 16					; size = 1
_ResultsV$ = 20						; size = 4
_EyeMask$ = 24						; size = 4
_NumberEyeMask$ = 28					; size = 1
_DeterminePassingVref2 PROC				; COMDAT
; Line 14886
	push	ebp
	mov	ebp, esp
	sub	esp, 62560				; 0000f460H
	push	ebx
; Line 14904
	mov	ebx, DWORD PTR _ControlKnobs$[ebp]
	cmp	BYTE PTR [ebx+43], 1
	push	esi
	seta	cl
	inc	cl
	push	edi
	mov	BYTE PTR _NumberOfTiming$[ebp], cl
; Line 14915
	je	SHORT $LN14@DetermineP@3
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	movzx	ecx, cl
	mov	DWORD PTR tv459[ebp], eax
	xor	eax, eax
	mov	DWORD PTR tv453[ebp], ebx
	mov	DWORD PTR tv437[ebp], eax
	mov	DWORD PTR tv270[ebp], ecx
	jmp	SHORT $LN16@DetermineP@3
$LL60@DetermineP@3:
	mov	eax, DWORD PTR tv437[ebp]
$LN16@DetermineP@3:
; Line 14916
	mov	esi, DWORD PTR tv453[ebp]
	push	0
	push	DWORD PTR tv459[ebp]
	lea	ecx, DWORD PTR _High$[ebp+eax]
	push	ecx
	lea	eax, DWORD PTR _Low$[ebp+eax]
	push	eax
	sub	esp, 48					; 00000030H
	push	11					; 0000000bH
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _MrcData$[ebp]
	rep movsd
	movsb
	call	_ProgramInitialSettingsFor1DSweep
	add	DWORD PTR tv459[ebp], 576		; 00000240H
	add	DWORD PTR tv437[ebp], 72		; 00000048H
	add	DWORD PTR tv453[ebp], 45		; 0000002dH
	add	esp, 68					; 00000044H
	dec	DWORD PTR tv270[ebp]
	jne	SHORT $LL60@DetermineP@3
$LN14@DetermineP@3:
; Line 14921
	mov	esi, 4608				; 00001200H
	push	esi
	xor	edi, edi
	lea	eax, DWORD PTR _Count$[ebp]
	push	edi
	push	eax
	call	_memset
; Line 14922
	push	46080					; 0000b400H
	lea	eax, DWORD PTR _ResultsVTemp$[ebp]
	push	edi
	push	eax
	call	_memset
; Line 14923
	push	esi
	lea	eax, DWORD PTR _Results$[ebp]
	push	edi
	push	eax
	call	_memset
; Line 14924
	push	1152					; 00000480H
	lea	eax, DWORD PTR _PowerKnobs$[ebp]
	push	edi
	push	eax
	call	_memset
	add	esp, 48					; 00000030H
; Line 14937
	test	BYTE PTR [ebx+23], 4
	mov	BYTE PTR _AllDoneFlag$[ebp], 1
	mov	BYTE PTR _count$39866[ebp], 3
	jne	SHORT $LN5@DetermineP@3
; Line 14939
	push	DWORD PTR _MrcData$[ebp]
	call	_GetMaxElements
	pop	ecx
; Line 14940
	test	al, al
	jbe	SHORT $LN5@DetermineP@3
; Line 14939
	movzx	esi, al
$LL11@DetermineP@3:
; Line 14941
	mov	al, BYTE PTR _ControlIndex$[ebp]
	test	al, al
	jbe	SHORT $LN61@DetermineP@3
	mov	cl, 3
	imul	cl
	add	BYTE PTR _count$39866[ebp], al
$LN61@DetermineP@3:
; Line 14946
	add	BYTE PTR _count$39866[ebp], 12		; 0000000cH
	dec	esi
	jne	SHORT $LL11@DetermineP@3
$LN5@DetermineP@3:
; Line 14961
	lea	eax, DWORD PTR _AllDoneFlag$[ebp]
	push	eax
	mov	esi, DWORD PTR _EyeMask$[ebp]
	lea	eax, DWORD PTR _PowerKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Count$[ebp]
	push	eax
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	lea	eax, DWORD PTR _ResultsVTemp$[ebp]
	push	eax
	push	DWORD PTR _ResultsV$[ebp]
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	edi
	push	DWORD PTR _ControlIndex$[ebp]
	push	ebx
	push	esi
	push	DWORD PTR _MrcData$[ebp]
	call	_DeterminePassingVref1
; Line 14965
	mov	al, BYTE PTR _NumberOfTiming$[ebp]
	add	esp, 56					; 00000038H
	inc	al
	mov	BYTE PTR _loop$[ebp], al
	cmp	al, BYTE PTR [ebx+31]
	jae	SHORT $LN1@DetermineP@3
	jmp	SHORT $LN3@DetermineP@3
$LL64@DetermineP@3:
	mov	al, BYTE PTR _loop$[ebp]
$LN3@DetermineP@3:
; Line 14967
	mov	BYTE PTR _Param$[ebp+4], al
; Line 14970
	movzx	eax, al
	imul	eax, 45					; 0000002dH
	mov	ax, WORD PTR [eax+ebx+23]
	push	OFFSET _GetSet
	lea	ecx, DWORD PTR _PowerKnobs$[ebp]
	mov	DWORD PTR _Param$[ebp+8], ecx
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	push	edi
	lea	ecx, DWORD PTR _Count$[ebp]
	push	ecx
	push	edi
	or	ax, 2
	push	3
	movzx	eax, ax
	push	1
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _Param$[ebp], ebx
	mov	DWORD PTR _Param$[ebp+12], esi
	call	_BuildComposite
	add	esp, 36					; 00000024H
	inc	BYTE PTR _loop$[ebp]
	mov	al, BYTE PTR _loop$[ebp]
	cmp	al, BYTE PTR [ebx+31]
	jb	SHORT $LL64@DetermineP@3
$LN1@DetermineP@3:
; Line 14975
	mov	eax, DWORD PTR _ResultsV$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
; Line 14976
	lea	eax, DWORD PTR _ResultsVTemp$[ebp]
	mov	DWORD PTR _Param$[ebp+4], eax
; Line 14977
	lea	eax, DWORD PTR _Count$[ebp]
; Line 14979
	push	OFFSET _CopyResults
	mov	DWORD PTR _Param$[ebp+8], eax
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR _Param$[ebp+12], al
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 36					; 00000024H
; Line 14984
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_DeterminePassingVref2 ENDP
_TEXT	ENDS
PUBLIC	_SweepData1
EXTRN	_Getx4FloorPlan:PROC
; Function compile flags: /Ogspy
;	COMDAT _SweepData1
_TEXT	SEGMENT
_Results$ = -15940					; size = 9216
_Min$ = -6724						; size = 4608
_Dim1StartPoint$ = -2116				; size = 1152
_RestoreResultsPN$ = -964				; size = 576
_High$ = -388						; size = 144
_Low$ = -244						; size = 144
_Param$ = -100						; size = 48
tv1232 = -52						; size = 4
tv861 = -48						; size = 4
tv785 = -44						; size = 4
tv809 = -40						; size = 4
tv789 = -36						; size = 4
_Strobe$ = -32						; size = 1
tv1222 = -28						; size = 4
tv1204 = -28						; size = 4
tv878 = -28						; size = 4
tv813 = -24						; size = 4
_Dim2Loop$ = -20					; size = 1
tv1198 = -16						; size = 4
tv1134 = -16						; size = 4
tv879 = -16						; size = 4
_Channel$ = -12						; size = 1
tv1080 = -12						; size = 4
_Rank$ = -8						; size = 1
tv1064 = -8						; size = 4
_MaxElements$ = -1					; size = 1
_Dim1TimingLoop$ = -1					; size = 1
_MrcData$ = 8						; size = 4
_ResultsV$ = 12						; size = 4
_OrigNumberSamples$ = 16				; size = 2
_ControlKnobs$ = 20					; size = 4
_Dim1Control$ = 24					; size = 2
_Dim2Control$ = 28					; size = 2
_Dim1Override$ = 32					; size = 1
_Dim2Override$ = 36					; size = 1
_NewResultsV$ = 40					; size = 4
_NewNumberSamples$ = 44					; size = 2
_Max$ = 48						; size = 4
tv876 = 52						; size = 4
_UsePreviousMax$ = 52					; size = 1
_count$40279 = 55					; size = 1
_Loop$ = 55						; size = 1
_SweepData1 PROC					; COMDAT
; Line 15554
	push	ebp
	mov	ebp, esp
; Line 15575
	mov	eax, DWORD PTR _MrcData$[ebp]
	sub	esp, 15940				; 00003e44H
	cmp	BYTE PTR [eax+55393], 1
	push	ebx
	mov	ebx, DWORD PTR _ControlKnobs$[ebp]
	push	esi
	push	edi
	jbe	SHORT $LN51@SweepData1
; Line 15577
	movzx	ax, BYTE PTR [ebx+43]
	cmp	WORD PTR _Dim2Control$[ebp], ax
	sete	al
	inc	al
	mov	BYTE PTR _Dim1TimingLoop$[ebp], al
; Line 15584
	jmp	SHORT $LN48@SweepData1
$LN51@SweepData1:
; Line 15585
	mov	BYTE PTR _Dim1TimingLoop$[ebp], 1
$LN48@SweepData1:
; Line 15589
	cmp	BYTE PTR _UsePreviousMax$[ebp], 0
	jne	$LN105@SweepData1
; Line 15593
	push	4608					; 00001200H
	lea	eax, DWORD PTR _Min$[ebp]
	push	255					; 000000ffH
	push	eax
	call	_memset
; Line 15594
	mov	edi, DWORD PTR _Max$[ebp]
	push	13824					; 00003600H
	push	0
	push	edi
	call	_MmrcMemset
; Line 15600
	movzx	esi, WORD PTR _Dim2Control$[ebp]
	lea	eax, DWORD PTR _Min$[ebp]
	mov	DWORD PTR _Param$[ebp], eax
	mov	eax, esi
	imul	eax, 4608				; 00001200H
	add	edi, eax
; Line 15601
	xor	eax, eax
	add	esp, 24					; 00000018H
	mov	DWORD PTR _Param$[ebp+4], edi
	mov	BYTE PTR _Loop$[ebp], 0
	cmp	ax, WORD PTR _OrigNumberSamples$[ebp]
	jae	SHORT $LN44@SweepData1
	mov	eax, esi
	imul	eax, 45					; 0000002dH
	add	eax, ebx
; Line 15612
	mov	DWORD PTR tv789[ebp], eax
	jmp	SHORT $LN46@SweepData1
$LL102@SweepData1:
; Line 15601
	mov	eax, DWORD PTR tv789[ebp]
$LN46@SweepData1:
; Line 15602
	movzx	ecx, WORD PTR [eax+23]
; Line 15603
	mov	edx, 65535				; 0000ffffH
	cmp	WORD PTR [eax+4], dx
	je	SHORT $LN43@SweepData1
; Line 15604
	and	ecx, 65527				; 0000fff7H
$LN43@SweepData1:
; Line 15607
	push	OFFSET _FindMaxMinEW
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	movzx	eax, BYTE PTR _Loop$[ebp]
	imul	eax, 9216				; 00002400H
	add	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	movzx	ax, BYTE PTR _Dim2Override$[ebp]
	push	0
	push	0
	push	1
	push	2
	or	eax, ecx
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 36					; 00000024H
	inc	BYTE PTR _Loop$[ebp]
	movzx	ax, BYTE PTR _Loop$[ebp]
	cmp	ax, WORD PTR _OrigNumberSamples$[ebp]
	jb	SHORT $LL102@SweepData1
$LN44@SweepData1:
; Line 15610
	movzx	ax, BYTE PTR [ebx+43]
	cmp	WORD PTR _Dim2Control$[ebp], ax
	jae	SHORT $LN109@SweepData1
	mov	eax, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [eax+55393], 1
	jbe	SHORT $LN109@SweepData1
; Line 15614
	push	OFFSET _FindCommonMaxMinEW
	lea	ecx, DWORD PTR _Min$[ebp]
	mov	DWORD PTR _Param$[ebp], ecx
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	mov	ecx, esi
	imul	esi, 45					; 0000002dH
	imul	ecx, 9216				; 00002400H
	add	ecx, DWORD PTR _ResultsV$[ebp]
	mov	DWORD PTR _Param$[ebp+4], edi
	push	ecx
	xor	ecx, ecx
	push	ecx
	push	ecx
	push	1
	push	ecx
	mov	ecx, 514				; 00000202H
	or	cx, WORD PTR [esi+ebx+23]
	movzx	ecx, cx
	push	ecx
	push	eax
	call	_BuildComposite
	add	esp, 36					; 00000024H
$LN109@SweepData1:
; Line 15621
	movzx	eax, WORD PTR _Dim1Control$[ebp]
	mov	ecx, eax
	imul	ecx, 4608				; 00001200H
	add	ecx, DWORD PTR _Max$[ebp]
; Line 15622
	mov	BYTE PTR _Loop$[ebp], 0
	mov	DWORD PTR _Param$[ebp+4], ecx
	xor	ecx, ecx
	cmp	cx, WORD PTR _OrigNumberSamples$[ebp]
	jae	SHORT $LN105@SweepData1
	movzx	di, BYTE PTR _Dim2Override$[ebp]
	imul	eax, 45					; 0000002dH
	lea	esi, DWORD PTR [eax+ebx]
$LL104@SweepData1:
; Line 15623
	movzx	eax, WORD PTR [esi+23]
; Line 15624
	mov	ecx, 65535				; 0000ffffH
	cmp	WORD PTR [esi+4], cx
	je	SHORT $LN38@SweepData1
; Line 15625
	and	eax, 65527				; 0000fff7H
$LN38@SweepData1:
; Line 15628
	push	OFFSET _FindMaxMinEW
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	movzx	ecx, BYTE PTR _Loop$[ebp]
	imul	ecx, 9216				; 00002400H
	add	ecx, DWORD PTR _ResultsV$[ebp]
	push	ecx
	push	0
	push	0
	push	1
	mov	ecx, edi
	push	2
	or	ecx, eax
	push	ecx
	push	DWORD PTR _MrcData$[ebp]
	call	_BuildComposite
	add	esp, 36					; 00000024H
	inc	BYTE PTR _Loop$[ebp]
	movzx	ax, BYTE PTR _Loop$[ebp]
	cmp	ax, WORD PTR _OrigNumberSamples$[ebp]
	jb	SHORT $LL104@SweepData1
$LN105@SweepData1:
; Line 15637
	cmp	BYTE PTR _Dim1TimingLoop$[ebp], 0
	mov	BYTE PTR _Loop$[ebp], 0
	jbe	SHORT $LN35@SweepData1
	movzx	eax, WORD PTR _Dim1Control$[ebp]
	imul	eax, 45					; 0000002dH
	add	eax, ebx
	mov	DWORD PTR tv813[ebp], eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	xor	esi, esi
	mov	DWORD PTR tv1080[ebp], eax
	mov	DWORD PTR tv1064[ebp], esi
	jmp	SHORT $LN37@SweepData1
$LL107@SweepData1:
	mov	esi, DWORD PTR tv1064[ebp]
$LN37@SweepData1:
; Line 15639
	mov	al, BYTE PTR _Dim1Control$[ebp]
	add	al, BYTE PTR _Loop$[ebp]
	movzx	eax, al
	push	eax
	push	DWORD PTR tv1080[ebp]
	lea	eax, DWORD PTR _High$[ebp+esi]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp+esi]
	mov	esi, DWORD PTR tv813[ebp]
	push	eax
	sub	esp, 48					; 00000030H
	push	11					; 0000000bH
	pop	ecx
	mov	edi, esp
	push	DWORD PTR _MrcData$[ebp]
	rep movsd
	movsb
	call	_ProgramInitialSettingsFor1DSweep
	add	DWORD PTR tv1080[ebp], 576		; 00000240H
	add	DWORD PTR tv1064[ebp], 72		; 00000048H
	add	esp, 68					; 00000044H
	inc	BYTE PTR _Loop$[ebp]
	mov	al, BYTE PTR _Loop$[ebp]
	cmp	al, BYTE PTR _Dim1TimingLoop$[ebp]
	jb	SHORT $LL107@SweepData1
$LN35@SweepData1:
; Line 15642
	push	576					; 00000240H
	lea	eax, DWORD PTR _RestoreResultsPN$[ebp]
	push	0
	push	eax
	call	_memset
; Line 15653
	push	DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _count$40279[ebp], 4
	call	_GetMaxElements
	add	esp, 16					; 00000010H
	mov	BYTE PTR _MaxElements$[ebp], al
; Line 15654
	cmp	al, 9
	jbe	SHORT $LN54@SweepData1
	mov	cl, 4
	jmp	SHORT $LN55@SweepData1
$LN54@SweepData1:
	push	DWORD PTR _MrcData$[ebp]
	call	_GetMaxBits
	pop	ecx
	mov	cl, al
$LN55@SweepData1:
; Line 15655
	cmp	BYTE PTR _MaxElements$[ebp], 0
	jbe	SHORT $LN28@SweepData1
	movzx	esi, BYTE PTR _MaxElements$[ebp]
$LL34@SweepData1:
; Line 15657
	add	BYTE PTR _count$40279[ebp], 5
; Line 15658
	test	cl, cl
	jbe	SHORT $LN33@SweepData1
	mov	al, cl
	mov	dl, 3
	imul	dl
	add	BYTE PTR _count$40279[ebp], al
$LN33@SweepData1:
; Line 15655
	dec	esi
	jne	SHORT $LL34@SweepData1
$LN28@SweepData1:
; Line 15676
	xor	eax, eax
	mov	BYTE PTR _Dim2Loop$[ebp], 0
	cmp	ax, WORD PTR _NewNumberSamples$[ebp]
	jae	$LN24@SweepData1
	movzx	eax, WORD PTR _Dim2Control$[ebp]
	mov	edx, DWORD PTR _Max$[ebp]
	mov	ecx, eax
	imul	eax, 45					; 0000002dH
	imul	ecx, 4608				; 00001200H
	add	ecx, edx
	mov	DWORD PTR tv785[ebp], ecx
	movzx	cx, BYTE PTR _Dim2Override$[ebp]
	mov	WORD PTR tv1232[ebp], cx
	movzx	ecx, WORD PTR _Dim1Control$[ebp]
	mov	DWORD PTR tv809[ebp], ecx
	imul	ecx, 45					; 0000002dH
	add	eax, ebx
	xor	edx, edx
; Line 15710
	add	ecx, ebx
	mov	DWORD PTR tv789[ebp], eax
	mov	DWORD PTR tv813[ebp], ecx
	jmp	SHORT $LN26@SweepData1
$LL108@SweepData1:
; Line 15658
	mov	eax, DWORD PTR tv789[ebp]
$LN26@SweepData1:
; Line 15680
	mov	ecx, DWORD PTR tv785[ebp]
; Line 15687
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	DWORD PTR _Param$[ebp], ecx
	movzx	ecx, WORD PTR [eax+23]
	mov	esi, ecx
	or	esi, DWORD PTR tv1232[ebp]
	or	ecx, 2
	mov	WORD PTR _Param$[ebp+4], si
	mov	si, WORD PTR [eax]
	mov	WORD PTR _Param$[ebp+6], si
	movzx	esi, cx
	movzx	cx, BYTE PTR [ebx+43]
	mov	WORD PTR _Param$[ebp+10], dx
	mov	dx, WORD PTR _NewNumberSamples$[ebp]
	mov	WORD PTR _Param$[ebp+12], dx
	cmp	WORD PTR _Dim2Control$[ebp], cx
	jne	SHORT $LN23@SweepData1
	cmp	BYTE PTR [edi+55393], 1
	jbe	SHORT $LN23@SweepData1
; Line 15688
	or	esi, 512				; 00000200H
; Line 15689
	jmp	SHORT $LN21@SweepData1
$LN23@SweepData1:
; Line 15690
	mov	cl, BYTE PTR [edi+55393]
	movzx	dx, cl
	cmp	WORD PTR _Dim2Control$[ebp], dx
	jae	SHORT $LN21@SweepData1
	cmp	cl, 1
	jbe	SHORT $LN21@SweepData1
; Line 15691
	mov	ax, WORD PTR [eax+45]
	mov	WORD PTR _Param$[ebp+8], ax
$LN21@SweepData1:
; Line 15695
	movzx	eax, BYTE PTR _Dim2Loop$[ebp]
	mov	DWORD PTR tv861[ebp], eax
	imul	eax, 9216				; 00002400H
	add	eax, DWORD PTR _ResultsV$[ebp]
	push	OFFSET _ReAdjust
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	push	eax
	xor	eax, eax
	push	eax
	push	eax
	push	1
	push	eax
	push	esi
	push	edi
	call	_BuildComposite
	add	esp, 36					; 00000024H
; Line 15697
	test	DWORD PTR _Param$[ebp+4], 256		; 00000100H
	je	SHORT $LN20@SweepData1
; Line 15698
	push	DWORD PTR _Dim2Control$[ebp]
	push	ebx
	push	edi
	call	_ReAdjust2xRestriction
	add	esp, 12					; 0000000cH
$LN20@SweepData1:
; Line 15701
	lea	eax, DWORD PTR _RestoreResultsPN$[ebp]
	push	eax
	push	DWORD PTR _Dim2Loop$[ebp]
	push	DWORD PTR _Dim1Control$[ebp]
	push	ebx
	push	edi
	call	_RestoreDim1Values
; Line 15707
	mov	esi, DWORD PTR tv813[ebp]
	add	esp, 20					; 00000014H
	push	DWORD PTR _Dim1Control$[ebp]
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	sub	esp, 48					; 00000030H
	push	11					; 0000000bH
	pop	ecx
	mov	edi, esp
	rep movsd
	movsb
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	esi
	call	_ProgramInitialSettingsFor1DSweep
; Line 15709
	lea	eax, DWORD PTR _Results$[ebp]
	push	eax
	lea	eax, DWORD PTR _Dim1StartPoint$[ebp]
	push	eax
	push	1
	lea	eax, DWORD PTR _Low$[ebp]
	push	eax
	lea	eax, DWORD PTR _High$[ebp]
	push	eax
	push	DWORD PTR _Dim1Control$[ebp]
	push	ebx
	push	esi
	call	_CompleteSweep
; Line 15710
	movzx	ax, BYTE PTR [ebx+43]
	add	esp, 100				; 00000064H
	cmp	WORD PTR _Dim2Control$[ebp], ax
	jne	$LN19@SweepData1
	cmp	BYTE PTR [esi+55393], 1
	jbe	$LN19@SweepData1
; Line 15711
	lea	eax, DWORD PTR _RestoreResultsPN$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Dim1Control$[ebp]
	push	ebx
	push	esi
	call	_RestoreDim1Values
; Line 15712
	mov	eax, DWORD PTR tv809[ebp]
	mov	ecx, eax
	imul	eax, 72					; 00000048H
	add	esp, 20					; 00000014H
	imul	ecx, 576				; 00000240H
	lea	esi, DWORD PTR _High$[ebp+eax+72]
	lea	edi, DWORD PTR _Low$[ebp+eax+72]
	mov	al, BYTE PTR _Dim1Control$[ebp]
	inc	al
	movzx	eax, al
	push	eax
	lea	ecx, DWORD PTR _Dim1StartPoint$[ebp+ecx+576]
	push	ecx
	push	esi
	push	edi
	sub	esp, 48					; 00000030H
	mov	DWORD PTR tv878[ebp], esi
	mov	esi, DWORD PTR tv813[ebp]
	mov	DWORD PTR tv876[ebp], ecx
	push	11					; 0000000bH
	pop	ecx
	mov	DWORD PTR tv879[ebp], edi
	add	esi, 45					; 0000002dH
	mov	edi, esp
	push	DWORD PTR _MrcData$[ebp]
	rep movsd
	movsb
	call	_ProgramInitialSettingsFor1DSweep
; Line 15713
	mov	eax, DWORD PTR tv809[ebp]
	imul	eax, 4608				; 00001200H
	lea	eax, DWORD PTR _Results$[ebp+eax+4608]
	push	eax
	push	DWORD PTR tv876[ebp]
	mov	eax, DWORD PTR _Dim1Control$[ebp]
	push	1
	push	DWORD PTR tv879[ebp]
	inc	eax
	push	DWORD PTR tv878[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _MrcData$[ebp]
	call	_CompleteSweep
	mov	esi, DWORD PTR _MrcData$[ebp]
	add	esp, 100				; 00000064H
$LN19@SweepData1:
; Line 15718
	cmp	BYTE PTR [ebx+43], 0
	mov	BYTE PTR _Loop$[ebp], 0
	jbe	$LN16@SweepData1
$LL18@SweepData1:
; Line 15719
	mov	BYTE PTR _Channel$[ebp], 0
	xor	edi, edi
$LL111@SweepData1:
; Line 15720
	mov	BYTE PTR _Rank$[ebp], 0
	xor	esi, esi
$LL12@SweepData1:
; Line 15721
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN11@SweepData1
; Line 15722
	movzx	eax, BYTE PTR _Loop$[ebp]
	mov	edx, DWORD PTR tv861[ebp]
	lea	ecx, DWORD PTR [edi+eax*2]
	lea	eax, DWORD PTR [eax+edx*2]
	lea	eax, DWORD PTR [edi+eax*2]
	lea	eax, DWORD PTR [esi+eax*4]
	lea	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR tv1204[ebp], eax
	imul	ecx, 576				; 00000240H
	imul	eax, 576				; 00000240H
	add	eax, DWORD PTR _ResultsV$[ebp]
	lea	ecx, DWORD PTR _Results$[ebp+ecx]
	push	576					; 00000240H
	push	ecx
	push	eax
	mov	DWORD PTR tv1198[ebp], ecx
	call	_memcpy
; Line 15727
	mov	eax, DWORD PTR tv813[ebp]
	add	esp, 12					; 0000000cH
	test	BYTE PTR [eax+23], 128			; 00000080H
	je	SHORT $LN11@SweepData1
	mov	ecx, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR [esi+edi*4]
	cmp	BYTE PTR [eax+ecx+55454], 18		; 00000012H
	jne	SHORT $LN11@SweepData1
; Line 15729
	mov	eax, DWORD PTR tv1204[ebp]
	imul	eax, 18					; 00000012H
	mov	DWORD PTR tv1222[ebp], eax
	mov	eax, DWORD PTR tv1198[ebp]
	mov	BYTE PTR _Strobe$[ebp], 0
	mov	DWORD PTR tv1134[ebp], eax
$LL112@SweepData1:
; Line 15730
	push	32					; 00000020H
	push	DWORD PTR tv1134[ebp]
	push	DWORD PTR _Strobe$[ebp]
	call	_Getx4FloorPlan
	movzx	eax, al
	add	eax, DWORD PTR tv1222[ebp]
	pop	ecx
	shl	eax, 5
	add	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	call	_memcpy
	add	DWORD PTR tv1134[ebp], 32		; 00000020H
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Strobe$[ebp]
	cmp	BYTE PTR _Strobe$[ebp], 9
	jb	SHORT $LL112@SweepData1
$LN11@SweepData1:
; Line 15720
	inc	BYTE PTR _Rank$[ebp]
	inc	esi
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	$LL12@SweepData1
	inc	BYTE PTR _Channel$[ebp]
	inc	edi
	cmp	BYTE PTR _Channel$[ebp], 2
	jb	$LL111@SweepData1
	inc	BYTE PTR _Loop$[ebp]
	mov	al, BYTE PTR _Loop$[ebp]
	cmp	al, BYTE PTR [ebx+43]
	jb	$LL18@SweepData1
; Line 15718
	mov	esi, DWORD PTR _MrcData$[ebp]
$LN16@SweepData1:
; Line 15742
	xor	eax, eax
	mov	WORD PTR _Param$[ebp+8], ax
; Line 15743
	mov	eax, DWORD PTR _ResultsV$[ebp]
	mov	DWORD PTR _Param$[ebp+12], eax
; Line 15744
	mov	al, BYTE PTR _Dim2Control$[ebp]
	mov	BYTE PTR _Param$[ebp+16], al
; Line 15745
	mov	al, BYTE PTR _Dim2Loop$[ebp]
	mov	BYTE PTR _Param$[ebp+17], al
; Line 15746
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	esi
	mov	DWORD PTR _Param$[ebp+4], ebx
	call	_PrintHiLow
; Line 15748
	mov	al, BYTE PTR [esi+55393]
	pop	ecx
	pop	ecx
	cmp	al, 1
	jbe	SHORT $LN25@SweepData1
	movzx	ax, al
	cmp	WORD PTR _Dim2Control$[ebp], ax
	jne	SHORT $LN25@SweepData1
; Line 15750
	xor	eax, eax
	inc	eax
	mov	WORD PTR _Param$[ebp+8], ax
; Line 15751
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	push	esi
	call	_PrintHiLow
	pop	ecx
	pop	ecx
$LN25@SweepData1:
	inc	BYTE PTR _Dim2Loop$[ebp]
	movzx	dx, BYTE PTR _Dim2Loop$[ebp]
	cmp	dx, WORD PTR _NewNumberSamples$[ebp]
	jb	$LL108@SweepData1
$LN24@SweepData1:
; Line 15757
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_SweepData1 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EHFOHPPB@ProgramSetGet?$AA@		; `string'
PUBLIC	_ProgramSetGet
;	COMDAT ??_C@_0O@EHFOHPPB@ProgramSetGet?$AA@
CONST	SEGMENT
??_C@_0O@EHFOHPPB@ProgramSetGet?$AA@ DB 'ProgramSetGet', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _ProgramSetGet
_TEXT	SEGMENT
_Results$40732 = -16800					; size = 9216
_Initial$40733 = -7584					; size = 4608
_Done$40734 = -2976					; size = 2304
_Dim1StartPoint$40731 = -672				; size = 576
_High$40729 = -96					; size = 72
_Low$40730 = -24					; size = 72
tv685 = 48						; size = 4
tv681 = 52						; size = 4
_TempValue$40736 = 56					; size = 4
_BitValue$ = 60						; size = 4
_SharedFlags$ = 64					; size = 2
tv1016 = 68						; size = 4
_st$ = 72						; size = 1
tv761 = 72						; size = 4
_StrobeValue$ = 76					; size = 4
_ch$ = 80						; size = 1
_MrcData$ = 92						; size = 4
_Range$ = 96						; size = 4
_Channel$ = 100						; size = 1
_Rank$ = 104						; size = 1
_Knob$ = 108						; size = 1
_Strobe$ = 112						; size = 1
_Bit$ = 116						; size = 1
_Timing$ = 120						; size = 1
_rk$ = 124						; size = 1
tv459 = 124						; size = 4
_Param$ = 124						; size = 4
_MaxBit$ = 127						; size = 1
_ProgramSetGet PROC					; COMDAT
; Line 16453
	push	ebp
	lea	ebp, DWORD PTR [esp-84]
	sub	esp, 16884				; 000041f4H
	push	ebx
; Line 16465
	mov	ebx, DWORD PTR _Param$[ebp]
	movzx	edx, WORD PTR [ebx+20]
	movzx	eax, dx
	push	esi
	push	edi
	mov	DWORD PTR _SharedFlags$[ebp], eax
; Line 16467
	test	al, al
	jns	SHORT $LN72@ProgramSet@2
	cmp	BYTE PTR _Strobe$[ebp], 9
	jb	SHORT $LN72@ProgramSet@2
	mov	eax, 65535				; 0000ffffH
	cmp	dx, ax
; Line 16468
	jne	$LN1@ProgramSet@2
$LN72@ProgramSet@2:
; Line 16479
	movzx	ecx, BYTE PTR _Channel$[ebp]
	movzx	eax, BYTE PTR _Timing$[ebp]
	movzx	esi, BYTE PTR _Rank$[ebp]
	mov	DWORD PTR tv681[ebp], ecx
	lea	ecx, DWORD PTR [ecx+eax*2]
	lea	ecx, DWORD PTR [esi+ecx*4]
	movzx	esi, BYTE PTR _Knob$[ebp]
	add	esi, ecx
	imul	esi, 18					; 00000012H
	mov	DWORD PTR tv685[ebp], ecx
	movzx	ecx, BYTE PTR _Strobe$[ebp]
	lea	edi, DWORD PTR [esi+ecx]
	movzx	ecx, BYTE PTR _Bit$[ebp]
	lea	esi, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR [ebx]
	add	esi, esi
	movzx	ecx, WORD PTR [esi+ecx]
	mov	DWORD PTR _StrobeValue$[ebp], ecx
; Line 16483
	test	dl, 8
	jne	$LN43@ProgramSet@2
; Line 16484
	push	16484					; 00004064H
	push	OFFSET ??_C@_0O@EHFOHPPB@ProgramSetGet?$AA@
	push	DWORD PTR _MrcData$[ebp]
	call	_CheckPerBitSupport
	add	esp, 12					; 0000000cH
; Line 16488
	test	BYTE PTR [ebx+20], 64			; 00000040H
	je	$LN42@ProgramSet@2
; Line 16494
	cmp	BYTE PTR _Bit$[ebp], 0
	jne	SHORT $LN41@ProgramSet@2
; Line 16496
	lea	eax, DWORD PTR _MaxBit$[ebp]
	push	eax
	push	1
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_IsStrobeValid
; Line 16497
	mov	al, BYTE PTR _MaxBit$[ebp]
	add	esp, 24					; 00000018H
	cmp	al, 1
	jbe	SHORT $LN71@ProgramSet@2
	mov	ecx, DWORD PTR [ebx]
	shl	edi, 4
	dec	al
	lea	ecx, DWORD PTR [edi+ecx+2]
	movzx	edi, al
	mov	eax, DWORD PTR _StrobeValue$[ebp]
$LL40@ProgramSet@2:
; Line 16498
	movzx	edx, WORD PTR [ecx]
	cmp	edx, eax
	jae	SHORT $LN39@ProgramSet@2
; Line 16499
	mov	eax, edx
	mov	DWORD PTR _StrobeValue$[ebp], eax
$LN39@ProgramSet@2:
	inc	ecx
	inc	ecx
	dec	edi
	jne	SHORT $LL40@ProgramSet@2
; Line 16497
	jmp	SHORT $LN38@ProgramSet@2
$LN71@ProgramSet@2:
	mov	eax, DWORD PTR _StrobeValue$[ebp]
$LN38@ProgramSet@2:
; Line 16502
	mov	DWORD PTR [ebx+32], eax
; Line 16504
	jmp	SHORT $LN36@ProgramSet@2
$LN41@ProgramSet@2:
; Line 16505
	mov	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR _StrobeValue$[ebp], eax
$LN36@ProgramSet@2:
; Line 16511
	mov	ecx, DWORD PTR [ebx]
	movzx	ecx, WORD PTR [esi+ecx]
	mov	edx, ecx
	sub	edx, eax
	cmp	edx, 15					; 0000000fH
	jbe	SHORT $LN35@ProgramSet@2
; Line 16512
	and	DWORD PTR _BitValue$[ebp], 0
; Line 16513
	jmp	SHORT $LN34@ProgramSet@2
$LN35@ProgramSet@2:
; Line 16514
	sub	eax, ecx
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _BitValue$[ebp], eax
$LN34@ProgramSet@2:
; Line 16516
	lea	eax, DWORD PTR _BitValue$[ebp]
	push	eax
	movzx	eax, BYTE PTR _Timing$[ebp]
	movzx	eax, WORD PTR [ebx+eax*2+24]
	push	24					; 00000018H
	push	eax
	mov	eax, DWORD PTR _MrcData$[ebp]
	movzx	ecx, BYTE PTR [eax+55392]
	push	255					; 000000ffH
	push	ecx
	push	DWORD PTR _Bit$[ebp]
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	0
	push	eax
	call	_GetSetDdrioGroup
	add	esp, 48					; 00000030H
; Line 16518
	jmp	$LN1@ProgramSet@2
$LN42@ProgramSet@2:
; Line 16531
	cmp	BYTE PTR [ebx+37], 1
	jne	$LN1@ProgramSet@2
; Line 16537
	mov	eax, DWORD PTR _SharedFlags$[ebp]
; Line 16543
	mov	edi, DWORD PTR _MrcData$[ebp]
	and	eax, 1024				; 00000400H
	mov	BYTE PTR [ebx+37], 0
	mov	DWORD PTR tv1016[ebp], eax
	je	SHORT $LN73@ProgramSet@2
	xor	esi, esi
	push	esi
	push	esi
	push	esi
	push	edi
	call	_DnvNibbleTrainingHook
	add	esp, 16					; 00000010H
	jmp	SHORT $LN30@ProgramSet@2
$LN73@ProgramSet@2:
	xor	esi, esi
$LN30@ProgramSet@2:
; Line 16545
	push	OFFSET _DetermineStrobeVal
	push	ebx
	lea	eax, DWORD PTR _Results$40732[ebp]
	push	eax
	movzx	eax, WORD PTR [ebx+20]
	push	esi
	push	esi
	push	1
	push	esi
	push	eax
	push	edi
	call	_BuildComposite
; Line 16550
	mov	eax, DWORD PTR [ebx+44]
	mov	ecx, 16387				; 00004003H
	add	esp, 36					; 00000024H
	cmp	WORD PTR [eax], cx
	jne	$LN26@ProgramSet@2
	cmp	BYTE PTR [eax+22], 0
	jne	$LN26@ProgramSet@2
; Line 16554
	mov	BYTE PTR _ch$[ebp], 0
$LL28@ProgramSet@2:
; Line 16555
	mov	BYTE PTR _rk$[ebp], 0
$LL25@ProgramSet@2:
; Line 16556
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	call	_RunOnThisChannel
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN24@ProgramSet@2
; Line 16557
	mov	BYTE PTR _st$[ebp], 0
$LL21@ProgramSet@2:
; Line 16558
	push	esi
	push	esi
	mov	esi, DWORD PTR _st$[ebp]
	push	esi
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN20@ProgramSet@2
; Line 16561
	lea	eax, DWORD PTR _TempValue$40736[ebp]
	push	eax
	push	2
	push	57359					; 0000e00fH
	push	esi
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	call	_GetSetDdrioGroup2
; Line 16562
	lea	eax, DWORD PTR _TempValue$40736[ebp]
	push	eax
	push	24					; 00000018H
	push	12305					; 00003011H
	push	esi
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	call	_GetSetDdrioGroup2
; Line 16563
	lea	eax, DWORD PTR _TempValue$40736[ebp]
	push	eax
	push	24					; 00000018H
	push	12306					; 00003012H
	push	esi
	push	DWORD PTR _rk$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	call	_GetSetDdrioGroup2
	add	esp, 84					; 00000054H
$LN20@ProgramSet@2:
	inc	BYTE PTR _st$[ebp]
	xor	esi, esi
	cmp	BYTE PTR _st$[ebp], 18			; 00000012H
	jb	SHORT $LL21@ProgramSet@2
$LN24@ProgramSet@2:
; Line 16555
	inc	BYTE PTR _rk$[ebp]
	cmp	BYTE PTR _rk$[ebp], 4
	jb	$LL25@ProgramSet@2
	inc	BYTE PTR _ch$[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	$LL28@ProgramSet@2
$LN26@ProgramSet@2:
; Line 16568
	push	esi
	mov	esi, DWORD PTR [ebx+44]
	lea	eax, DWORD PTR _Dim1StartPoint$40731[ebp]
	push	eax
	lea	eax, DWORD PTR _High$40729[ebp]
	push	eax
	lea	eax, DWORD PTR _Low$40730[ebp]
	push	eax
	sub	esp, 48					; 00000030H
	push	11					; 0000000bH
	pop	ecx
	mov	edi, esp
	rep movsd
	movsb
	mov	edi, DWORD PTR _MrcData$[ebp]
	push	edi
	call	_ProgramInitialSettingsFor1DSweep
; Line 16569
	xor	esi, esi
	add	esp, 68					; 00000044H
	cmp	WORD PTR tv1016[ebp], si
	je	SHORT $LN17@ProgramSet@2
; Line 16573
	push	esi
	push	esi
	push	esi
	push	edi
	call	_DnvNibbleTrainingExitHook
	add	esp, 16					; 00000010H
$LN17@ProgramSet@2:
; Line 16575
	movzx	eax, BYTE PTR _Timing$[ebp]
	imul	eax, 4608				; 00001200H
	lea	eax, DWORD PTR _Results$40732[ebp+eax]
	push	eax
	mov	DWORD PTR tv761[ebp], eax
	lea	eax, DWORD PTR _Dim1StartPoint$40731[ebp]
	push	eax
	push	1
	lea	eax, DWORD PTR _Low$40730[ebp]
	push	eax
	lea	eax, DWORD PTR _High$40729[ebp]
	push	eax
	push	esi
	push	DWORD PTR [ebx+44]
	push	edi
	call	_CompleteSweep
	add	esp, 32					; 00000020H
; Line 16576
	cmp	WORD PTR tv1016[ebp], si
	je	SHORT $LN16@ProgramSet@2
; Line 16581
	push	esi
	push	esi
	push	esi
	push	edi
	call	_DnvNibbleTrainingHook
	add	esp, 16					; 00000010H
$LN16@ProgramSet@2:
; Line 16583
	lea	eax, DWORD PTR _Results$40732[ebp]
	push	eax
	push	esi
	push	DWORD PTR _SharedFlags$[ebp]
	push	edi
	call	_SplitByteResultsPerNibble
; Line 16585
	push	2304					; 00000900H
	lea	eax, DWORD PTR _Done$40734[ebp]
	push	esi
	push	eax
	call	_memset
; Line 16590
	push	OFFSET _CopyToLow
	lea	eax, DWORD PTR _Done$40734[ebp]
	mov	DWORD PTR [ebx+8], eax
	push	ebx
	lea	eax, DWORD PTR _Initial$40733[ebp]
	mov	DWORD PTR [ebx+4], eax
	lea	eax, DWORD PTR _Results$40732[ebp]
	push	eax
	movzx	eax, WORD PTR [ebx+20]
	push	esi
	push	esi
	push	1
	push	2
	push	eax
	push	edi
	mov	BYTE PTR [ebx+36], 0
	call	_BuildComposite
	add	esp, 64					; 00000040H
	jmp	$LN75@ProgramSet@2
$LL15@ProgramSet@2:
; Line 16593
	mov	eax, DWORD PTR [ebx+44]
	cmp	WORD PTR [eax+10], 16			; 00000010H
	jbe	$LN1@ProgramSet@2
; Line 16594
	mov	ecx, 65520				; 0000fff0H
	add	WORD PTR [eax+10], cx
; Line 16597
	movzx	ecx, BYTE PTR _Timing$[ebp]
	mov	eax, DWORD PTR [ebx+44]
	imul	ecx, 1152				; 00000480H
	lea	ecx, DWORD PTR _Done$40734[ebp+ecx]
	push	ecx
	mov	BYTE PTR [ebx+36], 1
	movzx	ecx, WORD PTR [eax+25]
	push	esi
	push	ecx
	movzx	ecx, WORD PTR [eax+4]
	movzx	eax, WORD PTR [eax+10]
	push	ecx
	push	eax
	push	edi
	call	_SetPBDLinear
	add	esp, 24					; 00000018H
; Line 16599
	cmp	WORD PTR tv1016[ebp], si
	je	SHORT $LN13@ProgramSet@2
; Line 16603
	push	esi
	push	esi
	push	esi
	push	edi
	call	_DnvNibbleTrainingExitHook
	add	esp, 16					; 00000010H
$LN13@ProgramSet@2:
; Line 16606
	push	DWORD PTR tv761[ebp]
	lea	eax, DWORD PTR _Dim1StartPoint$40731[ebp]
	push	eax
	push	1
	lea	eax, DWORD PTR _Low$40730[ebp]
	push	eax
	lea	eax, DWORD PTR _High$40729[ebp]
	push	eax
	push	esi
	push	DWORD PTR [ebx+44]
	push	edi
	call	_CompleteSweep
	add	esp, 32					; 00000020H
; Line 16607
	cmp	WORD PTR tv1016[ebp], si
	je	SHORT $LN12@ProgramSet@2
; Line 16612
	push	esi
	push	esi
	push	esi
	push	edi
	call	_DnvNibbleTrainingHook
	add	esp, 16					; 00000010H
$LN12@ProgramSet@2:
; Line 16614
	lea	eax, DWORD PTR _Results$40732[ebp]
	push	eax
	push	esi
	push	DWORD PTR _SharedFlags$[ebp]
	push	edi
	call	_SplitByteResultsPerNibble
; Line 16617
	movzx	eax, BYTE PTR _Rank$[ebp]
	mov	ecx, DWORD PTR tv681[ebp]
	lea	ecx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR tv685[ebp]
	imul	ecx, 72					; 00000048H
	add	esp, 16					; 00000010H
	imul	eax, 576				; 00000240H
	lea	ecx, DWORD PTR _Dim1StartPoint$40731[ebp+ecx+2]
	lea	eax, DWORD PTR _Results$40732[ebp+eax+2]
	mov	DWORD PTR tv459[ebp], 18		; 00000012H
$LL8@ProgramSet@2:
; Line 16618
	mov	dx, WORD PTR [eax]
	mov	WORD PTR [ecx], dx
	add	eax, 32					; 00000020H
	add	ecx, 4
	dec	DWORD PTR tv459[ebp]
	jne	SHORT $LL8@ProgramSet@2
; Line 16621
	push	OFFSET _TestNonLinearPBForDone
	push	ebx
	lea	eax, DWORD PTR _Results$40732[ebp]
	push	eax
	movzx	eax, WORD PTR [ebx+20]
	push	esi
	push	esi
	push	1
	push	2
	push	eax
	push	edi
	call	_BuildComposite
	add	esp, 36					; 00000024H
$LN75@ProgramSet@2:
; Line 16593
	cmp	BYTE PTR [ebx+36], 0
	je	$LL15@ProgramSet@2
; Line 16627
	jmp	SHORT $LN1@ProgramSet@2
$LN43@ProgramSet@2:
; Line 16631
	lea	esi, DWORD PTR [ebx+eax*2+24]
	lea	eax, DWORD PTR _StrobeValue$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	24					; 00000018H
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
; Line 16632
	test	BYTE PTR [ebx+20], 1
	je	SHORT $LN1@ProgramSet@2
; Line 16633
	mov	BYTE PTR _Rank$[ebp], 0
$LL3@ProgramSet@2:
; Line 16634
	lea	eax, DWORD PTR _StrobeValue$[ebp]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	24					; 00000018H
	push	eax
	push	DWORD PTR _Strobe$[ebp]
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	DWORD PTR _MrcData$[ebp]
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
	inc	BYTE PTR _Rank$[ebp]
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL3@ProgramSet@2
$LN1@ProgramSet@2:
; Line 16641
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	add	ebp, 84					; 00000054H
	leave
	ret	0
_ProgramSetGet ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@GNDOIOFI@ApplySetting?$AA@		; `string'
PUBLIC	_ApplySetting
;	COMDAT ??_C@_0N@GNDOIOFI@ApplySetting?$AA@
CONST	SEGMENT
??_C@_0N@GNDOIOFI@ApplySetting?$AA@ DB 'ApplySetting', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _ApplySetting
_TEXT	SEGMENT
_TempResults$ = -9560					; size = 9216
_StrobeVal$ = -344					; size = 288
_Param$ = -56						; size = 48
tv313 = -8						; size = 4
_MaxElements$40946 = -3					; size = 1
_MaxBit$40947 = -2					; size = 1
_count$40945 = -1					; size = 1
_MrcData$ = 8						; size = 4
_Value$ = 12						; size = 4
_Flags$ = 16						; size = 2
_i$40943 = 19						; size = 1
_PBFlags$ = 20						; size = 2
_Index$ = 24						; size = 4
_PBIndex$ = 28						; size = 2
_ControlKnobs$ = 32					; size = 4
_ApplySetting PROC					; COMDAT
; Line 17035
	push	ebp
	mov	ebp, esp
	sub	esp, 9560				; 00002558H
; Line 17039
	push	4608					; 00001200H
	lea	eax, DWORD PTR _TempResults$[ebp]
	push	0
	push	eax
	call	_memset
; Line 17053
	push	DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _count$40945[ebp], 3
	call	_GetMaxElements
	add	esp, 16					; 00000010H
	mov	BYTE PTR _MaxElements$40946[ebp], al
; Line 17054
	cmp	al, 9
	jbe	SHORT $LN17@ApplySetti
	mov	BYTE PTR _MaxBit$40947[ebp], 4
	jmp	SHORT $LN18@ApplySetti
$LN17@ApplySetti:
	push	DWORD PTR _MrcData$[ebp]
	call	_GetMaxBits
	pop	ecx
	mov	BYTE PTR _MaxBit$40947[ebp], al
$LN18@ApplySetti:
; Line 17055
	mov	ecx, DWORD PTR _Flags$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _Value$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _ControlKnobs$[ebp]
	mov	esi, OFFSET _ProgramSetGet
	test	cl, 4
	je	SHORT $LN36@ApplySetti
	mov	eax, 65535				; 0000ffffH
	cmp	cx, ax
	jne	SHORT $LN35@ApplySetti
$LN36@ApplySetti:
; Line 17056
	cmp	BYTE PTR _MaxElements$40946[ebp], 0
	mov	BYTE PTR _i$40943[ebp], 0
	jbe	SHORT $LN4@ApplySetti
	mov	DWORD PTR tv313[ebp], ecx
	and	DWORD PTR tv313[ebp], 128		; 00000080H
$LL37@ApplySetti:
; Line 17057
	mov	eax, 128				; 00000080H
	cmp	WORD PTR tv313[ebp], ax
	jne	SHORT $LN38@ApplySetti
	cmp	BYTE PTR _i$40943[ebp], 8
	jbe	SHORT $LN38@ApplySetti
	mov	eax, 65535				; 0000ffffH
	cmp	cx, ax
	jne	SHORT $LN4@ApplySetti
$LN38@ApplySetti:
; Line 17061
	add	BYTE PTR _count$40945[ebp], 5
; Line 17062
	test	BYTE PTR _PBFlags$[ebp], 8
	jne	SHORT $LN11@ApplySetti
; Line 17063
	mov	al, BYTE PTR _MaxBit$40947[ebp]
	test	al, al
	jbe	SHORT $LN11@ApplySetti
	mov	dl, 3
	imul	dl
	add	BYTE PTR _count$40945[ebp], al
$LN11@ApplySetti:
	inc	BYTE PTR _i$40943[ebp]
	mov	al, BYTE PTR _i$40943[ebp]
	cmp	al, BYTE PTR _MaxElements$40946[ebp]
	jb	SHORT $LL37@ApplySetti
$LN4@ApplySetti:
; Line 17082
	mov	eax, 65535				; 0000ffffH
	cmp	cx, ax
	je	SHORT $LN2@ApplySetti
$LN35@ApplySetti:
; Line 17083
	lea	eax, DWORD PTR _StrobeVal$[ebp]
	mov	DWORD PTR _Param$[ebp+40], eax
; Line 17087
	mov	eax, DWORD PTR _Index$[ebp]
	mov	dx, WORD PTR [eax]
; Line 17088
	mov	ax, WORD PTR [eax+2]
; Line 17090
	push	esi
	mov	WORD PTR _Param$[ebp+26], ax
	lea	eax, DWORD PTR _Param$[ebp]
	push	eax
	lea	eax, DWORD PTR _TempResults$[ebp]
	push	eax
	xor	eax, eax
	push	eax
	push	eax
	push	1
	push	eax
	push	ecx
	push	DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _Param$[ebp+37], 1
	mov	DWORD PTR _Param$[ebp], ebx
	mov	WORD PTR _Param$[ebp+20], cx
	mov	WORD PTR _Param$[ebp+24], dx
	mov	DWORD PTR _Param$[ebp+44], edi
	call	_BuildComposite
	add	esp, 36					; 00000024H
$LN2@ApplySetti:
; Line 17097
	mov	eax, 65535				; 0000ffffH
	cmp	WORD PTR _PBFlags$[ebp], ax
	je	SHORT $LN1@ApplySetti
; Line 17098
	push	17098					; 000042caH
	push	OFFSET ??_C@_0N@GNDOIOFI@ApplySetting?$AA@
	push	DWORD PTR _MrcData$[ebp]
	call	_CheckPerBitSupport
; Line 17103
	mov	cx, WORD PTR _PBIndex$[ebp]
; Line 17105
	push	esi
	mov	WORD PTR _Param$[ebp+24], cx
	lea	ecx, DWORD PTR _Param$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _TempResults$[ebp]
	push	ecx
	xor	ecx, ecx
	push	ecx
	push	ecx
	lea	eax, DWORD PTR _StrobeVal$[ebp]
	push	1
	mov	DWORD PTR _Param$[ebp+40], eax
	mov	eax, DWORD PTR _PBFlags$[ebp]
	push	ecx
	push	eax
	push	DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _Param$[ebp+37], 1
	mov	DWORD PTR _Param$[ebp], ebx
	mov	WORD PTR _Param$[ebp+20], ax
	mov	DWORD PTR _Param$[ebp+44], edi
	call	_BuildComposite
	add	esp, 48					; 00000030H
$LN1@ApplySetti:
	pop	edi
	pop	esi
; Line 17108
	xor	eax, eax
	pop	ebx
; Line 17109
	leave
	ret	0
_ApplySetting ENDP
_TEXT	ENDS
PUBLIC	_TestCycle
; Function compile flags: /Ogspy
;	COMDAT _TestCycle
_TEXT	SEGMENT
_ii$ = -1						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_TestCycle PROC						; COMDAT
; Line 1617
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 1618
	mov	BYTE PTR _ii$[ebp], 1
; Line 1621
	call	_EnableMrcBreakpoint
; Line 1622
	push	DWORD PTR _Channel$[ebp]
	mov	esi, DWORD PTR _MrcData$[ebp]
	xor	ebx, ebx
	push	ebx
	mov	edi, 18223				; 0000472fH
	push	edi
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 1623
	call	_DisableMrcBreakpoint
; Line 1624
	jmp	$LN10@TestCycle
$LL4@TestCycle:
; Line 1627
	mov	BYTE PTR [esi+55506], bl
; Line 1628
	call	_EnableMrcBreakpoint
; Line 1629
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 1630
	call	_DisableMrcBreakpoint
; Line 1631
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_ReInitializeFunction
	add	esp, 32					; 00000020H
; Line 1632
	mov	BYTE PTR [esi+55506], 7
; Line 1633
	cmp	BYTE PTR _Channel$[ebp], bl
	jne	SHORT $LN2@TestCycle
; Line 1634
	push	ebx
	push	ebx
	push	12046					; 00002f0eH
; Line 1635
	jmp	SHORT $LN11@TestCycle
$LN2@TestCycle:
; Line 1636
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	12142					; 00002f6eH
$LN11@TestCycle:
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 1637
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_ReceiveEnable
; Line 1639
	push	DWORD PTR _Channel$[ebp]
	and	BYTE PTR [esi+55506], 251		; 000000fbH
	push	ebx
	push	ebx
	push	esi
	call	_EarlyMprRead
; Line 1641
	push	DWORD PTR _Channel$[ebp]
	or	BYTE PTR [esi+55506], 4
	push	ebx
	push	ebx
	push	esi
	call	_DnvNibbleTrainingHook
; Line 1642
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_FineWriteLeveling
	add	esp, 64					; 00000040H
; Line 1643
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_CoarseWriteLeveling
; Line 1644
	push	DWORD PTR _Channel$[ebp]
	push	ebx
	push	ebx
	push	esi
	call	_DnvNibbleTrainingExitHook
	add	esp, 32					; 00000020H
$LN10@TestCycle:
	mov	al, BYTE PTR _ii$[ebp]
	test	al, al
	jne	$LL4@TestCycle
	pop	edi
	pop	esi
; Line 1646
	xor	eax, eax
	pop	ebx
; Line 1647
	leave
	ret	0
_TestCycle ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@MCLAIMB@AdvancedTrainingAlgo?$AA@	; `string'
PUBLIC	_AdvancedTrainingAlgo
EXTRN	_FindActiveChannel:PROC
;	COMDAT ??_C@_0BF@MCLAIMB@AdvancedTrainingAlgo?$AA@
CONST	SEGMENT
??_C@_0BF@MCLAIMB@AdvancedTrainingAlgo?$AA@ DB 'AdvancedTrainingAlgo', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _AdvancedTrainingAlgo
_TEXT	SEGMENT
_ResultsV$ = -73976					; size = 46080
_Max$ = -27896						; size = 13824
_PICenterPB$ = -14072					; size = 4608
_PICenterVref$ = -9464					; size = 4608
_PICenter$ = -4856					; size = 4608
_ControlKnobs$ = -248					; size = 225
tv909 = -20						; size = 4
tv1034 = -16						; size = 4
_Channel$ = -9						; size = 1
_Ch$ = -8						; size = 1
_Index$ = -4						; size = 4
_MrcData$ = 8						; size = 4
_Sample$ = 11						; size = 1
_VrefIndex$ = 11					; size = 1
_Loop$ = 11						; size = 1
_ControlKnobsInNV$ = 12					; size = 4
_NumberControlKnobs$ = 16				; size = 1
_EyeMask$ = 20						; size = 4
_NumberEyeMask$ = 24					; size = 1
_SharedFlags$ = 24					; size = 2
tv911 = 27						; size = 1
_PerBitEnable$ = 28					; size = 1
_AdvancedTrainingAlgo PROC				; COMDAT
; Line 16695
	push	ebp
	mov	ebp, esp
; Line 16712
	mov	eax, DWORD PTR _ControlKnobsInNV$[ebp]
	mov	cl, BYTE PTR [eax+43]
	sub	esp, 73976				; 000120f8H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR [esi+55393], cl
; Line 16725
	movzx	ecx, BYTE PTR _NumberControlKnobs$[ebp]
	imul	ecx, 45					; 0000002dH
	push	edi
	push	ecx
	push	eax
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	call	_MmrcMemCopy
; Line 16732
	mov	ebx, 65535				; 0000ffffH
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	cmp	WORD PTR _ControlKnobs$[ebp+2], ax
	je	SHORT $LN51@AdvancedTr
; Line 16733
	xor	al, al
	cmp	BYTE PTR _NumberControlKnobs$[ebp], al
	jbe	SHORT $LN48@AdvancedTr
	lea	edx, DWORD PTR _ControlKnobs$[ebp]
$LL50@AdvancedTr:
; Line 16734
	test	al, al
	jbe	SHORT $LN49@AdvancedTr
; Line 16735
	push	11					; 0000000bH
	lea	edi, DWORD PTR [edx-45]
	pop	ecx
	mov	esi, edx
	rep movsd
	movsb
	mov	esi, DWORD PTR _MrcData$[ebp]
$LN49@AdvancedTr:
	inc	al
	add	edx, 45					; 0000002dH
	cmp	al, BYTE PTR _NumberControlKnobs$[ebp]
	jb	SHORT $LL50@AdvancedTr
$LN48@AdvancedTr:
; Line 16741
	mov	ax, WORD PTR _ControlKnobs$[ebp+2]
	dec	BYTE PTR _NumberControlKnobs$[ebp]
	mov	BYTE PTR _ControlKnobs$[ebp+43], 1
	mov	BYTE PTR [esi+55393], 1
	mov	WORD PTR _ControlKnobs$[ebp], ax
$LN51@AdvancedTr:
; Line 16747
	cmp	BYTE PTR _PerBitEnable$[ebp], 1
	mov	al, BYTE PTR [esi+55393]
	mov	BYTE PTR _VrefIndex$[ebp], al
	jne	SHORT $LN95@AdvancedTr
; Line 16748
	push	16748					; 0000416cH
	push	OFFSET ??_C@_0BF@MCLAIMB@AdvancedTrainingAlgo?$AA@
	push	esi
	call	_CheckPerBitSupport
; Line 16749
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	cmp	WORD PTR _ControlKnobs$[ebp+4], ax
	je	SHORT $LN95@AdvancedTr
; Line 16750
	push	0
	push	1
	push	DWORD PTR _ControlKnobs$[ebp+25]
	push	DWORD PTR _ControlKnobs$[ebp+4]
	push	DWORD PTR _ControlKnobs$[ebp+10]
	push	esi
	call	_SetPBDLinear
	add	esp, 24					; 00000018H
$LN95@AdvancedTr:
; Line 16753
	lea	eax, DWORD PTR [esi+28608]
	mov	BYTE PTR _Ch$[ebp], 0
	mov	edi, eax
$LL44@AdvancedTr:
; Line 16754
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN43@AdvancedTr
; Line 16755
	push	DWORD PTR _Ch$[ebp]
	push	ebx
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN43@AdvancedTr:
	inc	BYTE PTR _Ch$[ebp]
	inc	edi
	cmp	BYTE PTR _Ch$[ebp], 2
	jb	SHORT $LL44@AdvancedTr
; Line 16762
	push	esi
	call	_FindActiveChannel
	pop	ecx
	mov	BYTE PTR _Channel$[ebp], al
; Line 16763
	cmp	al, 255					; 000000ffH
	jne	SHORT $LN40@AdvancedTr
; Line 16764
	mov	DWORD PTR [esi+65333], 44		; 0000002cH
; Line 16765
	call	_MrcDeadLoop
; Line 16766
	or	eax, -1
	jmp	$LN55@AdvancedTr
$LN40@AdvancedTr:
; Line 16768
	push	46080					; 0000b400H
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	0
	push	eax
	call	_memset
; Line 16769
	movzx	eax, BYTE PTR _Channel$[ebp]
	lea	eax, DWORD PTR [eax+esi+31272]
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [eax], 7
	mov	DWORD PTR tv909[ebp], eax
	jne	SHORT $LN100@AdvancedTr
	movzx	edx, BYTE PTR _VrefIndex$[ebp]
	imul	edx, 45					; 0000002dH
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edx]
	push	eax
	push	esi
	call	_GetOffsetIndex
	push	57360					; 0000e010H
	push	esi
	mov	di, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	di, ax
	jne	SHORT $LN100@AdvancedTr
; Line 16771
	lea	edx, DWORD PTR _ControlKnobs$[ebp+edx+23]
	or	WORD PTR [edx], 4
$LN100@AdvancedTr:
; Line 16776
	movzx	eax, BYTE PTR _NumberControlKnobs$[ebp]
	push	DWORD PTR _NumberEyeMask$[ebp]
	mov	edi, DWORD PTR _EyeMask$[ebp]
	dec	al
	push	edi
	lea	ecx, DWORD PTR _ResultsV$[ebp]
	push	ecx
	mov	BYTE PTR tv1034[ebp], al
	push	eax
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	esi
	call	_DeterminePassingVref2
	add	esp, 24					; 00000018H
; Line 16781
	xor	cl, cl
	cmp	BYTE PTR _PerBitEnable$[ebp], 1
	jne	$LN38@AdvancedTr
	cmp	BYTE PTR _ControlKnobs$[ebp+31], cl
	jbe	SHORT $LN84@AdvancedTr
$LL37@AdvancedTr:
; Line 16786
	movzx	eax, cl
	imul	eax, 45					; 0000002dH
	lea	eax, DWORD PTR _ControlKnobs$[ebp+eax+42]
	or	BYTE PTR [eax], 18			; 00000012H
	inc	cl
	cmp	cl, BYTE PTR _ControlKnobs$[ebp+31]
	jb	SHORT $LL37@AdvancedTr
$LN84@AdvancedTr:
; Line 16806
	push	16806					; 000041a6H
	push	OFFSET ??_C@_0BF@MCLAIMB@AdvancedTrainingAlgo?$AA@
	push	esi
	call	_CheckPerBitSupport
; Line 16807
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	cmp	WORD PTR _ControlKnobs$[ebp+25], ax
	je	$LN86@AdvancedTr
	test	BYTE PTR _ControlKnobs$[ebp+25], 64	; 00000040H
	je	SHORT $LN86@AdvancedTr
; Line 16813
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	push	0
	push	edi
	push	DWORD PTR _ControlKnobs$[ebp+25]
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	push	esi
	call	_CalculateCenter1
; Line 16818
	push	255					; 000000ffH
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16819
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	DWORD PTR _ControlKnobs$[ebp+4]
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	DWORD PTR _ControlKnobs$[ebp+25]
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	ebx
	push	eax
	push	esi
	call	_ApplySetting
	add	esp, 64					; 00000040H
; Line 16824
	push	DWORD PTR _NumberEyeMask$[ebp]
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	edi
	push	eax
	push	DWORD PTR tv1034[ebp]
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	esi
	call	_DeterminePassingVref2
	add	esp, 24					; 00000018H
$LN86@AdvancedTr:
; Line 16832
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	mov	eax, DWORD PTR _ControlKnobs$[ebp+23]
	push	0
	push	edi
	or	eax, 2
	push	eax
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	push	esi
	call	_CalculateCenter1
; Line 16837
	push	0
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16838
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	ebx
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	eax, DWORD PTR _ControlKnobs$[ebp+23]
	push	ebx
	or	eax, 2
	push	eax
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
; Line 16840
	movzx	edi, BYTE PTR _VrefIndex$[ebp]
	imul	edi, 45					; 0000002dH
	mov	ax, WORD PTR _ControlKnobs$[ebp+edi+14]
	add	esp, 64					; 00000040H
	cmp	ax, WORD PTR _ControlKnobs$[ebp+edi+12]
; Line 16841
	je	$LN101@AdvancedTr
; Line 16850
	xor	eax, eax
	push	eax
	lea	ecx, DWORD PTR _Max$[ebp]
	push	ecx
	movzx	cx, BYTE PTR _ControlKnobs$[ebp+89]
	movzx	ecx, cx
	push	ecx
	lea	ecx, DWORD PTR _ResultsV$[ebp]
	push	ecx
	push	10					; 0000000aH
	push	eax
	push	eax
	movzx	ax, BYTE PTR _VrefIndex$[ebp]
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	mov	eax, DWORD PTR _EyeMask$[ebp]
	movzx	eax, WORD PTR [eax]
	push	eax
	mov	eax, ecx
	push	eax
	push	esi
	call	_SweepData1
; Line 16851
	mov	eax, DWORD PTR tv909[ebp]
	mov	al, BYTE PTR [eax]
	add	esp, 48					; 00000030H
	mov	BYTE PTR tv911[ebp], al
	cmp	al, 7
	jne	SHORT $LN96@AdvancedTr
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edi]
	push	eax
	push	esi
	call	_GetOffsetIndex
	push	57360					; 0000e010H
	push	esi
	mov	dx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	dx, ax
	jne	SHORT $LN96@AdvancedTr
; Line 16853
	mov	eax, 65531				; 0000fffbH
	and	WORD PTR _ControlKnobs$[ebp+edi+23], ax
$LN96@AdvancedTr:
; Line 16860
	cmp	BYTE PTR tv911[ebp], 7
	jne	$LN26@AdvancedTr
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edi]
	push	eax
	push	esi
	call	_GetOffsetIndex
	push	57360					; 0000e010H
	push	esi
	mov	dx, ax
	call	_GetOffsetIndex
	add	esp, 16					; 00000010H
	cmp	dx, ax
	jne	SHORT $LN26@AdvancedTr
; Line 16864
	lea	eax, DWORD PTR _PICenterVref$[ebp]
	push	eax
	mov	ax, WORD PTR _ControlKnobs$[ebp+edi+23]
	push	0
	push	DWORD PTR _EyeMask$[ebp]
	or	ax, 4
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	push	esi
	call	_CalculateCenter1
; Line 16865
	push	1
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16866
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edi+4]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edi+23]
	push	ebx
	push	eax
	lea	eax, DWORD PTR _PICenterVref$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
	add	esp, 64					; 00000040H
; Line 16868
	and	BYTE PTR _ControlKnobs$[ebp+edi+42], 247 ; 000000f7H
	mov	BYTE PTR [esi+71022], 1
$LN26@AdvancedTr:
; Line 16870
	lea	eax, DWORD PTR _PICenterVref$[ebp]
	push	eax
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edi+23]
	push	0
	push	DWORD PTR _EyeMask$[ebp]
	push	eax
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	push	esi
	call	_CalculateCenter1
; Line 16871
	push	1
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16872
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edi+23]
	add	esp, 36					; 00000024H
; Line 16873
	cmp	BYTE PTR _ControlKnobs$[ebp+43], 1
	mov	DWORD PTR _SharedFlags$[ebp], eax
	jbe	SHORT $LN25@AdvancedTr
; Line 16874
	or	DWORD PTR _SharedFlags$[ebp], 512	; 00000200H
$LN25@AdvancedTr:
; Line 16876
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	movzx	eax, WORD PTR _ControlKnobs$[ebp+edi+4]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _SharedFlags$[ebp]
	lea	eax, DWORD PTR _PICenterVref$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
; Line 16879
	xor	edi, edi
	push	edi
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16880
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	ebx
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	eax, DWORD PTR _ControlKnobs$[ebp+23]
	push	ebx
	or	eax, 2
	push	eax
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
; Line 16888
	mov	eax, ebx
	add	esp, 68					; 00000044H
	cmp	WORD PTR _ControlKnobs$[ebp+2], ax
	je	$LN89@AdvancedTr
	cmp	BYTE PTR _PerBitEnable$[ebp], 0
	jne	$LN89@AdvancedTr
; Line 16889
	inc	BYTE PTR _NumberControlKnobs$[ebp]
; Line 16890
	movzx	eax, BYTE PTR _NumberControlKnobs$[ebp]
	imul	eax, 45					; 0000002dH
	push	eax
	push	DWORD PTR _ControlKnobsInNV$[ebp]
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	call	_MmrcMemCopy
; Line 16894
	movzx	eax, BYTE PTR [esi+55393]
	imul	eax, 45					; 0000002dH
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR _ControlKnobs$[ebp+eax+44], 0
	mov	BYTE PTR _Sample$[ebp], 0
	jbe	SHORT $LN21@AdvancedTr
$LL87@AdvancedTr:
; Line 16895
	movzx	eax, BYTE PTR _Sample$[ebp]
	imul	eax, 9216				; 00002400H
	lea	ecx, DWORD PTR _ResultsV$[ebp+eax]
	push	4608					; 00001200H
	push	ecx
	lea	eax, DWORD PTR _ResultsV$[ebp+eax+4608]
	push	eax
	call	_MmrcMemCopy
	movzx	eax, BYTE PTR [esi+55393]
	imul	eax, 45					; 0000002dH
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Sample$[ebp]
	mov	cl, BYTE PTR _Sample$[ebp]
	cmp	cl, BYTE PTR _ControlKnobs$[ebp+eax+44]
	jb	SHORT $LL87@AdvancedTr
$LN21@AdvancedTr:
; Line 16897
	mov	al, BYTE PTR _ControlKnobs$[ebp+43]
	mov	BYTE PTR _Loop$[ebp], 1
	cmp	al, 1
	jbe	SHORT $LN18@AdvancedTr
$LL88@AdvancedTr:
; Line 16898
	push	2304					; 00000900H
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	movzx	eax, BYTE PTR _Loop$[ebp]
	imul	eax, 2304				; 00000900H
	lea	eax, DWORD PTR _PICenter$[ebp+eax]
	push	eax
	call	_MmrcMemCopy
	mov	al, BYTE PTR _ControlKnobs$[ebp+43]
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Loop$[ebp]
	cmp	BYTE PTR _Loop$[ebp], al
	jb	SHORT $LL88@AdvancedTr
$LN18@AdvancedTr:
; Line 16900
	mov	BYTE PTR [esi+55393], al
; Line 16901
	mov	BYTE PTR _VrefIndex$[ebp], al
$LN89@AdvancedTr:
; Line 16903
	cmp	BYTE PTR _PerBitEnable$[ebp], 1
	jne	SHORT $LN91@AdvancedTr
; Line 16904
	push	16904					; 00004208H
	push	OFFSET ??_C@_0BF@MCLAIMB@AdvancedTrainingAlgo?$AA@
	push	esi
	call	_CheckPerBitSupport
; Line 16905
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	cmp	WORD PTR _ControlKnobs$[ebp+4], ax
	je	SHORT $LN91@AdvancedTr
; Line 16906
	push	edi
	push	1
	push	DWORD PTR _ControlKnobs$[ebp+25]
	push	DWORD PTR _ControlKnobs$[ebp+4]
	push	DWORD PTR _ControlKnobs$[ebp+10]
	push	esi
	call	_SetPBDLinear
	add	esp, 24					; 00000018H
$LN91@AdvancedTr:
; Line 16911
	push	edi
	lea	eax, DWORD PTR _Max$[ebp]
	push	eax
	movzx	ax, BYTE PTR _ControlKnobs$[ebp+44]
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	movzx	ax, BYTE PTR _VrefIndex$[ebp]
	movzx	eax, ax
	push	edi
	push	edi
	push	eax
	push	edi
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi+55393]
	imul	eax, 45					; 0000002dH
	movzx	ax, BYTE PTR _ControlKnobs$[ebp+eax+44]
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	push	esi
	call	_SweepData1
; Line 16917
	push	1
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16918
	movzx	edi, BYTE PTR _VrefIndex$[ebp]
	imul	edi, 45					; 0000002dH
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	edi, DWORD PTR _ControlKnobs$[ebp+edi+4]
	movzx	eax, WORD PTR [edi]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _SharedFlags$[ebp]
	lea	eax, DWORD PTR _PICenterVref$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
	add	esp, 88					; 00000058H
; Line 16924
	cmp	BYTE PTR _PerBitEnable$[ebp], 1
	jne	$LN99@AdvancedTr
; Line 16925
	push	16925					; 0000421dH
	push	OFFSET ??_C@_0BF@MCLAIMB@AdvancedTrainingAlgo?$AA@
	push	esi
	call	_CheckPerBitSupport
; Line 16926
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	cmp	WORD PTR _ControlKnobs$[ebp+25], ax
	je	$LN99@AdvancedTr
; Line 16932
	lea	eax, DWORD PTR _Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _PICenterPB$[ebp]
	push	eax
	push	DWORD PTR _ControlKnobs$[ebp+44]
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	DWORD PTR _ControlKnobs$[ebp+25]
	push	eax
	push	esi
	call	_CalculateCenter2
; Line 16936
	push	0
	lea	eax, DWORD PTR _PICenterPB$[ebp]
	push	eax
	push	DWORD PTR _ControlKnobs$[ebp+25]
	push	esi
	call	_SplitByteResultsPerNibble
; Line 16942
	push	255					; 000000ffH
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16943
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	DWORD PTR _ControlKnobs$[ebp+4]
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	DWORD PTR _ControlKnobs$[ebp+25]
	lea	eax, DWORD PTR _PICenterPB$[ebp]
	push	ebx
	push	eax
	push	esi
	call	_ApplySetting
	add	esp, 80					; 00000050H
; Line 16948
	push	0
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
	add	esp, 12					; 0000000cH
; Line 16949
	test	DWORD PTR _ControlKnobs$[ebp+25], 1024	; 00000400H
	je	SHORT $LN13@AdvancedTr
; Line 16953
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	push	esi
	call	_DnvNibbleTrainingExitHook
	add	esp, 16					; 00000010H
$LN13@AdvancedTr:
; Line 16955
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	ebx
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	mov	eax, DWORD PTR _ControlKnobs$[ebp+23]
	push	ebx
	or	eax, 2
	push	eax
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
; Line 16957
	push	1
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16958
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	movzx	eax, WORD PTR [edi]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _SharedFlags$[ebp]
	lea	eax, DWORD PTR _PICenterVref$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
	add	esp, 68					; 00000044H
; Line 16964
	xor	edi, edi
	test	DWORD PTR _ControlKnobs$[ebp+25], 1024	; 00000400H
	je	SHORT $LN12@AdvancedTr
	push	edi
	push	edi
	push	edi
	push	esi
	call	_DnvNibbleTrainingExitHook
	add	esp, 16					; 00000010H
$LN12@AdvancedTr:
; Line 16966
	mov	eax, ebx
	cmp	WORD PTR _ControlKnobs$[ebp+2], ax
	je	$LN94@AdvancedTr
; Line 16968
	mov	al, BYTE PTR _NumberControlKnobs$[ebp]
	inc	al
; Line 16969
	movzx	eax, al
	imul	eax, 45					; 0000002dH
	push	eax
	push	DWORD PTR _ControlKnobsInNV$[ebp]
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	call	_MmrcMemCopy
; Line 16973
	movzx	eax, BYTE PTR [esi+55393]
	imul	eax, 45					; 0000002dH
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR _ControlKnobs$[ebp+eax+44], 0
	mov	BYTE PTR _Sample$[ebp], 0
	jbe	SHORT $LN8@AdvancedTr
$LL92@AdvancedTr:
; Line 16974
	movzx	eax, BYTE PTR _Sample$[ebp]
	imul	eax, 9216				; 00002400H
	lea	ecx, DWORD PTR _ResultsV$[ebp+eax]
	push	4608					; 00001200H
	push	ecx
	lea	eax, DWORD PTR _ResultsV$[ebp+eax+4608]
	push	eax
	call	_MmrcMemCopy
	movzx	eax, BYTE PTR [esi+55393]
	imul	eax, 45					; 0000002dH
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Sample$[ebp]
	mov	cl, BYTE PTR _Sample$[ebp]
	cmp	cl, BYTE PTR _ControlKnobs$[ebp+eax+44]
	jb	SHORT $LL92@AdvancedTr
$LN8@AdvancedTr:
; Line 16976
	mov	al, BYTE PTR _ControlKnobs$[ebp+43]
	mov	BYTE PTR _Loop$[ebp], 1
	cmp	al, 1
	jbe	SHORT $LN5@AdvancedTr
$LL93@AdvancedTr:
; Line 16977
	push	2304					; 00000900H
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	movzx	eax, BYTE PTR _Loop$[ebp]
	imul	eax, 2304				; 00000900H
	lea	eax, DWORD PTR _PICenter$[ebp+eax]
	push	eax
	call	_MmrcMemCopy
	mov	al, BYTE PTR _ControlKnobs$[ebp+43]
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _Loop$[ebp]
	cmp	BYTE PTR _Loop$[ebp], al
	jb	SHORT $LL93@AdvancedTr
$LN5@AdvancedTr:
; Line 16979
	mov	BYTE PTR [esi+55393], al
; Line 16980
	mov	BYTE PTR _VrefIndex$[ebp], al
$LN94@AdvancedTr:
; Line 16982
	push	1
	lea	eax, DWORD PTR _Max$[ebp]
	push	eax
	movzx	ax, BYTE PTR _ControlKnobs$[ebp+44]
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	movzx	ax, BYTE PTR _VrefIndex$[ebp]
	movzx	eax, ax
	push	edi
	push	edi
	push	eax
	push	edi
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi+55393]
	imul	eax, 45					; 0000002dH
	movzx	ax, BYTE PTR _ControlKnobs$[ebp+eax+44]
	movzx	eax, ax
	push	eax
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	eax
	push	esi
	call	_SweepData1
	add	esp, 48					; 00000030H
	jmp	SHORT $LN14@AdvancedTr
$LN38@AdvancedTr:
; Line 16790
	cmp	BYTE PTR _ControlKnobs$[ebp+31], cl
	jbe	$LN86@AdvancedTr
$LL33@AdvancedTr:
; Line 16795
	movzx	eax, cl
	imul	eax, 45					; 0000002dH
	lea	eax, DWORD PTR _ControlKnobs$[ebp+eax+42]
	and	BYTE PTR [eax], 237			; 000000edH
	inc	cl
	cmp	cl, BYTE PTR _ControlKnobs$[ebp+31]
	jb	SHORT $LL33@AdvancedTr
; Line 16805
	jmp	$LN86@AdvancedTr
$LN99@AdvancedTr:
; Line 16982
	xor	edi, edi
$LN14@AdvancedTr:
; Line 16989
	lea	eax, DWORD PTR _Max$[ebp]
	push	eax
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	push	DWORD PTR _ControlKnobs$[ebp+44]
	lea	eax, DWORD PTR _ResultsV$[ebp]
	push	DWORD PTR _ControlKnobs$[ebp+23]
	push	eax
	push	esi
	call	_CalculateCenter2
; Line 16994
	push	edi
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16995
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	push	ebx
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _ControlKnobs$[ebp+23]
	lea	eax, DWORD PTR _PICenter$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
	add	esp, 64					; 00000040H
; Line 16997
	push	1
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	call	_FillSignalIndexArray
; Line 16998
	lea	eax, DWORD PTR _ControlKnobs$[ebp]
	push	eax
	movzx	eax, BYTE PTR _VrefIndex$[ebp]
	imul	eax, 45					; 0000002dH
	movzx	eax, WORD PTR _ControlKnobs$[ebp+eax+4]
	push	eax
	lea	eax, DWORD PTR _Index$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _SharedFlags$[ebp]
	lea	eax, DWORD PTR _PICenterVref$[ebp]
	push	eax
	push	esi
	call	_ApplySetting
	lea	eax, DWORD PTR [esi+28608]
	add	esp, 40					; 00000028H
; Line 17001
	mov	BYTE PTR _Ch$[ebp], 0
	mov	edi, eax
$LL4@AdvancedTr:
; Line 17002
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN3@AdvancedTr
; Line 17003
	push	DWORD PTR _Ch$[ebp]
	push	ebx
	push	15587					; 00003ce3H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN3@AdvancedTr:
	inc	BYTE PTR _Ch$[ebp]
	inc	edi
	cmp	BYTE PTR _Ch$[ebp], 2
	jb	SHORT $LL4@AdvancedTr
$LN101@AdvancedTr:
; Line 17008
	xor	eax, eax
$LN55@AdvancedTr:
	pop	edi
	pop	esi
	pop	ebx
; Line 17009
	leave
	ret	0
_AdvancedTrainingAlgo ENDP
_TEXT	ENDS
PUBLIC	_ReadTraining
EXTRN	_ControlKnobsReadPN:BYTE
EXTRN	_EyeMaskRead:BYTE
EXTRN	_NumberControlKnobsReadPN:BYTE
EXTRN	_NumberEyeMaskRead:BYTE
; Function compile flags: /Ogspy
;	COMDAT _ReadTraining
_TEXT	SEGMENT
_ch$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_ReadTraining PROC					; COMDAT
; Line 6424
	push	ebp
	mov	ebp, esp
	push	esi
; Line 6430
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+71018], 0
; Line 6432
	jne	$LN21@ReadTraini
	push	ebx
; Line 6440
	lea	ebx, DWORD PTR [esi+28608]
	push	edi
	mov	BYTE PTR _ch$[ebp], 0
	mov	edi, ebx
$LL12@ReadTraini:
; Line 6441
	cmp	BYTE PTR [edi], 1
	jne	SHORT $LN11@ReadTraini
; Line 6442
	push	DWORD PTR _ch$[ebp]
	push	65535					; 0000ffffH
	push	14555					; 000038dbH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN11@ReadTraini:
	inc	BYTE PTR _ch$[ebp]
	inc	edi
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL12@ReadTraini
; Line 6451
	cmp	BYTE PTR [esi+65337], 0
	jne	$LN20@ReadTraini
; Line 6452
	mov	al, BYTE PTR [esi+65346]
	inc	al
	mov	BYTE PTR [esi+65583], al
; Line 6453
	mov	al, BYTE PTR [esi+65347]
	mov	BYTE PTR [esi+65582], al
; Line 6454
	mov	BYTE PTR [esi+65570], 2
; Line 6455
	mov	BYTE PTR _ch$[ebp], 0
	lea	edi, DWORD PTR [esi+58134]
$LL7@ReadTraini:
; Line 6459
	and	DWORD PTR [edi+4], 0
	mov	DWORD PTR [edi], 1
; Line 6460
	cmp	BYTE PTR [ebx], 1
	jne	SHORT $LN6@ReadTraini
; Line 6461
	push	2
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_CpgcSetup
; Line 6463
	push	DWORD PTR _ch$[ebp]
	mov	BYTE PTR [esi+65585], 0
	push	esi
	call	_CpgcReconfig
	add	esp, 20					; 00000014H
$LN6@ReadTraini:
	inc	BYTE PTR _ch$[ebp]
	add	edi, 4336				; 000010f0H
	inc	ebx
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL7@ReadTraini
; Line 6469
	movzx	eax, BYTE PTR [esi+71005]
	push	eax
	movzx	eax, BYTE PTR _NumberEyeMaskRead
	push	eax
	movzx	eax, BYTE PTR _NumberControlKnobsReadPN
	push	OFFSET _EyeMaskRead
	push	eax
	push	OFFSET _ControlKnobsReadPN
	push	esi
	call	_AdvancedTrainingAlgo
; Line 6476
	push	1
	push	57348					; 0000e004H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_AverageGroups
	add	esp, 40					; 00000028H
$LN20@ReadTraini:
; Line 6484
	push	1
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResultsRxDqsWrapper
; Line 6489
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	14556					; 000038dcH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 28					; 0000001cH
; Line 6491
	cmp	BYTE PTR [esi+65478], 0
	pop	edi
	pop	ebx
	je	SHORT $LN3@ReadTraini
	mov	al, BYTE PTR [esi+31274]
	cmp	al, 1
	je	SHORT $LN21@ReadTraini
	cmp	al, 16					; 00000010H
; Line 6496
	je	SHORT $LN21@ReadTraini
$LN3@ReadTraini:
; Line 6499
	push	6
	push	8
	push	0
	push	2
	push	2
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TestMrcTrainingSteps
	add	esp, 28					; 0000001cH
$LN21@ReadTraini:
; Line 6612
	xor	eax, eax
	pop	esi
; Line 6613
	pop	ebp
	ret	0
_ReadTraining ENDP
_TEXT	ENDS
PUBLIC	_WriteTraining
EXTRN	_WriteTrainingExit:PROC
EXTRN	_ControlKnobsWriteDdr3:BYTE
EXTRN	_ControlKnobsWrite:BYTE
EXTRN	_EyeMaskWrite:BYTE
EXTRN	_NumberControlKnobsWrite:BYTE
EXTRN	_NumberEyeMaskWrite:BYTE
; Function compile flags: /Ogspy
;	COMDAT _WriteTraining
_TEXT	SEGMENT
_Txeq$ = -8						; size = 4
tv404 = -4						; size = 4
tv357 = -4						; size = 4
_ch$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_WriteTraining PROC					; COMDAT
; Line 6813
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 6829
	mov	esi, DWORD PTR _MrcData$[ebp]
	xor	ebx, ebx
	cmp	BYTE PTR [esi+71019], bl
; Line 6831
	jne	$LN25@WriteTrain
	push	edi
; Line 6833
	lea	edi, DWORD PTR [esi+28608]
	mov	DWORD PTR _Txeq$[ebp], ebx
; Line 6839
	mov	BYTE PTR _ch$[ebp], bl
	mov	DWORD PTR tv357[ebp], edi
$LL16@WriteTrain:
; Line 6840
	mov	eax, DWORD PTR tv357[ebp]
	cmp	BYTE PTR [eax], 1
	jne	SHORT $LN15@WriteTrain
; Line 6841
	push	DWORD PTR _ch$[ebp]
	push	65535					; 0000ffffH
	push	14557					; 000038ddH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN15@WriteTrain:
	inc	BYTE PTR _ch$[ebp]
	inc	DWORD PTR tv357[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL16@WriteTrain
; Line 6849
	cmp	BYTE PTR [esi+65337], bl
	jne	$LN24@WriteTrain
; Line 6853
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TxeqTunning
; Line 6858
	mov	al, BYTE PTR [esi+65346]
	mov	BYTE PTR [esi+65583], al
; Line 6859
	mov	al, BYTE PTR [esi+65347]
	pop	ecx
	mov	DWORD PTR tv404[ebp], edi
	pop	ecx
	mov	BYTE PTR [esi+65582], al
; Line 6862
	mov	BYTE PTR _ch$[ebp], bl
	lea	edi, DWORD PTR [esi+58134]
$LL11@WriteTrain:
; Line 6867
	mov	eax, DWORD PTR tv404[ebp]
	mov	DWORD PTR [edi], 1
	mov	DWORD PTR [edi+4], ebx
	cmp	BYTE PTR [eax], 1
	jne	SHORT $LN10@WriteTrain
; Line 6868
	push	2
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_CpgcSetup
; Line 6870
	push	DWORD PTR _ch$[ebp]
	mov	BYTE PTR [esi+65585], bl
	push	esi
	call	_CpgcReconfig
	add	esp, 20					; 00000014H
$LN10@WriteTrain:
	inc	BYTE PTR _ch$[ebp]
	add	edi, 4336				; 000010f0H
	inc	DWORD PTR tv404[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL11@WriteTrain
; Line 6892
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	BYTE PTR [esi+71022], bl
	cmp	BYTE PTR [eax+esi+31272], 7
; Line 6894
	movzx	eax, BYTE PTR [esi+71006]
	push	eax
	movzx	eax, BYTE PTR _NumberEyeMaskWrite
	push	eax
	movzx	eax, BYTE PTR _NumberControlKnobsWrite
	push	OFFSET _EyeMaskWrite
	push	eax
	jne	SHORT $LN7@WriteTrain
	push	OFFSET _ControlKnobsWrite
; Line 6895
	jmp	SHORT $LN26@WriteTrain
$LN7@WriteTrain:
; Line 6897
	push	OFFSET _ControlKnobsWriteDdr3
$LN26@WriteTrain:
	push	esi
	call	_AdvancedTrainingAlgo
	add	esp, 24					; 00000018H
; Line 6924
	push	ebx
	mov	edi, 57359				; 0000e00fH
	push	edi
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_BlastFinalResults
; Line 6925
	push	ebx
	push	12308					; 00003014H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_BlastFinalResults
; Line 6927
	push	ebx
	push	edi
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_AverageGroups
; Line 6929
	push	ebx
	push	12308					; 00003014H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_AverageGroups
	add	esp, 64					; 00000040H
	jmp	SHORT $LN12@WriteTrain
$LN24@WriteTrain:
	mov	edi, 57359				; 0000e00fH
$LN12@WriteTrain:
; Line 6936
	cmp	BYTE PTR [esi+65337], bl
	je	SHORT $LN5@WriteTrain
; Line 6937
	lea	eax, DWORD PTR _Txeq$[ebp]
	push	eax
	push	3
	push	20515					; 00005023H
	push	ebx
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 6938
	lea	eax, DWORD PTR _Txeq$[ebp]
	push	eax
	push	24					; 00000018H
	push	20515					; 00005023H
	push	ebx
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 56					; 00000038H
$LN5@WriteTrain:
; Line 6946
	push	1
	push	edi
	push	DWORD PTR _Channel$[ebp]
	mov	BYTE PTR [esi+71022], 1
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 6948
	push	ebx
	push	12308					; 00003014H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
	add	esp, 32					; 00000020H
	pop	edi
; Line 6950
	cmp	BYTE PTR [esi+71006], bl
	je	SHORT $LN4@WriteTrain
; Line 6951
	push	1
	push	57362					; 0000e012H
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
	add	esp, 16					; 00000010H
$LN4@WriteTrain:
; Line 6957
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	14558					; 000038deH
	push	esi
	call	_MmrcExecuteTask
; Line 6959
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_WriteTrainingExit
	add	esp, 24					; 00000018H
; Line 6961
	cmp	BYTE PTR [esi+65478], bl
	je	SHORT $LN3@WriteTrain
	mov	al, BYTE PTR [esi+31274]
	cmp	al, 1
	je	SHORT $LN25@WriteTrain
	cmp	al, 16					; 00000010H
; Line 6966
	je	SHORT $LN25@WriteTrain
$LN3@WriteTrain:
; Line 6968
	push	6
	push	8
	push	ebx
	push	2
	push	2
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TestMrcTrainingSteps
	add	esp, 28					; 0000001cH
$LN25@WriteTrain:
	pop	esi
; Line 7117
	xor	eax, eax
	pop	ebx
; Line 7118
	leave
	ret	0
_WriteTraining ENDP
_TEXT	ENDS
PUBLIC	_CommandClockTraining
EXTRN	_ControlKnobsCmd:BYTE
EXTRN	_EyeMaskCmd:BYTE
EXTRN	_NumberControlKnobsCmd:BYTE
EXTRN	_NumberEyeMaskCmd:BYTE
; Function compile flags: /Ogspy
;	COMDAT _CommandClockTraining
_TEXT	SEGMENT
tv296 = -8						; size = 4
tv148 = -8						; size = 4
_IndCh$ = -4						; size = 1
_CommandGroupOffset$ = -4				; size = 2
_SafeValue$ = 8						; size = 4
_MrcData$ = 8						; size = 4
_CapsuleStartIndex$ = 12				; size = 2
_StringIndex$ = 16					; size = 2
_Channel$ = 20						; size = 1
_CommandClockTraining PROC				; COMDAT
; Line 8776
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 8788
	mov	esi, DWORD PTR _MrcData$[ebp]
; Line 8790
	xor	eax, eax
	cmp	BYTE PTR [esi+71020], al
	jne	$LN13@CommandClo
	push	ebx
	push	edi
; Line 8792
	inc	eax
	mov	DWORD PTR [esi+58566], eax
; Line 8793
	mov	DWORD PTR [esi+62902], eax
; Line 8802
	lea	eax, DWORD PTR _SafeValue$[ebp]
	push	eax
	push	19					; 00000013H
	xor	ecx, ecx
	mov	ebx, 57373				; 0000e01dH
	push	ebx
	push	ecx
	push	ecx
	push	DWORD PTR _Channel$[ebp]
	mov	DWORD PTR [esi+58570], ecx
	push	esi
	mov	DWORD PTR [esi+62906], ecx
	call	_GetSetDdrioGroup2
; Line 8806
	movzx	eax, BYTE PTR _Channel$[ebp]
	mov	DWORD PTR tv296[ebp], eax
	imul	eax, 288				; 00000120H
	lea	edi, DWORD PTR [eax+esi+30752]
	movzx	eax, BYTE PTR [edi]
	push	eax
	push	DWORD PTR _SafeValue$[ebp]
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_BlastCommandGroups
; Line 8811
	push	DWORD PTR _SafeValue$[ebp]
	movzx	eax, BYTE PTR [edi]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SampleAndVerifyCmdStress
	add	esp, 60					; 0000003cH
; Line 8812
	cmp	eax, -1
; Line 8813
	je	SHORT $LN23@CommandClo
; Line 8823
	lea	eax, DWORD PTR _SafeValue$[ebp]
	push	eax
	push	19					; 00000013H
	push	ebx
	push	0
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 8827
	mov	eax, DWORD PTR tv296[ebp]
	push	DWORD PTR _SafeValue$[ebp]
	lea	edi, DWORD PTR [eax+esi+71456]
	movzx	eax, BYTE PTR [edi]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SampleAndVerifyCmdStress
	add	esp, 44					; 0000002cH
; Line 8828
	cmp	eax, -1
	jne	SHORT $LN9@CommandClo
; Line 8830
	inc	BYTE PTR [edi]
; Line 8834
	push	DWORD PTR _SafeValue$[ebp]
	movzx	eax, BYTE PTR [edi]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_SampleAndVerifyCmdStress
	add	esp, 16					; 00000010H
$LN23@CommandClo:
; Line 8836
	or	eax, -1
	jmp	$LN21@CommandClo
$LN9@CommandClo:
; Line 8847
	lea	eax, DWORD PTR _SafeValue$[ebp]
	push	eax
	push	19					; 00000013H
	push	ebx
	push	0
	push	0
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
; Line 8848
	movzx	eax, BYTE PTR [edi]
	push	eax
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_ChangeCmdMode
	add	esp, 40					; 00000028H
; Line 8855
	cmp	BYTE PTR [esi+65337], 0
	jne	$LN20@CommandClo
; Line 8860
	mov	al, BYTE PTR [esi+65346]
	mov	BYTE PTR [esi+65583], al
; Line 8861
	mov	al, BYTE PTR [esi+65347]
	mov	BYTE PTR [esi+65582], al
; Line 8864
	mov	BYTE PTR _IndCh$[ebp], 0
	lea	edi, DWORD PTR [esi+58134]
$LL7@CommandClo:
; Line 8868
	and	DWORD PTR [edi], 0
	and	DWORD PTR [edi+4], 0
; Line 8869
	push	7
	push	DWORD PTR _IndCh$[ebp]
	push	esi
	call	_CpgcSetup
; Line 8871
	push	DWORD PTR _IndCh$[ebp]
	mov	BYTE PTR [esi+65585], 0
	push	esi
	call	_CpgcReconfig
	add	esp, 20					; 00000014H
	inc	BYTE PTR _IndCh$[ebp]
	add	edi, 4336				; 000010f0H
	cmp	BYTE PTR _IndCh$[ebp], 2
	jb	SHORT $LL7@CommandClo
; Line 8874
	push	esi
	call	_ReInitializeDramsAcrossChannels
; Line 8875
	push	1
	push	esi
	call	_ForceMaxBit
; Line 8876
	movzx	eax, BYTE PTR _NumberEyeMaskCmd
	push	0
	push	eax
	movzx	eax, BYTE PTR _NumberControlKnobsCmd
	push	OFFSET _EyeMaskCmd
	push	eax
	push	OFFSET _ControlKnobsCmd
	push	esi
	call	_AdvancedTrainingAlgo
; Line 8877
	push	esi
	call	_ReInitializeDramsAcrossChannels
; Line 8878
	push	esi
	call	_GetMaxDq
	add	esp, 44					; 0000002cH
$LN20@CommandClo:
; Line 8883
	push	ebx
	push	esi
	call	_GetOffsetIndex
; Line 8884
	and	DWORD PTR _CommandGroupOffset$[ebp], 0
	pop	ecx
	pop	ecx
	movzx	edi, ax
	mov	DWORD PTR tv148[ebp], 8
$LL19@CommandClo:
; Line 8886
	mov	eax, DWORD PTR _CommandGroupOffset$[ebp]
	push	1
	lea	ebx, DWORD PTR [eax+edi]
	push	ebx
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_DisplayOrRestoreTrainingResults
; Line 8887
	push	ebx
	call	_GetSignalInfoIndex
	movzx	eax, ax
	imul	eax, 12					; 0000000cH
	movzx	ax, BYTE PTR _SignalInfoGenerated[eax+1]
	add	WORD PTR _CommandGroupOffset$[ebp], ax
	add	esp, 20					; 00000014H
	dec	DWORD PTR tv148[ebp]
	jne	SHORT $LL19@CommandClo
; Line 8892
	push	DWORD PTR _Channel$[ebp]
	push	65535					; 0000ffffH
	push	14596					; 00003904H
	push	esi
	call	_MmrcExecuteTask
; Line 8894
	push	6
	push	8
	push	0
	push	2
	push	2
	push	DWORD PTR _Channel$[ebp]
	push	esi
	call	_TestMrcTrainingSteps
	add	esp, 44					; 0000002cH
; Line 9328
	xor	eax, eax
$LN21@CommandClo:
	pop	edi
	pop	ebx
$LN13@CommandClo:
	pop	esi
; Line 9329
	leave
	ret	0
_CommandClockTraining ENDP
_TEXT	ENDS
END
