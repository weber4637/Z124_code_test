; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectData\DNV\External\Source\NvdimmHooks.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_NetlistArm
PUBLIC	_NetlistRestoreDone
PUBLIC	_NetlistRestoreStart
PUBLIC	_NetlistStatus
PUBLIC	_AgigaArm
PUBLIC	_AgigaRestoreDone
PUBLIC	_AgigaRestoreStart
PUBLIC	_AgigaStatus
PUBLIC	_SmartArm
PUBLIC	_SmartRestoreDone
PUBLIC	_SmartRestoreStart
PUBLIC	_SmartStatus
PUBLIC	_VikingArm
PUBLIC	_VikingRestoreDone
PUBLIC	_VikingRestoreStart
PUBLIC	_VikingStatus
PUBLIC	_JEDECArm
PUBLIC	_JEDECRestoreDone
PUBLIC	_JEDECRestoreStart
PUBLIC	_JEDECStatus
PUBLIC	_nv
_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
_nv	DW	0ffffH
	ORG $+62
	DW	0fffeH
	DB	'NOMATCH', 00H
	ORG $+11
	ORG $+3
	DD	06H
	DB	'JEDEC', 00H
	ORG $+12
	DB	08H
	DB	00H
	DD	FLAT:_JEDECStatus
	DD	FLAT:_JEDECRestoreStart
	DD	FLAT:_JEDECRestoreDone
	DD	FLAT:_JEDECArm
	DW	04001H
	DB	'VRA7', 00H
	ORG $+14
	ORG $+3
	DD	04H
	DB	'Viking', 00H
	ORG $+11
	DB	0bH
	DB	00H
	DD	FLAT:_VikingStatus
	DD	FLAT:_VikingRestoreStart
	DD	FLAT:_VikingRestoreDone
	DD	FLAT:_VikingArm
	DW	04001H
	DB	'VRA9', 00H
	ORG $+14
	ORG $+3
	DD	04H
	DB	'Viking', 00H
	ORG $+11
	DB	08H
	DB	02H
	DD	FLAT:_VikingStatus
	DD	FLAT:_VikingRestoreStart
	DD	FLAT:_VikingRestoreDone
	DD	FLAT:_VikingArm
	DW	09401H
	DB	'SGN', 00H
	ORG $+15
	ORG $+3
	DD	03H
	DB	'Smart', 00H
	ORG $+12
	DB	0bH
	DB	00H
	DD	FLAT:_SmartStatus
	DD	FLAT:_SmartRestoreStart
	DD	FLAT:_SmartRestoreDone
	DD	FLAT:_SmartArm
	DW	09401H
	DB	'S', 00H
	ORG $+17
	ORG $+3
	DD	01H
	DB	'Smart', 00H
	ORG $+12
	DB	08H
	DB	00H
	DD	FLAT:_SmartStatus
	DD	FLAT:_SmartRestoreStart
	DD	FLAT:_SmartRestoreDone
	DD	FLAT:_SmartArm
	DW	03400H
	DB	'AGIGA8', 00H
	ORG $+12
	ORG $+3
	DD	05H
	DB	'Agigatech', 00H
	ORG $+8
	DB	02H
	DB	00H
	DD	FLAT:_AgigaStatus
	DD	FLAT:_AgigaRestoreStart
	DD	FLAT:_AgigaRestoreDone
	DD	FLAT:_AgigaArm
	DW	02c00H
	DB	00H
	ORG $+18
	ORG $+3
	DD	00H
	DB	'Micron', 00H
	ORG $+11
	DB	02H
	DB	00H
	DD	FLAT:_AgigaStatus
	DD	FLAT:_AgigaRestoreStart
	DD	FLAT:_AgigaRestoreDone
	DD	FLAT:_AgigaArm
	DW	0ad00H
	DB	00H
	ORG $+18
	ORG $+3
	DD	00H
	DB	'SK Hynix', 00H
	ORG $+9
	DB	02H
	DB	00H
	DD	FLAT:_AgigaStatus
	DD	FLAT:_AgigaRestoreStart
	DD	FLAT:_AgigaRestoreDone
	DD	FLAT:_AgigaArm
	DW	01603H
	DB	'NV3', 00H
	ORG $+15
	ORG $+3
	DD	03H
	DB	'Netlist', 00H
	ORG $+10
	DB	0bH
	DB	00H
	DD	FLAT:_NetlistStatus
	DD	FLAT:_NetlistRestoreStart
	DD	FLAT:_NetlistRestoreDone
	DD	FLAT:_NetlistArm
	DW	00H
	ORG $+62
_DATA	ENDS
PUBLIC	_CoreNVDIMMStatus
; Function compile flags: /Ogspy
;	COMDAT _CoreNVDIMMStatus
_TEXT	SEGMENT
_smbusdev$ = -32					; size = 1
tv468 = -28						; size = 4
tv480 = -24						; size = 4
tv425 = -20						; size = 4
tv399 = -16						; size = 4
tv385 = -12						; size = 4
_ch$ = -8						; size = 1
_dimm$ = -4						; size = 1
_host$ = 8						; size = 4
_CoreNVDIMMStatus PROC					; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectdata\dnv\external\source\nvdimmhooks.c
; Line 2161
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 2175
	and	DWORD PTR tv399[ebp], 0
	and	DWORD PTR tv425[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _host$[ebp]
	lea	eax, DWORD PTR [esi+28608]
	mov	DWORD PTR tv468[ebp], eax
	lea	eax, DWORD PTR [esi+28610]
	push	edi
	mov	BYTE PTR _ch$[ebp], 0
	mov	DWORD PTR tv480[ebp], eax
$LL23@CoreNVDIMM:
; Line 2176
	mov	eax, DWORD PTR tv468[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN13@CoreNVDIMM
; Line 2180
	mov	eax, DWORD PTR tv480[ebp]
	mov	BYTE PTR _dimm$[ebp], 0
	xor	ebx, ebx
	mov	DWORD PTR tv385[ebp], eax
$LL22@CoreNVDIMM:
; Line 2181
	mov	eax, DWORD PTR tv385[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN9@CoreNVDIMM
; Line 2185
	mov	eax, DWORD PTR tv425[ebp]
	lea	ecx, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR [esi+ecx*4+65300]
; Line 2187
	test	eax, eax
	je	SHORT $LN9@CoreNVDIMM
; Line 2189
	lea	edi, DWORD PTR [esi+ecx*4+65316]
	and	DWORD PTR [edi], 0
; Line 2190
	mov	ecx, DWORD PTR tv399[ebp]
	lea	ecx, DWORD PTR [ebx+ecx*2+65380]
	mov	cl, BYTE PTR [ecx+esi]
	shl	eax, 6
	mov	dl, BYTE PTR _nv[eax+46]
	and	cl, 15					; 0000000fH
	shl	dl, 4
	or	cl, dl
	mov	BYTE PTR _smbusdev$[ebp], cl
; Line 2195
	push	DWORD PTR _smbusdev$[ebp]
	movzx	ecx, BYTE PTR _nv[eax+47]
	push	ecx
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	0
	push	esi
	call	DWORD PTR _nv[eax+48]
	add	esp, 24					; 00000018H
; Line 2197
	dec	eax
	dec	eax
	je	SHORT $LN9@CoreNVDIMM
	dec	eax
	je	SHORT $LN3@CoreNVDIMM
; Line 2210
	or	DWORD PTR [edi], 256			; 00000100H
; Line 2211
	jmp	SHORT $LN9@CoreNVDIMM
$LN3@CoreNVDIMM:
; Line 2200
	or	DWORD PTR [edi], 1
$LN9@CoreNVDIMM:
; Line 2180
	inc	BYTE PTR _dimm$[ebp]
	inc	ebx
	inc	DWORD PTR tv385[ebp]
	cmp	BYTE PTR _dimm$[ebp], 2
	jb	SHORT $LL22@CoreNVDIMM
$LN13@CoreNVDIMM:
; Line 2175
	inc	BYTE PTR _ch$[ebp]
	inc	DWORD PTR tv399[ebp]
	add	DWORD PTR tv425[ebp], 2
	add	DWORD PTR tv480[ebp], 2
	inc	DWORD PTR tv468[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	$LL23@CoreNVDIMM
	pop	edi
	pop	esi
; Line 2216
	xor	eax, eax
	pop	ebx
; Line 2217
	leave
	ret	0
_CoreNVDIMMStatus ENDP
_TEXT	ENDS
PUBLIC	_CoreArmNVDIMMs
; Function compile flags: /Ogspy
;	COMDAT _CoreArmNVDIMMs
_TEXT	SEGMENT
_smbusdev$ = -28					; size = 1
tv472 = -24						; size = 4
tv484 = -20						; size = 4
tv430 = -16						; size = 4
tv404 = -12						; size = 4
tv390 = -8						; size = 4
_ch$ = -4						; size = 1
_dimm$ = 8						; size = 1
_host$ = 8						; size = 4
_CoreArmNVDIMMs PROC					; COMDAT
; Line 2358
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
; Line 2368
	mov	esi, DWORD PTR _host$[ebp]
	cmp	BYTE PTR [esi+65487], 0
; Line 2370
	je	$LN21@CoreArmNVD
; Line 2373
	and	DWORD PTR tv404[ebp], 0
	and	DWORD PTR tv430[ebp], 0
	lea	eax, DWORD PTR [esi+28608]
	mov	DWORD PTR tv472[ebp], eax
	lea	eax, DWORD PTR [esi+28610]
	push	ebx
	mov	BYTE PTR _ch$[ebp], 0
	mov	DWORD PTR tv484[ebp], eax
	push	edi
$LL20@CoreArmNVD:
; Line 2374
	mov	eax, DWORD PTR tv472[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN10@CoreArmNVD
; Line 2378
	mov	eax, DWORD PTR tv484[ebp]
	mov	BYTE PTR _dimm$[ebp], 0
	xor	ebx, ebx
	mov	DWORD PTR tv390[ebp], eax
$LL19@CoreArmNVD:
; Line 2379
	mov	eax, DWORD PTR tv390[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN6@CoreArmNVD
; Line 2383
	mov	eax, DWORD PTR tv430[ebp]
	lea	edi, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR [esi+edi*4+65300]
; Line 2384
	test	eax, eax
	je	SHORT $LN6@CoreArmNVD
; Line 2386
	mov	ecx, DWORD PTR tv404[ebp]
	lea	ecx, DWORD PTR [ebx+ecx*2+65380]
	mov	cl, BYTE PTR [ecx+esi]
	shl	eax, 6
	mov	dl, BYTE PTR _nv[eax+46]
	and	cl, 15					; 0000000fH
	shl	dl, 4
	or	cl, dl
	mov	BYTE PTR _smbusdev$[ebp], cl
; Line 2391
	push	DWORD PTR _smbusdev$[ebp]
	movzx	ecx, BYTE PTR _nv[eax+47]
	push	ecx
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	0
	push	esi
	call	DWORD PTR _nv[eax+60]
	add	esp, 24					; 00000018H
; Line 2394
	lea	edi, DWORD PTR [esi+edi*4+65316]
	cmp	eax, -1
	jne	SHORT $LN2@CoreArmNVD
	or	DWORD PTR [edi], 1024			; 00000400H
; Line 2395
	jmp	SHORT $LN6@CoreArmNVD
$LN2@CoreArmNVD:
; Line 2397
	or	DWORD PTR [edi], 8
$LN6@CoreArmNVD:
; Line 2378
	inc	BYTE PTR _dimm$[ebp]
	inc	ebx
	inc	DWORD PTR tv390[ebp]
	cmp	BYTE PTR _dimm$[ebp], 2
	jb	SHORT $LL19@CoreArmNVD
$LN10@CoreArmNVD:
; Line 2373
	inc	BYTE PTR _ch$[ebp]
	inc	DWORD PTR tv404[ebp]
	add	DWORD PTR tv430[ebp], 2
	add	DWORD PTR tv484[ebp], 2
	inc	DWORD PTR tv472[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	$LL20@CoreArmNVD
	pop	edi
	pop	ebx
$LN21@CoreArmNVD:
; Line 2403
	xor	eax, eax
	pop	esi
; Line 2404
	leave
	ret	0
_CoreArmNVDIMMs ENDP
_TEXT	ENDS
PUBLIC	_PrechargeAllRanks
EXTRN	_PrechargeAll:PROC
; Function compile flags: /Ogspy
;	COMDAT _PrechargeAllRanks
_TEXT	SEGMENT
_Rank$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_ch$ = 12						; size = 1
_PrechargeAllRanks PROC					; COMDAT
; Line 2410
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2415
	movzx	eax, BYTE PTR _ch$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _MrcData$[ebp]
	mov	BYTE PTR _Rank$[ebp], 0
	lea	esi, DWORD PTR [edi+eax*4+55438]
$LL4@PrechargeA:
; Line 2416
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN3@PrechargeA
; Line 2420
	push	DWORD PTR _Rank$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	call	_PrechargeAll
	add	esp, 12					; 0000000cH
$LN3@PrechargeA:
	inc	BYTE PTR _Rank$[ebp]
	inc	esi
	cmp	BYTE PTR _Rank$[ebp], 4
	jb	SHORT $LL4@PrechargeA
	pop	edi
	pop	esi
; Line 2422
	leave
	ret	0
_PrechargeAllRanks ENDP
_TEXT	ENDS
PUBLIC	_NvDimmMrsRestore
EXTRN	_GetSetDdrioGroup2:PROC
EXTRN	_IsStrobeValid:PROC
EXTRN	_JedecInitFunction:PROC
EXTRN	_JedecDllOffToOnFlow:PROC
; Function compile flags: /Ogspy
;	COMDAT _NvDimmMrsRestore
_TEXT	SEGMENT
_Value$35717 = -12					; size = 4
tv379 = -8						; size = 4
_IndRk$35715 = -4					; size = 1
_IndSt$35716 = 8					; size = 1
_MrcData$ = 8						; size = 4
_ch$ = 12						; size = 1
_dimm$ = 16						; size = 1
_NvDimmMrsRestore PROC					; COMDAT
; Line 2429
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 2430
	mov	ebx, DWORD PTR _ch$[ebp]
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	push	ebx
	push	esi
	call	_PrechargeAllRanks
; Line 2431
	push	DWORD PTR _dimm$[ebp]
	push	ebx
	push	esi
	call	_JedecDllOffToOnFlow
; Line 2435
	push	ebx
	push	0
	push	0
	push	esi
	call	_JedecInitFunction
	add	esp, 36					; 00000024H
; Line 2437
	cmp	BYTE PTR [esi+71022], 0
	je	$LN8@NvDimmMrsR
; Line 2443
	cmp	BYTE PTR [esi+71461], 0
	je	$LN8@NvDimmMrsR
; Line 2444
	movzx	eax, bl
	cmp	BYTE PTR [eax+esi+31272], 7
	jne	$LN8@NvDimmMrsR
; Line 2445
	lea	ecx, DWORD PTR [esi+eax*4]
	imul	eax, 72					; 00000048H
	mov	BYTE PTR _IndRk$35715[ebp], 0
	mov	DWORD PTR tv379[ebp], ecx
	mov	ebx, eax
	push	edi
$LL22@NvDimmMrsR:
; Line 2446
	mov	eax, DWORD PTR tv379[ebp]
	cmp	BYTE PTR [eax+55438], 0
	je	SHORT $LN9@NvDimmMrsR
; Line 2447
	mov	BYTE PTR _IndSt$35716[ebp], 0
	xor	edi, edi
$LL6@NvDimmMrsR:
; Line 2450
	push	0
	push	0
	push	DWORD PTR _IndSt$35716[ebp]
	push	DWORD PTR _IndRk$35715[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_IsStrobeValid
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN5@NvDimmMrsR
	mov	eax, DWORD PTR tv379[ebp]
	cmp	BYTE PTR [eax+55470], 9
	jne	SHORT $LN20@NvDimmMrsR
	cmp	BYTE PTR _IndSt$35716[ebp], 8
	ja	SHORT $LN5@NvDimmMrsR
$LN20@NvDimmMrsR:
	cmp	BYTE PTR [esi+71022], 0
	jne	SHORT $LN3@NvDimmMrsR
	cmp	BYTE PTR _IndSt$35716[ebp], 0
	ja	SHORT $LN5@NvDimmMrsR
$LN3@NvDimmMrsR:
; Line 2456
	lea	eax, DWORD PTR [ebx+edi]
	movzx	eax, BYTE PTR [eax+esi+71023]
	mov	DWORD PTR _Value$35717[ebp], eax
; Line 2457
	lea	eax, DWORD PTR _Value$35717[ebp]
	push	eax
	push	24					; 00000018H
	push	57360					; 0000e010H
	push	DWORD PTR _IndSt$35716[ebp]
	push	DWORD PTR _IndRk$35715[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_GetSetDdrioGroup2
	add	esp, 28					; 0000001cH
$LN5@NvDimmMrsR:
	inc	BYTE PTR _IndSt$35716[ebp]
	inc	edi
	cmp	BYTE PTR _IndSt$35716[ebp], 18		; 00000012H
	jb	SHORT $LL6@NvDimmMrsR
$LN9@NvDimmMrsR:
; Line 2445
	inc	BYTE PTR _IndRk$35715[ebp]
	add	ebx, 18					; 00000012H
	inc	DWORD PTR tv379[ebp]
	cmp	BYTE PTR _IndRk$35715[ebp], 4
	jb	$LL22@NvDimmMrsR
	pop	edi
$LN8@NvDimmMrsR:
	pop	esi
	pop	ebx
; Line 2463
	leave
	ret	0
_NvDimmMrsRestore ENDP
_TEXT	ENDS
PUBLIC	_PlatformMrsRestoreNvDimms
EXTRN	_RestorePatrolDemandScrubbing:PROC
; Function compile flags: /Ogspy
;	COMDAT _PlatformMrsRestoreNvDimms
_TEXT	SEGMENT
tv389 = -20						; size = 4
tv318 = -16						; size = 4
tv278 = -12						; size = 4
_dimm$ = -8						; size = 1
_ch$ = -4						; size = 1
_MrcData$ = 8						; size = 4
_PlatformMrsRestoreNvDimms PROC				; COMDAT
; Line 2467
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 2472
	and	DWORD PTR tv318[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _MrcData$[ebp]
	lea	eax, DWORD PTR [esi+28608]
	push	edi
	mov	BYTE PTR _ch$[ebp], 0
	mov	DWORD PTR tv389[ebp], eax
	lea	ebx, DWORD PTR [esi+28610]
$LL18@PlatformMr:
; Line 2473
	mov	eax, DWORD PTR tv389[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN9@PlatformMr
; Line 2477
	mov	BYTE PTR _dimm$[ebp], 0
	xor	edi, edi
	mov	DWORD PTR tv278[ebp], ebx
$LL17@PlatformMr:
; Line 2478
	mov	eax, DWORD PTR tv278[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN5@PlatformMr
	mov	eax, DWORD PTR tv318[ebp]
	add	eax, edi
; Line 2488
	cmp	DWORD PTR [esi+eax*4+65300], 0
	je	SHORT $LN5@PlatformMr
	test	DWORD PTR [esi+eax*4+65316], 516	; 00000204H
	je	SHORT $LN5@PlatformMr
; Line 2492
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_NvDimmMrsRestore
	add	esp, 12					; 0000000cH
$LN5@PlatformMr:
	inc	BYTE PTR _dimm$[ebp]
	inc	edi
	inc	DWORD PTR tv278[ebp]
	cmp	BYTE PTR _dimm$[ebp], 2
	jb	SHORT $LL17@PlatformMr
; Line 2496
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_RestorePatrolDemandScrubbing
	pop	ecx
	pop	ecx
$LN9@PlatformMr:
	inc	BYTE PTR _ch$[ebp]
	add	DWORD PTR tv318[ebp], 2
	inc	ebx
	inc	ebx
	inc	DWORD PTR tv389[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL18@PlatformMr
	pop	edi
	pop	esi
	pop	ebx
; Line 2498
	leave
	ret	0
_PlatformMrsRestoreNvDimms ENDP
_TEXT	ENDS
PUBLIC	_PlatformMrsRestoreNvDimmsEndMarker
; Function compile flags: /Ogspy
;	COMDAT _PlatformMrsRestoreNvDimmsEndMarker
_TEXT	SEGMENT
_status$ = -1						; size = 1
_PlatformMrsRestoreNvDimmsEndMarker PROC		; COMDAT
; Line 2508
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2510
	mov	BYTE PTR _status$[ebp], 0
; Line 2511
	mov	al, BYTE PTR _status$[ebp]
; Line 2512
	leave
	ret	0
_PlatformMrsRestoreNvDimmsEndMarker ENDP
_TEXT	ENDS
PUBLIC	_PlatformCacheMrsRestoreNvDimms
; Function compile flags: /Ogspy
;	COMDAT _PlatformCacheMrsRestoreNvDimms
_TEXT	SEGMENT
_data$ = -12						; size = 4
_endFunctionPtr$ = -8					; size = 4
_functionPtr$ = -4					; size = 4
_MrcData$ = 8						; size = 4
_PlatformCacheMrsRestoreNvDimms PROC			; COMDAT
; Line 2517
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 2530
	mov	ecx, OFFSET _PlatformMrsRestoreNvDimmsEndMarker
	mov	eax, OFFSET _PlatformMrsRestoreNvDimms
; Line 2540
	mov	edx, ecx
	mov	DWORD PTR _functionPtr$[ebp], eax
	mov	DWORD PTR _endFunctionPtr$[ebp], ecx
	cmp	edx, eax
	ja	SHORT $LL2@PlatformCa
; Line 2541
	mov	ecx, eax
	add	ecx, 16384				; 00004000H
	mov	DWORD PTR _endFunctionPtr$[ebp], ecx
; Line 2544
	cmp	ecx, eax
	jbe	SHORT $LN1@PlatformCa
$LL2@PlatformCa:
; Line 2545
	mov	eax, DWORD PTR _functionPtr$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 2546
	add	DWORD PTR _functionPtr$[ebp], 4
	mov	DWORD PTR _data$[ebp], eax
	cmp	DWORD PTR _functionPtr$[ebp], ecx
	jb	SHORT $LL2@PlatformCa
$LN1@PlatformCa:
; Line 2548
	leave
	ret	0
_PlatformCacheMrsRestoreNvDimms ENDP
_TEXT	ENDS
PUBLIC	_EccInitializeNeeded
; Function compile flags: /Ogspy
;	COMDAT _EccInitializeNeeded
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_Chan$ = 12						; size = 1
_Dimm$ = 16						; size = 1
_Skip$ = 20						; size = 4
_EccInitializeNeeded PROC				; COMDAT
; Line 2564
	movzx	eax, BYTE PTR _Chan$[esp-4]
	mov	ecx, DWORD PTR _MrcData$[esp-4]
	push	esi
	mov	esi, DWORD PTR _Skip$[esp]
	mov	BYTE PTR [esi], 0
	cmp	BYTE PTR [eax+ecx+28608], 1
	jne	SHORT $LN1@EccInitial
; Line 2565
	movzx	edx, BYTE PTR _Dimm$[esp]
	push	edi
	lea	edi, DWORD PTR [edx+eax*2+28610]
	cmp	BYTE PTR [edi+ecx], 1
	pop	edi
	jne	SHORT $LN1@EccInitial
; Line 2566
	cmp	BYTE PTR [ecx+65480], 4
	jne	SHORT $LN1@EccInitial
	lea	eax, DWORD PTR [edx+eax*2]
	cmp	DWORD PTR [ecx+eax*4+65300], 0
	je	SHORT $LN1@EccInitial
; Line 2567
	test	DWORD PTR [ecx+eax*4+65316], 512	; 00000200H
	jne	SHORT $LN1@EccInitial
; Line 2571
	mov	BYTE PTR [esi], 1
$LN1@EccInitial:
	pop	esi
; Line 2578
	ret	0
_EccInitializeNeeded ENDP
_TEXT	ENDS
EXTRN	_MrcSmbusExec:PROC
; Function compile flags: /Ogspy
;	COMDAT _ReadSmb
_TEXT	SEGMENT
_Length$ = -1						; size = 1
_host$ = 8						; size = 4
_spd$ = 12						; size = 1
_SPD_FIELD$ = 16					; size = 2
_SPDReg$ = 20						; size = 4
_ReadSmb PROC						; COMDAT
; Line 2658
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2668
	push	DWORD PTR _SPDReg$[ebp]
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	push	DWORD PTR _SPD_FIELD$[ebp]
	mov	eax, DWORD PTR _host$[ebp]
	movzx	eax, WORD PTR [eax+65350]
	push	0
	push	DWORD PTR _spd$[ebp]
	mov	BYTE PTR _Length$[ebp], 1
	push	eax
	call	_MrcSmbusExec
	add	esp, 24					; 00000018H
; Line 2670
	leave
	ret	0
_ReadSmb ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _WriteSmb
_TEXT	SEGMENT
_Length$ = -1						; size = 1
_host$ = 8						; size = 4
_spd$ = 12						; size = 1
_SPD_FIELD$ = 16					; size = 2
_SPDReg$ = 20						; size = 4
_WriteSmb PROC						; COMDAT
; Line 2679
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2691
	push	DWORD PTR _SPDReg$[ebp]
	lea	eax, DWORD PTR _Length$[ebp]
	push	eax
	push	DWORD PTR _SPD_FIELD$[ebp]
	mov	eax, DWORD PTR _host$[ebp]
	movzx	eax, WORD PTR [eax+65350]
	push	1
	push	DWORD PTR _spd$[ebp]
	mov	BYTE PTR _Length$[ebp], 1
	push	eax
	call	_MrcSmbusExec
	add	esp, 24					; 00000018H
; Line 2693
	leave
	ret	0
_WriteSmb ENDP
_TEXT	ENDS
EXTRN	_McStall:PROC
; Function compile flags: /Ogspy
;	COMDAT _FixedDelay
_TEXT	SEGMENT
_duration$ = 8						; size = 4
_FixedDelay PROC					; COMDAT
; Line 2699
	push	esi
; Line 2706
	push	16					; 00000010H
	pop	esi
$LL3@FixedDelay:
; Line 2707
	push	DWORD PTR _duration$[esp]
	call	_McStall
	dec	esi
	pop	ecx
	jne	SHORT $LL3@FixedDelay
	pop	esi
; Line 2709
	ret	0
_FixedDelay ENDP
_TEXT	ENDS
PUBLIC	_ReadSmbNVDIMM
; Function compile flags: /Ogspy
;	COMDAT _ReadSmbNVDIMM
_TEXT	SEGMENT
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_dev$ = 16						; size = 1
_byteOffset$ = 20					; size = 1
_data$ = 24						; size = 4
_ReadSmbNVDIMM PROC					; COMDAT
; Line 168
	movzx	ax, BYTE PTR _byteOffset$[esp-4]
	push	DWORD PTR _data$[esp-4]
	movzx	eax, ax
	push	eax
	push	DWORD PTR _dev$[esp+4]
	push	DWORD PTR _host$[esp+8]
	call	_ReadSmb
	add	esp, 16					; 00000010H
; Line 169
	ret	0
_ReadSmbNVDIMM ENDP
_TEXT	ENDS
PUBLIC	_WriteSmbNVDIMM
; Function compile flags: /Ogspy
;	COMDAT _WriteSmbNVDIMM
_TEXT	SEGMENT
_Length$35970 = -1					; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_dev$ = 16						; size = 1
_byteOffset$ = 20					; size = 1
_data$ = 24						; size = 4
_WriteSmbNVDIMM PROC					; COMDAT
; Line 195
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 197
	push	DWORD PTR _data$[ebp]
	lea	eax, DWORD PTR _Length$35970[ebp]
	push	eax
; Line 203
	movzx	ax, BYTE PTR _byteOffset$[ebp]
	movzx	eax, ax
	push	eax
	mov	eax, DWORD PTR _host$[ebp]
	movzx	eax, WORD PTR [eax+65350]
	push	1
	push	DWORD PTR _dev$[ebp]
	mov	BYTE PTR _Length$35970[ebp], 1
	push	eax
	call	_MrcSmbusExec
	add	esp, 24					; 00000018H
; Line 204
	leave
	ret	0
_WriteSmbNVDIMM ENDP
_TEXT	ENDS
PUBLIC	_ReadSmbTimeout
; Function compile flags: /Ogspy
;	COMDAT _ReadSmbTimeout
_TEXT	SEGMENT
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_smbusdev$ = 16						; size = 1
_byteOffset$ = 20					; size = 1
_data$ = 24						; size = 4
_mask$ = 28						; size = 1
_expectedvalue$ = 32					; size = 1
_timeout$ = 36						; size = 2
_ReadSmbTimeout PROC					; COMDAT
; Line 219
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 220
	xor	ebx, ebx
	push	esi
	push	edi
; Line 223
	cmp	WORD PTR _timeout$[ebp], bx
	jne	SHORT $LN13@ReadSmbTim
; Line 227
	mov	DWORD PTR _timeout$[ebp], 1
$LN13@ReadSmbTim:
; Line 257
	mov	esi, DWORD PTR _data$[ebp]
$LL8@ReadSmbTim:
; Line 235
	movzx	ax, BYTE PTR _byteOffset$[ebp]
	push	esi
	push	eax
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmb
	add	esp, 16					; 00000010H
	mov	edi, eax
; Line 244
	test	ebx, ebx
	je	SHORT $LN16@ReadSmbTim
; Line 247
	push	1000000					; 000f4240H
	call	_FixedDelay
; Line 249
	add	DWORD PTR _timeout$[ebp], 65535		; 0000ffffH
	pop	ecx
$LN16@ReadSmbTim:
; Line 253
	xor	eax, eax
	inc	ebx
	cmp	ax, WORD PTR _timeout$[ebp]
	je	SHORT $LN14@ReadSmbTim
; Line 257
	mov	al, BYTE PTR [esi]
	and	al, BYTE PTR _mask$[ebp]
	cmp	al, BYTE PTR _expectedvalue$[ebp]
	jne	SHORT $LL8@ReadSmbTim
	test	edi, edi
	jne	SHORT $LL8@ReadSmbTim
; Line 259
	xor	eax, eax
$LN10@ReadSmbTim:
	pop	edi
	pop	esi
	pop	ebx
; Line 260
	pop	ebp
	ret	0
$LN14@ReadSmbTim:
; Line 255
	or	eax, -1
	jmp	SHORT $LN10@ReadSmbTim
_ReadSmbTimeout ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _NetlistStatus
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_NetlistStatus PROC					; COMDAT
; Line 276
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 281
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	6
	push	8
	push	8
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	9
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 282
	cmp	eax, -1
	je	SHORT $LN1@NetlistSta
; Line 287
	push	300					; 0000012cH
	push	0
	push	7
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
; Line 289
	push	1000000					; 000f4240H
	call	_FixedDelay
; Line 291
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	32					; 00000020H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 56					; 00000038H
; Line 292
	cmp	eax, -1
	je	SHORT $LN1@NetlistSta
; Line 293
	test	BYTE PTR _data$[ebp], 128		; 00000080H
	jne	SHORT $LN1@NetlistSta
; Line 296
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 297
	cmp	eax, -1
; Line 298
	je	SHORT $LN1@NetlistSta
; Line 300
	cmp	BYTE PTR _data$[ebp], 1
	jbe	SHORT $LN3@NetlistSta
	push	3
	pop	eax
	cmp	BYTE PTR _data$[ebp], al
	je	SHORT $LN4@NetlistSta
$LN1@NetlistSta:
; Line 312
	xor	eax, eax
	inc	eax
$LN4@NetlistSta:
	pop	edi
	pop	esi
; Line 318
	leave
	ret	0
$LN3@NetlistSta:
; Line 303
	push	2
	pop	eax
	jmp	SHORT $LN4@NetlistSta
_NetlistStatus ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _NetlistRestoreStart
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_NetlistRestoreStart PROC				; COMDAT
; Line 330
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 335
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	4
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 1
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_WriteSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 337
	xor	eax, eax
; Line 338
	leave
	ret	0
_NetlistRestoreStart ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _NetlistRestoreDone
_TEXT	SEGMENT
_i$ = -5						; size = 1
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_NetlistRestoreDone PROC				; COMDAT
; Line 349
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 355
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	300					; 0000012cH
	push	8
	push	255					; 000000ffH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	16					; 00000010H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 356
	cmp	eax, -1
	jne	SHORT $LN6@NetlistRes
$LN11@NetlistRes:
	or	eax, -1
	jmp	SHORT $LN7@NetlistRes
$LN6@NetlistRes:
; Line 359
	push	60					; 0000003cH
	push	0
	push	2
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 360
	cmp	eax, -1
	je	SHORT $LN11@NetlistRes
; Line 362
	test	BYTE PTR _data$[ebp], 128		; 00000080H
	je	SHORT $LN1@NetlistRes
; Line 367
	mov	BYTE PTR _i$[ebp], 32			; 00000020H
$LL3@NetlistRes:
; Line 368
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _i$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 372
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _i$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
	add	esp, 40					; 00000028H
	inc	BYTE PTR _i$[ebp]
	cmp	BYTE PTR _i$[ebp], 40			; 00000028H
	jb	SHORT $LL3@NetlistRes
$LN1@NetlistRes:
; Line 376
	xor	eax, eax
$LN7@NetlistRes:
	pop	edi
	pop	esi
; Line 377
	leave
	ret	0
_NetlistRestoreDone ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _NetlistArm
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_NetlistArm PROC					; COMDAT
; Line 388
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 397
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	600					; 00000258H
	push	16					; 00000010H
	push	16					; 00000010H
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 398
	cmp	eax, -1
	jne	SHORT $LN3@NetlistArm
$LN6@NetlistArm:
	or	eax, -1
	jmp	SHORT $LN1@NetlistArm
$LN3@NetlistArm:
; Line 407
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	4
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 5
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 409
	push	60					; 0000003cH
	push	0
	push	4
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 52					; 00000034H
; Line 410
	cmp	eax, -1
	je	SHORT $LN6@NetlistArm
; Line 414
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	4
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 67		; 00000043H
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 419
	push	60					; 0000003cH
	push	6
	push	6
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	9
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
; Line 420
	xor	ecx, ecx
	add	esp, 52					; 00000034H
	cmp	eax, -1
	setne	cl
	dec	ecx
	mov	eax, ecx
$LN1@NetlistArm:
	pop	edi
	pop	esi
; Line 429
	leave
	ret	0
_NetlistArm ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _AgigaStatus
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_AgigaStatus PROC					; COMDAT
; Line 446
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 453
	push	6
	push	165					; 000000a5H
	mov	esi, 255				; 000000ffH
	push	esi
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	9
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 454
	cmp	eax, -1
	jne	SHORT $LN4@AgigaStatu
$LN7@AgigaStatu:
	or	eax, -1
	jmp	SHORT $LN2@AgigaStatu
$LN4@AgigaStatu:
; Line 460
	push	120					; 00000078H
	push	0
	push	esi
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	10					; 0000000aH
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 461
	cmp	eax, -1
	je	SHORT $LN7@AgigaStatu
; Line 463
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	20					; 00000014H
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmb
; Line 469
	movzx	eax, BYTE PTR _data$[ebp]
	and	eax, 2
	or	eax, 4
	add	esp, 16					; 00000010H
	shr	eax, 1
$LN2@AgigaStatu:
	pop	esi
; Line 473
	leave
	ret	0
_AgigaStatus ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _AgigaRestoreStart
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_AgigaRestoreStart PROC					; COMDAT
; Line 484
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 489
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 150		; 00000096H
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_WriteSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 491
	xor	eax, eax
; Line 492
	leave
	ret	0
_AgigaRestoreStart ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _AgigaRestoreDone
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_AgigaRestoreDone PROC					; COMDAT
; Line 503
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 508
	push	300					; 0000012cH
	push	0
	push	255					; 000000ffH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 509
	cmp	eax, -1
	jne	SHORT $LN2@AgigaResto
	or	eax, eax
; Line 522
	leave
	ret	0
$LN2@AgigaResto:
; Line 511
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	21					; 00000015H
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 512
	test	BYTE PTR _data$[ebp], 1
	push	0
	pop	eax
	setne	al
	dec	eax
; Line 522
	leave
	ret	0
_AgigaRestoreDone ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _AgigaArm
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_AgigaArm PROC						; COMDAT
; Line 533
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 542
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	600					; 00000258H
	push	7
	push	7
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	18					; 00000012H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 543
	cmp	eax, -1
	jne	SHORT $LN2@AgigaArm
$LN5@AgigaArm:
	or	eax, -1
	jmp	SHORT $LN3@AgigaArm
$LN2@AgigaArm:
; Line 549
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 55		; 00000037H
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 551
	push	60					; 0000003cH
	push	127					; 0000007fH
	push	127					; 0000007fH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	18					; 00000012H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 52					; 00000034H
; Line 552
	cmp	eax, -1
	je	SHORT $LN5@AgigaArm
; Line 555
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	19					; 00000013H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 560
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 24		; 00000018H
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
	add	esp, 40					; 00000028H
; Line 562
	xor	eax, eax
$LN3@AgigaArm:
	pop	edi
	pop	esi
; Line 563
	leave
	ret	0
_AgigaArm ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _VikingStatus
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_VikingStatus PROC					; COMDAT
; Line 578
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 584
	mov	ebx, DWORD PTR _host$[ebp]
	push	edi
	mov	edi, DWORD PTR _socket$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	1
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 192		; 000000c0H
	push	edi
	push	ebx
	call	_WriteSmbNVDIMM
; Line 588
	push	120					; 00000078H
	push	0
	push	3
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 52					; 00000034H
; Line 589
	test	eax, eax
	je	SHORT $LN6@VikingStat
$LN10@VikingStat:
; Line 594
	xor	eax, eax
	jmp	$LN9@VikingStat
$LN6@VikingStat:
	push	esi
; Line 600
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	5
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 143		; 0000008fH
	push	edi
	push	ebx
	call	_WriteSmbNVDIMM
; Line 604
	mov	esi, 1000000				; 000f4240H
	push	esi
	call	_FixedDelay
; Line 605
	push	esi
	call	_FixedDelay
; Line 606
	push	esi
	call	_FixedDelay
; Line 607
	push	esi
	call	_FixedDelay
; Line 608
	push	esi
	call	_FixedDelay
; Line 609
	push	esi
	call	_FixedDelay
; Line 610
	push	esi
	call	_FixedDelay
; Line 612
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbNVDIMM
	add	esp, 68					; 00000044H
	pop	esi
; Line 613
	test	eax, eax
; Line 618
	jne	SHORT $LN10@VikingStat
; Line 625
	test	BYTE PTR _data$[ebp], 4
; Line 627
	lea	eax, DWORD PTR _data$[ebp]
	je	SHORT $LN4@VikingStat
	push	120					; 00000078H
	push	1
	push	1
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 628
	push	3
	pop	eax
	jmp	SHORT $LN1@VikingStat
$LN4@VikingStat:
; Line 636
	push	eax
	push	5
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 128		; 00000080H
	push	edi
	push	ebx
	call	_WriteSmbNVDIMM
; Line 642
	push	30					; 0000001eH
	push	2
	push	2
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 52					; 00000034H
; Line 643
	test	eax, eax
	jne	$LN10@VikingStat
; Line 650
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	5
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 136		; 00000088H
	push	edi
	push	ebx
	call	_WriteSmbNVDIMM
; Line 655
	push	120					; 00000078H
	push	1
	push	1
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 52					; 00000034H
; Line 657
	neg	eax
	sbb	eax, eax
	inc	eax
$LN9@VikingStat:
	inc	eax
$LN1@VikingStat:
	pop	edi
	pop	ebx
; Line 661
	leave
	ret	0
_VikingStatus ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _VikingRestoreStart
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_VikingRestoreStart PROC				; COMDAT
; Line 672
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 678
	mov	ebx, DWORD PTR _host$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _socket$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	5
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 128		; 00000080H
	push	edi
	push	ebx
	call	_WriteSmbNVDIMM
; Line 680
	mov	esi, 5000				; 00001388H
	push	esi
	call	_FixedDelay
; Line 683
	push	30					; 0000001eH
	push	2
	push	2
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 56					; 00000038H
; Line 684
	test	eax, eax
	je	SHORT $LN4@VikingRest
$LN7@VikingRest:
	or	eax, -1
	jmp	$LN5@VikingRest
$LN4@VikingRest:
; Line 686
	push	esi
	call	_FixedDelay
; Line 689
	push	30					; 0000001eH
	push	0
	push	3
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 36					; 00000024H
; Line 690
	test	eax, eax
	jne	SHORT $LN7@VikingRest
; Line 692
	push	esi
	call	_FixedDelay
; Line 695
	push	30					; 0000001eH
	push	16					; 00000010H
	push	16					; 00000010H
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	6
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 36					; 00000024H
; Line 696
	test	eax, eax
	jne	SHORT $LN7@VikingRest
; Line 698
	push	esi
	call	_FixedDelay
; Line 702
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	5
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 130		; 00000082H
	push	edi
	push	ebx
	call	_WriteSmbNVDIMM
; Line 704
	push	esi
	call	_FixedDelay
; Line 707
	push	30					; 0000001eH
	push	3
	push	3
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 60					; 0000003cH
; Line 708
	test	eax, eax
	jne	$LN7@VikingRest
; Line 710
	push	esi
	call	_FixedDelay
	pop	ecx
; Line 712
	xor	eax, eax
$LN5@VikingRest:
	pop	edi
	pop	esi
	pop	ebx
; Line 713
	leave
	ret	0
_VikingRestoreStart ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _VikingRestoreDone
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_VikingRestoreDone PROC					; COMDAT
; Line 725
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 732
	push	300					; 0000012cH
	push	8
	push	8
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbTimeout
; Line 734
	push	5000					; 00001388H
	mov	esi, eax
	call	_FixedDelay
; Line 738
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	5
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 136		; 00000088H
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_WriteSmbNVDIMM
; Line 741
	push	30					; 0000001eH
	push	1
	push	1
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbTimeout
	add	esp, 88					; 00000058H
; Line 744
	test	eax, eax
	je	SHORT $LN1@VikingRest@2
; Line 750
	or	eax, -1
	jmp	SHORT $LN2@VikingRest@2
$LN1@VikingRest@2:
; Line 753
	mov	eax, esi
$LN2@VikingRest@2:
	pop	esi
; Line 754
	leave
	ret	0
_VikingRestoreDone ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _VikingArm
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_VikingArm PROC						; COMDAT
; Line 766
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 773
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	600					; 00000258H
	push	32					; 00000020H
	push	32					; 00000020H
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
; Line 779
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	5
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 64		; 00000040H
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 785
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	1
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 0
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
	add	esp, 72					; 00000048H
; Line 787
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 792
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	12					; 0000000cH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 40					; 00000028H
	pop	edi
	pop	esi
; Line 798
	leave
	ret	0
_VikingArm ENDP
_TEXT	ENDS
PUBLIC	_SmartUnlock
; Function compile flags: /Ogspy
;	COMDAT _SmartUnlock
_TEXT	SEGMENT
_unlockdata$ = -8					; size = 4
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_smbusdev$ = 16						; size = 1
_SmartUnlock PROC					; COMDAT
; Line 811
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 820
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	lea	eax, DWORD PTR _unlockdata$[ebp]
	push	eax
	push	61					; 0000003dH
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _unlockdata$[ebp], 83		; 00000053H
	push	esi
	push	edi
	mov	BYTE PTR _unlockdata$[ebp+1], 77	; 0000004dH
	mov	BYTE PTR _unlockdata$[ebp+2], 79	; 0000004fH
	mov	BYTE PTR _unlockdata$[ebp+3], 68	; 00000044H
	call	_WriteSmbNVDIMM
; Line 821
	lea	eax, DWORD PTR _unlockdata$[ebp+1]
	push	eax
	push	61					; 0000003dH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 822
	lea	eax, DWORD PTR _unlockdata$[ebp+2]
	push	eax
	push	61					; 0000003dH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 823
	lea	eax, DWORD PTR _unlockdata$[ebp+3]
	push	eax
	push	61					; 0000003dH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
	add	esp, 80					; 00000050H
; Line 825
	push	10					; 0000000aH
	mov	eax, 128				; 00000080H
	push	eax
	push	eax
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	61					; 0000003dH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 827
	neg	eax
	pop	edi
	sbb	eax, eax
	pop	esi
; Line 838
	leave
	ret	0
_SmartUnlock ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _SmartStatus
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_SmartStatus PROC					; COMDAT
; Line 848
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 855
	mov	esi, DWORD PTR _host$[ebp]
	push	edi
	mov	edi, DWORD PTR _socket$[ebp]
	push	10					; 0000000aH
	mov	eax, 128				; 00000080H
	push	eax
	push	eax
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	15					; 0000000fH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbTimeout
; Line 857
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_SmartUnlock
	add	esp, 44					; 0000002cH
; Line 858
	cmp	eax, -1
	jne	SHORT $LN5@SmartStatu
$LN8@SmartStatu:
	xor	eax, eax
	inc	eax
	jmp	$LN2@SmartStatu
$LN5@SmartStatu:
; Line 864
	push	240					; 000000f0H
	push	0
	push	2
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 865
	cmp	eax, -1
	je	SHORT $LN8@SmartStatu
; Line 867
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	10					; 0000000aH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbNVDIMM
; Line 872
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	10					; 0000000aH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_WriteSmbNVDIMM
; Line 874
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbNVDIMM
; Line 879
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_WriteSmbNVDIMM
	add	esp, 80					; 00000050H
; Line 881
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	14					; 0000000eH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbNVDIMM
; Line 886
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	15					; 0000000fH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	call	_ReadSmb
	add	esp, 36					; 00000024H
; Line 890
	cmp	eax, -1
; Line 894
	je	$LN8@SmartStatu
; Line 897
	movzx	eax, BYTE PTR _data$[ebp]
	and	eax, 4
	or	eax, 8
	shr	eax, 2
$LN2@SmartStatu:
	pop	edi
	pop	esi
; Line 901
	leave
	ret	0
_SmartStatus ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _SmartRestoreStart
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_SmartRestoreStart PROC					; COMDAT
; Line 913
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 918
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 16		; 00000010H
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_WriteSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 920
	xor	eax, eax
; Line 921
	leave
	ret	0
_SmartRestoreStart ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _SmartRestoreDone
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_SmartRestoreDone PROC					; COMDAT
; Line 932
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 937
	mov	ebx, DWORD PTR _host$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _socket$[ebp]
	push	120					; 00000078H
	push	0
	push	16					; 00000010H
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	8
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
; Line 938
	or	esi, -1
	add	esp, 32					; 00000020H
	cmp	eax, esi
	jne	SHORT $LN4@SmartResto
$LN7@SmartResto:
	mov	eax, esi
	jmp	SHORT $LN5@SmartResto
$LN4@SmartResto:
; Line 940
	push	10					; 0000000aH
	push	1
	push	1
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 941
	cmp	eax, esi
	je	SHORT $LN7@SmartResto
; Line 944
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 945
	cmp	eax, esi
	je	SHORT $LN7@SmartResto
; Line 947
	test	BYTE PTR _data$[ebp], 8
	jne	SHORT $LN7@SmartResto
; Line 950
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_WriteSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 952
	xor	eax, eax
$LN5@SmartResto:
	pop	edi
	pop	esi
	pop	ebx
; Line 953
	leave
	ret	0
_SmartRestoreDone ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _SmartArm
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_SmartArm PROC						; COMDAT
; Line 965
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 972
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	180					; 000000b4H
	push	8
	pop	ebx
	push	ebx
	push	ebx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	15					; 0000000fH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
; Line 978
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 32		; 00000020H
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 980
	push	10					; 0000000aH
	push	0
	push	32					; 00000020H
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
; Line 981
	or	ebx, -1
	add	esp, 84					; 00000054H
	cmp	eax, ebx
	jne	SHORT $LN5@SmartArm
$LN8@SmartArm:
	mov	eax, ebx
	jmp	$LN1@SmartArm
$LN5@SmartArm:
; Line 983
	push	10					; 0000000aH
	push	1
	push	1
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 984
	cmp	eax, ebx
	je	SHORT $LN8@SmartArm
; Line 987
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	11					; 0000000bH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 990
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	10					; 0000000aH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 40					; 00000028H
; Line 991
	cmp	eax, ebx
; Line 992
	je	SHORT $LN8@SmartArm
; Line 993
	test	BYTE PTR _data$[ebp], 2
; Line 994
	jne	SHORT $LN8@SmartArm
; Line 1000
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	7
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 1
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 1003
	push	10					; 0000000aH
	mov	eax, 128				; 00000080H
	push	eax
	push	eax
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	14					; 0000000eH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
; Line 1004
	xor	ecx, ecx
	add	esp, 52					; 00000034H
	cmp	eax, ebx
	setne	cl
	dec	ecx
	mov	eax, ecx
$LN1@SmartArm:
	pop	edi
	pop	esi
	pop	ebx
; Line 1007
	leave
	ret	0
_SmartArm ENDP
_TEXT	ENDS
PUBLIC	_JEDECDumpStatusRegs
; Function compile flags: /Ogspy
;	COMDAT _JEDECDumpStatusRegs
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_smbusdev$ = 16						; size = 1
_JEDECDumpStatusRegs PROC				; COMDAT
; Line 1093
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 1097
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	96					; 00000060H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1098
	cmp	eax, -1
	jne	SHORT $LN103@JEDECDumpS
$LN106@JEDECDumpS:
	xor	eax, eax
	inc	eax
	jmp	$LN104@JEDECDumpS
$LN103@JEDECDumpS:
; Line 1102
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1103
	cmp	eax, -1
	je	SHORT $LN106@JEDECDumpS
; Line 1123
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	100					; 00000064H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1124
	cmp	eax, -1
	je	SHORT $LN106@JEDECDumpS
; Line 1138
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	128					; 00000080H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1139
	cmp	eax, -1
	je	SHORT $LN106@JEDECDumpS
; Line 1151
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	132					; 00000084H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1171
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	133					; 00000085H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1181
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	102					; 00000066H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1195
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	104					; 00000068H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 80					; 00000050H
; Line 1209
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	106					; 0000006aH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1221
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	108					; 0000006cH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1231
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	110					; 0000006eH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1247
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	112					; 00000070H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 80					; 00000050H
; Line 1261
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	113					; 00000071H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1277
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	160					; 000000a0H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1291
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	161					; 000000a1H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1311
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	162					; 000000a2H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 80					; 00000050H
$LN104@JEDECDumpS:
	pop	edi
	pop	esi
; Line 1331
	leave
	ret	0
_JEDECDumpStatusRegs ENDP
_TEXT	ENDS
PUBLIC	_PrintErrorRegs
; Function compile flags: /Ogspy
;	COMDAT _PrintErrorRegs
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_smbusdev$ = 16						; size = 1
_PrintErrorRegs PROC					; COMDAT
; Line 1339
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 1344
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	132					; 00000084H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1345
	cmp	eax, -1
	je	SHORT $LN1@PrintError
; Line 1347
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	133					; 00000085H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1348
	cmp	eax, -1
	je	SHORT $LN1@PrintError
; Line 1350
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	160					; 000000a0H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1351
	cmp	eax, -1
	je	SHORT $LN1@PrintError
; Line 1353
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	161					; 000000a1H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1354
	cmp	eax, -1
	je	SHORT $LN1@PrintError
; Line 1356
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	162					; 000000a2H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
$LN1@PrintError:
	pop	edi
	pop	esi
; Line 1361
	leave
	ret	0
_PrintErrorRegs ENDP
_TEXT	ENDS
PUBLIC	_JEDECSwitchPage
; Function compile flags: /Ogspy
;	COMDAT _JEDECSwitchPage
_TEXT	SEGMENT
_currentpage$ = -1					; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_smbusdev$ = 16						; size = 1
_page$ = 20						; size = 1
_JEDECSwitchPage PROC					; COMDAT
; Line 1369
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1373
	lea	eax, DWORD PTR _currentpage$[ebp]
	push	eax
	push	0
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbNVDIMM
; Line 1377
	mov	al, BYTE PTR _currentpage$[ebp]
	add	esp, 20					; 00000014H
	cmp	al, BYTE PTR _page$[ebp]
	jne	SHORT $LN3@JEDECSwitc
; Line 1378
	xor	eax, eax
; Line 1389
	leave
	ret	0
$LN3@JEDECSwitc:
; Line 1380
	lea	eax, DWORD PTR _page$[ebp]
	push	eax
	push	0
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_WriteSmbNVDIMM
; Line 1382
	push	5
	push	DWORD PTR _page$[ebp]
	lea	eax, DWORD PTR _currentpage$[ebp]
	push	DWORD PTR _page$[ebp]
	push	eax
	push	0
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbTimeout
; Line 1385
	mov	cl, BYTE PTR _currentpage$[ebp]
	xor	eax, eax
	add	esp, 52					; 00000034H
	cmp	cl, BYTE PTR _page$[ebp]
	sete	al
	dec	eax
; Line 1389
	leave
	ret	0
_JEDECSwitchPage ENDP
_TEXT	ENDS
PUBLIC	_JEDECTimeoutInSeconds
; Function compile flags: /Ogspy
;	COMDAT _JEDECTimeoutInSeconds
_TEXT	SEGMENT
_low$ = -2						; size = 1
_high$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_smbusdev$ = 16						; size = 1
_offset$ = 20						; size = 1
_JEDECTimeoutInSeconds PROC				; COMDAT
; Line 1400
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 1405
	mov	ebx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR _low$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1406
	cmp	eax, -1
	jne	SHORT $LN4@JEDECTimeo
$LN7@JEDECTimeo:
; Line 1408
	xor	eax, eax
	jmp	SHORT $LN5@JEDECTimeo
$LN4@JEDECTimeo:
; Line 1411
	lea	eax, DWORD PTR _high$[ebp]
	push	eax
	inc	bl
	movzx	eax, bl
	push	eax
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1412
	cmp	eax, -1
; Line 1414
	je	SHORT $LN7@JEDECTimeo
; Line 1419
	mov	al, BYTE PTR _high$[ebp]
	movzx	cx, BYTE PTR _low$[ebp]
	and	al, 127					; 0000007fH
	movzx	ax, al
	shl	ax, 8
	or	ax, cx
; Line 1422
	test	BYTE PTR _high$[ebp], 128		; 00000080H
	movzx	eax, ax
	jne	SHORT $LN2@JEDECTimeo
; Line 1423
	movzx	eax, ax
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	movzx	eax, ax
$LN2@JEDECTimeo:
; Line 1426
	test	ax, ax
	jne	SHORT $LN5@JEDECTimeo
; Line 1427
	xor	eax, eax
	inc	eax
$LN5@JEDECTimeo:
	pop	ebx
; Line 1430
	leave
	ret	0
_JEDECTimeoutInSeconds ENDP
_TEXT	ENDS
PUBLIC	_JEDECUnarmNVdimm
; Function compile flags: /Ogspy
;	COMDAT _JEDECUnarmNVdimm
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_JEDECUnarmNVdimm PROC					; COMDAT
; Line 1442
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1446
	push	0
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 0
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_JEDECSwitchPage
; Line 1448
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	69					; 00000045H
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmbNVDIMM
; Line 1451
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	69					; 00000045H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 0
	push	DWORD PTR _socket$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_WriteSmbNVDIMM
	add	esp, 56					; 00000038H
; Line 1454
	xor	eax, eax
; Line 1456
	leave
	ret	0
_JEDECUnarmNVdimm ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _JEDECStatus
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_JEDECStatus PROC					; COMDAT
; Line 1466
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 1471
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	0
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECSwitchPage
; Line 1472
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
; Line 1479
	push	10					; 0000000aH
	mov	eax, 165				; 000000a5H
	push	eax
	push	eax
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	96					; 00000060H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 60					; 0000003cH
; Line 1480
	cmp	eax, -1
	jne	SHORT $LN9@JEDECStatu
; Line 1481
	push	DWORD PTR _smbusdev$[ebp]
$LN13@JEDECStatu:
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
$LN12@JEDECStatu:
; Line 1482
	xor	eax, eax
	inc	eax
	jmp	$LN1@JEDECStatu
$LN9@JEDECStatu:
; Line 1485
	push	24					; 00000018H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECTimeoutInSeconds
	movzx	eax, ax
	add	esp, 16					; 00000010H
; Line 1486
	test	ax, ax
	je	SHORT $LN12@JEDECStatu
; Line 1491
	push	eax
	push	0
	push	255					; 000000ffH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 1493
	push	DWORD PTR _smbusdev$[ebp]
	cmp	eax, -1
; Line 1494
	je	SHORT $LN13@JEDECStatu
; Line 1497
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	push	edi
	call	_JEDECUnarmNVdimm
; Line 1501
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	100					; 00000064H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 44					; 0000002cH
; Line 1502
	cmp	eax, -1
	je	SHORT $LN12@JEDECStatu
; Line 1505
	push	2
	pop	eax
	test	BYTE PTR _data$[ebp], al
	je	SHORT $LN5@JEDECStatu
; Line 1506
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
; Line 1507
	push	17					; 00000011H
$LN14@JEDECStatu:
	pop	eax
	jmp	SHORT $LN1@JEDECStatu
$LN5@JEDECStatu:
; Line 1510
	test	BYTE PTR _data$[ebp], 1
; Line 1511
	je	SHORT $LN1@JEDECStatu
; Line 1514
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	128					; 00000080H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1515
	cmp	eax, -1
	je	$LN12@JEDECStatu
; Line 1517
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
; Line 1519
	test	BYTE PTR _data$[ebp], 1
	je	SHORT $LN2@JEDECStatu
; Line 1520
	push	3
	jmp	SHORT $LN14@JEDECStatu
$LN2@JEDECStatu:
; Line 1523
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 4
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1524
	mov	eax, 513				; 00000201H
$LN1@JEDECStatu:
	pop	edi
	pop	esi
; Line 1526
	leave
	ret	0
_JEDECStatus ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _JEDECRestoreStart
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_JEDECRestoreStart PROC					; COMDAT
; Line 1537
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 1547
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	10					; 0000000aH
	push	0
	push	255					; 000000ffH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 1548
	cmp	eax, -1
	jne	SHORT $LN1@JEDECResto
; Line 1549
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
; Line 1550
	xor	eax, eax
	add	esp, 12					; 0000000cH
	inc	eax
	jmp	SHORT $LN2@JEDECResto
$LN1@JEDECResto:
; Line 1556
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 8
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 1561
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	67					; 00000043H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 4
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
	add	esp, 40					; 00000028H
; Line 1565
	xor	eax, eax
$LN2@JEDECResto:
	pop	edi
	pop	esi
; Line 1567
	leave
	ret	0
_JEDECRestoreStart ENDP
_TEXT	ENDS
PUBLIC	_JEDECAbortCmd
; Function compile flags: /Ogspy
;	COMDAT _JEDECAbortCmd
_TEXT	SEGMENT
_status$ = -8						; size = 4
_Started$ = -3						; size = 1
_tries$ = -2						; size = 1
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_CmdStatus$ = 32					; size = 1
_timeout$ = 36						; size = 2
_JEDECAbortCmd PROC					; COMDAT
; Line 1579
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 1581
	mov	esi, DWORD PTR _host$[ebp]
	push	edi
	mov	edi, DWORD PTR _socket$[ebp]
	mov	BYTE PTR _tries$[ebp], 0
	or	ebx, -1
$LL9@JEDECAbort:
; Line 1591
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	67					; 00000043H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 16		; 00000010H
	push	edi
	push	esi
	call	_WriteSmbNVDIMM
; Line 1594
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbNVDIMM
	add	esp, 40					; 00000028H
; Line 1595
	cmp	eax, ebx
	je	SHORT $LN13@JEDECAbort
; Line 1596
	mov	al, BYTE PTR _data$[ebp]
	or	al, 32					; 00000020H
	setne	BYTE PTR _Started$[ebp]
; Line 1597
	cmp	BYTE PTR _Started$[ebp], 0
	jne	SHORT $LN3@JEDECAbort
; Line 1600
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	DWORD PTR _CmdStatus$[ebp]
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1601
	cmp	eax, ebx
	je	SHORT $LN13@JEDECAbort
; Line 1602
	mov	al, BYTE PTR _data$[ebp]
	or	al, 48					; 00000030H
	jne	SHORT $LN7@JEDECAbort
$LN3@JEDECAbort:
; Line 1605
	mov	al, BYTE PTR _tries$[ebp]
	inc	BYTE PTR _tries$[ebp]
	cmp	al, 3
	ja	SHORT $LN13@JEDECAbort
; Line 1606
	cmp	BYTE PTR _Started$[ebp], 0
	je	SHORT $LL9@JEDECAbort
$LN7@JEDECAbort:
; Line 1610
	push	DWORD PTR _timeout$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	0
	push	255					; 000000ffH
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
	mov	DWORD PTR _status$[ebp], eax
; Line 1611
	cmp	eax, ebx
	jne	SHORT $LN1@JEDECAbort
; Line 1612
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
$LN1@JEDECAbort:
; Line 1615
	mov	eax, DWORD PTR _status$[ebp]
$LN10@JEDECAbort:
	pop	edi
	pop	esi
	pop	ebx
; Line 1616
	leave
	ret	0
$LN13@JEDECAbort:
; Line 1595
	mov	eax, ebx
	jmp	SHORT $LN10@JEDECAbort
_JEDECAbortCmd ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _JEDECRestoreDone
_TEXT	SEGMENT
_retries$ = -3						; size = 1
_count$ = -2						; size = 1
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_JEDECRestoreDone PROC					; COMDAT
; Line 1626
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 1634
	mov	ebx, DWORD PTR _host$[ebp]
	push	edi
	mov	edi, DWORD PTR _socket$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	21					; 00000015H
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1635
	cmp	eax, -1
	jne	SHORT $LN9@JEDECResto@2
	or	eax, eax
$LN10@JEDECResto@2:
	pop	edi
	pop	ebx
; Line 1676
	leave
	ret	0
$LN9@JEDECResto@2:
; Line 1638
	mov	al, BYTE PTR _data$[ebp]
	shr	al, 2
	and	al, 3
	push	esi
	mov	BYTE PTR _retries$[ebp], al
; Line 1642
	mov	BYTE PTR _count$[ebp], 0
	jbe	$LN6@JEDECResto@2
$LL16@JEDECResto@2:
; Line 1644
	cmp	BYTE PTR _count$[ebp], 0
	je	SHORT $LN5@JEDECResto@2
; Line 1645
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	push	ebx
	call	_JEDECRestoreStart
	add	esp, 24					; 00000018H
$LN5@JEDECResto@2:
; Line 1647
	push	28					; 0000001cH
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_JEDECTimeoutInSeconds
	movzx	esi, ax
	add	esp, 16					; 00000010H
; Line 1648
	test	si, si
	je	SHORT $LN7@JEDECResto@2
; Line 1653
	push	esi
	push	0
	push	255					; 000000ffH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 1654
	cmp	eax, -1
	jne	SHORT $LN3@JEDECResto@2
; Line 1655
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_JEDECDumpStatusRegs
; Line 1657
	push	esi
	push	102					; 00000066H
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	edi
	push	ebx
	call	_JEDECAbortCmd
	add	esp, 44					; 0000002cH
; Line 1658
	jmp	SHORT $LN7@JEDECResto@2
$LN3@JEDECResto@2:
; Line 1662
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	102					; 00000066H
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1663
	cmp	eax, -1
	je	SHORT $LN7@JEDECResto@2
; Line 1665
	test	BYTE PTR _data$[ebp], 1
	jne	SHORT $LN13@JEDECResto@2
$LN7@JEDECResto@2:
; Line 1642
	inc	BYTE PTR _count$[ebp]
	mov	al, BYTE PTR _count$[ebp]
	cmp	al, BYTE PTR _retries$[ebp]
	jb	$LL16@JEDECResto@2
$LN6@JEDECResto@2:
	or	esi, -1
	jmp	SHORT $LN15@JEDECResto@2
$LN13@JEDECResto@2:
	xor	esi, esi
$LN15@JEDECResto@2:
; Line 1666
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	ebx
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
; Line 1667
	mov	eax, esi
	pop	esi
	jmp	$LN10@JEDECResto@2
_JEDECRestoreDone ENDP
_TEXT	ENDS
PUBLIC	_JEDECEnergySelect
; Function compile flags: /Ogspy
;	COMDAT _JEDECEnergySelect
_TEXT	SEGMENT
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_JEDECEnergySelect PROC					; COMDAT
; Line 1686
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 1690
	mov	esi, DWORD PTR _host$[ebp]
	push	edi
	mov	edi, DWORD PTR _socket$[ebp]
	xor	ebx, ebx
$LL5@JEDECEnerg:
; Line 1701
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	73					; 00000049H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 1
	push	edi
	push	esi
	call	_WriteSmbNVDIMM
; Line 1703
	push	10					; 0000000aH
	push	0
	push	255					; 000000ffH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbTimeout
; Line 1713
	push	10					; 0000000aH
	push	4
	push	254					; 000000feH
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	112					; 00000070H
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_ReadSmbTimeout
	add	esp, 84					; 00000054H
; Line 1715
	cmp	eax, -1
	jne	SHORT $LN4@JEDECEnerg
; Line 1718
	push	DWORD PTR _smbusdev$[ebp]
	push	edi
	push	esi
	call	_JEDECDumpStatusRegs
; Line 1721
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 128		; 00000080H
	push	edi
	push	esi
	call	_WriteSmbNVDIMM
	add	esp, 32					; 00000020H
$LN4@JEDECEnerg:
; Line 1723
	mov	cx, bx
	add	ebx, 65535				; 0000ffffH
	test	cx, cx
	je	SHORT $LN1@JEDECEnerg
	cmp	eax, -1
	je	$LL5@JEDECEnerg
$LN1@JEDECEnerg:
	pop	edi
	pop	esi
	pop	ebx
; Line 1725
	leave
	ret	0
_JEDECEnergySelect ENDP
_TEXT	ENDS
PUBLIC	_JEDECesCharge
; Function compile flags: /Ogspy
;	COMDAT _JEDECesCharge
_TEXT	SEGMENT
_timeout$ = -8						; size = 2
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_JEDECesCharge PROC					; COMDAT
; Line 1735
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 1740
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	1
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECSwitchPage
; Line 1742
	push	16					; 00000010H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECTimeoutInSeconds
; Line 1743
	push	17					; 00000011H
	push	DWORD PTR _smbusdev$[ebp]
	movzx	eax, ax
	push	esi
	push	edi
	mov	DWORD PTR _timeout$[ebp], eax
	call	_JEDECTimeoutInSeconds
	mov	ecx, 256				; 00000100H
	imul	ax, cx
	add	WORD PTR _timeout$[ebp], ax
; Line 1746
	push	0
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECSwitchPage
	add	esp, 64					; 00000040H
; Line 1749
	push	DWORD PTR _timeout$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	0
	push	1
	push	eax
	push	162					; 000000a2H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	mov	ebx, eax
	add	esp, 32					; 00000020H
; Line 1750
	cmp	ebx, -1
	jne	SHORT $LN1@JEDECesCha
; Line 1753
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
$LN1@JEDECesCha:
	pop	edi
	pop	esi
; Line 1755
	mov	eax, ebx
	pop	ebx
; Line 1756
	leave
	ret	0
_JEDECesCharge ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _JEDECArm
_TEXT	SEGMENT
_timeout$ = -8						; size = 2
_data$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_vendorIndex$ = 24					; size = 1
_smbusdev$ = 28						; size = 1
_JEDECArm PROC						; COMDAT
; Line 1766
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 1781
	mov	esi, DWORD PTR _socket$[ebp]
	push	edi
	mov	edi, DWORD PTR _host$[ebp]
	push	10					; 0000000aH
	push	0
	mov	ebx, 255				; 000000ffH
	push	ebx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 1783
	push	DWORD PTR _smbusdev$[ebp]
	cmp	eax, -1
	jne	SHORT $LN12@JEDECArm
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
$LN18@JEDECArm:
; Line 1784
	xor	eax, eax
	inc	eax
$LN13@JEDECArm:
	pop	edi
	pop	esi
	pop	ebx
; Line 1903
	leave
	ret	0
$LN12@JEDECArm:
; Line 1787
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	push	edi
	call	_JEDECEnergySelect
	add	esp, 24					; 00000018H
; Line 1788
	cmp	eax, -1
	je	SHORT $LN18@JEDECArm
; Line 1789
	push	DWORD PTR _smbusdev$[ebp]
	push	DWORD PTR _vendorIndex$[ebp]
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	push	edi
	call	_JEDECesCharge
	add	esp, 24					; 00000018H
; Line 1790
	cmp	eax, -1
	je	SHORT $LN18@JEDECArm
; Line 1792
	push	30					; 0000001eH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECTimeoutInSeconds
	movzx	eax, ax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _timeout$[ebp], eax
; Line 1793
	test	ax, ax
	je	SHORT $LN18@JEDECArm
; Line 1800
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 16		; 00000010H
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 1805
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	67					; 00000043H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 8
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 1809
	push	1
	push	16					; 00000010H
	push	16					; 00000010H
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 72					; 00000048H
; Line 1810
	cmp	eax, -1
	jne	SHORT $LN8@JEDECArm
; Line 1811
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
$LN8@JEDECArm:
; Line 1816
	push	DWORD PTR _timeout$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	0
	push	ebx
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 32					; 00000020H
; Line 1817
	cmp	eax, -1
	jne	SHORT $LN7@JEDECArm
	xor	ebx, ebx
	inc	ebx
$LN15@JEDECArm:
; Line 1818
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
; Line 1819
	mov	eax, ebx
	jmp	$LN13@JEDECArm
$LN7@JEDECArm:
; Line 1825
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	104					; 00000068H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1830
	test	BYTE PTR _data$[ebp], 1
	jne	SHORT $LN6@JEDECArm
	or	ebx, -1
	jmp	SHORT $LN15@JEDECArm
$LN6@JEDECArm:
; Line 1842
	push	32					; 00000020H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECTimeoutInSeconds
	movzx	eax, ax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _timeout$[ebp], eax
; Line 1843
	test	ax, ax
	je	$LN18@JEDECArm
; Line 1854
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 32		; 00000020H
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 1859
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	69					; 00000045H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 1
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
; Line 1867
	push	DWORD PTR _timeout$[ebp]
	lea	eax, DWORD PTR _data$[ebp]
	push	0
	push	ebx
	push	eax
	push	97					; 00000061H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
; Line 1868
	or	ebx, -1
	add	esp, 72					; 00000048H
	cmp	eax, ebx
	je	$LN15@JEDECArm
; Line 1874
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	160					; 000000a0H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1877
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	161					; 000000a1H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1880
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	162					; 000000a2H
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbNVDIMM
; Line 1885
	push	30					; 0000001eH
	push	5
	push	5
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	106					; 0000006aH
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_ReadSmbTimeout
	add	esp, 92					; 0000005cH
; Line 1888
	cmp	eax, ebx
	jne	SHORT $LN3@JEDECArm
; Line 1889
	push	DWORD PTR _smbusdev$[ebp]
	push	esi
	push	edi
	call	_JEDECDumpStatusRegs
	add	esp, 12					; 0000000cH
$LN3@JEDECArm:
; Line 1892
	test	BYTE PTR _data$[ebp], 1
	je	$LN15@JEDECArm
; Line 1895
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	64					; 00000040H
	push	DWORD PTR _smbusdev$[ebp]
	mov	BYTE PTR _data$[ebp], 4
	push	esi
	push	edi
	call	_WriteSmbNVDIMM
	add	esp, 20					; 00000014H
; Line 1897
	xor	ebx, ebx
	jmp	$LN15@JEDECArm
_JEDECArm ENDP
_TEXT	ENDS
PUBLIC	_PlatformNvDimmStatus
; Function compile flags: /Ogspy
;	COMDAT _PlatformNvDimmStatus
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_PlatformNvDimmStatus PROC				; COMDAT
; Line 2154
	jmp	_CoreNVDIMMStatus
_PlatformNvDimmStatus ENDP
_TEXT	ENDS
PUBLIC	_PlatformRestoreNvDimms
EXTRN	_MmrcExecuteTask:PROC
EXTRN	_SearchSubtaskName:PROC
EXTRN	_DisablePatrolDemandScrubbing:PROC
; Function compile flags: /Ogspy
;	COMDAT _PlatformRestoreNvDimms
_TEXT	SEGMENT
_nvVenIdx$ = -40					; size = 4
_smbusdev$ = -36					; size = 1
tv914 = -32						; size = 4
tv786 = -32						; size = 4
tv927 = -28						; size = 4
tv799 = -28						; size = 4
tv953 = -24						; size = 4
tv738 = -24						; size = 4
tv1014 = -20						; size = 4
tv712 = -20						; size = 4
tv1001 = -16						; size = 4
tv698 = -16						; size = 4
_dimm$ = -10						; size = 1
_ch$ = -6						; size = 1
_RestoreCodeCached$ = -2				; size = 1
_RestoreAttempted$ = -1					; size = 1
tv847 = 8						; size = 4
_MrcData$ = 8						; size = 4
_ChannelSelfRefreshSetup$ = 11				; size = 1
_PlatformRestoreNvDimms PROC				; COMDAT
; Line 2223
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
; Line 2236
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+65488], 0
	mov	BYTE PTR _RestoreAttempted$[ebp], 0
	mov	BYTE PTR _RestoreCodeCached$[ebp], 0
; Line 2238
	je	$LN1@PlatformRe
; Line 2242
	and	DWORD PTR tv712[ebp], 0
	and	DWORD PTR tv738[ebp], 0
	lea	eax, DWORD PTR [esi+28608]
	mov	DWORD PTR tv786[ebp], eax
	lea	eax, DWORD PTR [esi+28610]
	push	ebx
	mov	BYTE PTR _ch$[ebp], 0
	mov	DWORD PTR tv799[ebp], eax
	push	edi
$LL45@PlatformRe:
; Line 2243
	mov	eax, DWORD PTR tv786[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN28@PlatformRe
; Line 2246
	mov	eax, DWORD PTR tv799[ebp]
	mov	BYTE PTR _ChannelSelfRefreshSetup$[ebp], 0
; Line 2247
	mov	BYTE PTR _dimm$[ebp], 0
	xor	ebx, ebx
	mov	DWORD PTR tv698[ebp], eax
$LL43@PlatformRe:
; Line 2248
	mov	eax, DWORD PTR tv698[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN24@PlatformRe
; Line 2252
	mov	eax, DWORD PTR tv738[ebp]
	add	eax, ebx
	mov	ecx, DWORD PTR [esi+eax*4+65300]
	mov	DWORD PTR _nvVenIdx$[ebp], ecx
; Line 2255
	test	ecx, ecx
	je	$LN24@PlatformRe
	lea	edi, DWORD PTR [esi+eax*4+65316]
	test	BYTE PTR [edi], 1
	je	$LN24@PlatformRe
; Line 2256
	cmp	BYTE PTR _RestoreCodeCached$[ebp], 0
	jne	SHORT $LN20@PlatformRe
; Line 2262
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_NvDimmMrsRestore
	add	esp, 12					; 0000000cH
; Line 2263
	mov	BYTE PTR _RestoreCodeCached$[ebp], 1
$LN20@PlatformRe:
; Line 2265
	cmp	BYTE PTR _ChannelSelfRefreshSetup$[ebp], 0
	jne	SHORT $LN19@PlatformRe
; Line 2267
	push	DWORD PTR _ch$[ebp]
	mov	BYTE PTR _ChannelSelfRefreshSetup$[ebp], 1
	push	esi
	call	_DisablePatrolDemandScrubbing
; Line 2268
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_PrechargeAllRanks
	add	esp, 16					; 00000010H
; Line 2272
	push	DWORD PTR _ch$[ebp]
	push	14461					; 0000387dH
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	14461					; 0000387dH
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
; Line 2276
	push	DWORD PTR _ch$[ebp]
	push	14643					; 00003933H
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	14643					; 00003933H
	push	esi
	call	_MmrcExecuteTask
	add	esp, 16					; 00000010H
$LN19@PlatformRe:
; Line 2278
	mov	eax, DWORD PTR _nvVenIdx$[ebp]
	mov	ecx, DWORD PTR tv712[ebp]
	lea	ecx, DWORD PTR [ebx+ecx*2+65380]
	mov	cl, BYTE PTR [ecx+esi]
	shl	eax, 6
	mov	dl, BYTE PTR _nv[eax+46]
; Line 2279
	and	DWORD PTR [edi], -2			; fffffffeH
	and	cl, 15					; 0000000fH
	shl	dl, 4
	or	cl, dl
	mov	BYTE PTR _smbusdev$[ebp], cl
; Line 2281
	push	DWORD PTR _smbusdev$[ebp]
	movzx	ecx, BYTE PTR _nv[eax+47]
	push	ecx
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	0
	push	esi
	call	DWORD PTR _nv[eax+52]
	add	esp, 24					; 00000018H
; Line 2283
	cmp	eax, -1
	jne	SHORT $LN18@PlatformRe
; Line 2285
	or	DWORD PTR [edi], 512			; 00000200H
; Line 2286
	jmp	SHORT $LN24@PlatformRe
$LN18@PlatformRe:
; Line 2288
	or	DWORD PTR [edi], 2
$LN24@PlatformRe:
; Line 2247
	inc	BYTE PTR _dimm$[ebp]
	inc	ebx
	inc	DWORD PTR tv698[ebp]
	cmp	BYTE PTR _dimm$[ebp], 2
	jb	$LL43@PlatformRe
$LN28@PlatformRe:
; Line 2242
	inc	BYTE PTR _ch$[ebp]
	inc	DWORD PTR tv712[ebp]
	add	DWORD PTR tv738[ebp], 2
	add	DWORD PTR tv799[ebp], 2
	inc	DWORD PTR tv786[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	$LL45@PlatformRe
; Line 2300
	lea	eax, DWORD PTR [esi+28608]
	mov	BYTE PTR _ch$[ebp], 0
	mov	ebx, eax
	mov	edi, 14597				; 00003905H
$LL16@PlatformRe:
; Line 2301
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN15@PlatformRe
; Line 2304
	push	DWORD PTR _ch$[ebp]
	push	edi
	call	_SearchSubtaskName
	pop	ecx
	movzx	eax, ax
	push	eax
	push	edi
	push	esi
	call	_MmrcExecuteTask
; Line 2305
	push	DWORD PTR _ch$[ebp]
	push	esi
	call	_PrechargeAllRanks
	add	esp, 24					; 00000018H
$LN15@PlatformRe:
	inc	BYTE PTR _ch$[ebp]
	inc	ebx
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL16@PlatformRe
; Line 2310
	and	DWORD PTR tv927[ebp], 0
	and	DWORD PTR tv953[ebp], 0
	lea	eax, DWORD PTR [esi+28608]
	mov	DWORD PTR tv1001[ebp], eax
	lea	eax, DWORD PTR [esi+28610]
	mov	BYTE PTR _ch$[ebp], 0
	mov	DWORD PTR tv1014[ebp], eax
$LL46@PlatformRe:
; Line 2311
	mov	eax, DWORD PTR tv1001[ebp]
	cmp	BYTE PTR [eax], 0
	je	$LN11@PlatformRe
; Line 2315
	mov	eax, DWORD PTR tv1014[ebp]
	and	DWORD PTR tv847[ebp], 0
	mov	BYTE PTR _dimm$[ebp], 0
	mov	DWORD PTR tv914[ebp], eax
$LL44@PlatformRe:
; Line 2316
	mov	eax, DWORD PTR tv914[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN7@PlatformRe
; Line 2320
	mov	eax, DWORD PTR tv953[ebp]
	mov	ecx, DWORD PTR tv847[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR [esi+ecx*4+65300]
; Line 2321
	test	eax, eax
	je	SHORT $LN7@PlatformRe
	lea	edi, DWORD PTR [esi+ecx*4+65316]
	mov	ecx, DWORD PTR [edi]
	test	cl, 2
	je	SHORT $LN7@PlatformRe
; Line 2323
	mov	ebx, DWORD PTR tv927[ebp]
	mov	edx, DWORD PTR tv847[ebp]
	inc	BYTE PTR _RestoreAttempted$[ebp]
	lea	edx, DWORD PTR [edx+ebx*2+65380]
	mov	dl, BYTE PTR [edx+esi]
	shl	eax, 6
	mov	bl, BYTE PTR _nv[eax+46]
	and	dl, 15					; 0000000fH
; Line 2325
	and	ecx, -3					; fffffffdH
	shl	bl, 4
	or	dl, bl
	mov	DWORD PTR [edi], ecx
; Line 2326
	movzx	ecx, BYTE PTR _nv[eax+47]
	mov	BYTE PTR _smbusdev$[ebp], dl
	push	DWORD PTR _smbusdev$[ebp]
	push	ecx
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	0
	push	esi
	call	DWORD PTR _nv[eax+56]
	add	esp, 24					; 00000018H
; Line 2327
	cmp	eax, -1
	jne	SHORT $LN3@PlatformRe
; Line 2329
	or	DWORD PTR [edi], 512			; 00000200H
; Line 2330
	jmp	SHORT $LN7@PlatformRe
$LN3@PlatformRe:
; Line 2331
	or	DWORD PTR [edi], 4
$LN7@PlatformRe:
; Line 2315
	inc	BYTE PTR _dimm$[ebp]
	inc	DWORD PTR tv847[ebp]
	inc	DWORD PTR tv914[ebp]
	cmp	BYTE PTR _dimm$[ebp], 2
	jb	$LL44@PlatformRe
$LN11@PlatformRe:
; Line 2310
	inc	BYTE PTR _ch$[ebp]
	inc	DWORD PTR tv927[ebp]
	add	DWORD PTR tv953[ebp], 2
	add	DWORD PTR tv1014[ebp], 2
	inc	DWORD PTR tv1001[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	$LL46@PlatformRe
; Line 2337
	cmp	BYTE PTR _RestoreAttempted$[ebp], 0
	pop	edi
	pop	ebx
	je	SHORT $LN1@PlatformRe
; Line 2339
	push	esi
	call	_PlatformCacheMrsRestoreNvDimms
; Line 2340
	push	esi
	call	_PlatformMrsRestoreNvDimms
	pop	ecx
	pop	ecx
$LN1@PlatformRe:
; Line 2343
	xor	eax, eax
	pop	esi
; Line 2344
	leave
	ret	0
_PlatformRestoreNvDimms ENDP
_TEXT	ENDS
PUBLIC	_PlatformArmNvDimms
; Function compile flags: /Ogspy
;	COMDAT _PlatformArmNvDimms
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_PlatformArmNvDimms PROC				; COMDAT
; Line 2351
	jmp	_CoreArmNVDIMMs
_PlatformArmNvDimms ENDP
_TEXT	ENDS
PUBLIC	_PlatformUpdateBootMode
; Function compile flags: /Ogspy
;	COMDAT _PlatformUpdateBootMode
_TEXT	SEGMENT
_MrcData$ = 8						; size = 4
_ch$ = 11						; size = 1
_PlatformUpdateBootMode PROC				; COMDAT
; Line 2584
	push	ebp
	mov	ebp, esp
	push	esi
; Line 2592
	mov	esi, DWORD PTR _MrcData$[ebp]
	mov	al, BYTE PTR [esi+65480]
	test	al, al
	jne	SHORT $LN11@PlatformUp
; Line 2593
	xor	eax, eax
	jmp	SHORT $LN12@PlatformUp
$LN11@PlatformUp:
; Line 2596
	cmp	al, 4
	je	SHORT $LN10@PlatformUp
; Line 2597
	movzx	eax, BYTE PTR [esi+65486]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	jmp	SHORT $LN12@PlatformUp
$LN10@PlatformUp:
; Line 2600
	push	esi
	call	_CoreNVDIMMStatus
	pop	ecx
; Line 2602
	xor	eax, eax
	push	ebx
	mov	BYTE PTR _ch$[ebp], 0
	inc	eax
	push	edi
$LL9@PlatformUp:
; Line 2603
	movzx	edx, BYTE PTR _ch$[ebp]
	cmp	BYTE PTR [edx+esi+28608], al
	jne	SHORT $LN8@PlatformUp
; Line 2604
	xor	bl, bl
$LL5@PlatformUp:
; Line 2605
	movzx	ecx, bl
	lea	edi, DWORD PTR [ecx+edx*2+28610]
	cmp	BYTE PTR [edi+esi], al
	jne	SHORT $LN4@PlatformUp
	lea	ecx, DWORD PTR [ecx+edx*2]
	cmp	DWORD PTR [esi+ecx*4+65300], 0
	je	SHORT $LN4@PlatformUp
; Line 2606
	mov	ecx, DWORD PTR [esi+ecx*4+65316]
	or	ecx, eax
	jne	SHORT $LN21@PlatformUp
$LN4@PlatformUp:
; Line 2604
	inc	bl
	cmp	bl, 2
	jb	SHORT $LL5@PlatformUp
$LN8@PlatformUp:
; Line 2602
	inc	BYTE PTR _ch$[ebp]
	cmp	BYTE PTR _ch$[ebp], 2
	jb	SHORT $LL9@PlatformUp
; Line 2614
	xor	eax, eax
$LN21@PlatformUp:
	pop	edi
	pop	ebx
$LN12@PlatformUp:
	pop	esi
; Line 2615
	pop	ebp
	ret	0
_PlatformUpdateBootMode ENDP
_TEXT	ENDS
PUBLIC	_ReadSpd
; Function compile flags: /Ogspy
;	COMDAT _ReadSpd
_TEXT	SEGMENT
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_spd$ = 16						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_byteOffset$ = 24					; size = 2
_data$ = 28						; size = 4
_ReadSpd PROC						; COMDAT
; Line 2644
	push	ebp
	mov	ebp, esp
; Line 2647
	movzx	ecx, BYTE PTR _dimm$[ebp]
	movzx	eax, BYTE PTR _ch$[ebp]
; Line 2648
	push	DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _host$[ebp]
	push	DWORD PTR _byteOffset$[ebp]
	mov	al, BYTE PTR [ecx+eax*2+65380]
	mov	BYTE PTR _spd$[ebp], al
	push	DWORD PTR _spd$[ebp]
	push	DWORD PTR _host$[ebp]
	call	_ReadSmb
	add	esp, 16					; 00000010H
; Line 2649
	pop	ebp
	ret	0
_ReadSpd ENDP
_TEXT	ENDS
PUBLIC	_CoreDetectNVDIMM
; Function compile flags: /Ogspy
;	COMDAT _CoreDetectNVDIMM
_TEXT	SEGMENT
tv415 = -16						; size = 4
_SPDMMfgId$ = -12					; size = 2
_funcdesc$ = -12					; size = 2
_nvIdx$ = -8						; size = 4
_i$ = -3						; size = 1
_offset$ = -2						; size = 1
_SPDReg$ = -1						; size = 1
_host$ = 8						; size = 4
_socket$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_spd$ = 24						; size = 1
_CoreDetectNVDIMM PROC					; COMDAT
; Line 2054
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
; Line 2064
	mov	ebx, DWORD PTR _dimm$[ebp]
	push	esi
	mov	esi, DWORD PTR _host$[ebp]
	push	edi
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	push	0
	push	ebx
	push	DWORD PTR _ch$[ebp]
	xor	edi, edi
	push	DWORD PTR _socket$[ebp]
	inc	edi
	push	esi
	mov	DWORD PTR _nvIdx$[ebp], edi
	call	_ReadSpd
; Line 2066
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	push	edi
	push	ebx
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
; Line 2068
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	push	3
	push	ebx
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
; Line 2070
	mov	al, BYTE PTR _SPDReg$[ebp]
	and	al, 240					; 000000f0H
	add	esp, 72					; 00000048H
	cmp	al, 144					; 00000090H
	jne	SHORT $LN16@CoreDetect
; Line 2072
	mov	BYTE PTR _offset$[ebp], 204		; 000000ccH
$LL35@CoreDetect:
; Line 2073
	movzx	di, BYTE PTR _offset$[ebp]
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	ebx
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
; Line 2075
	movzx	ax, BYTE PTR _SPDReg$[ebp]
	shl	ax, 8
	movzx	eax, ax
	mov	DWORD PTR _funcdesc$[ebp], eax
; Line 2076
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	push	edi
	push	ebx
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
; Line 2081
	mov	al, BYTE PTR _SPDReg$[ebp]
	or	al, BYTE PTR _funcdesc$[ebp]
	add	esp, 48					; 00000030H
	and	al, 63					; 0000003fH
	cmp	al, 33					; 00000021H
	je	$LN25@CoreDetect
	inc	BYTE PTR _offset$[ebp]
	cmp	BYTE PTR _offset$[ebp], 220		; 000000dcH
	jb	SHORT $LL35@CoreDetect
$LN16@CoreDetect:
; Line 2089
	movzx	eax, BYTE PTR _ch$[ebp]
	movzx	ecx, bl
; Line 2093
	lea	ebx, DWORD PTR [eax+esi+31272]
	add	ecx, esi
	mov	cl, BYTE PTR [ecx+eax*2+65380]
	cmp	BYTE PTR [ebx], 7
	mov	BYTE PTR _spd$[ebp], cl
	setne	al
	dec	al
	and	al, 206					; 000000ceH
; Line 2101
	movzx	di, al
	mov	BYTE PTR _offset$[ebp], al
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	lea	eax, DWORD PTR [edi+174]
	push	eax
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
	add	esp, 24					; 00000018H
; Line 2103
	cmp	BYTE PTR _SPDReg$[ebp], 78		; 0000004eH
	jne	$LN7@CoreDetect
; Line 2114
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	add	edi, 175				; 000000afH
	push	edi
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
	add	esp, 24					; 00000018H
; Line 2116
	cmp	BYTE PTR _SPDReg$[ebp], 86		; 00000056H
	jne	$LN7@CoreDetect
; Line 2119
	cmp	BYTE PTR [ebx], 7
	jne	SHORT $LN31@CoreDetect
	mov	BYTE PTR _offset$[ebp], 203		; 000000cbH
$LN31@CoreDetect:
; Line 2120
	movzx	di, BYTE PTR _offset$[ebp]
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	lea	eax, DWORD PTR [edi+118]
	push	eax
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
; Line 2121
	movzx	ax, BYTE PTR _SPDReg$[ebp]
	shl	ax, 8
	movzx	eax, ax
	mov	DWORD PTR _SPDMMfgId$[ebp], eax
; Line 2122
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	add	edi, 117				; 00000075H
	push	edi
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
; Line 2123
	movzx	ax, BYTE PTR _SPDReg$[ebp]
	mov	ecx, 65407				; 0000ff7fH
	and	ax, cx
	or	WORD PTR _SPDMMfgId$[ebp], ax
	add	esp, 48					; 00000030H
; Line 2127
	cmp	BYTE PTR [ebx], 7
	jne	SHORT $LN32@CoreDetect
	mov	BYTE PTR _offset$[ebp], 201		; 000000c9H
$LN32@CoreDetect:
; Line 2128
	xor	ebx, ebx
	cmp	WORD PTR _nv+64, bx
	je	$LN7@CoreDetect
	push	64					; 00000040H
	mov	eax, OFFSET _nv+64
	pop	edi
$LL8@CoreDetect:
; Line 2129
	mov	cx, WORD PTR _SPDMMfgId$[ebp]
	cmp	WORD PTR [eax], cx
	jne	SHORT $LN1@CoreDetect
; Line 2130
	mov	BYTE PTR _i$[ebp], 0
	cmp	DWORD PTR _nv[edi+24], ebx
	jbe	SHORT $LN33@CoreDetect
	movzx	ax, BYTE PTR _offset$[ebp]
	mov	WORD PTR tv415[ebp], ax
$LL34@CoreDetect:
; Line 2131
	lea	eax, DWORD PTR _SPDReg$[ebp]
	push	eax
	movzx	ax, BYTE PTR _i$[ebp]
	add	ax, WORD PTR tv415[ebp]
	mov	ecx, 128				; 00000080H
	add	ax, cx
	movzx	eax, ax
	push	eax
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _socket$[ebp]
	push	esi
	call	_ReadSpd
; Line 2133
	mov	al, BYTE PTR _nv[ebx+edi+2]
	add	esp, 24					; 00000018H
	cmp	al, BYTE PTR _SPDReg$[ebp]
	jne	SHORT $LN33@CoreDetect
	inc	BYTE PTR _i$[ebp]
	movzx	ebx, BYTE PTR _i$[ebp]
	cmp	ebx, DWORD PTR _nv[edi+24]
	jb	SHORT $LL34@CoreDetect
$LN33@CoreDetect:
; Line 2136
	movzx	eax, BYTE PTR _i$[ebp]
	cmp	eax, DWORD PTR _nv[edi+24]
	je	SHORT $LN27@CoreDetect
$LN1@CoreDetect:
; Line 2142
	inc	DWORD PTR _nvIdx$[ebp]
	mov	edi, DWORD PTR _nvIdx$[ebp]
	shl	edi, 6
	lea	eax, DWORD PTR _nv[edi]
	xor	ebx, ebx
	cmp	WORD PTR [eax], bx
	jne	$LL8@CoreDetect
$LN7@CoreDetect:
; Line 2146
	xor	eax, eax
$LN20@CoreDetect:
	pop	edi
	pop	esi
	pop	ebx
; Line 2147
	leave
	ret	0
$LN25@CoreDetect:
; Line 2083
	xor	eax, eax
	inc	eax
	jmp	SHORT $LN20@CoreDetect
$LN27@CoreDetect:
; Line 2138
	mov	eax, DWORD PTR _nvIdx$[ebp]
	jmp	SHORT $LN20@CoreDetect
_CoreDetectNVDIMM ENDP
_TEXT	ENDS
PUBLIC	_PlatformDetectNvDimm
; Function compile flags: /Ogspy
;	COMDAT _PlatformDetectNvDimm
_TEXT	SEGMENT
_spd$ = 8						; size = 1
_MrcData$ = 8						; size = 4
_node$ = 12						; size = 1
_ch$ = 16						; size = 1
_dimm$ = 20						; size = 1
_PlatformDetectNvDimm PROC				; COMDAT
; Line 2623
	push	ebp
	mov	ebp, esp
; Line 2628
	mov	ecx, DWORD PTR _MrcData$[ebp]
	xor	eax, eax
	cmp	BYTE PTR [ecx+65480], 4
	jne	SHORT $LN1@PlatformDe
; Line 2629
	movzx	edx, BYTE PTR _ch$[ebp]
	push	esi
	movzx	esi, BYTE PTR _dimm$[ebp]
	add	esi, ecx
	mov	dl, BYTE PTR [esi+edx*2+65380]
	mov	BYTE PTR _spd$[ebp], dl
; Line 2630
	push	DWORD PTR _spd$[ebp]
	push	DWORD PTR _dimm$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	eax
	push	ecx
	call	_CoreDetectNVDIMM
	add	esp, 20					; 00000014H
	pop	esi
$LN1@PlatformDe:
; Line 2634
	pop	ebp
	ret	0
_PlatformDetectNvDimm ENDP
_TEXT	ENDS
END
