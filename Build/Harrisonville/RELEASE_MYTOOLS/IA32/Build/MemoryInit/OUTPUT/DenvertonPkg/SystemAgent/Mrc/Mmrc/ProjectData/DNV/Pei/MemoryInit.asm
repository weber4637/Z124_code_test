; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	d:\bios\z124-002\z124-002\DenvertonPkg\SystemAgent\Mrc\Mmrc\ProjectData\DNV\Pei\MemoryInit.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_mMmioSize
PUBLIC	_mProcPpinVariableGuid
EXTRN	_gAmiPeiEndOfMemDetectGuid:BYTE
EXTRN	_gAmiPeiAfterMrcGuid:BYTE
EXTRN	_gAmiPeiBeforeMrcGuid:BYTE
EXTRN	_gEfiPeiBeforeMemoryDiscoveredPpiGuid:BYTE
_DATA	SEGMENT
COMM	_CPGC_CONFIG_TYPES:DWORD
COMM	_PCH_SMBUS_HOST_SPEED:DWORD
COMM	_PCH_SATA_OROM_DELAY:DWORD
_mMmioSize DW	0800H
	DW	0400H
	DW	0c00H
	ORG $+2
_mBeforeMemoryDiscoveredPpi DD 080000010H
	DD	FLAT:_gEfiPeiBeforeMemoryDiscoveredPpiGuid
	DD	00H
_mAmiPeiBeforeMrcDesc DD 080000010H
	DD	FLAT:_gAmiPeiBeforeMrcGuid
	DD	00H
_mAmiPeiCompelteMrcDesc DD 080000010H
	DD	FLAT:_gAmiPeiAfterMrcGuid
	DD	00H
_mAmiPeiEndOfMrcDesc DD 080000010H
	DD	FLAT:_gAmiPeiEndOfMemDetectGuid
	DD	00H
_mProcPpinVariableGuid DD 0ed3d6bcaH
	DW	059dH
	DW	04f57H
	DB	0a0H
	DB	079H
	DB	039H
	DB	06eH
	DB	07bH
	DB	0b2H
	DB	0d8H
	DB	06H
_DATA	ENDS
PUBLIC	_InstallEfiMemory
EXTRN	_gEfiAcpiVariableGuid:BYTE
EXTRN	_CopyMem:PROC
EXTRN	_BuildGuidHob:PROC
EXTRN	_gEfiSmmPeiSmramMemoryReserveGuid:BYTE
EXTRN	_BuildGuidDataHob:PROC
EXTRN	_gIqatIpReservedBaseHobGuid:BYTE
EXTRN	_gPeiCapsulePpiGuid:BYTE
EXTRN	_MrcDeadLoop:PROC
EXTRN	_GetPowerOfTwo64:PROC
EXTRN	_BuildResourceDescriptorHob:PROC
EXTRN	_PeiServicesLocatePpi:PROC
EXTRN	_gIqatIpPolicyPpiGuid:BYTE
EXTRN	_MemRegRead:PROC
EXTRN	_LShiftU64:PROC
; Function compile flags: /Ogspy
;	COMDAT _InstallEfiMemory
_TEXT	SEGMENT
_DescriptorAcpiVariable$ = -72				; size = 32
_HighSystemMemoryBase$ = -40				; size = 8
_Register$ = -32					; size = 24
_MeUmaAddr$ = -8					; size = 8
_IqatReservedBase$ = 0					; size = 8
tv414 = 8						; size = 4
_CapsuleBufferLength$ = 12				; size = 4
_NonVolatileHighMemoryAddr$ = 16			; size = 8
_IqatIpGlobalPolicy$ = 24				; size = 4
tv780 = 28						; size = 4
_CapsuleBuffer$ = 32					; size = 4
_HighSystemMemorySize$ = 36				; size = 8
tv678 = 44						; size = 8
tv419 = 44						; size = 8
tv181 = 48						; size = 4
_TSegBase$ = 52						; size = 8
_TouudLo$ = 52						; size = 8
_Capsule$ = 60						; size = 4
_TSegSize$ = 64						; size = 8
_HostIOBoundary$ = 64					; size = 8
_NonVolatileHighMemorySize$ = 72			; size = 8
_LowSystemMemorySize$ = 80				; size = 8
_UpperTotalMemory$ = 80					; size = 8
_HostIOBoundaryHi$ = 88					; size = 8
_Sub4GMemAddr$ = 88					; size = 8
_Above4GMemAddr$ = 96					; size = 8
_RsvdRegionLength$ = 96					; size = 8
_RemapEnable$ = 107					; size = 1
_PeiServices$ = 116					; size = 4
_BootMode$ = 120					; size = 4
tv736 = 124						; size = 4
tv557 = 124						; size = 4
_MmioAllocation$ = 124					; size = 4
_MrcData$ = 124						; size = 4
_InstallEfiMemory PROC					; COMDAT
; File d:\bios\z124-002\z124-002\denvertonpkg\systemagent\mrc\mmrc\projectdata\dnv\pei\memoryinit.c
; Line 332
	push	ebp
	lea	ebp, DWORD PTR [esp-108]
	sub	esp, 180				; 000000b4H
	push	ebx
; Line 398
	mov	ebx, DWORD PTR _MrcData$[ebp]
	movzx	eax, WORD PTR [ebx+65356]
	push	esi
	xor	esi, esi
	push	edi
; Line 408
	push	20					; 00000014H
	push	esi
	push	DWORD PTR [ebx+31276]
	mov	DWORD PTR _NonVolatileHighMemoryAddr$[ebp], esi
	mov	DWORD PTR _NonVolatileHighMemoryAddr$[ebp+4], esi
	mov	DWORD PTR _NonVolatileHighMemorySize$[ebp], esi
	mov	DWORD PTR _NonVolatileHighMemorySize$[ebp+4], esi
	mov	DWORD PTR _Capsule$[ebp], esi
	mov	DWORD PTR _CapsuleBuffer$[ebp], esi
	mov	DWORD PTR _CapsuleBufferLength$[ebp], 67108864 ; 04000000H
	mov	BYTE PTR _Register$[ebp+16], 0
	mov	BYTE PTR _RemapEnable$[ebp], 0
	mov	DWORD PTR _MmioAllocation$[ebp], eax
	mov	DWORD PTR _Above4GMemAddr$[ebp], esi
	mov	DWORD PTR _Above4GMemAddr$[ebp+4], esi
	mov	DWORD PTR _HighSystemMemoryBase$[ebp+4], esi
	mov	DWORD PTR _HighSystemMemorySize$[ebp], esi
	mov	DWORD PTR _HighSystemMemorySize$[ebp+4], esi
	call	_LShiftU64
; Line 410
	or	DWORD PTR _Register$[ebp+8], -1
; Line 411
	sub	esp, 12					; 0000000cH
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	mov	DWORD PTR _Register$[ebp+12], esi
	push	0
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 168		; 000000a8H
	push	16					; 00000010H
	mov	DWORD PTR _UpperTotalMemory$[ebp], eax
	mov	DWORD PTR _UpperTotalMemory$[ebp+4], edx
	rep movsd
	call	_MemRegRead
; Line 413
	add	esp, 12					; 0000000cH
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	0
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 172		; 000000acH
	push	16					; 00000010H
	mov	DWORD PTR _TouudLo$[ebp], eax
	mov	DWORD PTR _TouudLo$[ebp+4], edx
	rep movsd
	call	_MemRegRead
; Line 415
	push	32					; 00000020H
	push	edx
	push	eax
	call	_LShiftU64
	add	eax, DWORD PTR _TouudLo$[ebp]
; Line 419
	lea	esi, DWORD PTR _Register$[ebp]
	adc	edx, DWORD PTR _TouudLo$[ebp+4]
	add	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	push	0
	push	0
	mov	DWORD PTR _Register$[ebp], 188		; 000000bcH
	push	16					; 00000010H
	mov	DWORD PTR _HostIOBoundaryHi$[ebp], eax
	mov	DWORD PTR _HostIOBoundaryHi$[ebp+4], edx
	mov	DWORD PTR [ebx+6816], eax
	mov	DWORD PTR [ebx+6820], edx
	rep movsd
	call	_MemRegRead
; Line 423
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _HostIOBoundary$[ebp], eax
	mov	DWORD PTR _HostIOBoundary$[ebp+4], edx
	mov	DWORD PTR [ebx+6824], eax
	mov	DWORD PTR [ebx+6828], edx
	mov	DWORD PTR _Register$[ebp], 184		; 000000b8H
	push	6
	pop	ecx
	mov	edi, esp
	lea	esi, DWORD PTR _Register$[ebp]
	rep movsd
	xor	esi, esi
	push	esi
	push	esi
	push	16					; 00000010H
	call	_MemRegRead
; Line 425
	mov	ecx, DWORD PTR _HostIOBoundary$[ebp+4]
	mov	edi, eax
	mov	eax, DWORD PTR _HostIOBoundary$[ebp]
	add	esp, 36					; 00000024H
	sub	eax, edi
	sbb	ecx, edx
	mov	DWORD PTR _TSegSize$[ebp+4], ecx
; Line 436
	mov	ecx, 4096				; 00001000H
	sub	ecx, DWORD PTR _MmioAllocation$[ebp]
	mov	DWORD PTR _TSegSize$[ebp], eax
	mov	eax, DWORD PTR [ebx+31276]
	mov	DWORD PTR _TSegBase$[ebp], edi
	mov	DWORD PTR _TSegBase$[ebp+4], edx
	cmp	ecx, eax
	jae	SHORT $LN36@InstallEfi
	mov	eax, ecx
$LN36@InstallEfi:
	push	20					; 00000014H
	push	esi
	push	eax
	call	_LShiftU64
	add	esp, 12					; 0000000cH
; Line 442
	cmp	DWORD PTR _HostIOBoundaryHi$[ebp+4], 1
	jb	SHORT $LN53@InstallEfi
	ja	SHORT $LN44@InstallEfi
	cmp	DWORD PTR _HostIOBoundaryHi$[ebp], esi
	jbe	SHORT $LN53@InstallEfi
$LN44@InstallEfi:
; Line 444
	xor	ecx, ecx
	sub	ecx, eax
	push	1
	pop	eax
	sbb	eax, edx
	add	DWORD PTR _UpperTotalMemory$[ebp], ecx
	mov	BYTE PTR _RemapEnable$[ebp], 1
	adc	DWORD PTR _UpperTotalMemory$[ebp+4], eax
$LN53@InstallEfi:
; Line 450
	cmp	BYTE PTR _RemapEnable$[ebp], 0
	mov	edx, DWORD PTR _TSegBase$[ebp+4]
	mov	DWORD PTR _Sub4GMemAddr$[ebp], edi
	mov	DWORD PTR _Sub4GMemAddr$[ebp+4], edx
	je	SHORT $LN54@InstallEfi
; Line 451
	mov	eax, DWORD PTR _UpperTotalMemory$[ebp]
	add	eax, esi
	mov	DWORD PTR _Above4GMemAddr$[ebp], eax
	mov	eax, DWORD PTR _UpperTotalMemory$[ebp+4]
	adc	eax, -1
	mov	DWORD PTR _Above4GMemAddr$[ebp+4], eax
$LN54@InstallEfi:
; Line 458
	cmp	BYTE PTR [ebx+65506], 0
	je	SHORT $LN51@InstallEfi
	mov	ecx, DWORD PTR [ebx+65507]
	cmp	ecx, esi
	je	SHORT $LN51@InstallEfi
; Line 459
	xor	eax, eax
	mov	DWORD PTR tv557[ebp], eax
	mov	eax, edi
	sub	eax, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR tv557[ebp]
	sbb	ecx, edx
	mov	DWORD PTR _Sub4GMemAddr$[ebp], eax
	mov	DWORD PTR _Sub4GMemAddr$[ebp+4], ecx
; Line 460
	mov	DWORD PTR _MeUmaAddr$[ebp], eax
	mov	DWORD PTR _MeUmaAddr$[ebp+4], esi
$LN51@InstallEfi:
; Line 473
	lea	eax, DWORD PTR _IqatIpGlobalPolicy$[ebp]
	push	eax
	push	esi
	push	esi
	push	OFFSET _gIqatIpPolicyPpiGuid
	call	_PeiServicesLocatePpi
; Line 476
	mov	eax, DWORD PTR _IqatIpGlobalPolicy$[ebp]
	add	esp, 16					; 00000010H
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN30@InstallEfi
; Line 477
	add	DWORD PTR _Sub4GMemAddr$[ebp], -1048576	; fff00000H
; Line 478
	mov	eax, DWORD PTR _Sub4GMemAddr$[ebp]
	mov	DWORD PTR _IqatReservedBase$[ebp], eax
	adc	DWORD PTR _Sub4GMemAddr$[ebp+4], -1
	mov	eax, DWORD PTR _Sub4GMemAddr$[ebp+4]
	mov	DWORD PTR _IqatReservedBase$[ebp+4], eax
$LN30@InstallEfi:
; Line 486
	mov	al, BYTE PTR [ebx+65480]
	test	al, al
	je	$LN55@InstallEfi
; Line 487
	cmp	al, 4
	jne	SHORT $LN25@InstallEfi
; Line 491
	mov	DWORD PTR [ebx+65482], esi
	mov	DWORD PTR tv780[ebp], esi
	lea	edi, DWORD PTR [ebx+28608]
	lea	edx, DWORD PTR [ebx+28610]
	mov	DWORD PTR tv181[ebp], 2
$LL27@InstallEfi:
; Line 495
	cmp	BYTE PTR [edi], 1
	jne	SHORT $LN26@InstallEfi
; Line 496
	xor	ecx, ecx
	mov	DWORD PTR tv736[ebp], edx
	mov	DWORD PTR tv414[ebp], 2
$LL23@InstallEfi:
; Line 497
	mov	eax, DWORD PTR tv736[ebp]
	cmp	BYTE PTR [eax], 1
	jne	SHORT $LN22@InstallEfi
	mov	eax, DWORD PTR tv780[ebp]
	add	eax, ecx
	cmp	DWORD PTR [ebx+eax*4+65300], esi
	je	SHORT $LN22@InstallEfi
; Line 498
	mov	eax, DWORD PTR [ebx+eax*4+28614]
	add	DWORD PTR [ebx+65482], eax
$LN22@InstallEfi:
	inc	ecx
	inc	DWORD PTR tv736[ebp]
	dec	DWORD PTR tv414[ebp]
	jne	SHORT $LL23@InstallEfi
$LN26@InstallEfi:
; Line 494
	add	DWORD PTR tv780[ebp], 2
	inc	edx
	inc	edx
	inc	edi
	dec	DWORD PTR tv181[ebp]
	jne	SHORT $LL27@InstallEfi
$LN25@InstallEfi:
; Line 506
	mov	eax, DWORD PTR [ebx+65482]
	cmp	eax, esi
	je	SHORT $LN55@InstallEfi
; Line 507
	push	20					; 00000014H
	push	esi
	push	eax
	call	_LShiftU64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _NonVolatileHighMemorySize$[ebp], eax
	mov	DWORD PTR _NonVolatileHighMemorySize$[ebp+4], edx
; Line 508
	cmp	DWORD PTR _Above4GMemAddr$[ebp+4], edx
	ja	SHORT $LN66@InstallEfi
	jb	SHORT $LN65@InstallEfi
	cmp	DWORD PTR _Above4GMemAddr$[ebp], eax
	jae	SHORT $LN66@InstallEfi
$LN65@InstallEfi:
; Line 512
	mov	eax, DWORD PTR _Above4GMemAddr$[ebp]
	mov	DWORD PTR _NonVolatileHighMemorySize$[ebp], eax
	mov	eax, DWORD PTR _Above4GMemAddr$[ebp+4]
	mov	DWORD PTR _NonVolatileHighMemorySize$[ebp+4], eax
$LN66@InstallEfi:
; Line 514
	mov	ecx, DWORD PTR _NonVolatileHighMemorySize$[ebp]
	sub	DWORD PTR _Above4GMemAddr$[ebp], ecx
	mov	edx, DWORD PTR _NonVolatileHighMemorySize$[ebp+4]
; Line 515
	mov	eax, DWORD PTR _UpperTotalMemory$[ebp]
	sbb	DWORD PTR _Above4GMemAddr$[ebp+4], edx
	sub	eax, ecx
	mov	ecx, DWORD PTR _UpperTotalMemory$[ebp+4]
	sbb	ecx, edx
; Line 516
	mov	DWORD PTR _NonVolatileHighMemoryAddr$[ebp], eax
	mov	DWORD PTR _NonVolatileHighMemoryAddr$[ebp+4], ecx
$LN55@InstallEfi:
; Line 531
	push	esi
	mov	edi, 655360				; 000a0000H
	push	edi
	push	esi
	push	esi
	mov	esi, 15367				; 00003c07H
	push	esi
	push	0
	call	_BuildResourceDescriptorHob
; Line 540
	push	0
	push	393216					; 00060000H
	push	0
	push	edi
	push	esi
	push	5
	call	_BuildResourceDescriptorHob
; Line 546
	mov	edi, DWORD PTR _Sub4GMemAddr$[ebp]
	mov	eax, DWORD PTR _Sub4GMemAddr$[ebp+4]
	add	esp, 48					; 00000030H
	add	edi, -1048576				; fff00000H
	adc	eax, -1
; Line 547
	cmp	BYTE PTR _RemapEnable$[ebp], 0
	mov	DWORD PTR _LowSystemMemorySize$[ebp+4], eax
	je	SHORT $LN56@InstallEfi
; Line 549
	mov	ecx, DWORD PTR _Above4GMemAddr$[ebp]
	mov	DWORD PTR _HighSystemMemorySize$[ebp], ecx
	mov	ecx, DWORD PTR _Above4GMemAddr$[ebp+4]
	mov	DWORD PTR _HighSystemMemoryBase$[ebp+4], 1
	mov	DWORD PTR _HighSystemMemorySize$[ebp+4], ecx
$LN56@InstallEfi:
; Line 554
	mov	ecx, DWORD PTR [ebx+6824]
	mov	edx, DWORD PTR [ebx+6828]
	sub	ecx, edi
	sbb	edx, eax
	mov	eax, ecx
	add	eax, -1048576				; fff00000H
	mov	ecx, edx
	adc	ecx, -1
	mov	DWORD PTR tv678[ebp+4], ecx
	mov	DWORD PTR _RsvdRegionLength$[ebp], eax
	mov	DWORD PTR _RsvdRegionLength$[ebp+4], ecx
; Line 555
	jne	SHORT $LL16@InstallEfi
	test	eax, eax
	jbe	SHORT $LN47@InstallEfi
$LL16@InstallEfi:
; Line 559
	mov	ecx, DWORD PTR _RsvdRegionLength$[ebp]
	mov	edx, DWORD PTR _RsvdRegionLength$[ebp+4]
	shrd	ecx, edx, 1
	shr	edx, 1
	mov	DWORD PTR _RsvdRegionLength$[ebp], ecx
	mov	DWORD PTR _RsvdRegionLength$[ebp+4], edx
	test	edx, edx
	ja	SHORT $LL16@InstallEfi
; Line 555
	jb	SHORT $LN63@InstallEfi
	test	ecx, ecx
	ja	SHORT $LL16@InstallEfi
$LN63@InstallEfi:
	mov	ecx, DWORD PTR tv678[ebp+4]
$LN47@InstallEfi:
; Line 569
	push	ecx
	push	eax
	call	_GetPowerOfTwo64
	mov	ecx, DWORD PTR [ebx+6824]
	shld	edx, eax, 1
	add	eax, eax
	sub	ecx, eax
	mov	eax, DWORD PTR [ebx+6828]
	sbb	eax, edx
; Line 570
	mov	edx, eax
	mov	DWORD PTR [ebx+6836], eax
	mov	eax, DWORD PTR _LowSystemMemorySize$[ebp+4]
	sub	edi, ecx
	sbb	eax, edx
	add	edi, 1048576				; 00100000H
	adc	eax, 0
; Line 579
	push	eax
	push	edi
	push	edx
	push	ecx
	push	esi
	push	5
	mov	DWORD PTR [ebx+6832], ecx
	mov	DWORD PTR _RsvdRegionLength$[ebp], edi
	mov	DWORD PTR _RsvdRegionLength$[ebp+4], eax
	call	_BuildResourceDescriptorHob
; Line 582
	mov	edi, DWORD PTR [ebx+6832]
	mov	eax, DWORD PTR [ebx+6836]
	add	esp, 32					; 00000020H
	add	edi, -1048576				; fff00000H
	adc	eax, -1
; Line 598
	cmp	DWORD PTR _BootMode$[ebp], 17		; 00000011H
	mov	DWORD PTR _LowSystemMemorySize$[ebp+4], eax
	je	SHORT $LN12@InstallEfi
; Line 599
	mov	eax, DWORD PTR _PeiServices$[ebp]
	mov	ecx, DWORD PTR [eax]
; Line 600
	mov	eax, DWORD PTR _Sub4GMemAddr$[ebp]
	sub	eax, DWORD PTR _RsvdRegionLength$[ebp]
	mov	DWORD PTR tv419[ebp], eax
	mov	eax, DWORD PTR _Sub4GMemAddr$[ebp+4]
	sbb	eax, DWORD PTR _RsvdRegionLength$[ebp+4]
	add	DWORD PTR tv419[ebp], -2097152		; ffe00000H
	adc	eax, -1
	push	eax
	push	DWORD PTR tv419[ebp]
	push	0
	push	2097152					; 00200000H
	push	DWORD PTR _PeiServices$[ebp]
	call	DWORD PTR [ecx+68]
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN60@InstallEfi
; Line 601
	mov	DWORD PTR [ebx+65333], 3
; Line 602
	call	_MrcDeadLoop
$LN60@InstallEfi:
	mov	eax, DWORD PTR _LowSystemMemorySize$[ebp+4]
$LN12@InstallEfi:
; Line 633
	push	eax
	push	edi
	push	0
	mov	edi, 1048576				; 00100000H
	push	edi
	push	esi
	push	0
	call	_BuildResourceDescriptorHob
	add	esp, 24					; 00000018H
; Line 677
	cmp	DWORD PTR _BootMode$[ebp], 18		; 00000012H
	jne	SHORT $LN61@InstallEfi
; Line 684
	lea	eax, DWORD PTR _Capsule$[ebp]
	push	eax
	push	0
	push	0
	push	OFFSET _gPeiCapsulePpiGuid
	call	_PeiServicesLocatePpi
	add	esp, 16					; 00000010H
; Line 687
	test	eax, eax
	jne	SHORT $LN61@InstallEfi
; Line 690
	lea	eax, DWORD PTR _CapsuleBufferLength$[ebp]
	push	eax
	lea	eax, DWORD PTR _CapsuleBuffer$[ebp]
	push	eax
	push	DWORD PTR _PeiServices$[ebp]
	mov	eax, DWORD PTR _Capsule$[ebp]
	mov	DWORD PTR _CapsuleBuffer$[ebp], edi
	call	DWORD PTR [eax]
	add	esp, 12					; 0000000cH
; Line 696
	test	eax, eax
	je	SHORT $LN61@InstallEfi
; Line 697
	and	DWORD PTR _Capsule$[ebp], 0
$LN61@InstallEfi:
; Line 709
	mov	eax, DWORD PTR _Capsule$[ebp]
	test	eax, eax
	je	SHORT $LN8@InstallEfi
; Line 710
	push	DWORD PTR _CapsuleBufferLength$[ebp]
	push	DWORD PTR _CapsuleBuffer$[ebp]
	push	DWORD PTR _PeiServices$[ebp]
	call	DWORD PTR [eax+8]
	add	esp, 12					; 0000000cH
$LN8@InstallEfi:
; Line 717
	cmp	BYTE PTR [ebx+65506], 0
	je	SHORT $LN62@InstallEfi
	mov	ebx, DWORD PTR [ebx+65507]
	test	ebx, ebx
	je	SHORT $LN62@InstallEfi
; Line 726
	push	0
	push	ebx
	push	DWORD PTR _MeUmaAddr$[ebp+4]
	push	DWORD PTR _MeUmaAddr$[ebp]
	push	esi
	push	5
	call	_BuildResourceDescriptorHob
	add	esp, 24					; 00000018H
$LN62@InstallEfi:
; Line 737
	mov	eax, DWORD PTR _IqatIpGlobalPolicy$[ebp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN6@InstallEfi
; Line 743
	push	0
	push	edi
	push	DWORD PTR _IqatReservedBase$[ebp+4]
	push	DWORD PTR _IqatReservedBase$[ebp]
	push	esi
	push	5
	call	_BuildResourceDescriptorHob
; Line 749
	push	8
	lea	eax, DWORD PTR _IqatReservedBase$[ebp]
	push	eax
	push	OFFSET _gIqatIpReservedBaseHobGuid
	call	_BuildGuidDataHob
	add	esp, 36					; 00000024H
$LN6@InstallEfi:
; Line 772
	mov	eax, DWORD PTR _TSegSize$[ebp]
	or	eax, DWORD PTR _TSegSize$[ebp+4]
	je	SHORT $LN4@InstallEfi
; Line 777
	push	72					; 00000048H
	push	OFFSET _gEfiSmmPeiSmramMemoryReserveGuid
	call	_BuildGuidHob
; Line 783
	mov	edx, DWORD PTR _TSegSize$[ebp]
	mov	ebx, DWORD PTR _TSegBase$[ebp]
	mov	edi, DWORD PTR _TSegBase$[ebp+4]
; Line 784
	and	DWORD PTR [eax+36], 0
	lea	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR _TSegSize$[ebp+4]
; Line 789
	push	32					; 00000020H
	mov	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+16], ebx
	mov	DWORD PTR [eax+20], edi
	mov	DWORD PTR [eax+28], edx
	mov	DWORD PTR [eax+32], 2
	push	ecx
	lea	eax, DWORD PTR _DescriptorAcpiVariable$[ebp]
	push	eax
	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], edi
	call	_CopyMem
; Line 790
	add	DWORD PTR _DescriptorAcpiVariable$[ebp+8], 3854 ; 00000f0eH
; Line 795
	push	32					; 00000020H
	lea	eax, DWORD PTR _DescriptorAcpiVariable$[ebp]
	adc	DWORD PTR _DescriptorAcpiVariable$[ebp+12], 0
	push	eax
	push	OFFSET _gEfiAcpiVariableGuid
	call	_BuildGuidDataHob
; Line 804
	push	DWORD PTR _TSegSize$[ebp+4]
	push	DWORD PTR _TSegSize$[ebp]
	push	edi
	push	ebx
	push	esi
	push	5
	call	_BuildResourceDescriptorHob
	add	esp, 56					; 00000038H
$LN4@InstallEfi:
; Line 822
	cmp	BYTE PTR _RemapEnable$[ebp], 0
	je	SHORT $LN1@InstallEfi
; Line 823
	xor	ecx, ecx
	cmp	DWORD PTR _HighSystemMemorySize$[ebp+4], ecx
	ja	SHORT $LN58@InstallEfi
	cmp	DWORD PTR _HighSystemMemorySize$[ebp], ecx
	jbe	SHORT $LN2@InstallEfi
$LN58@InstallEfi:
; Line 829
	push	DWORD PTR _HighSystemMemorySize$[ebp+4]
	xor	eax, eax
	push	DWORD PTR _HighSystemMemorySize$[ebp]
	push	DWORD PTR _HighSystemMemoryBase$[ebp+4]
	push	eax
	push	esi
	push	ecx
	call	_BuildResourceDescriptorHob
	add	esp, 24					; 00000018H
$LN2@InstallEfi:
; Line 837
	xor	eax, eax
	cmp	DWORD PTR _NonVolatileHighMemorySize$[ebp], eax
	jne	SHORT $LN59@InstallEfi
	cmp	DWORD PTR _NonVolatileHighMemorySize$[ebp+4], eax
	je	SHORT $LN1@InstallEfi
$LN59@InstallEfi:
; Line 846
	push	DWORD PTR _NonVolatileHighMemorySize$[ebp+4]
	push	DWORD PTR _NonVolatileHighMemorySize$[ebp]
	push	DWORD PTR _NonVolatileHighMemoryAddr$[ebp+4]
	push	DWORD PTR _NonVolatileHighMemoryAddr$[ebp]
	push	25181191				; 01803c07H
	push	eax
	call	_BuildResourceDescriptorHob
	add	esp, 24					; 00000018H
$LN1@InstallEfi:
; Line 859
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	add	ebp, 108				; 0000006cH
	leave
	ret	0
_InstallEfiMemory ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@EFNJCCDI@?$AAA?$AAc?$AAp?$AAi?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AAV?$AAa?$AAr?$AAi?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	_InstallS3Memory
EXTRN	_gEfiPeiReadOnlyVariable2PpiGuid:BYTE
;	COMDAT ??_C@_1CG@EFNJCCDI@?$AAA?$AAc?$AAp?$AAi?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AAV?$AAa?$AAr?$AAi?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@EFNJCCDI@?$AAA?$AAc?$AAp?$AAi?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AAV?$AAa?$AAr?$AAi?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ DB 'A'
	DB	00H, 'c', 00H, 'p', 00H, 'i', 00H, 'G', 00H, 'l', 00H, 'o', 00H
	DB	'b', 00H, 'a', 00H, 'l', 00H, 'V', 00H, 'a', 00H, 'r', 00H, 'i'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _InstallS3Memory
_TEXT	SEGMENT
_AcpiVariableSet64$ = -16				; size = 8
_VarAttrib$ = -8					; size = 4
_VarSize$ = -4						; size = 4
_PeiVariable$ = 8					; size = 4
_PeiServices$ = 8					; size = 4
_MrcData$ = 12						; size = 4
_InstallS3Memory PROC					; COMDAT
; Line 873
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
; Line 899
	mov	esi, DWORD PTR _PeiServices$[ebp]
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _PeiVariable$[ebp]
	push	ecx
	push	0
	push	0
	push	OFFSET _gEfiPeiReadOnlyVariable2PpiGuid
	push	esi
	mov	DWORD PTR _VarSize$[ebp], 8
	mov	DWORD PTR _VarAttrib$[ebp], 7
	call	DWORD PTR [eax+32]
; Line 909
	lea	eax, DWORD PTR _AcpiVariableSet64$[ebp]
	push	eax
	lea	eax, DWORD PTR _VarSize$[ebp]
	push	eax
	lea	eax, DWORD PTR _VarAttrib$[ebp]
	push	eax
	mov	eax, DWORD PTR _PeiVariable$[ebp]
	push	OFFSET _gEfiAcpiVariableGuid
	push	OFFSET ??_C@_1CG@EFNJCCDI@?$AAA?$AAc?$AAp?$AAi?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AAV?$AAa?$AAr?$AAi?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
	push	eax
	call	DWORD PTR [eax]
	add	esp, 44					; 0000002cH
; Line 913
	test	eax, eax
	jl	SHORT $LN1@InstallS3M
	mov	eax, DWORD PTR _AcpiVariableSet64$[ebp]
	test	eax, eax
	je	SHORT $LN1@InstallS3M
; Line 917
	mov	ecx, DWORD PTR [eax]
; Line 918
	mov	eax, DWORD PTR [eax+8]
; Line 923
	mov	edx, DWORD PTR [esi]
	push	0
	push	eax
	push	0
	push	ecx
	push	esi
	call	DWORD PTR [edx+68]
	add	esp, 20					; 00000014H
; Line 927
	jmp	SHORT $LN3@InstallS3M
$LN1@InstallS3M:
; Line 914
	mov	eax, -2147483639			; 80000009H
$LN3@InstallS3M:
	pop	esi
; Line 928
	leave
	ret	0
_InstallS3Memory ENDP
_TEXT	ENDS
PUBLIC	_MrcBdatSaveHob
EXTRN	_gEfiBdatMemoryData2Guid:BYTE
; Function compile flags: /Ogspy
;	COMDAT _MrcBdatSaveHob
_TEXT	SEGMENT
_PeiServices$ = 8					; size = 4
_MrcData$ = 12						; size = 4
_BdatMemoryData2Structure$ = 16				; size = 4
_MrcBdatSaveHob PROC					; COMDAT
; Line 1471
	push	esi
; Line 1484
	mov	esi, 9053				; 0000235dH
	push	esi
	push	OFFSET _gEfiBdatMemoryData2Guid
	call	_BuildGuidHob
; Line 1493
	push	esi
	push	DWORD PTR _BdatMemoryData2Structure$[esp+12]
	push	eax
	call	_CopyMem
	add	esp, 20					; 00000014H
; Line 1497
	xor	eax, eax
	pop	esi
; Line 1498
	ret	0
_MrcBdatSaveHob ENDP
_TEXT	ENDS
PUBLIC	_MrcParamsSave
EXTRN	_gEfiMemoryConfigDataGuid:BYTE
; Function compile flags: /Ogspy
;	COMDAT _MrcParamsSave
_TEXT	SEGMENT
_PeiServices$ = 8					; size = 4
_MrcData$ = 12						; size = 4
_MrcParamsSave PROC					; COMDAT
; Line 1518
	push	31288					; 00007a38H
	push	DWORD PTR _MrcData$[esp]
	push	OFFSET _gEfiMemoryConfigDataGuid
	call	_BuildGuidDataHob
	add	esp, 12					; 0000000cH
; Line 1538
	xor	eax, eax
; Line 1539
	ret	0
_MrcParamsSave ENDP
_TEXT	ENDS
PUBLIC	_MrcVersionSaveHob
EXTRN	_gEfiMrcVersionGuid:BYTE
; Function compile flags: /Ogspy
;	COMDAT _MrcVersionSaveHob
_TEXT	SEGMENT
_PeiServices$ = 8					; size = 4
_MrcVersion$ = 12					; size = 4
_MrcVersionSaveHob PROC					; COMDAT
; Line 1563
	push	4
	push	OFFSET _gEfiMrcVersionGuid
	call	_BuildGuidHob
; Line 1572
	push	4
	lea	ecx, DWORD PTR _MrcVersion$[esp+8]
	push	ecx
	push	eax
	call	_CopyMem
	add	esp, 20					; 00000014H
; Line 1574
	xor	eax, eax
; Line 1575
	ret	0
_MrcVersionSaveHob ENDP
_TEXT	ENDS
PUBLIC	_GetTimingOverrides
EXTRN	_GetConfigBlock:PROC
EXTRN	_gSiSaPolicyPpiGuid:BYTE
; Function compile flags: /Ogspy
;	COMDAT _GetTimingOverrides
_TEXT	SEGMENT
_PeiVariable$ = -8					; size = 4
_MemConfig$ = -4					; size = 4
_SiSaPolicyPpi$ = 8					; size = 4
_PeiServices$ = 8					; size = 4
_MrcData$ = 12						; size = 4
_GetTimingOverrides PROC				; COMDAT
; Line 1590
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1605
	mov	eax, DWORD PTR _PeiServices$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _PeiVariable$[ebp]
	push	edx
	xor	ebx, ebx
	push	ebx
	push	ebx
	push	OFFSET _gEfiPeiReadOnlyVariable2PpiGuid
	push	eax
	call	DWORD PTR [ecx+32]
; Line 1613
	lea	eax, DWORD PTR _SiSaPolicyPpi$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	OFFSET _gSiSaPolicyPpiGuid
	call	_PeiServicesLocatePpi
; Line 1616
	lea	eax, DWORD PTR _MemConfig$[ebp]
	push	eax
	push	1
	push	DWORD PTR _SiSaPolicyPpi$[ebp]
	call	_GetConfigBlock
	add	esp, 48					; 00000030H
; Line 1619
	test	eax, eax
	jl	$LN16@GetTimingO
	mov	eax, DWORD PTR _MemConfig$[ebp]
	cmp	BYTE PTR [eax+6], bl
	je	$LN16@GetTimingO
; Line 1626
	mov	ecx, DWORD PTR _MrcData$[ebp]
	push	esi
	push	edi
	push	2
	lea	esi, DWORD PTR [ecx+28608]
	add	ecx, 64214				; 0000fad6H
	pop	edi
$LL14@GetTimingO:
; Line 1627
	cmp	BYTE PTR [esi], bl
	je	$LN13@GetTimingO
; Line 1630
	mov	dl, BYTE PTR [eax+46]
	cmp	dl, bl
	je	SHORT $LN10@GetTimingO
; Line 1631
	movzx	dx, dl
	mov	WORD PTR [ecx+52], dx
$LN10@GetTimingO:
; Line 1633
	mov	dl, BYTE PTR [eax+47]
	cmp	dl, bl
	je	SHORT $LN9@GetTimingO
; Line 1634
	movzx	dx, dl
	mov	WORD PTR [ecx], dx
$LN9@GetTimingO:
; Line 1636
	mov	dl, BYTE PTR [eax+48]
	cmp	dl, bl
	je	SHORT $LN8@GetTimingO
; Line 1637
	movzx	dx, dl
	mov	WORD PTR [ecx-4], dx
$LN8@GetTimingO:
; Line 1639
	mov	dl, BYTE PTR [eax+49]
	cmp	dl, bl
	je	SHORT $LN7@GetTimingO
; Line 1640
	movzx	dx, dl
	mov	WORD PTR [ecx-8], dx
$LN7@GetTimingO:
; Line 1642
	mov	dl, BYTE PTR [eax+50]
	cmp	dl, bl
	je	SHORT $LN6@GetTimingO
; Line 1643
	movzx	dx, dl
	mov	WORD PTR [ecx+24], dx
$LN6@GetTimingO:
; Line 1645
	mov	dl, BYTE PTR [eax+51]
	cmp	dl, bl
	je	SHORT $LN5@GetTimingO
; Line 1646
	movzx	dx, dl
	mov	WORD PTR [ecx+16], dx
$LN5@GetTimingO:
; Line 1648
	mov	dl, BYTE PTR [eax+52]
	cmp	dl, bl
	je	SHORT $LN4@GetTimingO
; Line 1649
	movzx	dx, dl
	mov	WORD PTR [ecx+28], dx
$LN4@GetTimingO:
; Line 1651
	mov	dl, BYTE PTR [eax+53]
	cmp	dl, bl
	je	SHORT $LN3@GetTimingO
; Line 1652
	movzx	dx, dl
	mov	WORD PTR [ecx+32], dx
$LN3@GetTimingO:
; Line 1654
	mov	dl, BYTE PTR [eax+54]
	cmp	dl, bl
	je	SHORT $LN2@GetTimingO
; Line 1655
	movzx	dx, dl
	mov	WORD PTR [ecx+40], dx
$LN2@GetTimingO:
; Line 1657
	mov	dl, BYTE PTR [eax+55]
	cmp	dl, bl
	je	SHORT $LN13@GetTimingO
; Line 1658
	movzx	dx, dl
	mov	WORD PTR [ecx+44], dx
$LN13@GetTimingO:
	inc	esi
	add	ecx, 288				; 00000120H
	dec	edi
	jne	$LL14@GetTimingO
	pop	edi
	pop	esi
$LN16@GetTimingO:
; Line 1621
	xor	eax, eax
	pop	ebx
; Line 1663
	leave
	ret	0
_GetTimingOverrides ENDP
_TEXT	ENDS
PUBLIC	_OemGetSetMeUma
EXTRN	_gMeUmaPpiGuid:BYTE
; Function compile flags: /Ogspy
;	COMDAT _OemGetSetMeUma
_TEXT	SEGMENT
_MeUma$ = 8						; size = 4
_PeiServices$ = 8					; size = 4
_MrcData$ = 12						; size = 4
_OemGetSetMeUma PROC					; COMDAT
; Line 1679
	push	ebp
	mov	ebp, esp
; Line 1689
	mov	eax, DWORD PTR _PeiServices$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _MeUma$[ebp]
	push	edx
	push	0
	push	0
	push	OFFSET _gMeUmaPpiGuid
	push	eax
	call	DWORD PTR [ecx+32]
	add	esp, 20					; 00000014H
; Line 1690
	test	eax, eax
	jne	SHORT $LN2@OemGetSetM
	push	esi
; Line 1697
	mov	esi, DWORD PTR _MrcData$[ebp]
	cmp	BYTE PTR [esi+65506], al
	je	SHORT $LN8@OemGetSetM
; Line 1701
	mov	eax, DWORD PTR _MeUma$[ebp]
	call	DWORD PTR [eax+16]
	test	al, al
	je	SHORT $LN8@OemGetSetM
; Line 1702
	cmp	BYTE PTR [esi+31274], 4
	jne	SHORT $LN8@OemGetSetM
; Line 1703
	mov	eax, DWORD PTR _MeUma$[ebp]
	push	0
	call	DWORD PTR [eax]
	shl	eax, 20					; 00000014H
	pop	ecx
	mov	DWORD PTR [esi+65507], eax
$LN8@OemGetSetM:
	pop	esi
$LN2@OemGetSetM:
; Line 1710
	pop	ebp
	ret	0
_OemGetSetMeUma ENDP
_TEXT	ENDS
PUBLIC	_OemSendDramInitDoneCommand
; Function compile flags: /Ogspy
;	COMDAT _OemSendDramInitDoneCommand
_TEXT	SEGMENT
_NextStep$ = -8						; size = 1
_InitStat$ = -4						; size = 1
_MeUma$ = 8						; size = 4
_PeiServices$ = 8					; size = 4
_MrcStatus$ = 12					; size = 4
_OemSendDramInitDoneCommand PROC			; COMDAT
; Line 1727
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1739
	mov	eax, DWORD PTR _PeiServices$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _MeUma$[ebp]
	push	edx
	push	0
	push	0
	push	OFFSET _gMeUmaPpiGuid
	push	eax
	call	DWORD PTR [ecx+32]
	add	esp, 20					; 00000014H
; Line 1740
	test	eax, eax
	jne	SHORT $LN3@OemSendDra
; Line 1743
	mov	eax, DWORD PTR _MeUma$[ebp]
	call	DWORD PTR [eax+16]
	test	al, al
	je	SHORT $LN3@OemSendDra
; Line 1747
	mov	eax, DWORD PTR _MrcStatus$[ebp]
	cmp	DWORD PTR [eax], 0
	setne	al
	mov	BYTE PTR _InitStat$[ebp], al
; Line 1753
	lea	eax, DWORD PTR _NextStep$[ebp]
	push	eax
	push	DWORD PTR _InitStat$[ebp]
	mov	eax, DWORD PTR _MeUma$[ebp]
	push	0
	call	DWORD PTR [eax+8]
; Line 1756
	push	DWORD PTR _NextStep$[ebp]
	mov	eax, DWORD PTR _MeUma$[ebp]
	call	DWORD PTR [eax+12]
	add	esp, 16					; 00000010H
$LN3@OemSendDra:
; Line 1759
	leave
	ret	0
_OemSendDramInitDoneCommand ENDP
_TEXT	ENDS
PUBLIC	_OemSendIEDramInitDoneCommand
EXTRN	_gPeiIeHeciPpiGuid:BYTE
; Function compile flags: /Ogspy
;	COMDAT _OemSendIEDramInitDoneCommand
_TEXT	SEGMENT
_IeHeciPpi$ = -4					; size = 4
_PeiServices$ = 8					; size = 4
_Action$41427 = 11					; size = 1
_MrcStatus$ = 12					; size = 4
_OemSendIEDramInitDoneCommand PROC			; COMDAT
; Line 1777
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1785
	mov	eax, DWORD PTR _PeiServices$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _IeHeciPpi$[ebp]
	push	edx
	xor	ebx, ebx
	push	ebx
	push	ebx
	push	OFFSET _gPeiIeHeciPpiGuid
	push	eax
	mov	DWORD PTR _IeHeciPpi$[ebp], ebx
	call	DWORD PTR [ecx+32]
	add	esp, 20					; 00000014H
; Line 1788
	test	eax, eax
	jne	SHORT $LN1@OemSendIED
; Line 1791
	mov	eax, DWORD PTR _MrcStatus$[ebp]
	cmp	DWORD PTR [eax], ebx
; Line 1797
	lea	ecx, DWORD PTR _Action$41427[ebp]
	setne	al
	movzx	eax, al
	push	ecx
	push	eax
	mov	eax, DWORD PTR _IeHeciPpi$[ebp]
	push	eax
	mov	BYTE PTR _Action$41427[ebp], bl
	call	DWORD PTR [eax+16]
	add	esp, 12					; 0000000cH
$LN1@OemSendIED:
	pop	ebx
; Line 1811
	leave
	ret	0
_OemSendIEDramInitDoneCommand ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@CJLBCGFC@?$AAM?$AAe?$AAm?$AAC?$AAe?$AAi?$AAl?$AA?4?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@CGNPELNM@?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@ ; `string'
PUBLIC	_MrcParamsRestore
EXTRN	_OverrideTimingParams:PROC
EXTRN	_GetPowerOfTwo:PROC
EXTRN	_gEfiGlobalVariableGuid:BYTE
;	COMDAT ??_C@_1BC@CJLBCGFC@?$AAM?$AAe?$AAm?$AAC?$AAe?$AAi?$AAl?$AA?4?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@CJLBCGFC@?$AAM?$AAe?$AAm?$AAC?$AAe?$AAi?$AAl?$AA?4?$AA?$AA@ DB 'M'
	DB	00H, 'e', 00H, 'm', 00H, 'C', 00H, 'e', 00H, 'i', 00H, 'l', 00H
	DB	'.', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CGNPELNM@?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@CGNPELNM@?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@ DB 'M'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _MrcParamsRestore
_TEXT	SEGMENT
_MrcParametersHob$ = -31332				; size = 31288
tv200 = -44						; size = 4
tv3054 = -40						; size = 4
_NvMemConfig$ = -36					; size = 4
_SiSaPolicyPpi$ = -32					; size = 4
_PeiVariable$ = -28					; size = 4
tv3000 = -24						; size = 4
tv181 = -24						; size = 4
_VariableSize$ = -20					; size = 4
tv2538 = -16						; size = 4
tv429 = -16						; size = 4
_DramDevice$ = -9					; size = 1
_MemConfig$ = -8					; size = 4
tv2936 = -4						; size = 4
tv2569 = -4						; size = 4
tv584 = -4						; size = 4
tv227 = -4						; size = 4
tv2511 = 8						; size = 4
tv282 = 8						; size = 4
_PeiServices$ = 8					; size = 4
_Bank$ = 11						; size = 1
tv2466 = 12						; size = 4
tv2425 = 12						; size = 4
tv2226 = 12						; size = 4
tv2083 = 12						; size = 4
_MrcData$ = 12						; size = 4
_BankGroup$ = 15					; size = 1
_MrcParamsRestore PROC					; COMDAT
; Line 943
	push	ebp
	mov	ebp, esp
	sub	esp, 31332				; 00007a64H
; Line 982
	mov	eax, DWORD PTR _PeiServices$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	esi
	push	edi
	lea	edx, DWORD PTR _PeiVariable$[ebp]
	push	edx
	xor	ebx, ebx
	push	ebx
	push	ebx
	push	OFFSET _gEfiPeiReadOnlyVariable2PpiGuid
	push	eax
	mov	DWORD PTR _VariableSize$[ebp], 31288	; 00007a38H
	call	DWORD PTR [ecx+32]
; Line 994
	lea	eax, DWORD PTR _MrcParametersHob$[ebp]
	push	eax
	lea	eax, DWORD PTR _VariableSize$[ebp]
	push	eax
	mov	eax, DWORD PTR _PeiVariable$[ebp]
	push	ebx
	push	OFFSET _gEfiMemoryConfigDataGuid
	push	OFFSET ??_C@_1BK@CGNPELNM@?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@
	push	eax
	call	DWORD PTR [eax]
; Line 1006
	mov	esi, DWORD PTR _MrcData$[ebp]
	add	esp, 44					; 0000002cH
	test	eax, eax
	jge	SHORT $LN77@MrcParamsR
	cmp	BYTE PTR [esi+31274], 4
	je	SHORT $LN75@MrcParamsR
; Line 1012
	mov	ecx, 3321				; 00000cf9H
	mov	edx, ecx
	xor	al, al
	out	dx, al
; Line 1013
	add	al, 14					; 0000000eH
	out	dx, al
; Line 1014
	hlt
; Line 1019
	jmp	SHORT $LN75@MrcParamsR
$LN77@MrcParamsR:
; Line 1028
	push	28608					; 00006fc0H
	lea	eax, DWORD PTR _MrcParametersHob$[ebp]
	push	eax
	push	esi
	call	_CopyMem
	add	esp, 12					; 0000000cH
; Line 1029
	mov	BYTE PTR [esi+26980], 1
$LN75@MrcParamsR:
; Line 1041
	lea	edi, DWORD PTR [esi+65437]
	push	edi
	lea	eax, DWORD PTR _VariableSize$[ebp]
	push	eax
	mov	eax, DWORD PTR _PeiVariable$[ebp]
	push	ebx
	push	OFFSET _gEfiGlobalVariableGuid
	push	OFFSET ??_C@_1BC@CJLBCGFC@?$AAM?$AAe?$AAm?$AAC?$AAe?$AAi?$AAl?$AA?4?$AA?$AA@
	push	eax
	mov	DWORD PTR _VariableSize$[ebp], 4
	call	DWORD PTR [eax]
	add	esp, 24					; 00000018H
; Line 1042
	test	eax, eax
	jge	SHORT $LN74@MrcParamsR
; Line 1043
	mov	DWORD PTR [edi], ebx
$LN74@MrcParamsR:
; Line 1051
	lea	eax, DWORD PTR _SiSaPolicyPpi$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	OFFSET _gSiSaPolicyPpiGuid
	call	_PeiServicesLocatePpi
; Line 1054
	lea	eax, DWORD PTR _MemConfig$[ebp]
	push	eax
	push	1
	push	DWORD PTR _SiSaPolicyPpi$[ebp]
	call	_GetConfigBlock
	add	esp, 28					; 0000001cH
; Line 1057
	test	eax, eax
	jl	$LN72@MrcParamsR
	mov	eax, DWORD PTR _MemConfig$[ebp]
	cmp	BYTE PTR [eax+6], bl
	je	$LN72@MrcParamsR
; Line 1062
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR [esi+65463], cl
; Line 1064
	movzx	ecx, BYTE PTR [eax+9]
	sub	ecx, ebx
	je	SHORT $LN68@MrcParamsR
	dec	ecx
	je	SHORT $LN67@MrcParamsR
	dec	ecx
	je	SHORT $LN66@MrcParamsR
	dec	ecx
; Line 1109
	jne	SHORT $LN66@MrcParamsR
; Line 1075
	mov	BYTE PTR [esi+55506], 15		; 0000000fH
; Line 1076
	jmp	SHORT $LN69@MrcParamsR
$LN66@MrcParamsR:
; Line 1072
	mov	BYTE PTR [esi+55506], 3
; Line 1073
	jmp	SHORT $LN69@MrcParamsR
$LN67@MrcParamsR:
; Line 1069
	mov	BYTE PTR [esi+55506], 1
; Line 1070
	jmp	SHORT $LN69@MrcParamsR
$LN68@MrcParamsR:
; Line 1066
	mov	BYTE PTR [esi+55506], bl
$LN69@MrcParamsR:
; Line 1111
	mov	cl, BYTE PTR [esi+55506]
	mov	BYTE PTR [esi+55507], cl
; Line 1114
	mov	cl, BYTE PTR [eax+262]
	mov	BYTE PTR [esi+70989], cl
; Line 1115
	mov	dl, BYTE PTR [eax+10]
	lea	ecx, DWORD PTR [esi+30686]
	mov	BYTE PTR [ecx], dl
; Line 1116
	mov	dl, BYTE PTR [eax+10]
	mov	BYTE PTR [esi+30687], dl
; Line 1117
	cmp	BYTE PTR [ecx], bl
	je	SHORT $LN62@MrcParamsR
	cmp	dl, bl
	je	SHORT $LN62@MrcParamsR
; Line 1122
	mov	cl, BYTE PTR [eax+11]
	mov	BYTE PTR [esi+65466], cl
; Line 1123
	mov	cl, BYTE PTR [eax+12]
	mov	BYTE PTR [esi+65467], cl
; Line 1124
	mov	cl, BYTE PTR [eax+13]
	mov	BYTE PTR [esi+65472], cl
	jmp	SHORT $LN61@MrcParamsR
$LN62@MrcParamsR:
; Line 1118
	mov	BYTE PTR [esi+65466], bl
; Line 1119
	mov	BYTE PTR [esi+65467], bl
; Line 1120
	mov	BYTE PTR [esi+65472], bl
$LN61@MrcParamsR:
; Line 1126
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR [esi+65476], cl
; Line 1128
	mov	cl, BYTE PTR [eax+18]
	mov	BYTE PTR [esi+65478], cl
; Line 1129
	mov	cl, BYTE PTR [eax+26]
	mov	BYTE PTR [esi+65550], cl
; Line 1130
	mov	cl, BYTE PTR [eax+27]
	mov	BYTE PTR [esi+65551], cl
; Line 1131
	mov	cl, BYTE PTR [eax+25]
	mov	BYTE PTR [esi+65552], cl
; Line 1132
	mov	cl, BYTE PTR [eax+19]
	mov	BYTE PTR [esi+65464], cl
; Line 1133
	mov	cl, BYTE PTR [eax+20]
	mov	BYTE PTR [esi+65465], cl
; Line 1134
	mov	cl, BYTE PTR [eax+21]
	mov	BYTE PTR [esi+65519], cl
; Line 1135
	mov	cl, BYTE PTR [eax+22]
	mov	BYTE PTR [esi+65520], cl
; Line 1136
	mov	cx, WORD PTR [eax+88]
	mov	WORD PTR [esi+71459], cx
; Line 1137
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [esi+31275], cl
; Line 1138
	mov	cl, BYTE PTR [eax+28]
	mov	BYTE PTR [esi+65523], cl
; Line 1139
	mov	cl, BYTE PTR [eax+29]
	mov	BYTE PTR [esi+70806], cl
; Line 1140
	mov	cl, BYTE PTR [eax+2489]
	mov	BYTE PTR [esi+71493], cl
; Line 1141
	cmp	BYTE PTR [eax+30], 1
	jne	SHORT $LN60@MrcParamsR
; Line 1142
	or	BYTE PTR [esi+65339], 1
; Line 1143
	jmp	SHORT $LN59@MrcParamsR
$LN60@MrcParamsR:
; Line 1144
	and	BYTE PTR [esi+65339], 254		; 000000feH
$LN59@MrcParamsR:
; Line 1147
	mov	cl, BYTE PTR [eax+31]
	mov	BYTE PTR [esi+65475], cl
; Line 1148
	movzx	cx, BYTE PTR [eax+32]
	push	2
	mov	WORD PTR [esi+65358], cx
	lea	ecx, DWORD PTR [esi+65296]
	pop	edi
$LL58@MrcParamsR:
; Line 1153
	mov	dl, BYTE PTR [eax+35]
	mov	BYTE PTR [ecx-2], dl
; Line 1154
	mov	dl, BYTE PTR [eax+36]
	mov	BYTE PTR [ecx], dl
; Line 1155
	mov	dl, BYTE PTR [eax+37]
	mov	BYTE PTR [ecx+2], dl
	inc	ecx
	dec	edi
	jne	SHORT $LL58@MrcParamsR
; Line 1162
	cmp	BYTE PTR [eax+34], 1
; Line 1172
	push	2
	setne	cl
	mov	BYTE PTR [esi+65502], cl
	mov	cl, BYTE PTR [eax+90]
	mov	BYTE PTR [esi+65517], cl
	lea	ecx, DWORD PTR [esi+71000]
	pop	edi
$LL51@MrcParamsR:
; Line 1174
	mov	dl, BYTE PTR [eax+68]
	mov	BYTE PTR [ecx], dl
	inc	ecx
	dec	edi
	jne	SHORT $LL51@MrcParamsR
; Line 1176
	mov	cx, WORD PTR [eax+14]
	mov	WORD PTR [esi+65473], cx
; Line 1177
	mov	cl, BYTE PTR [eax+39]
	mov	BYTE PTR [esi+65541], cl
; Line 1178
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [esi+65542], cl
; Line 1179
	mov	cl, BYTE PTR [eax+41]
	mov	BYTE PTR [esi+65543], cl
; Line 1180
	cmp	BYTE PTR [esi+26980], bl
	jne	SHORT $LN48@MrcParamsR
; Line 1181
	mov	cx, WORD PTR [eax+86]
	mov	WORD PTR [esi+26982], cx
$LN48@MrcParamsR:
; Line 1187
	mov	cl, BYTE PTR [eax+70]
	mov	BYTE PTR [esi+65493], cl
; Line 1188
	mov	cl, BYTE PTR [eax+71]
	mov	BYTE PTR [esi+65516], cl
; Line 1190
	cmp	BYTE PTR [eax+72], bl
	setne	cl
	mov	BYTE PTR [esi+65498], cl
; Line 1195
	mov	cl, BYTE PTR [eax+73]
	mov	BYTE PTR [esi+65499], cl
; Line 1196
	mov	cl, BYTE PTR [eax+74]
	mov	BYTE PTR [esi+65500], cl
; Line 1198
	mov	ecx, DWORD PTR [esi+65437]
	cmp	ecx, ebx
	je	SHORT $LN45@MrcParamsR
; Line 1199
	shr	ecx, 20					; 00000014H
	mov	eax, 4096				; 00001000H
	sub	eax, ecx
	push	eax
	call	_GetPowerOfTwo
	mov	WORD PTR [esi+65356], ax
; Line 1200
	mov	eax, DWORD PTR _MemConfig$[ebp]
	pop	ecx
	jmp	SHORT $LN44@MrcParamsR
$LN45@MrcParamsR:
; Line 1201
	movzx	ecx, BYTE PTR [eax+75]
	mov	cx, WORD PTR _mMmioSize[ecx*2]
	mov	WORD PTR [esi+65356], cx
$LN44@MrcParamsR:
; Line 1203
	mov	cl, BYTE PTR [eax+76]
	mov	BYTE PTR [esi+65346], cl
; Line 1204
	mov	cl, BYTE PTR [eax+77]
	mov	BYTE PTR [esi+65347], cl
; Line 1205
	mov	cl, BYTE PTR [eax+56]
	mov	BYTE PTR [esi+65344], cl
; Line 1206
	mov	cl, BYTE PTR [eax+57]
	mov	BYTE PTR [esi+65345], cl
; Line 1210
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR [esi+71005], cl
; Line 1211
	mov	cl, BYTE PTR [eax+65]
	mov	BYTE PTR [esi+71006], cl
; Line 1215
	movzx	ecx, WORD PTR [eax+78]
	mov	DWORD PTR [esi+65494], ecx
; Line 1217
	mov	cl, BYTE PTR [eax+146]
	mov	BYTE PTR [esi+65521], cl
; Line 1220
	mov	cl, BYTE PTR [eax+67]
	mov	BYTE PTR [esi+65506], cl
; Line 1222
	mov	cl, BYTE PTR [eax+42]
	mov	BYTE PTR [esi+65504], cl
; Line 1223
	mov	cl, BYTE PTR [eax+43]
	mov	BYTE PTR [esi+65505], cl
; Line 1224
	mov	al, BYTE PTR [eax+44]
	mov	BYTE PTR [esi+65522], al
; Line 1227
	lea	eax, DWORD PTR _NvMemConfig$[ebp]
	push	eax
	push	2
	push	DWORD PTR _SiSaPolicyPpi$[ebp]
	call	_GetConfigBlock
; Line 1233
	mov	ecx, DWORD PTR _NvMemConfig$[ebp]
	mov	al, BYTE PTR [ecx+6]
	mov	BYTE PTR [esi+65480], al
; Line 1234
	mov	al, BYTE PTR [ecx+7]
	mov	BYTE PTR [esi+65481], al
; Line 1235
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+65482], eax
; Line 1236
	mov	al, BYTE PTR [ecx+12]
	mov	BYTE PTR [esi+65486], al
; Line 1238
	mov	eax, DWORD PTR _MemConfig$[ebp]
	mov	dl, BYTE PTR [eax+18]
	or	dl, BYTE PTR [ecx+12]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+65478], dl
; Line 1239
	mov	dl, BYTE PTR [ecx+13]
	mov	BYTE PTR [esi+65487], dl
; Line 1240
	mov	dl, BYTE PTR [ecx+14]
	mov	BYTE PTR [esi+65488], dl
; Line 1241
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [esi+65489], ecx
; Line 1247
	cmp	BYTE PTR [eax+147], bl
	je	SHORT $LN43@MrcParamsR
; Line 1248
	mov	DWORD PTR [esi+70883], 544866304	; 207a0000H
	mov	DWORD PTR [esi+70887], 335276		; 00051dacH
; Line 1249
	jmp	SHORT $LN42@MrcParamsR
$LN43@MrcParamsR:
; Line 1250
	mov	DWORD PTR [esi+70883], 1000000		; 000f4240H
	mov	DWORD PTR [esi+70887], ebx
$LN42@MrcParamsR:
; Line 1252
	lea	ecx, DWORD PTR [eax+152]
	lea	edx, DWORD PTR [esi+70891]
	lea	edi, DWORD PTR [esi+70955]
	lea	ebx, DWORD PTR [eax+216]
	mov	DWORD PTR tv429[ebp], 2
	jmp	SHORT $LN41@MrcParamsR
$LL108@MrcParamsR:
	mov	ecx, DWORD PTR tv2226[ebp]
$LN41@MrcParamsR:
; Line 1253
	mov	DWORD PTR tv2083[ebp], ebx
	mov	DWORD PTR tv584[ebp], 4
$LL38@MrcParamsR:
; Line 1254
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], ebx
; Line 1255
	mov	ebx, DWORD PTR tv2083[ebp]
	mov	bx, WORD PTR [ebx]
	add	DWORD PTR tv2083[ebp], 2
	mov	WORD PTR [edi], bx
	add	ecx, 8
	add	edx, 8
	inc	edi
	inc	edi
	dec	DWORD PTR tv584[ebp]
	jne	SHORT $LL38@MrcParamsR
	dec	DWORD PTR tv429[ebp]
	mov	ebx, DWORD PTR tv2083[ebp]
	mov	DWORD PTR tv2226[ebp], ecx
	jne	SHORT $LL108@MrcParamsR
; Line 1286
	cmp	BYTE PTR [esi+26980], 1
	mov	cl, BYTE PTR [eax+232]
	mov	BYTE PTR [esi+70990], cl
	mov	cl, BYTE PTR [eax+233]
	mov	BYTE PTR [esi+70992], cl
	mov	cl, BYTE PTR [eax+234]
	mov	BYTE PTR [esi+70991], cl
	mov	cl, BYTE PTR [eax+235]
	mov	BYTE PTR [esi+70993], cl
	mov	cl, BYTE PTR [eax+236]
	mov	BYTE PTR [esi+70994], cl
	mov	cl, BYTE PTR [eax+237]
	mov	BYTE PTR [esi+70995], cl
	mov	cl, BYTE PTR [eax+238]
	mov	BYTE PTR [esi+70996], cl
	mov	cl, BYTE PTR [eax+239]
	mov	BYTE PTR [esi+70997], cl
	mov	cl, BYTE PTR [eax+240]
	mov	BYTE PTR [esi+70998], cl
	mov	cl, BYTE PTR [eax+241]
	mov	BYTE PTR [esi+70999], cl
	mov	cl, BYTE PTR [eax+242]
	mov	BYTE PTR [esi+71002], cl
	mov	cl, BYTE PTR [eax+243]
	mov	BYTE PTR [esi+71003], cl
	mov	cl, BYTE PTR [eax+244]
	mov	BYTE PTR [esi+71004], cl
	mov	cl, BYTE PTR [eax+245]
	mov	BYTE PTR [esi+71009], cl
	mov	cl, BYTE PTR [eax+246]
	mov	BYTE PTR [esi+71010], cl
	jne	SHORT $LN35@MrcParamsR
; Line 1287
	mov	cl, BYTE PTR [eax+144]
	mov	BYTE PTR [esi+26981], cl
$LN35@MrcParamsR:
; Line 1296
	mov	cl, BYTE PTR [eax+247]
	mov	BYTE PTR [esi+71011], cl
; Line 1308
	mov	cl, BYTE PTR [eax+7]
	mov	BYTE PTR [esi+71007], cl
; Line 1314
	mov	ecx, DWORD PTR [eax+248]
	mov	DWORD PTR [esi+70971], ecx
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR [esi+70975], ecx
; Line 1315
	mov	ecx, DWORD PTR [eax+256]
	mov	DWORD PTR [esi+70979], ecx
; Line 1316
	mov	cl, BYTE PTR [eax+260]
	mov	BYTE PTR [esi+70983], cl
; Line 1317
	mov	cl, BYTE PTR [eax+261]
	mov	BYTE PTR [esi+70984], cl
; Line 1320
	mov	cx, WORD PTR [eax+58]
	mov	WORD PTR [esi+65348], cx
; Line 1323
	mov	cl, BYTE PTR [eax+104]
	mov	BYTE PTR [esi+70807], cl
; Line 1324
	mov	cl, BYTE PTR [eax+105]
	mov	BYTE PTR [esi+70808], cl
; Line 1325
	mov	cl, BYTE PTR [eax+106]
	mov	BYTE PTR [esi+70809], cl
; Line 1326
	movzx	ecx, WORD PTR [eax+108]
	imul	ecx, 1000				; 000003e8H
	mov	DWORD PTR [esi+70810], ecx
; Line 1327
	movzx	ecx, WORD PTR [eax+110]
	mov	DWORD PTR [esi+70814], ecx
; Line 1328
	mov	cl, BYTE PTR [eax+112]
	mov	BYTE PTR [esi+70818], cl
; Line 1329
	mov	cl, BYTE PTR [eax+113]
	mov	BYTE PTR [esi+70819], cl
; Line 1330
	mov	cl, BYTE PTR [eax+114]
	mov	BYTE PTR [esi+70820], cl
; Line 1331
	mov	cl, BYTE PTR [eax+115]
	mov	BYTE PTR [esi+70840], cl
; Line 1333
	mov	cl, BYTE PTR [eax+117]
	mov	BYTE PTR [esi+70821], cl
; Line 1334
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [esi+70822], ecx
; Line 1335
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR [esi+70826], ecx
; Line 1337
	mov	cl, BYTE PTR [eax+128]
	mov	BYTE PTR [esi+70830], cl
; Line 1338
	mov	cl, BYTE PTR [eax+129]
	mov	BYTE PTR [esi+70831], cl
; Line 1339
	movzx	ecx, WORD PTR [eax+130]
	imul	ecx, 1000				; 000003e8H
	mov	DWORD PTR [esi+70832], ecx
; Line 1340
	movzx	ecx, WORD PTR [eax+132]
	imul	ecx, 1000				; 000003e8H
	push	2
	mov	DWORD PTR [esi+70836], ecx
	add	eax, 134				; 00000086H
	lea	ecx, DWORD PTR [esi+70841]
	pop	edx
$LL111@MrcParamsR:
; Line 1343
	push	4
	pop	edi
$LL31@MrcParamsR:
; Line 1344
	mov	bl, BYTE PTR [eax]
	inc	eax
	mov	BYTE PTR [ecx], bl
	inc	ecx
	dec	edi
	jne	SHORT $LL31@MrcParamsR
; Line 1342
	dec	edx
	jne	SHORT $LL111@MrcParamsR
; Line 1351
	push	esi
	push	DWORD PTR _PeiServices$[ebp]
	call	_GetTimingOverrides
	pop	ecx
	pop	ecx
; Line 1352
	test	eax, eax
	jne	SHORT $LN28@MrcParamsR
; Line 1353
	push	esi
	call	_OverrideTimingParams
	pop	ecx
$LN28@MrcParamsR:
; Line 1359
	mov	eax, DWORD PTR _MemConfig$[ebp]
	and	DWORD PTR tv2425[ebp], 0
	push	2
	pop	ebx
	lea	ecx, DWORD PTR [eax+364]
	mov	DWORD PTR tv227[ebp], ebx
$LL114@MrcParamsR:
; Line 1360
	xor	edi, edi
	mov	DWORD PTR tv282[ebp], ebx
$LL112@MrcParamsR:
; Line 1361
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	je	SHORT $LN23@MrcParamsR
; Line 1363
	mov	ebx, DWORD PTR tv2425[ebp]
	lea	ebx, DWORD PTR [edi+ebx*2+65380]
	push	2
	mov	BYTE PTR [ebx+esi], dl
	pop	ebx
$LN23@MrcParamsR:
	inc	edi
	inc	ecx
	dec	DWORD PTR tv282[ebp]
	jne	SHORT $LL112@MrcParamsR
	inc	DWORD PTR tv2425[ebp]
	dec	DWORD PTR tv227[ebp]
	jne	SHORT $LL114@MrcParamsR
; Line 1371
	and	DWORD PTR tv2538[ebp], 0
	and	DWORD PTR tv2569[ebp], 0
	mov	ecx, 368				; 00000170H
	mov	DWORD PTR tv181[ebp], ebx
$LL115@MrcParamsR:
; Line 1372
	and	DWORD PTR tv2466[ebp], 0
	mov	DWORD PTR tv2511[ebp], ecx
	mov	DWORD PTR tv200[ebp], ebx
$LL113@MrcParamsR:
; Line 1373
	mov	ecx, DWORD PTR tv2511[ebp]
	add	ecx, eax
	cmp	DWORD PTR [ecx], 1
	jne	SHORT $LN16@MrcParamsR
; Line 1374
	mov	edx, DWORD PTR tv2466[ebp]
	mov	edi, DWORD PTR tv2538[ebp]
	mov	cl, BYTE PTR [ecx]
	lea	edx, DWORD PTR [edx+edi*2+65384]
	mov	BYTE PTR [edx+esi], cl
; Line 1375
	mov	ecx, 512				; 00000200H
	cmp	WORD PTR [eax+384], cx
	jbe	SHORT $LN13@MrcParamsR
; Line 1376
	mov	DWORD PTR [esi+65333], 36		; 00000024H
; Line 1377
	call	_MrcDeadLoop
	mov	eax, DWORD PTR _MemConfig$[ebp]
$LN13@MrcParamsR:
; Line 1379
	xor	ecx, ecx
	xor	edi, edi
	cmp	cx, WORD PTR [eax+384]
	jae	SHORT $LN16@MrcParamsR
	mov	ecx, DWORD PTR tv2569[ebp]
	mov	edx, DWORD PTR tv2466[ebp]
	add	edx, ecx
	mov	DWORD PTR tv3054[ebp], edx
	shl	DWORD PTR tv3054[ebp], 9
	imul	edx, 514				; 00000202H
$LL110@MrcParamsR:
; Line 1380
	mov	ebx, DWORD PTR tv3054[ebp]
	movzx	ecx, di
	add	ebx, ecx
	mov	bl, BYTE PTR [ebx+eax+386]
	add	ecx, edx
	inc	edi
	mov	BYTE PTR [ecx+esi+28631], bl
	cmp	di, WORD PTR [eax+384]
	jb	SHORT $LL110@MrcParamsR
	push	2
	pop	ebx
$LN16@MrcParamsR:
	inc	DWORD PTR tv2466[ebp]
	add	DWORD PTR tv2511[ebp], 4
	dec	DWORD PTR tv200[ebp]
	jne	$LL113@MrcParamsR
	inc	DWORD PTR tv2538[ebp]
	add	DWORD PTR tv2569[ebp], ebx
	dec	DWORD PTR tv181[ebp]
	mov	ecx, DWORD PTR tv2511[ebp]
	jne	$LL115@MrcParamsR
; Line 1389
	mov	cl, BYTE PTR [eax+2436]
	test	cl, cl
	je	SHORT $LN109@MrcParamsR
; Line 1390
	mov	BYTE PTR [esi+65392], cl
; Line 1391
	mov	cl, BYTE PTR [eax+2437]
	cmp	cl, 5
	jbe	SHORT $LN80@MrcParamsR
	push	5
	pop	ecx
	jmp	SHORT $LN81@MrcParamsR
$LN80@MrcParamsR:
	movzx	ecx, cl
$LN81@MrcParamsR:
	push	5
	mov	BYTE PTR [esi+65393], cl
	lea	edx, DWORD PTR [esi+65398]
	lea	ecx, DWORD PTR [eax+2444]
	pop	edi
$LL7@MrcParamsR:
; Line 1396
	mov	ebx, DWORD PTR [ecx-4]
	mov	DWORD PTR [edx-4], ebx
; Line 1397
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], ebx
	add	ecx, 8
	add	edx, 8
	dec	edi
	jne	SHORT $LL7@MrcParamsR
$LN109@MrcParamsR:
; Line 1404
	mov	cl, BYTE PTR [eax+2480]
	mov	BYTE PTR [esi+71463], cl
; Line 1405
	lea	ecx, DWORD PTR [eax+2481]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [esi+71464], dl
; Line 1406
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [esi+71465], cl
; Line 1407
	mov	cl, BYTE PTR [eax+2482]
	mov	BYTE PTR [esi+71467], cl
; Line 1408
	mov	cl, BYTE PTR [eax+2483]
	mov	BYTE PTR [esi+71466], cl
; Line 1409
	mov	cl, BYTE PTR [eax+2484]
	mov	BYTE PTR [esi+71468], cl
; Line 1411
	lea	ecx, DWORD PTR [eax+2485]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [esi+71469], dl
; Line 1412
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [esi+71470], cl
; Line 1413
	mov	cl, BYTE PTR [eax+2486]
	mov	BYTE PTR [esi+71472], cl
; Line 1414
	mov	cl, BYTE PTR [eax+2487]
	mov	BYTE PTR [esi+71471], cl
; Line 1415
	mov	cl, BYTE PTR [eax+2488]
	mov	BYTE PTR [esi+71473], cl
	lea	ecx, DWORD PTR [eax+336]
	add	eax, 272				; 00000110H
	mov	DWORD PTR tv2936[ebp], eax
	mov	DWORD PTR tv3000[ebp], 8
$LL4@MrcParamsR:
; Line 1418
	cmp	BYTE PTR [ecx-73], 0
	je	SHORT $LN3@MrcParamsR
; Line 1421
	mov	dl, BYTE PTR [ecx-32]
	mov	bl, BYTE PTR [ecx-8]
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR _Bank$[ebp], dl
; Line 1422
	mov	dl, BYTE PTR [ecx-24]
; Line 1426
	movzx	edi, bl
	mov	BYTE PTR _BankGroup$[ebp], dl
	mov	dl, BYTE PTR [ecx-16]
	movzx	eax, al
	lea	eax, DWORD PTR [edi+eax*4]
	movzx	edi, BYTE PTR _BankGroup$[ebp]
	mov	BYTE PTR _DramDevice$[ebp], dl
	mov	edx, DWORD PTR tv2936[ebp]
	mov	edx, DWORD PTR [edx]
	lea	ebx, DWORD PTR [edi+eax*4+54904]
	mov	BYTE PTR [ebx+esi], 1
; Line 1427
	lea	ebx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [esi+ebx*4+54936], edx
; Line 1428
	mov	bl, BYTE PTR _Bank$[ebp]
	lea	edx, DWORD PTR [edi+eax*4+55064]
	mov	BYTE PTR [edx+esi], bl
; Line 1429
	mov	dl, BYTE PTR _DramDevice$[ebp]
	lea	eax, DWORD PTR [edi+eax*4+55096]
	mov	BYTE PTR [eax+esi], dl
$LN3@MrcParamsR:
	add	DWORD PTR tv2936[ebp], 4
	inc	ecx
	dec	DWORD PTR tv3000[ebp]
	jne	SHORT $LL4@MrcParamsR
$LN72@MrcParamsR:
	pop	edi
	pop	esi
; Line 1452
	xor	eax, eax
	pop	ebx
; Line 1453
	leave
	ret	0
_MrcParamsRestore ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@DAMPMGON@?$AAP?$AAr?$AAo?$AAc?$AAP?$AAp?$AAi?$AAn?$AA?$AA@ ; `string'
PUBLIC	_PeimMemoryInit
EXTRN	_WriteCmosMrc:PROC
EXTRN	_ReadCmosMrc:PROC
EXTRN	_MemRegWrite:PROC
EXTRN	_FillBdatStructure:PROC
EXTRN	_ConfigureMemory:PROC
EXTRN	_MrcInitializeParameters:PROC
EXTRN	_Mmio32Write:PROC
EXTRN	_Mmio32Read:PROC
;	COMDAT ??_C@_1BC@DAMPMGON@?$AAP?$AAr?$AAo?$AAc?$AAP?$AAp?$AAi?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@DAMPMGON@?$AAP?$AAr?$AAo?$AAc?$AAP?$AAp?$AAi?$AAn?$AA?$AA@ DB 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'c', 00H, 'P', 00H, 'p', 00H, 'i', 00H
	DB	'n', 00H, 00H, 00H				; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _PeimMemoryInit
_TEXT	SEGMENT
_MrcData$ = -80608					; size = 71502
_BdatMemoryData2Structure$ = -9104			; size = 9053
_Register$ = -48					; size = 24
_ProcPpin$ = -24					; size = 8
_PeiVariable$ = -16					; size = 4
_VarAttrib$ = -12					; size = 4
_VarSize$ = -8						; size = 4
_BootMode$ = -4						; size = 4
_FileHandle$ = 8					; size = 4
_Cmos8b$ = 12						; size = 1
_Status$ = 12						; size = 4
_PeiServices$ = 12					; size = 4
_PeimMemoryInit PROC					; COMDAT
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 80608				; 00013ae0H
	push	ebx
	push	esi
	push	edi
; Line 125
	xor	edi, edi
	mov	DWORD PTR _VarAttrib$[ebp], 6
	mov	DWORD PTR _ProcPpin$[ebp], edi
	mov	DWORD PTR _ProcPpin$[ebp+4], edi
; Line 126
	mov	DWORD PTR _VarSize$[ebp], 8
; Line 132
	out	152, al					; 00000098H
; Line 135
	mov	ebx, DWORD PTR _PeiServices$[ebp]
	mov	eax, DWORD PTR [ebx]
	push	OFFSET _mAmiPeiBeforeMrcDesc
	push	ebx
	call	DWORD PTR [eax+24]
; Line 141
	mov	esi, -19910648				; fed03008H
	push	esi
	call	_Mmio32Read
	or	eax, 16					; 00000010H
	push	eax
	push	esi
	call	_Mmio32Write
; Line 146
	mov	eax, DWORD PTR [ebx]
	push	OFFSET _mBeforeMemoryDiscoveredPpi
	push	ebx
	call	DWORD PTR [eax+24]
; Line 154
	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR _BootMode$[ebp]
	push	ecx
	push	ebx
	call	DWORD PTR [eax+40]
; Line 169
	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR _PeiVariable$[ebp]
	push	ecx
	push	edi
	push	edi
	push	OFFSET _gEfiPeiReadOnlyVariable2PpiGuid
	push	ebx
	call	DWORD PTR [eax+32]
; Line 179
	lea	eax, DWORD PTR _ProcPpin$[ebp]
	push	eax
	lea	eax, DWORD PTR _VarSize$[ebp]
	push	eax
	lea	eax, DWORD PTR _VarAttrib$[ebp]
	push	eax
	mov	eax, DWORD PTR _PeiVariable$[ebp]
	push	OFFSET _mProcPpinVariableGuid
	push	OFFSET ??_C@_1BC@DAMPMGON@?$AAP?$AAr?$AAo?$AAc?$AAP?$AAp?$AAi?$AAn?$AA?$AA@
	push	eax
	call	DWORD PTR [eax]
; Line 185
	lea	eax, DWORD PTR _MrcData$[ebp]
	add	esp, 80					; 00000050H
	push	eax
	call	_MrcInitializeParameters
; Line 192
	cmp	DWORD PTR _BootMode$[ebp], 17		; 00000011H
	mov	eax, DWORD PTR _ProcPpin$[ebp]
	mov	DWORD PTR _MrcData$[ebp+71494], eax
	mov	eax, DWORD PTR _ProcPpin$[ebp+4]
	pop	ecx
	mov	DWORD PTR _MrcData$[ebp+71498], eax
	jne	SHORT $LN13@PeimMemory
; Line 193
	mov	BYTE PTR _MrcData$[ebp+31274], 2
$LN13@PeimMemory:
; Line 201
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	push	ebx
	call	_MrcParamsRestore
; Line 206
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	push	ebx
	call	_OemGetSetMeUma
; Line 209
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	call	_ConfigureMemory
	add	esp, 20					; 00000014H
; Line 210
	cmp	eax, edi
	je	SHORT $LN12@PeimMemory
; Line 211
	mov	DWORD PTR _MrcData$[ebp+65333], 14	; 0000000eH
; Line 212
	call	_MrcDeadLoop
$LN12@PeimMemory:
; Line 221
	mov	eax, DWORD PTR [ebx]
	push	OFFSET _mAmiPeiCompelteMrcDesc
	push	ebx
	call	DWORD PTR [eax+24]
; Line 228
	cmp	DWORD PTR _BootMode$[ebp], 17		; 00000011H
	pop	ecx
	pop	ecx
	jne	SHORT $LN11@PeimMemory
; Line 230
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	push	ebx
	call	_InstallS3Memory
	pop	ecx
	pop	ecx
$LN11@PeimMemory:
; Line 233
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	push	DWORD PTR _BootMode$[ebp]
	push	ebx
	call	_InstallEfiMemory
	mov	DWORD PTR _Status$[ebp], eax
; Line 238
	lea	eax, DWORD PTR _BdatMemoryData2Structure$[ebp]
	push	eax
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	call	_FillBdatStructure
; Line 242
	lea	eax, DWORD PTR _BdatMemoryData2Structure$[ebp]
	push	eax
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	push	ebx
	call	_MrcBdatSaveHob
; Line 247
	push	9765954					; 00950442H
	push	ebx
	call	_MrcVersionSaveHob
	add	esp, 40					; 00000028H
; Line 248
	cmp	DWORD PTR _BootMode$[ebp], 17		; 00000011H
	je	SHORT $LN10@PeimMemory
; Line 249
	lea	eax, DWORD PTR _MrcData$[ebp]
	push	eax
	push	ebx
	call	_MrcParamsSave
	pop	ecx
	pop	ecx
$LN10@PeimMemory:
; Line 261
	lea	eax, DWORD PTR _Status$[ebp]
	push	eax
	push	ebx
	call	_OemSendDramInitDoneCommand
; Line 268
	lea	eax, DWORD PTR _Status$[ebp]
	push	eax
	push	ebx
	call	_OemSendIEDramInitDoneCommand
; Line 276
	or	DWORD PTR _Register$[ebp+8], -1
; Line 278
	push	ecx
	push	ecx
	push	6
	pop	ecx
	mov	DWORD PTR _Register$[ebp+12], edi
	mov	edi, esp
	lea	esi, DWORD PTR _Register$[ebp]
	mov	DWORD PTR _Register$[ebp], 288		; 00000120H
	mov	BYTE PTR _Register$[ebp+16], 0
	rep movsd
	xor	esi, esi
	push	esi
	push	esi
	push	esi
	call	_MemRegRead
	add	esp, 36					; 00000024H
; Line 280
	push	15					; 0000000fH
	push	esi
	and	eax, -6					; fffffffaH
	or	eax, 2
	push	eax
	sub	esp, 24					; 00000018H
	push	6
	pop	ecx
	mov	edi, esp
	lea	esi, DWORD PTR _Register$[ebp]
	rep movsd
	xor	esi, esi
	push	esi
	push	esi
	push	esi
	call	_MemRegWrite
	add	esp, 48					; 00000030H
; Line 282
	cmp	BYTE PTR _MrcData$[ebp+65499], 1
	jne	SHORT $LN7@PeimMemory
; Line 283
	push	65					; 00000041H
	call	_ReadCmosMrc
	pop	ecx
	mov	BYTE PTR _Cmos8b$[ebp], al
; Line 284
	cmp	al, BYTE PTR _MrcData$[ebp+65500]
	jae	SHORT $LN6@PeimMemory
; Line 285
	inc	al
	mov	BYTE PTR _Cmos8b$[ebp], al
$LN6@PeimMemory:
; Line 287
	push	DWORD PTR _Cmos8b$[ebp]
	push	65					; 00000041H
	call	_WriteCmosMrc
; Line 296
	mov	al, BYTE PTR _MrcData$[ebp+65500]
	pop	ecx
	pop	ecx
	cmp	BYTE PTR _Cmos8b$[ebp], al
	jne	SHORT $LN2@PeimMemory
	test	al, al
	jne	SHORT $LN1@PeimMemory
$LN2@PeimMemory:
; Line 297
	mov	ecx, 3321				; 00000cf9H
	mov	edx, ecx
	xor	al, al
	out	dx, al
; Line 298
	add	al, 14					; 0000000eH
	out	dx, al
; Line 299
	hlt
; Line 301
	jmp	SHORT $LN1@PeimMemory
$LN7@PeimMemory:
; Line 302
	push	esi
	push	65					; 00000041H
	call	_WriteCmosMrc
	pop	ecx
	pop	ecx
$LN1@PeimMemory:
; Line 305
	out	237, al					; 000000edH
; Line 308
	mov	eax, DWORD PTR [ebx]
	push	OFFSET _mAmiPeiEndOfMrcDesc
	push	ebx
	call	DWORD PTR [eax+24]
	pop	ecx
	pop	ecx
; Line 316
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	leave
	ret	0
_PeimMemoryInit ENDP
_TEXT	ENDS
END
