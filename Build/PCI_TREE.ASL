
//-------- DO NOT EDIT THIS FILE --------
//
// FILE WAS GENERATED AUTOMATICALY USING AMISDL v7.04.0274 (е|ды 26 2023,16:58:30)
//
//-------- DO NOT EDIT THIS FILE --------
//****************************************************************************
//****************************************************************************
//**                                                                        **
//**         (C)Copyright 1985 - 2023, American Megatrends, Inc.            **
//**                                                                        **
//**                          All Rights Reserved.                          **
//**                                                                        **
//**                    5555 Oakbrook Pkwy, Norcross, GA 30092              **
//**                                                                        **
//**                          Phone (770)-246-8600                          **
//**                                                                        **
//****************************************************************************
//****************************************************************************
//---------------------------------------------------------------------------
// Begin System Bus Scope
//---------------------------------------------------------------------------

Scope(\_SB) {
//---------------------------------------------------------------------------
// Begin PCI tree object scope
//---------------------------------------------------------------------------

	Device(PCI0) {	// PciRoot
		Name(_HID, EISAID("PNP0A08"))	// Indicates PCI Express/PCI-X Mode2 host hierarchy
		Name(_CID, EISAID("PNP0A03"))	// To support legacy OS that doesn't understand the new HID
		Name(_ADR, 0x00000000)
		Method(^BN00, 0){ return(0x0000) }	// Returns default Bus number for Peer PCI busses. Name can be overriden with control method placed directly under Device scope
		Method(_BBN, 0){ return(BN00()) }	// Bus number, optional for the Root PCI Bus
		Name(_UID, 0x0000)	// Unique Bus ID, optional
			Method(_PRT,0) {
				If(PICM) { Return(AR00) }// APIC mode
				Return (PD00) // PIC Mode
			} // end _PRT


//---------------------------------------------------------------------------
//Include file(s) for the device PciRoot
//---------------------------------------------------------------------------
		include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\SysBus.asi")
		include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\osc.asi")
		include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\PciCrs.asi")
		include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\IchApic.asi")

//---------------------------------------------------------------------------
// Begin SB Device or LPC brg object scope
//---------------------------------------------------------------------------
		Device(LPC0) { // LpcBridge
			Name(_ADR, 0x001F0000)

//---------------------------------------------------------------------------
//Include file(s) for the device LpcBridge
//---------------------------------------------------------------------------
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\PciIrq.asi")
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\Mother.asi")
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\IpmiOprRegions.asi")
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\SIO.asi")

//---------------------------------------------------------------------------
// Begin SIO Device behind LPC brg object scope
//---------------------------------------------------------------------------
			Device(SIO1) {
				Name(_HID, EISAID("PNP0C02"))	// System board resources device node ID
				Name(_UID,0x0)	// Unique ID
			
//---------------------------------------------------------------------------
//Include file(s) for the device NCT6683D
//---------------------------------------------------------------------------
				include ("..\AmiModulePkg\IO\NCT6683D\NCT6683DDEV.asl")
				include ("..\AmiModulePkg\IO\NCT6683D\NCT6683DEVT.asl")

				Method(_PRW, 0) { Return(GPRW(0x1D, 3)) }	//Can wakeup on SIO Device PME from Sleep 3
			}

			Device(UAR1) {
				Name(_HID, EISAID("PNP0501"))	// Com1
				Name(_UID, 0x00)	// Unique ID.
				Name(LDN, 0x02)	// Logical Device Number
			
//---------------------------------------------------------------------------
//Include file(s) for the device Com1
//---------------------------------------------------------------------------
				include ("..\AmiModulePkg\GenericSio\UART1.ASL")

			}	//End Scope for Com1

			Device(SGPI) {
				Name(_HID, EISAID("PNP0C08"))	// Gpio
				Name(_UID, 0x00)	// Unique ID.
				Name(LDN, 0x07)	// Logical Device Number
			
//---------------------------------------------------------------------------
//Include file(s) for the device Gpio
//---------------------------------------------------------------------------
				include ("..\AmiModulePkg\GenericSio\NO_RES_STA.asl")

			}	//End Scope for Gpio

			Device(SCPI) {
				Name(_HID, EISAID("PNP0C08"))	// Acpi
				Name(_UID, 0x01)	// Unique ID.
				Name(LDN, 0x0A)	// Logical Device Number
			
//---------------------------------------------------------------------------
//Include file(s) for the device Acpi
//---------------------------------------------------------------------------
				include ("..\AmiModulePkg\GenericSio\NO_RES_STA.asl")

			}	//End Scope for Acpi

			Device(IOEC) {
				Name(_HID, EISAID("PNP0C08"))	// EcSpace
				Name(_UID, 0x02)	// Unique ID.
				Name(LDN, 0x0B)	// Logical Device Number
			
//---------------------------------------------------------------------------
//Include file(s) for the device EcSpace
//---------------------------------------------------------------------------
				include ("..\AmiModulePkg\GenericSio\NO_RES_STA.asl")

			}	//End Scope for EcSpace

		} // end "LpcBridge"

		Device(PEX0) { // PCI Express Port 0
			Name(_ADR, 0x00090000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG03) }// APIC mode
				Return (PG03) // PIC Mode
			} // end _PRT

			Device(SLT0) { // PCI Express Slot 0
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 0"

		} // end "PCI Express Port 0"

		Device(PEX1) { // PCI Express Port 1
			Name(_ADR, 0x000A0000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG04) }// APIC mode
				Return (PG04) // PIC Mode
			} // end _PRT

			Device(SLT1) { // PCI Express Slot 1
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 1"

		} // end "PCI Express Port 1"

		Device(PEX2) { // PCI Express Port 2
			Name(_ADR, 0x000B0000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG06) }// APIC mode
				Return (PG06) // PIC Mode
			} // end _PRT

			Device(SLT2) { // PCI Express Slot 2
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 2"

		} // end "PCI Express Port 2"

		Device(PEX3) { // PCI Express Port 3
			Name(_ADR, 0x000C0000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG08) }// APIC mode
				Return (PG08) // PIC Mode
			} // end _PRT

			Device(SLT3) { // PCI Express Slot 3
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 3"

		} // end "PCI Express Port 3"

		Device(PEX4) { // PCI Express Port 4
			Name(_ADR, 0x000E0000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG0A) }// APIC mode
				Return (PG0A) // PIC Mode
			} // end _PRT

			Device(SLT4) { // PCI Express Slot 4
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 4"

		} // end "PCI Express Port 4"

		Device(PEX5) { // PCI Express Port 5
			Name(_ADR, 0x000F0000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG0C) }// APIC mode
				Return (PG0C) // PIC Mode
			} // end _PRT

			Device(SLT5) { // PCI Express Slot 5
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 5"

		} // end "PCI Express Port 5"

		Device(PEX6) { // PCI Express Port 6
			Name(_ADR, 0x00100000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG0E) }// APIC mode
				Return (PG0E) // PIC Mode
			} // end _PRT

			Device(SLT6) { // PCI Express Slot 6
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 6"

		} // end "PCI Express Port 6"

		Device(PEX7) { // PCI Express Port 7
			Name(_ADR, 0x00110000)
			Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	// can wakeup from S4 state
			Method(_PRT,0) {
				If(PICM) { Return(AG10) }// APIC mode
				Return (PG10) // PIC Mode
			} // end _PRT

			Device(SLT7) { // PCI Express Slot 7
				Name(_ADR, 0x0000FFFF)
			} // end "PCI Express Slot 7"

		} // end "PCI Express Port 7"

		Device(SMB1) { // SMBus Controller 1
			Name(_ADR, 0x00120000)
		} // end "SMBus Controller 1"

		Device(SAT0) { // SATA controller 0
			Name(_ADR, 0x00130000)
		} // end "SATA controller 0"

		Device(SAT1) { // SATA controller 1
			Name(_ADR, 0x00140000)
		} // end "SATA controller 1"

		Device(XHC1) { // XHCI USB controller
			Name(_ADR, 0x00150000)

//---------------------------------------------------------------------------
//Include file(s) for the device XHCI USB controller
//---------------------------------------------------------------------------
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\Xhci.asi")

		} // end "XHCI USB controller"

		Device(UAR0) { // UART 0
			Name(_ADR, 0x001A0000)
		} // end "UART 0"

		Device(UAR1) { // UART 1
			Name(_ADR, 0x001A0001)
		} // end "UART 1"

		Device(UAR2) { // UART 2
			Name(_ADR, 0x001A0002)
		} // end "UART 2"

		Device(IEH1) { // IE HECI1
			Name(_ADR, 0x001B0000)
		} // end "IE HECI1"

		Device(IEH2) { // IE HECI2
			Name(_ADR, 0x001B0001)
		} // end "IE HECI2"

		Device(IEKT) { // IE - Keyboard and Text (KT)
			Name(_ADR, 0x001B0003)
		} // end "IE - Keyboard and Text (KT)"

		Device(IEH3) { // IE HECI3
			Name(_ADR, 0x001B0004)
		} // end "IE HECI3"

		Device(GREG) { // Global Register
			Name(_ADR, 0x00040000)
		} // end "Global Register"

		Device(RCEC) { // RCEC
			Name(_ADR, 0x00050000)
		} // end "RCEC"

		Device(VRP2) { // Virtual root port 2
			Name(_ADR, 0x00060000)
			Method(_PRT,0) {
				If(PICM) { Return(AG1F) }// APIC mode
				Return (PG1F) // PIC Mode
			} // end _PRT

			Device(IQAT) { // Intel QuickAssist Technology
				Name(_ADR, 0x0000FFFF)
			} // end "Intel QuickAssist Technology"

		} // end "Virtual root port 2"

		Device(VRP0) { // Virtual root port 0
			Name(_ADR, 0x00160000)
			Method(_PRT,0) {
				If(PICM) { Return(AG21) }// APIC mode
				Return (PG21) // PIC Mode
			} // end _PRT

			Device(LAN1) { // PXE Option ROM 1
				Name(_ADR, 0x00000001)
			} // end "PXE Option ROM 1"

		} // end "Virtual root port 0"

		Device(VRP1) { // Virtual root port 1
			Name(_ADR, 0x00170000)
			Method(_PRT,0) {
				If(PICM) { Return(AG22) }// APIC mode
				Return (PG22) // PIC Mode
			} // end _PRT

		} // end "Virtual root port 1"

		Device(HECI) { // ME HECI
			Name(_ADR, 0x00180000)
		} // end "ME HECI"

		Device(HEC2) { // ME HECI2
			Name(_ADR, 0x00180001)
		} // end "ME HECI2"

		Device(MEKT) { // MEKT on PCH
			Name(_ADR, 0x00180003)
		} // end "MEKT on PCH"

		Device(HEC3) { // ME HECI3
			Name(_ADR, 0x00180004)
		} // end "ME HECI3"

		Device(EMMC) { // eMMC
			Name(_ADR, 0x001C0000)

//---------------------------------------------------------------------------
//Include file(s) for the device eMMC
//---------------------------------------------------------------------------
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\EMMC.asi")

		} // end "eMMC"

		Device(P2SB) { // Primary to Sideband Bridge
			Name(_ADR, 0x001F0001)

//---------------------------------------------------------------------------
//Include file(s) for the device Primary to Sideband Bridge
//---------------------------------------------------------------------------
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\P2SB.asi")

		} // end "Primary to Sideband Bridge"

		Device(PMC0) { // Power Management Controller
			Name(_ADR, 0x001F0002)

//---------------------------------------------------------------------------
//Include file(s) for the device Power Management Controller
//---------------------------------------------------------------------------
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\PMC.asi")

		} // end "Power Management Controller"

		Device(SMB0) { // Legacy SMBUS Controller
			Name(_ADR, 0x001F0004)
		} // end "Legacy SMBUS Controller"

		Device(SPI0) { // SPI controller
			Name(_ADR, 0x001F0005)
		} // end "SPI controller"

		Device(NPK0) { // Northpeak DFX
			Name(_ADR, 0x001F0007)

//---------------------------------------------------------------------------
//Include file(s) for the device Northpeak DFX
//---------------------------------------------------------------------------
			include ("..\HarrisonvillePkg\Acpi\AcpiTables\Dsdt\Npk.asi")

		} // end "Northpeak DFX"

	}	//PciRoot device scope Ends
}	//End_SBScope
//---------------------------------------------------------------------------
// System Event handlers
//---------------------------------------------------------------------------
	Scope(\_GPE){
		Method(_L09, 0) {
			Notify(\_SB.PCI0.PEX0, 0x02)
			Notify(\_SB.PCI0.PEX1, 0x02)
			Notify(\_SB.PCI0.PEX2, 0x02)
			Notify(\_SB.PCI0.PEX3, 0x02)
			Notify(\_SB.PCI0.PEX4, 0x02)
			Notify(\_SB.PCI0.PEX5, 0x02)
			Notify(\_SB.PCI0.PEX6, 0x02)
			Notify(\_SB.PCI0.PEX7, 0x02)
		}
	}

//-------- DO NOT EDIT THIS FILE --------
//
// FILE WAS GENERATED AUTOMATICALY USING AMISDL v7.04.0274 (е|ды 26 2023,16:58:30)
//
//-------- DO NOT EDIT THIS FILE --------
//****************************************************************************
//****************************************************************************
//**                                                                        **
//**         (C)Copyright 1985 - 2023, American Megatrends, Inc.            **
//**                                                                        **
//**                          All Rights Reserved.                          **
//**                                                                        **
//**                    5555 Oakbrook Pkwy, Norcross, GA 30092              **
//**                                                                        **
//**                          Phone (770)-246-8600                          **
//**                                                                        **
//****************************************************************************
//****************************************************************************
